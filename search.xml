<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目整合spring邮箱starter</title>
      <link href="2021/08/16/xiang-mu-zheng-he-spring-you-xiang-starter/"/>
      <url>2021/08/16/xiang-mu-zheng-he-spring-you-xiang-starter/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker部署redis</title>
      <link href="2021/08/16/docker-bu-shu-redis/"/>
      <url>2021/08/16/docker-bu-shu-redis/</url>
      
        <content type="html"><![CDATA[<ul><li><p>docker部署redis 并配置密码</p><ul><li>如果访问不了，记得看防火墙/网络安全组端口是否开放</li><li>源码安装redis的话默认不能远程访问</li><li>docker安装redis可以远程访问</li></ul></li><li><p><code>docker run -itd --name ldclass-redis -p 8000:6379 redis --requirepass 123456</code></p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">-i 以交互模式运行容器，通常与 -t 同时使用；-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；-d 后台运行容器，并返回容器ID；redis --requirepass 配置密码-p 8000:6379 宿主机端口，用于外部访问:docker容器内端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装docker</title>
      <link href="2021/08/16/linux-an-zhuang-docker/"/>
      <url>2021/08/16/linux-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<ul><li>Linux环境下安装Docker</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#依次运行以下命令添加yum源yum updateyum install epel-release -yyum clean allyum list#安装并运行Docker。yum install docker-io -ysystemctl start docker#检查安装结果。docker info#启动使用Dockersystemctl start docker     #运行Docker守护进程systemctl stop docker      #停止Docker守护进程systemctl restart docker   #重启Docker守护进程#修改镜像仓库vim /etc/docker/daemon.json#改为下面内容(自己的镜像地址，阿里云有)，然后重启docker{"debug":true,"experimental":true,"registry-mirrors":["https://pb5bklzr.mirror.aliyuncs.com","https://hub-mirror.c.163.com","https://docker.mirrors.ustc.edu.cn"]}#查看信息docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 1024 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Captcha验证码</title>
      <link href="2021/08/16/springboot-ji-cheng-captcha-yan-zheng-ma/"/>
      <url>2021/08/16/springboot-ji-cheng-captcha-yan-zheng-ma/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="谷歌开源kaptcha图形验证码开发"><a href="#谷歌开源kaptcha图形验证码开发" class="headerlink" title="谷歌开源kaptcha图形验证码开发"></a>谷歌开源kaptcha图形验证码开发</h4><ul><li><p>Kaptcha 框架介绍 谷歌开源的一个可高度配置的实用验证码生成工具</p><ul><li>验证码的字体/大小/颜色</li><li>验证码内容的范围(数字，字母，中文汉字！)</li><li>验证码图片的大小，边框，边框粗细，边框颜色</li><li>验证码的干扰线</li><li>验证码的样式(鱼眼样式、3D、普通模糊)</li></ul></li><li><p>聚合工程依赖添加（使用国内baomidou二次封装的springboot整合starter）</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--kaptcha依赖包--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子服务添加依赖</p><pre class="line-numbers language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开发配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DefaultKaptcha<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description 验证码配置类 * @date 2021年08月15日 22:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptchaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"captchaProducer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DefaultKaptcha <span class="token function">defaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultKaptcha defaultKaptcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_BORDER, "yes");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, "220,220,220");</span><span class="token comment" spellcheck="true">//        //properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, "38,29,12");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, "147");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, "34");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, "25");</span><span class="token comment" spellcheck="true">//        //properties.setProperty(Constants.KAPTCHA_SESSION_KEY, "code");</span>        <span class="token comment" spellcheck="true">//验证码个数</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_LENGTH<span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_NAMES, "Courier");</span>        <span class="token comment" spellcheck="true">//字体间隔</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_SPACE<span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//干扰线颜色</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_NOISE_COLOR, "white");</span>        <span class="token comment" spellcheck="true">//干扰实现类</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_NOISE_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.NoNoise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片样式</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_OBSCURIFICATOR_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.ShadowGimpy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文字来源</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_STRING<span class="token punctuation">,</span> <span class="token string">"0123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultKaptcha<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultKaptcha<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h4 id="用户微服务开发图形验证码加入缓存"><a href="#用户微服务开发图形验证码加入缓存" class="headerlink" title="用户微服务开发图形验证码加入缓存"></a>用户微服务开发图形验证码加入缓存</h4><ul><li>redis做隔离, 多集群：核心集群和非核心集群，高并发集群和非高并发集群<ul><li>资源隔离</li><li>数据保护</li><li>提高性能</li><li>key规范：业务划分，冒号隔离<ul><li>user-service:captcha:MD5加密后的（ip+user-agent）</li><li>长度不能过长</li><li>浏览器指纹:ip+user-agent</li></ul></li></ul></li><li>工具集</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月15日 22:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取ip     * @author LiuDong     * @date 2021/8/15 22:59     * @param request     * @return java.lang.String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getIpAddr</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ipAddress <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在nginx配置头信息，透传客户端IP</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 根据网卡取本机配置的IP</span>                    InetAddress inet <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        inet <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ipAddress <span class="token operator">=</span> inet<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// "***.***.***.***".length()</span>                <span class="token comment" spellcheck="true">// = 15</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ipAddress <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ipAddress<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ipAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>  /**   * MD5加密   * @author LiuDong   * @date 2021/8/15 22:59   * @param data   * @return java.lang.String   */  public static String MD5(String data)  {      try {          java.security.MessageDigest md = MessageDigest.getInstance("MD5");          byte[] array = md.digest(data.getBytes("UTF-8"));          StringBuilder sb = new StringBuilder();          for (byte item : array) {              sb.append(Integer.toHexString((item &amp; 0xFF) | 0x100).substring(1, 3));          }          return sb.toString().toUpperCase();      } catch (Exception exception) {      }      return null;  }</code></pre><p>  }</p><pre><code>  - 用户微服务配置Redis  ```yml  spring:    application:      name: xdclass-user-service    redis:      host: 112.74.55.160      password: 123456      port: 8000</code></pre><ul><li><p>common聚合工程依赖配置</p><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token comment" spellcheck="true">&lt;!--redis客户端--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证码接口开发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Producer<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author LiuDong* @version 1.0* @description 通知* @date 2021年08月15日 22:10*/</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"通知模块"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/notify/v1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> Producer captchaProducer<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 图形验证码有效期   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> CAPTCHA_CODE_EXPIRED <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 获取图形验证码   * 输出图片流   *   * @param request   * @param response   * @author LiuDong   * @date 2021/8/15 22:14   */</span>  <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取图形验证码"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"captcha"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCaptcha</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*String captchaText = captchaProducer.createText();      log.info("图形验证码：{}", captchaText);      //存储到redis      //TimeUnit 时间枚举类      redisTemplate.opsForValue().set(getCaptchaKey(request),captchaText,CAPTCHA_CODE_EXPIRED, TimeUnit.MILLISECONDS);      BufferedImage bufferedImage = captchaProducer.createImage(captchaText);      try (ServletOutputStream outputStream = response.getOutputStream()) {          ImageIO.write(bufferedImage, "jpg", outputStream);      } catch (IOException e) {          log.error("获取图形验证码异常：{}", e);      }*/</span>      String cacheKey <span class="token operator">=</span> <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      String capText <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//存储</span>      redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> capText<span class="token punctuation">,</span> CAPTCHA_CODE_EXPIRED<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      BufferedImage bufferedImage <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>capText<span class="token punctuation">)</span><span class="token punctuation">;</span>      ServletOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-store, no-cache, must-revalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"create_date-check=0, pre-check=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>          outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取验证码失败:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获取缓存key   *   * @param request   * @return java.lang.String   * @author LiuDong   * @date 2021/8/15 23:03   */</span>  <span class="token keyword">private</span> String <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String ip <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      String userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String key <span class="token operator">=</span> <span class="token string">"user-service:captcha:"</span> <span class="token operator">+</span> CommonUtil<span class="token punctuation">.</span><span class="token function">MD5</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ip:{}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"userAgent:{}"</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> key<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> Captcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成单元测试</title>
      <link href="2021/08/16/ji-cheng-dan-yuan-ce-shi/"/>
      <url>2021/08/16/ji-cheng-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>需求分析-&gt;设计-&gt;开发-&gt;测试-&gt;上线<ul><li>单元测试:  完成最小的软件设计单元的验证工作，目标是确保模块被正确的编码</li></ul></li></ul><ul><li>Spring Boot Test 是在Spring Test之上的再次封装,  使用@SpringBootTest后，Spring将加载所有被管理的bean，等同于启动了整个服务</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>biz<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>UserApplication<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>model<span class="token punctuation">.</span>AddressDO<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AddressService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月15日 21:16 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> UserApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AddressService addressService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddressDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AddressDO addressDO <span class="token operator">=</span> addressService<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>addressDO<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//断言</span>        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>addressDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> SpringBootTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义全局异常</title>
      <link href="2021/08/16/zi-ding-yi-quan-ju-yi-chang/"/>
      <url>2021/08/16/zi-ding-yi-quan-ju-yi-chang/</url>
      
        <content type="html"><![CDATA[<ul><li>自定义全局异常</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月15日 20:59 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BizException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BizException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BizException</span><span class="token punctuation">(</span>BizCodeEnum bizCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>bizCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> bizCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> bizCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义异常处理器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Json<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月15日 21:01 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> JsonData <span class="token function">handler</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是不是自定义异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BizException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            BizException bizException <span class="token operator">=</span> <span class="token punctuation">(</span>BizException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[业务异常{}]"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildCodeAndMsg</span><span class="token punctuation">(</span>bizException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bizException<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[系统异常{}]"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"全局异常，未知错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> BizException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一接口响应</title>
      <link href="2021/08/16/tong-yi-jie-kou-xiang-ying/"/>
      <url>2021/08/16/tong-yi-jie-kou-xiang-ying/</url>
      
        <content type="html"><![CDATA[<ul><li>统一业务状态码 BizCodeEnum</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 枚举类，统一状态码和错误信息 * 前三位是服务，后三位是接口 * @author LiuDong * @version 1.0 * @date 2021年08月15日 20:47 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> BizCodeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通用操作码     */</span>    <span class="token function">OPS_REPEAT</span><span class="token punctuation">(</span><span class="token number">110001</span><span class="token punctuation">,</span><span class="token string">"重复操作"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     *验证码     */</span>    <span class="token function">CODE_TO_ERROR</span><span class="token punctuation">(</span><span class="token number">240001</span><span class="token punctuation">,</span><span class="token string">"接收号码不合规"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CODE_LIMITED</span><span class="token punctuation">(</span><span class="token number">240002</span><span class="token punctuation">,</span><span class="token string">"验证码发送过快"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CODE_ERROR</span><span class="token punctuation">(</span><span class="token number">240003</span><span class="token punctuation">,</span><span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CODE_CAPTCHA</span><span class="token punctuation">(</span><span class="token number">240101</span><span class="token punctuation">,</span><span class="token string">"图形验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 账号     */</span>    <span class="token function">ACCOUNT_REPEAT</span><span class="token punctuation">(</span><span class="token number">250001</span><span class="token punctuation">,</span><span class="token string">"账号已经存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ACCOUNT_UNREGISTER</span><span class="token punctuation">(</span><span class="token number">250002</span><span class="token punctuation">,</span><span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ACCOUNT_PWD_ERROR</span><span class="token punctuation">(</span><span class="token number">250003</span><span class="token punctuation">,</span><span class="token string">"账号或者密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">BizCodeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口统一协议 JsonData工具类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月15日 20:51 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonData</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 状态码 0 表示成功，1表示处理中，-1表示失败     */</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数据     */</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 描述     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 成功，传入数据     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 成功，传入数据     *     * @param data     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 失败，传入描述信息     *     * @param msg     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义状态码和错误信息     *     * @param code     * @param msg     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildCodeAndMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 传入枚举，返回信息     *     * @param codeEnum     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum codeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildCodeAndMsg</span><span class="token punctuation">(</span>codeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 1024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> BizCodeEnum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger3.0新全局配置</title>
      <link href="2021/08/15/swagger3-0-xin-quan-ju-pei-zhi/"/>
      <url>2021/08/15/swagger3-0-xin-quan-ju-pei-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li>访问地址<ul><li><code>http://ip:port/swagger-ui/index.html#/</code></li></ul></li><li>新增全局配置</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableOpenApi<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>schema<span class="token punctuation">.</span>ScalarType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月14日 15:48 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@EnableOpenApi</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对C端用户的接口文档     *     * @return springfox.documentation.spring.web.plugins.Docket     * @author LiuDong     * @date 2021/8/14 16:05     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">webApiDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//采用3.0的配置</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"用户端接口文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//定义是否开启Swagger,false是关闭，可以通过变量控制，线上关闭</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//配置接口文档的元信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 选择哪些接口作为swagger的doc发布</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//正则匹配请求路径，并分配到当前分组</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">/</span><span class="token operator">/</span>新版swaggerUI3<span class="token number">.0</span>配置                <span class="token punctuation">.</span><span class="token function">globalRequestParameters</span><span class="token punctuation">(</span><span class="token function">globalRequestParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalResponses</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token function">getGlobalResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalResponses</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span><span class="token function">getGlobalResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 对管理端的接口文档     <span class="token operator">*</span>     <span class="token operator">*</span> @<span class="token keyword">return</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket     <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> LiuDong     <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> <span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">14</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">adminApiDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//采用3.0的配置</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"管理端接口文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//定义是否开启Swagger,false是关闭，可以通过变量控制，线上关闭</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//配置接口文档的元信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 选择哪些接口作为swagger的doc发布</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//正则匹配请求路径，并分配到当前分组</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"1024电商平台"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"微服务接口文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"ld"</span><span class="token punctuation">,</span> <span class="token string">"https://blog.ldclass.club"</span><span class="token punctuation">,</span> <span class="token string">"873791226@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"v1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 配置全局通用参数<span class="token punctuation">,</span> 支持配置多个响应参数     <span class="token operator">*</span>     <span class="token operator">*</span> @<span class="token keyword">return</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RequestParameter<span class="token operator">></span>     <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> LiuDong     <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> <span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">14</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">08</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>RequestParameter<span class="token operator">></span> <span class="token function">globalRequestParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>RequestParameter<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParameterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//增加token</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"登录令牌"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>ParameterType<span class="token punctuation">.</span>HEADER<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">-</span><span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token operator">></span> m<span class="token punctuation">.</span><span class="token function">scalarModel</span><span class="token punctuation">(</span>ScalarType<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//是否开启</span>                <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parameters<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成通用响应信息     * @author LiuDong     * @date 2021/8/14 16:13     * @return java.util.List&lt;Response>     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Response<span class="token operator">></span> <span class="token function">getGlobalResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Response<span class="token operator">></span> responseList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResponseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token string">"4xx"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"请求错误，根据code和msg检查"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman配置多环境操作</title>
      <link href="2021/08/14/postman-pei-zhi-duo-huan-jing-cao-zuo/"/>
      <url>2021/08/14/postman-pei-zhi-duo-huan-jing-cao-zuo/</url>
      
        <content type="html"><![CDATA[<ul><li>Postman配置多环境操作<ul><li>方便未来切换环境<ul><li>开发</li><li>测试</li><li>预发布</li><li>线上</li></ul></li></ul></li></ul><img src="/2021/08/14/postman-pei-zhi-duo-huan-jing-cao-zuo/1.png" title="Postman配置多环境操作"><img src="/2021/08/14/postman-pei-zhi-duo-huan-jing-cao-zuo/2.png" title="Postman配置多环境操作"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1024 </tag>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目编码规范</title>
      <link href="2021/08/14/xiang-mu-bian-ma-gui-fan/"/>
      <url>2021/08/14/xiang-mu-bian-ma-gui-fan/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="N方库"><a href="#N方库" class="headerlink" title="N方库"></a>N方库</h3><ul><li>一方库: 本工程内部子项目模块依赖的库(jar 包)。<ul><li>自己项目中的module</li></ul></li><li>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库(jar包)。<ul><li>公司内部其他项目开发的公共包</li></ul></li><li>三方库: 公司之外的开源库(jar 包)。<ul><li>第三方的包</li></ul></li></ul></li><li><h3 id="POJO实体类"><a href="#POJO实体类" class="headerlink" title="POJO实体类"></a>POJO实体类</h3><ul><li>POJO(Plain Ordinary Java Object): 在手册中，POJO 专指只有 setter / getter / toString的简单类，包括DO/DTO/BO/VO等, 禁止命名成xxxPOJO<ul><li>DO：数据库映射，一一对应</li><li>DTO：服务层之间的通讯</li><li>BO：业务对象</li><li>VO：值对象，业务层和前端交互</li></ul></li></ul></li><li><h3 id="各个层级约束规范"><a href="#各个层级约束规范" class="headerlink" title="各个层级约束规范"></a>各个层级约束规范</h3><ul><li>Service/DAO层方法命名规约<ul><li>获取单个对象的方法用get做前缀。</li><li>获取多个对象的方法用list做前缀，复数形式结尾如:listObjects。 </li><li>获取统计值的方法用count做前缀。</li><li>插入的方法用save/insert做前缀。</li><li>删除的方法用remove/delete做前缀。</li><li>修改的方法用update做前缀。</li></ul></li><li>领域模型命名规约<ul><li>数据对象:xxxDO，xxx即为数据表名。</li><li>一般数据传输对象:xxxDTO，xxx为业务领域相关的名称，项目里面也用VO。 </li><li>展示对象:xxxVO，也就是响应给前端的实体包装类。</li><li>接收前端json对象请求的命名为 XXXRequest</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目编码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目编码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务技术对比和选择</title>
      <link href="2021/08/12/wei-fu-wu-ji-zhu-dui-bi-he-xuan-ze/"/>
      <url>2021/08/12/wei-fu-wu-ji-zhu-dui-bi-he-xuan-ze/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3></li></ul><pre><code>全家桶+轻松嵌入第三方组件(Netflix 奈飞)官网：https://spring.io/projects/spring-cloud配套通信方式：http restful注册中心：eureka配置中心：config断路器：hystrix网关：zuul/gateway分布式追踪系统：sleuth+zipkin</code></pre><ul><li><h3 id="SpringCloudAlibaba"><a href="#SpringCloudAlibaba" class="headerlink" title="SpringCloudAlibaba"></a>SpringCloudAlibaba</h3></li></ul><pre><code>全家桶+阿里生态多个组件组合+SpringCloud支持官网 https://spring.io/projects/spring-cloud-alibaba配套通信方式：http restful服务注册发现：Nacos服务限流降级：Sentinel分布配置中心：Nacos服务网关：SpringCloud Gateway服务之间调用：Feign、Ribbon链路追踪：Sleuth+Zipkin</code></pre><ul><li><h3 id="为什么要选择SpringCloud和AlibabaCloud的区别"><a href="#为什么要选择SpringCloud和AlibabaCloud的区别" class="headerlink" title="为什么要选择SpringCloud和AlibabaCloud的区别"></a>为什么要选择SpringCloud和AlibabaCloud的区别</h3></li></ul><pre><code>官网 https://spring.io/projects/spring-cloud-alibaba#overviewSpringCloud和AlibabaCloud组件存在很大交集，互相配合SpringCloud很多组件是基于第三方整合，目前多个已经不更新了，比如zuul、eureka、hystrix等AlibabaCloud 提供一站式微服务解决方法，已经和SpringCloud进行了整合，组件互相支持我们也习惯称为 Spring Cloud Alibaba详细介绍：https://mp.weixin.qq.com/s/NMD52MLDY2Lq3LSeOcVwjA</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战项目 </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps如何提效</title>
      <link href="2021/08/10/devops-ru-he-ti-xiao/"/>
      <url>2021/08/10/devops-ru-he-ti-xiao/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><ul><li>什么是DevOps：开发+测试+运维 交集</li><li>一专多能，配合提效</li><li>核心：CI/CD（持续集成/持续交付） 多环境-构建-打包-测试-上线-监控</li><li>快速迭代产品，每次代码的改动都触发校验，每刻都可进行新版本的上线</li><li>持续开发、持续集成、持续测试、持续部署、持续监控</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD领域驱动设计</title>
      <link href="2021/08/10/ddd-ling-yu-qu-dong-she-ji/"/>
      <url>2021/08/10/ddd-ling-yu-qu-dong-she-ji/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="DDD领域驱动设计"><a href="#DDD领域驱动设计" class="headerlink" title="DDD领域驱动设计"></a>DDD领域驱动设计</h3><ul><li>什么是DDD：领域驱动设计，领域专家—&gt;电商领域/支付领域/物流领域/在线教育等</li><li>步骤：领域分析—&gt;领域设计—&gt;领域实现—&gt;循环迭代优化</li><li>DDD是一套思想，不通团队实行DDD都有不同的理解，不是每个项目都适合</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决方案分析方法论SWOT</title>
      <link href="2021/08/10/jie-jue-fang-an-fen-xi-fang-fa-lun-swot/"/>
      <url>2021/08/10/jie-jue-fang-an-fen-xi-fang-fa-lun-swot/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="SWOT"><a href="#SWOT" class="headerlink" title="SWOT"></a>SWOT</h3><ul><li>S(strengths)是优势</li><li>W(weaknesses)是劣势</li><li>O(opportunities)是机会</li><li>T(threats)是威胁</li></ul></li><li><h3 id="SMART"><a href="#SMART" class="headerlink" title="SMART"></a>SMART</h3><ul><li><p>SMART原则【目标管理、设置】</p><ul><li><p><strong>Specific</strong>：目标要具体</p></li><li><p><strong>Measurable</strong>：目标成果要可衡量（量化）</p></li><li><p><strong>Attainable</strong>：目标要可实现，避免过高/过低</p></li><li><p><strong>Relevant</strong>：与其他目标有一定的相关性</p></li><li><p><strong>Time bound</strong>：目标必须有明确的期限</p></li><li><p><strong>意义</strong>：在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现</p></li><li><p><strong>OKR</strong>：绩效考核 </p></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SWOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SWOT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制</title>
      <link href="2021/07/14/mysql-zhu-cong-fu-zhi/"/>
      <url>2021/07/14/mysql-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="主从同步复制有以下几种方式："><a href="#主从同步复制有以下几种方式：" class="headerlink" title="主从同步复制有以下几种方式："></a>主从同步复制有以下几种方式：</h4><ul><li>同步复制，master的变化，必须等待slave-1,slave-2,…,slave-n完成后才能返回。</li><li>异步复制，master只需要完成自己的数据库操作即可，至于slaves是否收到二进制日志，是否完成操作，不用关心。MYSQL的默认设置。</li><li>半同步复制，master只保证slaves中的一个操作成功，就返回，其他slave不管。这个功能，是由google为MYSQL引入的。</li></ul></li><li><h4 id="分别在两台centos-7系统上安装mysql-5-7"><a href="#分别在两台centos-7系统上安装mysql-5-7" class="headerlink" title="分别在两台centos 7系统上安装mysql 5.7"></a>分别在两台centos 7系统上安装mysql 5.7</h4></li><li><h4 id="master主服务器的配置"><a href="#master主服务器的配置" class="headerlink" title="master主服务器的配置"></a>master主服务器的配置</h4><ul><li>配置文件my.cnf的修改</li></ul><pre class="line-numbers language-cnf"><code class="language-cnf">#编辑my.cnf文件[root@localhost mysql]# vim /etc/my.cnf#在[mysqld]中添加：server-id=1log_bin=master-binlog_bin_index=master-bin.indexbinlog_do_db=test#备注：#server-id 服务器唯一标识。#log_bin 启动MySQL二进制日志，即数据同步语句，从数据库会一条一条的执行这些语句。#binlog_do_db 指定记录二进制日志的数据库，即需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可。#binlog_ignore_db 指定不记录二进制日志的数据库，即不需要复制的数据库名，如果有多个数据库，重复设置这个选项即可。#其中需要注意的是，binlog_do_db和binlog_ignore_db为互斥选项，一般只需要一个即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建从服务器的用户和权限</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#进入mysql数据库</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>Enter password:<span class="token comment" spellcheck="true">#创建从数据库的masterbackup用户和权限</span>mysql<span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> masterbackup@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#备注</span><span class="token comment" spellcheck="true">#192.168.17.%通配符，表示0-255的IP都可访问主服务器，正式环境请配置指定从服务器IP</span><span class="token comment" spellcheck="true">#若将 192.168.17.% 改为 %，则任何ip均可作为其从数据库来访问主服务器</span><span class="token comment" spellcheck="true">#退出mysql</span>mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启mysql服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看主服务器状态</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#进入mysql数据库</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>Enter password:<span class="token comment" spellcheck="true">#查看主服务器状态</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>              <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> master<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">154</span> <span class="token operator">|</span> test         <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="slave从服务器的配置"><a href="#slave从服务器的配置" class="headerlink" title="slave从服务器的配置"></a>slave从服务器的配置</h4><ul><li>配置文件my.cnf的修改</li></ul><pre class="line-numbers language-cnf"><code class="language-cnf">#根据上一篇文章，编辑my.cnf文件[root@localhost mysql]# vim /etc/my.cnf#在[mysqld]中添加：server-id=2relay-log=slave-relay-binrelay-log-index=slave-relay-bin.index#replicate-do-db=test#备注：#server-id 服务器唯一标识，如果有多个从服务器，每个服务器的server-id不能重复，跟IP一样是唯一标识，如果你没设置server-id或者设置为0，则从服务器不会连接到主服务器。#relay-log 启动MySQL二进制日志，可以用来做数据备份和崩溃恢复，或主服务器挂掉了，将此从服务器作为其他从服务器的主服务器。#replicate-do-db 指定同步的数据库，如果复制多个数据库，重复设置这个选项即可。若在master端不指定binlog-do-db，则在slave端可用replication-do-db来过滤。#replicate-ignore-db 不需要同步的数据库，如果有多个数据库，重复设置这个选项即可。#其中需要注意的是，replicate-do-db和replicate-ignore-db为互斥选项，一般只需要一个即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启mysql服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>连接master主服务器</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#进入mysql数据库[root@localhost mysql]# mysql -uroot -pEnter password:#连接master主服务器mysql> change master to master_host='192.168.17.130',master_port=3306,master_user='masterbackup',master_password='123456',master_log_file='master-bin.000001',master_log_pos=154;#备注：#master_host对应主服务器的IP地址。#master_port对应主服务器的端口。#master_log_file对应show master status显示的File列：master-bin.000001。#master_log_pos对应show master status显示的Position列：154。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动slave数据同步</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#启动slave数据同步</span>mysql<span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#停止slave数据同步（若有需要）</span>mysql<span class="token operator">></span> stop slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看slave信息，Slave_IO_Running和Slave_SQL_Running都为yes，则表示同步成功。</li></ul><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> slave <span class="token keyword">status</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event                  Master_Host: <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">70.129</span>                  Master_User: <span class="token keyword">backup</span>                  Master_Port: <span class="token number">13306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: master<span class="token operator">-</span>bin<span class="token number">.000001</span>          Read_Master_Log_Pos: <span class="token number">154</span>               Relay_Log_File: slave<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token number">.000003</span>                Relay_Log_Pos: <span class="token number">321</span>        Relay_Master_Log_File: master<span class="token operator">-</span>bin<span class="token number">.000001</span>             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:          Replicate_Ignore_DB:           Replicate_Do_Table:       Replicate_Ignore_Table:      Replicate_Wild_Do_Table:  Replicate_Wild_Ignore_Table:                   Last_Errno: <span class="token number">0</span>                   Last_Error:                 Skip_Counter: <span class="token number">0</span>          Exec_Master_Log_Pos: <span class="token number">154</span>              Relay_Log_Space: <span class="token number">528</span>              Until_Condition: None               Until_Log_File:                Until_Log_Pos: <span class="token number">0</span>           Master_SSL_Allowed: <span class="token keyword">No</span>           Master_SSL_CA_File:           Master_SSL_CA_Path:              Master_SSL_Cert:            Master_SSL_Cipher:               Master_SSL_Key:        Seconds_Behind_Master: <span class="token number">0</span>Master_SSL_Verify_Server_Cert: <span class="token keyword">No</span>                Last_IO_Errno: <span class="token number">0</span>                Last_IO_Error:               Last_SQL_Errno: <span class="token number">0</span>               Last_SQL_Error:  Replicate_Ignore_Server_Ids:             Master_Server_Id: <span class="token number">1</span>                  Master_UUID: <span class="token number">8ffb067d</span><span class="token operator">-</span><span class="token number">b7bb</span><span class="token operator">-</span><span class="token number">11eb</span><span class="token operator">-</span><span class="token number">8ced</span><span class="token operator">-</span><span class="token number">000c291e5989</span>             Master_Info_File: <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>master<span class="token punctuation">.</span>info                    SQL_Delay: <span class="token number">0</span>          SQL_Remaining_Delay: <span class="token boolean">NULL</span>      Slave_SQL_Running_State: Slave has <span class="token keyword">read</span> <span class="token keyword">all</span> relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates           Master_Retry_Count: <span class="token number">86400</span>                  Master_Bind:      Last_IO_Error_Timestamp:     Last_SQL_Error_Timestamp:               Master_SSL_Crl:           Master_SSL_Crlpath:           Retrieved_Gtid_Set:            Executed_Gtid_Set:                Auto_Position: <span class="token number">0</span>         Replicate_Rewrite_DB:                 Channel_Name:           Master_TLS_Version:<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot静态资源加载</title>
      <link href="2021/06/26/springboot-jing-tai-zi-yuan-jia-zai/"/>
      <url>2021/06/26/springboot-jing-tai-zi-yuan-jia-zai/</url>
      
        <content type="html"><![CDATA[<ul><li><p>静态资源加载顺序</p><pre class="line-numbers language-yml"><code class="language-yml">classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>spring boot配置文件中 <code>spring.mvc.static-path-pattern</code> 配置项</p><pre class="line-numbers language-yml"><code class="language-yml">spring:    mvc:        static-path-pattern: /static/**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>项目中<code>application.yml</code>配置文件中，存在如上配置项时，访问静态资源文件要加<code>static</code>才行，当把这个配置项除掉时，不用加static作为前缀亦可进行正常访问。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库定时备份</title>
      <link href="2021/06/25/shu-ju-ku-ding-shi-bei-fen/"/>
      <url>2021/06/25/shu-ju-ku-ding-shi-bei-fen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Windows</p></blockquote><ul><li>mysql</li></ul><pre class="line-numbers language-bat"><code class="language-bat">rem ******MySQL backup start********@echo offset "Ymd=%DATE:~,4%%DATE:~5,2%%DATE:~8,2%%time:~0,2%%time:~3,2%""C:\mysql5.7\bin\mysqldump" -uroot -pRoot@123 -h127.0.0.1 --databases plat > C:\mysqldata\plat_%Ymd%.sql@echo onrem ******MySQL backup end********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>oracle</li></ul><pre class="line-numbers language-bat"><code class="language-bat">rem ******MySQL backup start********@echo offset adir=%DATE:~,4%%DATE:~5,2%%DATE:~8,2%%time:~0,2%%time:~3,2%exp rjm/rjm@orcl owner=rjm file=C:\oracledata\rjm_%adir%.dmp log='C:\oracledata\rjm_%adir%.log'@echo onrem ******MySQL backup end********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置定时任务</p><ul><li>首先是创建一个任务，在附件–&gt;系统工具中可以看到任务计划程序： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/1.png" title="配置定时任务"><ul><li>点击打开后可以看到主界面： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/2.png" title="配置定时任务"><ul><li>点击右侧的创建基本任务，随便输入一个名称后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/3.png" title="配置定时任务"><ul><li>然后是选择执行频率，我这里选择每天，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/4.png" title="配置定时任务"><ul><li>接着是设置开始时间和具体几点执行，我这里选择每天18点执行，从今天开始，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/5.png" title="配置定时任务"><ul><li>由于我们执行的是批处理脚本，所以直接选择【启动程序】即可，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/6.png" title="配置定时任务"><ul><li>接着就是选择我们脚本的位置，如果有参数的话填上参数，点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/7.png" title="配置定时任务"><ul><li>最后确认一下配置无误，点击【完成】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/8.png" title="配置定时任务"><ul><li>由于我们勾选了当点击【完成】时打开任务属性对话框，所以接下来我们看到的就是任务属性对话框，我们在这里还要再做一些设置：</li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/9.png" title="配置定时任务"><ul><li>如上图所示，这个配置非常重要，即选中“不管用户是否登录都要运行”和“使用最高权限运行”，注意这一点尤为重要，如果不选中这两项那么批处理脚本就无法自动执行完毕。最后点击【确定】并输入密码即可： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/10.png" title="配置定时任务"><ul><li>最后在首页就可以看到刚才添加的任务了： </li></ul><ul><li>双击该任务即可进入任务详情页面，也就能看到上次和下次的执行时间以及上次的执行结果： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/12.png" title="配置定时任务"></li></ul><blockquote><p>Linux</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pom配置使用lib下的jar包</title>
      <link href="2021/06/25/pom-pei-zhi-shi-yong-lib-xia-de-jar-bao/"/>
      <url>2021/06/25/pom-pei-zhi-shi-yong-lib-xia-de-jar-bao/</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题描述</p><ul><li>在Maven项目中，jar包的管理一般情况下都可以使用pom.xml来配置管理，但也有一些时候：我们项目中使用了一个内部jar文件，可是这个文件我们又没有开放到maven库中，还有就是在使用BCM或者docker的时候，项目的构建是实时同步GIt的，需要将本地引入的jar包上传到Git，这样导入到Git上的jar包，才能在构建的时候，被正确识别。这时我们会将jar包放到我们项目的src/main/webapp/WEB-INF/lib中。 如果我们不对pom.xml进行特殊配置的话，maven打包是不会自动去引用和编译lib中的jar文件的，所以需要我们修改下pom.xml文件。</li></ul></li><li><p>解决</p><ul><li>备注：如果不在src前加入${project.basedir}有可能在使用BCM或者Docker部署的时候，无法成功构建，本地和部署运行时候，识别的路径是有差异的。 </li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArguments</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extdirs</span><span class="token punctuation">></span></span>${project.basedir}/src/main/webapp/WEB-INF/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extdirs</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArguments</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-GA/PRE/SNAPSHOT详解</title>
      <link href="2021/06/24/springboot-ga-pre-snapshot-xiang-jie/"/>
      <url>2021/06/24/springboot-ga-pre-snapshot-xiang-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>GA/PRE/SNAPSHOT详解<ul><li>GA: General Availability,正式发布的版本，官方推荐使用该版本，国外很多项目都是使用GA来表示正式发布版本的</li><li>PRE： 预览版，主要是用来内部开发人员和测试人员测试使用，因此不建议使用</li><li>SNAPSHOT: 快照版，可以稳定使用，且该版本会一直进行小量的优化和改进</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA-properties中文乱码</title>
      <link href="2021/06/24/idea-properties-zhong-wen-luan-ma/"/>
      <url>2021/06/24/idea-properties-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题描述</p><ul><li>打开<code>.properties</code>文件后，汉字都变成了<code>\u6295\u7968\u6210\u529f\uff0c\u8c22\u8c22\u53c2\u4e0e</code></li><li>这是汉字的<code>unicode</code>编码。</li></ul></li><li><p>解决：</p><p>在project settings - File Encoding，在标红的选项上打上勾，确定即可</p><img src="/2021/06/24/idea-properties-zhong-wen-luan-ma/1.png" title="IDEA配置"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle10g安装</title>
      <link href="2021/06/24/oracle10g-an-zhuang/"/>
      <url>2021/06/24/oracle10g-an-zhuang/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>问题一</strong></p><ul><li><p>描述</p><ul><li>oracle安装中出现：检查操作系统版本必须是5.0,5.1,or 6.0。实际为6.1</li></ul></li><li><p>解决</p><ul><li>更改install文件夹下的配置文件<code>oraparam.ini</code></li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[Certified Versions]</span>#You can customise error message shown for failure, provide value for CERTIFIED_VERSION_FAILURE_MESSAGE<span class="token constant">Windows</span><span class="token attr-value"><span class="token punctuation">=</span>5.0,5.1,5.2,6.0,6.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ini"><code class="language-ini">#[Windows-6.1-required]#Minimum display colours for OUI to run<span class="token constant">MIN_DISPLAY_COLORS</span><span class="token attr-value"><span class="token punctuation">=</span>256</span>#Minimum CPU speed required for OUI<span class="token constant">#CPU</span><span class="token attr-value"><span class="token punctuation">=</span>300</span>#[Windows-6.1-optional]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle10g配置远程连接</title>
      <link href="2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/"/>
      <url>2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>采用图形化工具</li></ul><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/1.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/2.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/3.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/4.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/5.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/6.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/7.png" title="配置"></p><ul><li><p>可以用命令直接配</p><ul><li>在oracle安装目录下找到tnsnames.ora</li></ul><img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/8.png" title="配置"><ul><li>添加以下配置</li></ul><pre class="line-numbers language-ora"><code class="language-ora">test=(DESCRIPTION =    (ADDRESS_LIST =        (ADDRESS = (PROTOCOL = TCP)(HOST = 本机ip4地址)(PORT = 1521))    )    (CONNECT_DATA =        (SERVICE_NAME = orcl)    ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL免安装版配置</title>
      <link href="2021/06/24/mysql-mian-an-zhuang-ban-pei-zhi/"/>
      <url>2021/06/24/mysql-mian-an-zhuang-ban-pei-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>下载</p><ul><li>下载地址：<code>https://dev.mysql.com/downloads/mysql/</code>·</li></ul></li><li><p>解压</p></li><li><p>配置</p><ul><li>在文件目录 中新建一个<code>my.ini</code>的文件，代码如下，把其中的两处工作路径改为自己的按照路径即可。</li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span># 设置3306端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span># 设置mysql的安装目录<span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Mylargeprogram\Mysql\mysql-8.0.12-winx64</span># 设置mysql数据库的数据的存放目录<span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Mylargeprogram\Mysql\mysql-8.0.12-winx64\data</span># 允许最大连接数<span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统<span class="token constant">max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span># 服务端使用的字符集默认为UTF8<span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 创建新表时将使用的默认存储引擎<span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span># 默认使用“mysql_native_password”插件认证<span class="token constant">default_authentication_plugin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql_native_password</span><span class="token selector">[mysql]</span># 设置mysql客户端默认字符集<span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[client]</span># 设置mysql客户端连接服务端时默认使用的端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows2012R2安装Oracle</title>
      <link href="2021/06/21/windows2012r2-an-zhuang-oracle/"/>
      <url>2021/06/21/windows2012r2-an-zhuang-oracle/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装</p></blockquote><ul><li><p>下载oracle11g的安装文件</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/1.png" title="安装文件"></li><li><p>将两个压缩文件解压到同一目录下，尽量不要出现中文</p></li><li><p>解压后出现database文件夹，点击文件夹中setup启动安装</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/2.png" title="安装文件"></li><li><p>如果在启动安装时报错，提示环境满足最低要求，错误代码NS-13001,则修改配置文件</p><ul><li>位置：C:\Oracle\database\stage\cvu\cvu_prereq.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPERATING_SYSTEM</span> <span class="token attr-name">RELEASE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6.2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VERSION</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ARCHITECTURE</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>64-bit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NAME</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WindowsServer2012R2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ENV_VAR_LIST</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ENV_VAR</span> <span class="token attr-name">NAME</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PATH<span class="token punctuation">"</span></span> <span class="token attr-name">MAX_LENGTH</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1023<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ENV_VAR_LIST</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/3.png" title="配置"><ul><li>这是因为windows12对oracle11g不兼容，添加上图配置文件即可</li></ul></li><li><p>安装</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/4.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/5.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/6.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/7.png" title="配置"><p>这一步记好设置的口令 ，是之后sys账户的口令，不设置的话sys账户的默认口令是manager。</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/8.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/9.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/10.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/11.png" title="配置"></li><li><p>配置环境变量</p><ul><li>Oracle语言：<code>NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK</code></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/12.png" title="配置"><ul><li>监听：<code>TNS_ADMIN = C:\app\Administrator\product\11.2.0\dbhome_1\NETWORK\ADMIN</code></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/13.png" title="配置"></li><li><p>至此，oracle的安装就完成了</p></li></ul><blockquote><p>开放远程连接</p></blockquote><ul><li><p>安装完之后，oracle默认配置的监听是localhost，如果不仅仅是本地访问，需要其他机器能访问到的话，需要修改监听的地址</p></li><li><p>Oracle11g安装后只有本地可以连接，远程无法连接，而且本地只能配置成localhost配置成IP地址也无法连接。这是因为安装oracle的时候没有配置远程的监听，默认的监听是localhost</p></li><li><p>解决方法1：（简单，不用修改配置文件）</p><ul><li><p>打开net manager</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/14.png" title="配置"></li><li><p>按照下图找到配置监听的地方，点击添加新地址</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/15.png" title="配置"></li><li><p>我们需要配置IP地址访问的监听才能使数据库可以被远程访问</p><ul><li><strong>这个IP地址要写对，写成本机IP4的地址</strong></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/16.png" title="配置"></li><li><p>这样远程就可以连接了。</p></li><li><p>修改之后可能会有延迟，不会立刻生效。如果还是无法连接，可以将oracle服务重启。</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/17.png" title="配置"></li><li><p>此时在你数据库安装目录下找到下面的配置文件</p><ul><li>该配置文件里面就新增了一条我们刚刚增加的IP和端口</li><li>其实我们也可以直接修改该配置文件来达到上面的效果</li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/18.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/19.png" title="配置"></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle-system用户忘记密码的解决方法</title>
      <link href="2021/06/18/oracle-system-yong-hu-wang-ji-mi-ma-de-jie-jue-fang-fa/"/>
      <url>2021/06/18/oracle-system-yong-hu-wang-ji-mi-ma-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<ul><li><p>依次输入以下命令</p><ul><li><code>sqlplus /nolog</code></li><li><code>conn / as sysdba</code></li></ul></li><li><p>查询下是否能看到实例的用户</p><ul><li><code>select username,password from dba_users;</code></li></ul></li><li><p>修改指定用户密码</p><ul><li><code>alter user system identified by system;</code></li></ul></li><li><p><strong>注意</strong>： </p><ul><li><p>密码第一位不能为数字。</p></li><li><p>不能有@</p><ul><li>比如我的密码是<code>system@123</code>，那使用<code>sqlplus</code>登录的时候就理解成<code>sqlplus system/system@123</code>,这样<code>sqlplus</code>就理解成<code>system</code>后面的就是数据库的连接字符串，这样自然就报错并提示<code>TNS: 无法解析指定的连接标识符或no listener</code></li></ul></li><li><p>不能有空格</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决任意文件上传漏洞</title>
      <link href="2021/06/17/jie-jue-ren-yi-wen-jian-shang-chuan-lou-dong/"/>
      <url>2021/06/17/jie-jue-ren-yi-wen-jian-shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>问题描述</strong>：</p><ul><li>文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。</li></ul></li><li><p><strong>安全建议</strong></p><ul><li>对上传文件类型进行验证，除在前端验证外在后端依然要做验证，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小等限制来防御，或是将上传的文件其他文件存储服务器中。</li><li>对上传文件内容进行过滤和校验。</li></ul></li><li><p><strong>解决方法</strong></p><ul><li>判断文件是否含有木马（读取流）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 判断文件是否含有木马(读取流)     * @param inputStream     * @return     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> IOUtils<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;% ( ) %></span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;? ( ) ?></span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;script | /script> 大小写亦可</span>        <span class="token comment" spellcheck="true">// 通过匹配十六进制代码检测是否存在木马脚本</span>        String pattern <span class="token operator">=</span> <span class="token string">"(&lt;%.*%>)|(&lt;\\?.*\\?>)|(&lt;script.*/script>)"</span><span class="token punctuation">;</span>        Pattern mPattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher mMatcher <span class="token operator">=</span> mPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找相应的字符串</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//过滤java关键字(java import String print write( read() php request alert system)</span>            String keywordPattern <span class="token operator">=</span> <span class="token string">"(@eval\\()|(java)|(import)|(String)|(print)|(write)|(read\\(\\))|(php)|(request)|(alert)|(system)"</span><span class="token punctuation">;</span>            Pattern keywordmPattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>keywordPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            String keywordStr <span class="token operator">=</span> mMatcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Matcher keywordmMatcher <span class="token operator">=</span> keywordmPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>keywordStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>keywordmMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">            InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ImageUtil<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//TODO </span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断文件类型是否支持—–白名单</li></ul><pre class="line-numbers language-java"><code class="language-java">String houzhui <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">suffixJudgement</span><span class="token punctuation">(</span>houzhui<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 后缀判断     * @param fileType    文件类型     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">suffixJudgement</span><span class="token punctuation">(</span>String fileType<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//全部转换为小写</span>        fileType <span class="token operator">=</span> fileType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.图片  2.文档 3.视频 5.音频 6.其他</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他</span>        String other <span class="token operator">=</span> <span class="token string">"txt,html,zip,cvs,rtf"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//常见文档类型</span>        String file <span class="token operator">=</span> <span class="token string">"doc,docx,ppt,pptx,xls,xlsx,pdf"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//常见视频格式</span>        String video <span class="token operator">=</span> <span class="token string">"mp4,flv,avi,mpg,wmv,mov,asx,asf,3gp"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片</span>        String photo <span class="token operator">=</span> <span class="token string">"bmp,jpg,wbmp,jpeg,png,gif,psd,ico"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//音频</span>        String audio <span class="token operator">=</span> <span class="token string">"mp3,wav"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断上传文件后缀——黑名单</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 比较上传文件是否合法     * @param type    文件类型     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">IsIllegalFile</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认上传文件不非法</span>        Boolean IsIllegal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认转换为小写进行对比</span>        type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行比较</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"jsp"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"php"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"aspx"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"html"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"exe"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"bat"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"sh"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"py"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"csh"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"asp"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> IsIllegal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> IsIllegal <span class="token operator">=</span> <span class="token function">IsIllegalFile</span><span class="token punctuation">(</span>houzhui<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>IsIllegal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>魔术数字</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**      * 判断文件类型 (并返回文件的类型编号)     * @param path   文件路径     * @return 文件类型      */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">getTypeNum</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>Exception <span class="token punctuation">{</span>          FileInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer typeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String fileHead <span class="token operator">=</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHead <span class="token operator">==</span> null <span class="token operator">||</span> fileHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          fileHead <span class="token operator">=</span> fileHead<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> fileTypes <span class="token operator">=</span> FileType<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType type <span class="token operator">:</span> fileTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHead<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  typeNum <span class="token operator">=</span> <span class="token function">isFileType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> typeNum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断上传文件类型是否为0，如果是将其记录下来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>typeNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将内容输出到日志中</span>            LogUtils<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token string">"illegalFile"</span><span class="token punctuation">,</span> <span class="token string">"\n时间"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"、非法文件头："</span><span class="token operator">+</span>fileHead<span class="token operator">+</span><span class="token string">"、文件地址："</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> typeNum<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**      * 得到文件头      *       * @param is     *            文件路径      * @return 文件头      * @throws IOException      */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getFileContent</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token function">bytesToHexString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 根据深度验证判断文件类型     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">isFileType</span><span class="token punctuation">(</span>FileType value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Integer type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其他  </span>        <span class="token comment" spellcheck="true">// 图片  </span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> pics <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>JPEG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>GIF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>TIFF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>BMP<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DWG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PSD<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>ICO <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//文档</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> docs <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>XLS_DOC_PPT<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DOCX<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>XLSX<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>PPTX<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//视频</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> videos <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>AVI<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RAM<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RM<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MPG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MOV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>ASF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MP4<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>FLV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MID <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//种子</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> tottents <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>TORRENT <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//音频</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> audios <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>WAV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MP3<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>MP31 <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他</span><span class="token comment" spellcheck="true">//      FileType[] others = {FileType.RTF, FileType.XML, FileType.HTML, FileType.CSS, FileType.JS, FileType.EML, FileType.DBX, FileType.PST, FileType.JAVA, FileType.CLASS,</span><span class="token comment" spellcheck="true">//              FileType.MDB, FileType.WPS, FileType.WPD, FileType.EPS, FileType.PDF, FileType.QDF, FileType.PWL, FileType.ZIP, FileType.RAR, FileType.JSP,   </span><span class="token comment" spellcheck="true">//              FileType.JAR, FileType.MF, FileType.EXE, FileType.CHM}; </span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> others <span class="token operator">=</span> <span class="token punctuation">{</span>FileType<span class="token punctuation">.</span>RTF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>XML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>HTML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>CSS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DBX<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PST<span class="token punctuation">,</span>                FileType<span class="token punctuation">.</span>MDB<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>WPS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>WPD<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EPS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PDF<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>OPDF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>QDF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PWL<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>ZIP<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RAR<span class="token punctuation">,</span>                  FileType<span class="token punctuation">.</span>MF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EXE<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>CHM<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>TXT<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>TXT1<span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 图片  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> pics<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 文档  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 视频  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> videos<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 种子  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> tottents<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 音乐  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> audios<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 其他  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span>others<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> type<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> FileType <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**       * JEPG.       */</span>      <span class="token function">JPEG</span><span class="token punctuation">(</span><span class="token string">"FFD8FF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * PNG.       */</span>      <span class="token function">PNG</span><span class="token punctuation">(</span><span class="token string">"89504E47"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * GIF.       */</span>      <span class="token function">GIF</span><span class="token punctuation">(</span><span class="token string">"47494638"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * TIFF.       */</span>      <span class="token function">TIFF</span><span class="token punctuation">(</span><span class="token string">"49492A00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**     * ico logo     */</span>    <span class="token function">ICO</span><span class="token punctuation">(</span><span class="token string">"0000010001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Windows Bitmap.       */</span>      <span class="token function">BMP</span><span class="token punctuation">(</span><span class="token string">"424D"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * CAD.       */</span>      <span class="token function">DWG</span><span class="token punctuation">(</span><span class="token string">"41433130"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Adobe Photoshop.       */</span>      <span class="token function">PSD</span><span class="token punctuation">(</span><span class="token string">"38425053"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Rich Text Format.       */</span>      <span class="token function">RTF</span><span class="token punctuation">(</span><span class="token string">"7B5C727466"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * XML.       */</span>      <span class="token function">XML</span><span class="token punctuation">(</span><span class="token string">"3C3F786D6C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * HTML.       */</span>      <span class="token function">HTML</span><span class="token punctuation">(</span><span class="token string">"3C21444F4354595"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * CSS.       */</span>      <span class="token function">CSS</span><span class="token punctuation">(</span><span class="token string">"48544D4C207B0D0A0942"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * JS.       */</span>      <span class="token function">JS</span><span class="token punctuation">(</span><span class="token string">"696B2E71623D696B2E71"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Email [thorough only].       */</span>      <span class="token function">EML</span><span class="token punctuation">(</span><span class="token string">"44656C69766572792D646174653A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Outlook Express.       */</span>      <span class="token function">DBX</span><span class="token punctuation">(</span><span class="token string">"CFAD12FEC5FD746F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Outlook (pst).       */</span>      <span class="token function">PST</span><span class="token punctuation">(</span><span class="token string">"2142444E"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MS Word/Excel.       */</span>      <span class="token function">XLS_DOC_PPT</span><span class="token punctuation">(</span><span class="token string">"D0CF11E0A1B11AE"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DOCX</span><span class="token punctuation">(</span><span class="token string">"504B03041400060"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">XLSX</span><span class="token punctuation">(</span><span class="token string">"504B03040A00000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PPTX</span><span class="token punctuation">(</span><span class="token string">"504B03041400060"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Visio       */</span>      <span class="token function">VSD</span><span class="token punctuation">(</span><span class="token string">"d0cf11e0a1b11ae10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MS Access.       */</span>      <span class="token function">MDB</span><span class="token punctuation">(</span><span class="token string">"5374616E64617264204A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * WPS文字wps、表格et、演示dps都是一样的       */</span>      <span class="token function">WPS</span><span class="token punctuation">(</span><span class="token string">"d0cf11e0a1b11ae10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * torrent       */</span>      <span class="token function">TORRENT</span><span class="token punctuation">(</span><span class="token string">"6431303A637265617465"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * WordPerfect.       */</span>      <span class="token function">WPD</span><span class="token punctuation">(</span><span class="token string">"FF575043"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Postscript.       */</span>      <span class="token function">EPS</span><span class="token punctuation">(</span><span class="token string">"252150532D41646F6265"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Adobe Acrobat.       */</span>      <span class="token function">PDF</span><span class="token punctuation">(</span><span class="token string">"255044462D312E3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">OPDF</span><span class="token punctuation">(</span><span class="token string">"631423651500"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Quicken.       */</span>      <span class="token function">QDF</span><span class="token punctuation">(</span><span class="token string">"AC9EBD8F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Windows Password.       */</span>      <span class="token function">PWL</span><span class="token punctuation">(</span><span class="token string">"E3828596"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * ZIP Archive.       */</span>      <span class="token function">ZIP</span><span class="token punctuation">(</span><span class="token string">"504B0304"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * RAR Archive.       */</span>      <span class="token function">RAR</span><span class="token punctuation">(</span><span class="token string">"52617221"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MF Archive.       */</span>      <span class="token function">MF</span><span class="token punctuation">(</span><span class="token string">"4D616E69666573742D56"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       *EXE Archive.       */</span>      <span class="token function">EXE</span><span class="token punctuation">(</span><span class="token string">"4D5A9000030000000400"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       *CHM Archive.       */</span>      <span class="token function">CHM</span><span class="token punctuation">(</span><span class="token string">"49545346030000006000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       * INI("235468697320636F6E66"), SQL("494E5345525420494E54"), BAT(       * "406563686F206f66660D"), GZ("1F8B0800000000000000"), PROPERTIES(       * "6C6F67346A2E726F6F74"), MXP(       * "04000000010000001300"),       */</span>      <span class="token comment" spellcheck="true">/**       * Wave.       */</span>      <span class="token function">WAV</span><span class="token punctuation">(</span><span class="token string">"57415645"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * AVI.       */</span>      <span class="token function">AVI</span><span class="token punctuation">(</span><span class="token string">"41564920"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Real Audio.       */</span>      <span class="token function">RAM</span><span class="token punctuation">(</span><span class="token string">"2E7261FD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Real Media.       */</span>      <span class="token function">RM</span><span class="token punctuation">(</span><span class="token string">"2E524D46"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MPEG (mpg).       */</span>      <span class="token function">MPG</span><span class="token punctuation">(</span><span class="token string">"000001BA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Quicktime.       */</span>      <span class="token function">MOV</span><span class="token punctuation">(</span><span class="token string">"6D6F6F76"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Windows Media.       */</span>      <span class="token function">ASF</span><span class="token punctuation">(</span><span class="token string">"3026B2758E66CF11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MIDI.       */</span>      <span class="token function">MID</span><span class="token punctuation">(</span><span class="token string">"4D546864"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MP4.       * 000000186674797069736F6D0000000169736F6D617663310000D01B     * 00000028667479706d7034320000000169736f6d69736f3261766331     */</span>      <span class="token function">MP4</span><span class="token punctuation">(</span><span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MP3.       */</span>      <span class="token function">MP3</span><span class="token punctuation">(</span><span class="token string">"494433"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">MP31</span><span class="token punctuation">(</span><span class="token string">"FFFB"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * FLV.       */</span>      <span class="token function">FLV</span><span class="token punctuation">(</span><span class="token string">"464C5601050000000900"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//其他</span>    <span class="token comment" spellcheck="true">/**     * txt类型     */</span>    <span class="token function">TXT</span><span class="token punctuation">(</span><span class="token string">"2D2D2D2D2DE4BFA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TXT1</span><span class="token punctuation">(</span><span class="token string">"5576476C6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * Constructor.       *        * @param value     */</span>      <span class="token keyword">private</span> <span class="token function">FileType</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> 文件上传下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 文件上传下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本信息泄露</title>
      <link href="2021/06/11/ban-ben-xin-xi-xie-lu/"/>
      <url>2021/06/11/ban-ben-xin-xi-xie-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Tomcat版本信息泄露</p></blockquote><ul><li><p>Tomcat报错页面泄漏相关版本号信息，是攻击者攻击的途径之一。因此实际当中建议去掉版本号信息。</p></li><li><p>解决办法：、</p><ul><li>在tomcat的lib文件夹下新建目录<code>org\apache\catalina\util</code></li><li>在此目录下新建<code>ServerInfo.properties</code>，并写入以下内容</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.info</span><span class="token punctuation">=</span><span class="token attr-value">****</span><span class="token attr-name">server.number</span><span class="token punctuation">=</span><span class="token attr-value">X.X.XX.X</span><span class="token attr-name">server.built</span><span class="token punctuation">=</span><span class="token attr-value">XXXX-XX--XX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>Nginx版本信息泄露问题</p></blockquote><ul><li>在生产环境中暴露WEB服务器的名称和版本信息这些信息是不安全的。通过两种方式对上述信息进行隐藏：</li><li>解决办法：<ul><li>修改nginx.conf文件</li><li>添加：server_tokens off;</li></ul></li></ul><blockquote><p>JavaWeb配置友好错误页面</p></blockquote><ul><li><code>web.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 异常处理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>403<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/403.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>405<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/405.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/500.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>404.jsp</li></ul><pre><code>&lt;%@ page language="java"  pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta name="description" content=""&gt;    &lt;meta name="author" content=""&gt;    &lt;meta http-equiv="/" content="5;url=http://www.13bk.cn/" /&gt;    &lt;title&gt;错误页&lt;/title&gt;    &lt;link href="/resources/assets/error/css/bootstrap.css" rel="stylesheet"/&gt;    &lt;link href="/resources/assets/error/css/font-awesome.min.css" rel="stylesheet" /&gt;    &lt;link href='http://fonts.googleapis.com/css?family=Nova+Flat' rel='stylesheet' type='text/css'&gt;    &lt;link href="/resources/assets/error/css/style.css" rel="stylesheet" /&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;    &lt;div class="row pad-top text-center"&gt;        &lt;div class="col-md-6 col-md-offset-3 text-center"&gt;            &lt;h1&gt; 似乎没有找到你想要的页面 &lt;/h1&gt;            &lt;h1&gt; 404 &lt;/h1&gt;            &lt;span id="error-link"&gt;&lt;/span&gt;            &lt;h2&gt; 错误提示 &lt;/h2&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row text-center"&gt;        &lt;div class="col-md-8 col-md-offset-2"&gt;            &lt;h3&gt; &lt;i  class="fa fa-lightbulb-o fa-5x"&gt;&lt;/i&gt; &lt;/h3&gt;            &lt;!-- &lt;a href="/" class="btn btn-primary"&gt;&lt;span class="second"&gt;5&lt;/span&gt;秒后自动返回网站首页&lt;/a&gt; --&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;%--&lt;script src="/resources/assets/error/js/jquery-1.10.2.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/bootstrap.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/countUp.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/custom.js"&gt;&lt;/script&gt;--%&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> Nginx </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Nginx </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用.gitignore</title>
      <link href="2021/06/09/chang-yong-gitignore/"/>
      <url>2021/06/09/chang-yong-gitignore/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常用.gitignore配置</p></blockquote><pre class="line-numbers language-gitignore"><code class="language-gitignore">## .gitignore for Grails 1.2 and 1.3# .gitignore for maven target/*.releaseBackup# web application files#/web-app/WEB-INF# IDE support files/.classpath/.launch/.project/.settings/*.launch/*.tmproj/ivy*/eclipse# default HSQL database files for production mode/prodDb.*# general HSQL database files*Db.properties*Db.script# logs/stacktrace.log/test/reports/logs*.log*.log.*# project release file/*.war# plugin release file/*.zip/*.zip.sha1# older plugin install locations/plugins/web-app/plugins/web-app/WEB-INF/classes# "temporary" build filestarget/out/build/# other*.iws#.gitignore for java*.class# Package Files #*.jar*.war*.ear## .gitignore for eclipse*.pydevproject.project.metadatabin/**tmp/**tmp/**/**.tmp*.bak*.swp*~.niblocal.properties.classpath.settings/.loadpath# External tool builders.externalToolBuilders/# Locally stored "Eclipse launch configurations"*.launch# CDT-specific.cproject# PDT-specific.buildpath## .gitignore for intellij*.iml*.ipr*.iws.idea/## .gitignore for linux.*!.gitignore*~## .gitignore for windows# Windows image file cachesThumbs.dbehthumbs.db# Folder config fileDesktop.ini# Recycle Bin used on file shares$RECYCLE.BIN/## .gitignore for mac os x.DS_Store.AppleDouble.LSOverrideIcon# Thumbnails._*# Files that might appear on external disk.Spotlight-V100.Trashes## hack for graddle wrapper!wrapper/*.jar!**/wrapper/*.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> gitignore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不安全的HTTP请求方法配置</title>
      <link href="2021/06/09/bu-an-quan-de-http-qing-qiu-fang-fa-pei-zhi/"/>
      <url>2021/06/09/bu-an-quan-de-http-qing-qiu-fang-fa-pei-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法；HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><ul><li>PUT：由于PUT方法自身不带验证机制，利用PUT方法可以向服务器上传文件，所以恶意攻击者可以上传木马等恶意文件。</li><li>DELETE：利用DELETE方法可以删除服务器上特定的资源文件，造成恶意攻击。</li><li>OPTIONS：将会造成服务器信息暴露，如中间件版本、支持的HTTP方法等。</li><li>TRACE：可以回显服务器收到的请求，主要用于测试或诊断，一般都会存在反射型跨站漏洞。</li></ul></li><li><p>WebDAV完全采用了HTTP1.1的方法，扩展了一些方法，并扩展了一些其他方法：</p><ul><li>Options、Head、Trace：主要由应用程序来发现和跟踪服务器支持和网络行为；</li><li>Get：检索文档；</li><li>Put和Post：将文档提交到服务器；</li><li>Delete：销毁资源或集合；</li><li>Mkcol：创建集合</li><li>PropFind和PropPatch：针对资源和集合检索和设置属性；</li><li>Copy和Move：管理命名空间上下文中的集合和资源；</li><li>Lock和Unlock：改写保护</li></ul></li><li><p>问题描述：</p><ul><li>上述操作明细可以对web服务器进行上传、修改、删除等操作，对服务造成威胁</li></ul></li><li><p>解决思路：</p><ul><li>最简单的方式就是修改WEB应用的web.xml部署文件。在里面插入下面几行代码就搞定了，把需要屏蔽的方法加在里面。如果应用包比较多也没必要一个个改，直接修改Tomcat的web.xml就可以了，这样在Tomcat中运行的实例都会有效。</li></ul><pre class="line-numbers language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span><span class="token punctuation">></span></span>fortune<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>PUT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>DELETE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>HEAD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>OPTIONS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>TRACE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-constraint</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-constraint</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;security-constraint&gt;</code>用于限制对资源的访问；</li><li><code>&lt;auth-constraint&gt;</code>用于限制那些角色可以访问资源，这里设置为空就是禁止所有角色用户访问；</li><li><code>&lt;url-pattern&gt;</code>指定需要验证的资源</li><li><code>&lt;http-method&gt;</code>指定那些方法需要验证</li></ul><p>重启服务再验证就不会存在这个问题了。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb登录拦截过滤器</title>
      <link href="2021/06/09/javaweb-deng-lu-lan-jie-guo-lu-qi/"/>
      <url>2021/06/09/javaweb-deng-lu-lan-jie-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题类型：未授权的访问</p></li><li><p>问题描述：攻击者可通过此漏洞访问不允许访问的页面以获得更多的攻击内容。未授权访问漏洞,是在攻击者没有获取到登录权限或未授权的情况下,不需要输入密码,即可通过输入网站控制台主页面地址或者不允许查看的连接便可进行访问,同时进行操作。</p></li><li><p>解决思路：</p><ul><li>对未授权访问页面做session认证，严格审核后台功能页面的访问权限，若为未登录用户则拒绝访问。</li><li>加入用户身份认证机制或token验证,对系统的功能点增加权限控制。</li></ul></li><li><p><code>JavaWeb</code>登录过滤器</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 登录过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>登录过滤器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>loginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.unicom.login.LoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--白名单--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>passUrl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>login.html;.css;.js;.png;.gif;.properties;.xml;.txt;.mp4;.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>loginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 不被拦截的url     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> pattenURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String passUrl <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        passUrl <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"passUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pattenURL <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>passUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 登陆url</span>        String loginUrl <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/login.html"</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> pattenURL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取用户登录时获得的 Token</span>        <span class="token comment" spellcheck="true">//通过Cookie获取Token.</span>        String user_token <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"user_token"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user_token <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获得session</span>        HttpSession session <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user_token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            httpResponse<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>loginUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS跨域配置</title>
      <link href="2021/06/09/cors-kua-yu-pei-zhi/"/>
      <url>2021/06/09/cors-kua-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>CORS跨域资源共享漏洞</p></li><li><p>问题描述：</p><ul><li>WEB应用程序可以通过在HTTP增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。</li><li>当CORS的设置不正确时，就会带来安全问题。注意Access-Control-Allow-Origin的值，当其为null、意味着信任任何域，*这时候可能引入安全问题。假设用户登陆一个含有CORS配置网站vuln.com，同时又访问了攻击者提供的一个链接evil.com。evil.com的网站向vuln.com这个网站发起请求获取敏感数据，浏览器能否接收信息取决于vuln.com的配置。如果vuln.com配置了Access-Control-Allow-Origin头且为预期，那么允许接收，否则浏览器会因为同源策略而不接收。</li></ul></li><li><p>解决思路</p><p>1.不要配置”Access-Control-Allow-Origin” 为通配符 “*” ，而且更为重要的是，要严格效验来自请求数据包中的“Origin”的值。当收到跨域请求的时候，要检查“Origin” 的值是否是一个可信的源，还要检查是否为null。</p><p>2.避免使用 “Access-Control-Allow-Credentials ：true” （请求中带cookie）。</p><p>3.减少“Access-Control-Allow-Methods”所允许的方法，一般只配置常用的POST、GET</p></li><li><p>web.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 实现跨域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.thetransactioncompany.cors.CORSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.allowOrigin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>http://192.168.31.47:8072,http://192.168.31.47:9212,http://192.168.31.47:9214&lt;/param-value>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.supportedMethods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>GET, POST, PUT&lt;/param-value>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>GET, POST,OPTIONS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.supportedHeaders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>Accept, Origin, X-Requested-With, Content-Type, Last-Modified, X-Session-Token<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.exposedHeaders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>Set-Cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        &lt;init-param>--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-name>cors.supportsCredentials&lt;/param-name>--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>true&lt;/param-value>--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;/init-param>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CORS </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CORS </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xss保护过滤器</title>
      <link href="2021/06/09/xss-bao-hu-guo-lu-qi/"/>
      <url>2021/06/09/xss-bao-hu-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<ul><li><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><ul><li>预防存储型跨站脚本攻击</li><li>网站会将用户输入内容中包含的JavaScript代码呈现到页面上。如果攻击者能够设法诱骗合法用户访问其构造的链接或表单，攻击者就能以目标网站的身份在合法用户的浏览器上执行任意JS代码，从而窃取Cookie、执行CSRF、甚至借助浏览器漏洞完全控制用户主机。</li></ul></li><li><h5 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h5><ul><li>攻击者可以利用存在XSS漏洞的Web系统攻击浏览相关网页的用户，窃取用户会话中诸如用户名和口令（可能包含在Cookie里）等敏感信息、通过插入恶意代码对用户执行挂马攻击、XSS漏洞还可能被攻击者用于网页篡改。</li></ul></li><li><h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><ul><li><code>JavaWeb</code>：配置<code>Xss</code>过滤器</li><li><code>web.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XssEscape<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.blb.util.dataSource.XssFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 需要排除的接口 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>excludedPages<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>                /ApiUser/ssoLogin,                /ApiUser/ssoLoginTokenVerification,                /ApiUser/authentication,                /ApiUser/login,                /ApiUser/updatePwd,                /questionLook/QuestionBydoc,                /Kapi/upfiles,                /payment/authorizeLogin,                /questionLook/questionSaveOrUpdate,                /Kapi/uploadStorage,                /interlocution/saveEditQA,                /stage/addUpdateArrange,                /questionLook/questionsToPaper,                /course/AddNoCourseinfo            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XssEscape<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 过滤xss和sql * @author JH * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**  需排除过滤的URL路径   例如（/ApiUser/login）*/</span>    <span class="token keyword">private</span> String excludedPages<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 需排除过滤的URL路径的数组*/</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludedPageStr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处的ignores就是在web.xml定义的名称一样。</span>        excludedPages <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"excludedPages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>excludedPages <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> excludedPages<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            excludedPageStr <span class="token operator">=</span> excludedPages<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">,</span>            FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>req<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> res<span class="token punctuation">;</span>        String targetURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetURL <span class="token operator">=</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义表示变量 并验证用户请求URL 是否包含不过滤路径</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String page<span class="token operator">:</span>excludedPageStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断接口是否需要过滤xss</span>            request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XssAndSqlHttpServletRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========执行=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Xss </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7本地挂载yum源</title>
      <link href="2021/06/08/centos7-ben-di-gua-zai-yum-yuan/"/>
      <url>2021/06/08/centos7-ben-di-gua-zai-yum-yuan/</url>
      
        <content type="html"><![CDATA[<ul><li>挂载镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# mkdir  -p  /mnt/centos7[root@lmzf ~]# mount  /root/CentOS-7-x86_64-DVD-1708.iso  /mnt/centos7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>开机永久挂载</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# cat  /etc/fstab/root/CentOS-7-x86_64-DVD-1708.iso   /mnt/centos7  iso9660 defaults,loop,ro  0  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>删除<code>/etc/yum.repo.d/</code>中的所有yum源 (重要)</p></li><li><p>创建本地的<code>repo</code>文件</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# vim  /etc/yum.repo.d/centos7.repo[centos7]name=centos7baseurl=file:///mnt/centos7gpgcheck=0enabled=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开始yum安装软件</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis部署遇到的问题</title>
      <link href="2021/06/04/redis-bu-shu-yu-dao-de-wen-ti/"/>
      <url>2021/06/04/redis-bu-shu-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="redis远程连接不上解决办法"><a href="#redis远程连接不上解决办法" class="headerlink" title="redis远程连接不上解决办法"></a>redis远程连接不上解决办法</h4></blockquote><ul><li><p>解决步骤：</p><ul><li>步骤一：注释掉redis.conf文件中的bind属性设置。</li></ul><img src="/2021/06/04/redis-bu-shu-yu-dao-de-wen-ti/1.png" title="bind"><ul><li>步骤二：把protected-mode属性设置no</li></ul><img src="/2021/06/04/redis-bu-shu-yu-dao-de-wen-ti/2.png" title="protected-mode"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat、jdk、web.xml版本对应</title>
      <link href="2021/06/04/tomcat-jdk-web-xml-ban-ben-dui-ying/"/>
      <url>2021/06/04/tomcat-jdk-web-xml-ban-ben-dui-ying/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="tomcat和jdk以及web-xml等版本对应"><a href="#tomcat和jdk以及web-xml等版本对应" class="headerlink" title="tomcat和jdk以及web.xml等版本对应"></a>tomcat和jdk以及web.xml等版本对应</h4></blockquote><img src="/2021/06/04/tomcat-jdk-web-xml-ban-ben-dui-ying/1.png" title="tomcat和jdk以及web.xml等版本对应"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web.xml各版本头</title>
      <link href="2021/06/04/web-xml-ge-ban-ben-tou/"/>
      <url>2021/06/04/web-xml-ge-ban-ben-tou/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="web-xml各版本收录"><a href="#web-xml各版本收录" class="headerlink" title="web.xml各版本收录"></a>web.xml各版本收录</h4></blockquote><ul><li><p>官网：<code>http://www.oracle.com/webfolder/technetwork/jsc/xml/ns/javaee/index.html</code></p></li><li><h3 id="5-0版本"><a href="#5-0版本" class="headerlink" title="5.0版本"></a>5.0版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="4-0版本"><a href="#4-0版本" class="headerlink" title="4.0版本"></a>4.0版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>                      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                               http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="3-1版本"><a href="#3-1版本" class="headerlink" title="3.1版本"></a>3.1版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                               http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="3-0版本"><a href="#3-0版本" class="headerlink" title="3.0版本"></a>3.0版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee           http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span>          <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="2-5版本"><a href="#2-5版本" class="headerlink" title="2.5版本"></a>2.5版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee           http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>          <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="2-4版本"><a href="#2-4版本" class="headerlink" title="2.4版本"></a>2.4版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/j2ee<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/j2ee           http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd<span class="token punctuation">"</span></span>          <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Servlet 2.4 Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="2-3版本"><a href="#2-3版本" class="headerlink" title="2.3版本"></a>2.3版本</h3></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Servlet 2.3 Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架搭建</title>
      <link href="2021/06/04/ssm-kuang-jia-da-jian/"/>
      <url>2021/06/04/ssm-kuang-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搭建SSM框架</p></blockquote><ul><li><h4 id="项目示例：https-gitee-com-liudong666-ssm-demo-git"><a href="#项目示例：https-gitee-com-liudong666-ssm-demo-git" class="headerlink" title="项目示例：https://gitee.com/liudong666/ssm-demo.git"></a>项目示例：<code>https://gitee.com/liudong666/ssm-demo.git</code></h4></li><li><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ssm Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring --></span>        <span class="token comment" spellcheck="true">&lt;!-- 1)包含Spring 框架基本的核心工具类。Spring 其它组件要都要使用到这个包里的类，是其它组件的基本核心 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 2)这个jar 文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean 以及进行Inversion of Control            / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI 支持，引入spring-core.jar            及spring-beans.jar 文件就可以了。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 3)这个jar 文件为Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI            所需的全部类，instrumentation组件以及校验Validation 方面的相关类。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 4) 这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 5) 为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 6)Spring web 包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 7)包含SpringMVC框架相关的所有类。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 8)Spring test 对JUNIT等测试框架的简单封装 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Servlet web --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- json解析 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Map工具类 对标准java Collection的扩展 spring-core.jar需commons-collections.jar --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- DAO: MyBatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.37<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- redis客户端:Jedis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-net-cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven China Mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-net-cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven China Mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.导入数据库的属性文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.配置数据库连接池 dataSource --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置数据库连接池的属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置c3p0的私有属性 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大,最小,初始化连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭连接时不提交commit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置超时连接时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置重连次数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.会话工厂的配置 sqlSessionFactory 用的是mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入dataSource --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置mybatis的配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置实体类的路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置mapper的映射路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置需要扫描mapper 对应的dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 需要扫描的dao --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.扫描ervice接口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入dataSource --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启事务管理声明 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="spring-web-xml"><a href="#spring-web-xml" class="headerlink" title="spring-web.xml"></a>spring-web.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.开启springMVC的注解模式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源的配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/resources/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/resources/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置servlet默认请求 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置视图解析器 viewResolver --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置映射路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/html/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置扩展名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 5.扫描web 即controller --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h4></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!-- scan:自动加载判断,即当配置文件发生改变时,将会被重新加载,默认true     scanPeriod:检测配置文件是否有修改的时间间隔,如果没有给出时间单位,默认为ms      debug:当被设置为true时,将打印出logback内部日志信息,实时查看logback运行信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义参数常量 --></span>    <span class="token comment" spellcheck="true">&lt;!-- TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR --></span>    <span class="token comment" spellcheck="true">&lt;!-- logger.trace("msg") logger.debug... --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.level<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.maxHistory<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.filePath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${catalina.base}/logs/webapps<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度        %msg：日志消息，%n是换行符 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.pattern<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台设置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;encoder>主要负责的是将日志信息转换成字节数组以及将字节数组写到输出流中去 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${log.pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;appender>定义日志输出的方式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- DEBUG --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debugAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文件路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.filePath}/debug.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 滚动记录文件，先将文件记录到指定文件，当符合某个条件时，再将文件记录到其他的文件中去。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件名称 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件保存天数 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>${log.maxHistory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;encoder>主要负责的是将日志信息转换成字节数组以及将字节数组写到输出流中去 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${log.pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;filter>是appender的子节点，表示对当前给定的日志级别再进行一次过滤。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 只打印debug日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- INFO --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>infoAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文件路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.filePath}/info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件名称 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件最大保存历史数量 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>${log.maxHistory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${log.pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 只打印INFO日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ERROR --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>errorAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文件路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.filePath}/erorr.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件名称 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 文件最大保存历史数量 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>${log.maxHistory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${log.pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 只打印错误日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;logger>用来设置某一个包或者某一个具体类的日志打印级别以及方式.         在logger内可以包含零个或者多个appender-ref，然后对应的appender将会被添加到这个logger         additivity:是否向上级log传递打印信息，默认为true --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${log.level}<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debugAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>infoAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>errorAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;root>也是logger元素，但它是根logger，所有logger的最上级，只有一个level属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置全局属性 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置自动获取自增主键 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置列标签代替列别名 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 开启驼峰命名 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"        "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置springMVC的前端控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring-dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置映射配置文件路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/spring-*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring-dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 匹配所有的请求 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成webservice</title>
      <link href="2021/06/04/springboot-ji-cheng-webservice/"/>
      <url>2021/06/04/springboot-ji-cheng-webservice/</url>
      
        <content type="html"><![CDATA[<blockquote><p>springBoot集成webservice</p></blockquote><ul><li><h4 id="项目示例：https-gitee-com-liudong666-springboot-webservice-git"><a href="#项目示例：https-gitee-com-liudong666-springboot-webservice-git" class="headerlink" title="项目示例：https://gitee.com/liudong666/springboot_webservice.git"></a>项目示例：<code>https://gitee.com/liudong666/springboot_webservice.git</code></h4></li><li><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ws_sb_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ws_sb_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="新建CxfConfig"><a href="#新建CxfConfig" class="headerlink" title="新建CxfConfig"></a>新建CxfConfig</h4></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DemoService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DemoServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>Bus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SpringBus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>jaxws<span class="token punctuation">.</span>EndpointImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>CXFServlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ws<span class="token punctuation">.</span>Endpoint<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CxfConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">createServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CXFServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/webService/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> Bus<span class="token punctuation">.</span>DEFAULT_BUS_ID<span class="token punctuation">)</span>    <span class="token keyword">public</span> SpringBus <span class="token function">springBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DemoService <span class="token function">demoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Endpoint <span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EndpointImpl endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointImpl</span><span class="token punctuation">(</span><span class="token function">springBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">demoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        endpoint<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> endpoint<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>jws<span class="token punctuation">.</span>WebParam<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>jws<span class="token punctuation">.</span>WebService<span class="token punctuation">;</span><span class="token annotation punctuation">@WebService</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"DemoService"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//暴露服务名称</span>        targetNamespace <span class="token operator">=</span> <span class="token string">"http://service.ws_sb_demo.ldclass.com"</span> <span class="token comment" spellcheck="true">//命名空间，一般是接口的包名倒序</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@WebParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h4></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>ws_sb_demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DemoService<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>jws<span class="token punctuation">.</span>WebService<span class="token punctuation">;</span><span class="token annotation punctuation">@WebService</span><span class="token punctuation">(</span>serviceName <span class="token operator">=</span> <span class="token string">"DemoService"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 与接口中指定的name一致</span>        targetNamespace <span class="token operator">=</span> <span class="token string">"http://service.ws_sb_demo.ldclass.com"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 与接口中的命名空间一致,一般是接口的包名倒</span>        endpointInterface <span class="token operator">=</span> <span class="token string">"com.ldclass.ws_sb_demo.service.DemoService"</span><span class="token comment" spellcheck="true">// 接口地址</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hi,"</span> <span class="token operator">+</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> webService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM集成webservice</title>
      <link href="2021/06/04/ssm-ji-cheng-webservice/"/>
      <url>2021/06/04/ssm-ji-cheng-webservice/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSM集成webService-maven</p></blockquote><ul><li><h4 id="项目示例：https-gitee-com-liudong666-ssm-demo-git"><a href="#项目示例：https-gitee-com-liudong666-ssm-demo-git" class="headerlink" title="项目示例：https://gitee.com/liudong666/ssm-demo.git"></a>项目示例：<code>https://gitee.com/liudong666/ssm-demo.git</code></h4></li><li><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 集成CXF实现Webservice接口 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>wsdl4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>wsdl4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="新建cxf-servlet-xml"><a href="#新建cxf-servlet-xml" class="headerlink" title="新建cxf-servlet.xml"></a>新建cxf-servlet.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jaxws</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cxf.apache.org/jaxws<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>http-conf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cxf.apache.org/transports/http/configuration<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                        http://www.springframework.org/schema/beans/spring-beans.xsd                        http://cxf.apache.org/jaxws                        http://cxf.apache.org/schemas/jaxws.xsd                        http://cxf.apache.org/transports/http/configuration                         http://cxf.apache.org/schemas/configuration/http-conf.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:META-INF/cxf/cxf.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:META-INF/cxf/cxf-servlet.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 新版本不需要此xml文件--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" /> --></span>    <span class="token comment" spellcheck="true">&lt;!-- Start 供WebService调用的业务Service --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置方式1   注意：serviceClass为接口类并非实现类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jaxws:</span>server</span> <span class="token attr-name">serviceClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.webService.service.CxyJkfwService<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/cxyJkfwService_server<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jaxws:</span>server</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置方式2    注意：implementor为接口的具体实现类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jaxws:</span>endpoint</span> <span class="token attr-name">implementor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.webService.service.impl.CxyJkfwServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/cxyJkfwService<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jaxws:</span>endpoint</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"        "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 为了cxf而加入 start  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>            classpath*:cxf-servlet.xml        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Spring监听配置，Web容器启动自动装配ApplicationContext的配置信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 为了cxf而加入 end  --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置springMVC的前端控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring-dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置映射配置文件路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/spring-*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--webservice服务端 cxy start--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>CXFServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.apache.cxf.transport.servlet.CXFServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>CXFServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/webService/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--webservice服务端 cxy end--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring-dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 匹配所有的请求 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token annotation punctuation">@SOAPBinding</span><span class="token punctuation">(</span>style <span class="token operator">=</span> SOAPBinding<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>RPC<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CxyJkfwService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">swapInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@WebParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"param"</span><span class="token punctuation">)</span> String requestXml<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h4></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CxyJkfwServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBeanAutowiringSupport</span> <span class="token keyword">implements</span> <span class="token class-name">CxyJkfwService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">swapInfo</span><span class="token punctuation">(</span>String requestXml<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String xml  <span class="token operator">=</span> requestXml<span class="token operator">+</span><span class="token string">" HelloWorld"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xml<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>SSM集成webService-非maven</p></blockquote><ul><li><h4 id="集成webservice所需jar包：https-gitee-com-liudong666-cxf-jar-git"><a href="#集成webservice所需jar包：https-gitee-com-liudong666-cxf-jar-git" class="headerlink" title="集成webservice所需jar包：https://gitee.com/liudong666/cxf_-jar.git"></a>集成webservice所需jar包：<code>https://gitee.com/liudong666/cxf_-jar.git</code></h4></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
          <category> webService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> webService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装yarn</title>
      <link href="2021/05/27/windows-an-zhuang-yarn/"/>
      <url>2021/05/27/windows-an-zhuang-yarn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装Yarn</p></blockquote><ul><li><p>方法一：使用安装包安装</p><ul><li>官方下载安装包，<code>https://yarnpkg.com/zh-Hans/docs/install</code>，安装完毕后，一定要配置环境变量。</li></ul></li><li><p>方法二：使用npm安装</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">npm i yarn -g-i：install -g：全局安装（global）,使用 -g 或 --global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>输入yarn -version 可以看到版本号，说明安装成功了。我们就可以在项目中像使用npm一样使用yarn了。</p></li><li><p>解决：‘yarn’ 不是内部或外部命令，也不是可运行的程序</p><img src="/2021/05/27/windows-an-zhuang-yarn/1.png" title="安装yarn"><ul><li>根据安装的路径添加环境变量<ul><li>第1步：找到你刚才安装的yarn 如:E:\nodejs\node_global\node_modules\yarn\bin</li><li>第2步：系统变量-&gt;path,打开之后添加 E:\nodejs\node_global\node_modules\yarn\bin 重新打开cmd，输入 yarn -v 即可</li></ul></li></ul></li></ul><blockquote><p>卸载yarn</p></blockquote><ul><li>安装包直接软件卸载。</li><li>npm安装的则通过命令npm uninstall yarn -g卸载。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx虚拟目录alias和root目录</title>
      <link href="2021/05/27/nginx-xu-ni-mu-lu-alias-he-root-mu-lu/"/>
      <url>2021/05/27/nginx-xu-ni-mu-lu-alias-he-root-mu-lu/</url>
      
        <content type="html"><![CDATA[<ul><li><p>nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的：</p><ul><li>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；</li><li>root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；</li><li>使用alias标签的目录块中不能使用rewrite的break；另外，alias指定的目录后面必须要加上”/“符号！！</li><li>alias虚拟目录配置中，location匹配的path目录如果后面不带”/“，那么访问的url地址中这个path目录后面加不加”/“不影响访问，访问时它会自动加上”/“；但是如果location匹配的path目录后面加上”/“，那么访问的url地址中这个path目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！</li><li>root目录配置中，location匹配的path目录后面带不带”/“，都不会影响访问。</li></ul></li><li><p>示例</p></li></ul><pre class="line-numbers language-nginx"><code class="language-nginx">        <span class="token keyword">location</span>  <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#location匹配访问的path目录名与项目路径一致时，可以使用alias 也可以使用root</span>        <span class="token keyword">location</span> <span class="token operator">/</span>build <span class="token punctuation">{</span>            <span class="token keyword">alias</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#/usr/local/excalidraw下必须有build目录</span>        <span class="token keyword">location</span> <span class="token operator">/</span>build<span class="token punctuation">{</span>            <span class="token keyword">root</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#location匹配访问的path目录名与项目路径不一致时，不能直接更改为root</span>        <span class="token keyword">location</span> <span class="token operator">/</span>excalidraw <span class="token punctuation">{</span>            <span class="token keyword">alias</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所以，一般情况下，在nginx配置中的良好习惯是：<ul><li>在location /中配置root目录；</li><li>在location /path中配置alias虚拟目录。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Alias </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Alias </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows使用nvm管理node版本</title>
      <link href="2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/"/>
      <url>2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/</url>
      
        <content type="html"><![CDATA[<ul><li>需要在同一台机器上安装多个版本的Node，使用<code>nvm</code>来做Node版本的管理。</li></ul><blockquote><p>安装前需要先将之前安装的Node版本完全删除</p></blockquote><ul><li><p>Windows设置 –&gt; 应用–&gt; 找到Node–&gt;点击卸载</p></li><li><p>重启电脑（或者从任务管理器中杀死所有Node相关的进程）</p></li><li><p>寻找以下文件夹并删除他们。根据您安装的版本，这些文件可能存在也可能不存在：</p><ul><li>C:\Program Files (x86)\Nodejs</li><li>C:\Program Files\Nodejs</li><li>C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）</li><li>C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）</li></ul></li><li><p>检查%PATH%环境变量，确保没有引用Nodejs和npm的存在</p></li><li><p>重启（重启大法解决90%问题）</p></li></ul><blockquote><p>下载安装</p></blockquote><ul><li>链接：<code>https://github.com/coreybutler/nvm-windows/releases</code></li><li>可下载以下版本：<ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul></li><li>双击解压后的文件<code>nvm-setup.exe</code></li><li>选择nvm安装路径<ul><li>在选择文件夹的时候，需要注意，文件夹名不要出现 <code>中文</code> 和 <code>空格</code></li></ul></li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/1.png" title="选择nvm安装路径"><ul><li>选择nodejs安装路径</li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/2.png" title="选择nodejs安装路径"><ul><li>检查是否安装成功<ul><li>打开cmd，输入<code>nvm</code>，安装成功则会如下图所示，它会显示出当前nvm版本以及nvm的命令：</li></ul></li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/3.png" title="检查是否安装成功"><blockquote><p>环境变量</p></blockquote><ul><li>安装好之后，环境变量会自动设置好</li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/4.png" title="环境变量"><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/5.png" title="环境变量"><blockquote><p>使用</p></blockquote><ul><li>nvm list 命令 - 显示版本列表</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm list // 显示已安装的版本（同 nvm list installed）nvm list installed // 显示已安装的版本nvm list available // 显示所有可以下载的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>nvm install 命令 - 安装指定版本nodejs<ul><li>在运行<code>nvm install</code> 的时候，有可能会出现无权限安装的问题，如果遇到此问题，请 <code>以管理员身份运行</code> cmd。</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm install 14.5.0 // 安装14.5.0版本nodenvm install latest // 安装最新版本node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>nvm uninstall 命令 - 卸载指定版本 node</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm uninstall 14.5.0 // 卸载14.5.0版本node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>nvm use 命令 // 使用指定版本Node</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm use 14.5.0 // 使用14.5.0版本node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能遇到的问题</p></blockquote><ul><li><p>错误一：无法安装npm</p><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/6.png" title="错误一"><ul><li><p>可行的解决方法：</p><ul><li>使用nvm-windows高版本时需要单独另外安装npm，nvm只是用来管理node版本的，没有管理npm功能</li><li>为 nvm 设置淘宝镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm uninstall 14.5.0nvm npm_mirror https://npm.taobao.org/mirrors/npm/nvm install 14.5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> nvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装nodejs</title>
      <link href="2021/05/27/linux-an-zhuang-nodejs/"/>
      <url>2021/05/27/linux-an-zhuang-nodejs/</url>
      
        <content type="html"><![CDATA[<ul><li><p>去官网下载和自己系统匹配的文件：</p><ul><li>英文网址：<code>https://nodejs.org/en/download/</code></li><li>中文网址：<code>http://nodejs.cn/download/</code></li></ul></li><li><p>通过  uname -a  命令查看到Linux系统位数（备注：x86_64表示64位系统， i686 i386表示32位系统）</p></li><li><p>下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局；</p><ul><li>上传服务器可以是自己任意路径，目前我的放置路径为  cd /app/software/</li><li>解压上传（解压后的文件我这边将名字改为了nodejs，这个地方自己随意，只要在建立软连接的时候写正确就可以）<ul><li>tar -xvf  node-v6.10.0-linux-x64.tar.xz  </li><li>mv node-v6.10.0-linux-x64  nodejs </li><li>确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤；</li></ul></li><li>建立软连接，变为全局<ul><li>ln -s /app/software/nodejs/bin/npm /usr/local/bin/ </li><li>ln -s /app/software/nodejs/bin/node /usr/local/bin/</li></ul></li><li>最后一步检验nodejs是否已变为全局<ul><li>在Linux命令行node -v 命令会显示nodejs版本，如图所示为大功告成</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装yarn</title>
      <link href="2021/05/27/linux-an-zhuang-yarn/"/>
      <url>2021/05/27/linux-an-zhuang-yarn/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Yarn 是一个依赖管理工具。它能够管理你的代码，并与全世界的开发者分享代码。Yarn 是高效、安全和可靠的，你完全可以安心使用。代码是通过包（有时也被称为组件）。 在每一个包中会定义一个 <code>package.json</code> 文件，用来描述这个包中所有要被分享的代码。</p></li><li><p>在 CentOS, Fedora 和 RHEL 操作系统上，你可以通过RPM 包仓库来安装 Yarn</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果尚未安装 Node.js（查看是否安装node.js用命令：node -v可以显示版本。安装方法参考<code>https://www.ldclass.club/2021/05/27/linux-an-zhuang-nodejs/</code>，配置 Node 源仓库：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install yarn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成。查看yarn版本用命令：<code>yarn --version</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe标签开启麦克风和摄像权限</title>
      <link href="2021/05/23/ifame-biao-qian-kai-qi-mai-ke-feng-he-she-xiang-quan-xian/"/>
      <url>2021/05/23/ifame-biao-qian-kai-qi-mai-ke-feng-he-she-xiang-quan-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>直接通过html<ul><li>使用iframe进行嵌入调用：可以调取麦克风和摄像头</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">&lt;iframe id="refFrame" allow="microphone;camera;midi;encrypted-media;" src = "https://XXXX"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在vue框架中<ul><li>在vue模板中，直接嵌入iframe去调用也是不行的；</li><li>在vue中嵌入iframe去调取摄像头和麦克风，iframe的allow的属性必须得通过js的方式添加进去</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">&lt;iframe id="refFrame"  src = "https://XXXX"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调取摄像头和麦克风</span>    <span class="token keyword">var</span> iframeElment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>refFrame    <span class="token keyword">if</span> <span class="token punctuation">(</span>iframeElment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iframeElment<span class="token punctuation">.</span>allow <span class="token operator">=</span> <span class="token string">'microphone;camera;midi;encrypted-media;'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
          <category> iframe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+阿里云+域名部署个人微博</title>
      <link href="2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/"/>
      <url>2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3></li><li><h4 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h4><ul><li>为了使本地可以跟远程的github建立联系，需要在本地配置SSH密钥，这样就可以在本地直接提交代码到GitHub上或者远端git仓库。</li><li>如果你是第一次配置SSH，则配置一下git的username 和 email</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ git config --global user.name "你要设置的名字"$ git config --global user.email "你要设置的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>生成SSH密钥：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ ssh-keygen -t rsa -C "你刚刚设置的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果不需要设置密码的话，连续三次回车即可。在这之后会得到两个文件： id_rsa 和 id_rsa.pub，找到id_rsa.pub文件，复制其内容。</li></ul></li><li><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3></li><li><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><ul><li><p>安装git：<code>yum install git</code></p></li><li><p>创建git账户：<code>adduser git</code></p></li><li><p>添加git账户权限：<code>chmod 740 /etc/sudoers</code></p></li><li><p>编辑sudoers：<code>vim /etc/sudoers</code></p><ul><li>在<code>root ALL=(ALL) ALL</code> 下面添加<code>git    ALL=(ALL)   ALL</code></li></ul></li><li><p>改回权限：<code>chmod 400 /etc/sudoers</code></p></li><li><p>设置git账户密码：<code>passwd git</code></p></li><li><p>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p><pre class="line-numbers language-shell"><code class="language-shell">su gitmkdir ~/.sshvim ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>按”i”进入编辑模式，将本地生成的id_rsa.pub文件中的公钥复制到authorized_keys中，按”esc”，然后按”:wq”，保存退出。</li></ul></li><li><p>接着，输入一下命令，赋予权限</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 600 /home/git/.ssh/authorized_keyschmod 700 /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后输入你之前配置的git密码，无报错就说明好了。</p><p>打开终端，输入以下命令，其中SERVER填写自己的云主机ip，执行输入yes后不用密码说明配置成功了。</p><pre class="line-numbers language-shell"><code class="language-shell">ssh -v git@SERVER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h4 id="创建仓库目录及相关配置"><a href="#创建仓库目录及相关配置" class="headerlink" title="创建仓库目录及相关配置"></a>创建仓库目录及相关配置</h4><ul><li><p>创建目录</p><ul><li>在var目录下创建repo作为Git仓库目录，返回服务端命令行切换到root账户，然后输入：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir /var/repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋予权限</p><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repochmod -R 755 /var/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建hexo目录作为网站根目录，并赋予权限：</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir /var/hexochown -R git:git /var/hexochmod -R 755 /var/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个空白的git仓库</p><pre class="line-numbers language-shell"><code class="language-shell">cd /var/repogit init --bare hexo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建一个新的 Git 钩子，用于自动部署</p><ul><li>在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim /var/repo/hexo.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>进入编辑模式，然后将下面那两行代码粘贴进去，保存退出。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashgit --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改权限</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repo/hexo.git/hooks/post-receivechmod +x /var/repo/hexo.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Git仓库搭建完毕</p></li></ul></li><li><h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><ul><li>具体步骤查看本微博中Ngnix篇</li></ul></li><li><h4 id="修改Hexo配置"><a href="#修改Hexo配置" class="headerlink" title="修改Hexo配置"></a>修改Hexo配置</h4><ul><li>进入本地电脑hexo博客的根目录，编辑<strong>站点配置文件 _config.yml</strong>，找到deploy，修改成以下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">deploy:  type: git  #repo改为repo: git@你的域名:/var/repo/hexo.git  repo: git@example.com:/var/repo/hexo.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后在本地电脑hexo博客的根目录，打开终端，输入以下命令部署</li></ul><pre class="line-numbers language-shell"><code class="language-shell">hexo cleanhexo dhexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>可能出现问题，导致部署到git失败。</p></li><li><p>问题一：权限</p><img src="/2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/1.png" title="git发布失败"><ul><li>解决：在服务器终端输入以下命令即可</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repo/chown -R git:git /var/hexo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后再<code>hexo d -g</code>部署，用域名访问即可看到部署成功了。</li></ul></li><li><p>问题二：秘钥</p><ul><li><p>在使用git提交代码时出现 fatal: Could not read from remote repository 这个错误</p></li><li><p>解决：</p><ul><li>首先，将本地生成的 id_rsa以及id_rsa.pub这两个文件删除掉</li><li>然后，使用命令 ssh-keygen -t rsa -C “邮箱地址”重新生成密钥</li><li>最后，重新将id_rsa.pub文件里的内容复制到服务器的authorized_keys中</li></ul></li></ul></li><li><p>问题三</p><ul><li><p>Git提交时提示‘The file will have its original line endings in your working directory’</p></li><li><p>解决：</p><ul><li>Gitshell中输入如下命令解决：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">git config --global core.autocrlf false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux调试常用命令</title>
      <link href="2021/05/18/linux-diao-shi-chang-yong-ming-ling/"/>
      <url>2021/05/18/linux-diao-shi-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Linux 查看端口占用情况</p><ul><li><code>lsof</code>：lsof -i 需要 root 用户的权限来执行</li></ul><pre class="line-numbers language-shell"><code class="language-shell">lsof -i:端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># lsof -i:8000COMMAND   PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAMEnodejs  26993 root   10u  IPv4 37999514      0t0  TCP *:8000 (LISTEN)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>netstat</code>：netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">netstat -tunlp | grep 端口号-t (tcp) 仅显示tcp相关选项-u (udp)仅显示udp相关选项-n 拒绝显示别名，能显示数字的全部转化为数字-l 仅列出在Listen(监听)的服务状态-p 显示建立相关链接的程序名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># netstat -tunlp | grep 8000tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      26993/nodejs   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更多命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">netstat -ntlp   //查看当前所有tcp端口netstat -ntulp | grep 80   //查看所有80端口使用情况netstat -ntulp | grep 3306   //查看所有3306端口使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>netstat无法显示PID或进程名<ul><li>解决：使用root执行</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name   tcp        0      0 172.23.154.139:56000    0.0.0.0:*               LISTEN      131/sshd            tcp        0      0 172.23.154.139:36000    0.0.0.0:*               LISTEN      125/sshd            tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      32547/mysqld        tcp        0      0 0.0.0.0:41069           0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:31101           0.0.0.0:*               LISTEN      -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>linux 读写权限</p><ul><li>设置文件夹的读写权限:<ul><li>读取权限 r = 4 </li><li>写入权限 w = 2 </li><li>执行权限 x = 1 </li><li>sudo chmod -R 777 /data</li></ul></li><li>权限码描述<ul><li>sudo chmod 600 ××× （只有所有者有读和写的权限）</li><li>sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</li><li>sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）</li><li>sudo chmod 666 ××× （每个人都有读和写的权限）</li><li>sudo chmod 777 ××× （每个人都有读和写以及执行的权限）</li></ul></li><li>-R表示包含设置所有子目录</li></ul></li><li><p>Linux移动文件夹</p><ul><li>mv</li></ul></li><li><p>Linux复制文件夹及全部子文件</p><ul><li>cp -r </li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装mysql</title>
      <link href="2021/05/18/linux-an-zhuang-mysql/"/>
      <url>2021/05/18/linux-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<blockquote><p>卸载历史版本</p></blockquote><ul><li>查询系统是否已安装mysql，如果已安装则卸载，并删除mysql相关目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">rpm -qa mysql*find / -name mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>解压</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd /opt/tar -zvxf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装</p></blockquote><ul><li>如果目录下磁盘空间较小，可以将数据目录放在其他位置，在初始化参数中数据文件目录以及/etc/my.cnf 文件中写清</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mv mysql-5.7.28-linux-glibc2.12-x86_64 /usr/local/mysqlcd /usr/local/mysql/mkdir datagroupadd mysqluseradd -r -g mysql mysqlchown -R mysql:mysql /usr/local/mysql/cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqldln -s /usr/local/mysql/bin/mysql /usr/bin/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化</p></blockquote><ul><li>删除系统默认的配置文件，复制配置信息到/etc/my.cnf 中</li></ul><pre class="line-numbers language-shell"><code class="language-shell">rm -rf /etc/my.cnf /etc/my.cnf.d /usr/my.cnf /usr/my-new.cnftouch /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置信息如下（二选其一）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/usr/local/mysql/mysql.socksql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESport=13306# 不区分大小写lower_case_table_names=1# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0#skip-grant-tables[mysqld_safe]#log-error=/var/log/mariadb/mariadb.log#pid-file=/var/run/mariadb/mariadb.pid# include all files from the config directory[client]socket=/usr/local/mysql/mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/usr/local/mysql/mysql.socksql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# 访问端口port = 13306# 不区分大小写lower_case_table_names=1# 允许连接的客户端IP。临时只允许通过本地访问数据库,禁止外部连接.删除或注释掉bindaddress即可放开访问权限# bind-address = 127.0.0.1# 开启事件功能event_scheduler=ON# ------开始 慢SQL日志相关配置----------------# 开启慢SQL记录slow_query_log = 1# 记录执行时间超过3秒的SQL语句long_query_time = 5# 指定慢SQL记录输出日志文件slow_query_log_file = slow.log# 是否记录未走索引的SQL语句log_queries_not_using_indexes = 0log_throttle_queries_not_using_indexes = 500# 日志内容过期时间expire_logs_days = 30# 过滤最小检索行数min_examined_row_limit = 100binlog-rows-query-log-events = 1log-bin-trust-function-creators = 1log_timestamps=systemlog_slow_admin_statements = 1log_slow_slave_statements = 1# ------结束 慢SQL日志相关配置----------------# 避免timestamp格式数据无法导入问题explicit_defaults_for_timestamp = ON# Disabling symbolic-links is recommended to prevent assorted securityriskssymbolic-links=0[client]socket=/usr/local/mysql/mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化mysql数据库</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd bin/./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>启动mysql服务</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd ../support-files/./mysql.server start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>配置</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -p输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>进入mysql交互操作界面</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--修改密码</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'Root@123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--开启远程访问</span>mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> <span class="token keyword">user</span><span class="token punctuation">.</span>Host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">User</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--刷新权限</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>防火墙开放，测试连接</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --state    #查看状态firwall-cmd --permanent --add-port=13306/tcp #开放13306端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx.conf常用配置</title>
      <link href="2021/05/18/nginx-conf-chang-yong-pei-zhi/"/>
      <url>2021/05/18/nginx-conf-chang-yong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>https</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {    #    listen       80;    #    server_name  192.168.8.104;#        location /test/file {#            # 服务默认启动目录 #           alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    server {        listen       9998 ssl;        server_name  localhost;        ssl_certificate      server.crt;        ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            #静态资源路径            root   html/webim;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>http</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {        #listen       80;        #server_name  192.168.8.104;        #location /test/file {            # 服务默认启动目录     #       alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    server {        listen            8081;        server_name        localhost;        location /{            root html\static;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        location /api/{            proxy_pass http://localhost:5000/;            proxy_set_header Host $http_host;            proxy_set_header X-Real_IP $remote_addr;            proxy_set_header REMOTE-HOST $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            add_header Access-Control-Allow-Origin *;            add_header Access-Control-Allow-Methods "DELETE,POST,GET,OPTIONS";            add_header Access-Control-Allow-Headers "Origin,Authorization,Accept";            add_header Access-Control-Allow-Credentials true;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       9998 ssl;   #     server_name  localhost;  #      ssl_certificate      server.crt; #       ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;#        ssl_session_timeout  5m;        #ssl_ciphers  HIGH:!aNULL:!MD5;        #ssl_prefer_server_ciphers  on;        #location / {            #静态资源路径          #  root   html/webim;         #   index  index.html index.htm;        #    chunked_transfer_encoding on;        #    add_header Cache-Control no-cache;        #    try_files $uri $uri/ /index.html;     #   }    #    error_page 500 502 503 504 /50x.html;    #    location = /50x.html {    #        root html;    #    }    #}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目部署tomcat后，页面刷新404</title>
      <link href="2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/"/>
      <url>2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>将 npm run bulid 打包好的 dist文件放到 webapps 目录下<ul><li>访问路径：<code>http://ip:端口/dist</code></li><li>能访问成功，但可能刷新 404</li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>在上传到tomcat 项目的根目录下  创建WEB-INF/web.xml </li><li>在web.xml写入</li></ul><pre class="line-numbers language-xml"><code class="language-xml">在这里插入代码片  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaeehttp://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span> <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Router for Tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用elementUI组件库在tomcat服务器部署后图标不显示</title>
      <link href="2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/"/>
      <url>2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>vue使用elementUI组件库在tomcat服务器部署后图标不能正常显示</li></ul></li><li><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>通过查看 /build/webpack.base.conf.js 文件可以发现，woff 或 ttf 这些字体会经由 url-loader 处理后在 static/fonts 目录下生成相应的文件。</li><li>也就是说实际应该通过 /static/fonts/** 路径来获取字体图标，而实际我们通过调试窗口发现，却是请求 /static/css/static/fonts/**，自然报错误。 <ul><li><code>GET https://localhost:8443/static/css/static/fonts/element-icons.535877f.woff net::ERR_ABORTED 404</code></li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>打开build/utils.js文件，加上 publicPath: ‘../../‘，如下所示：</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        use<span class="token punctuation">:</span> loaders<span class="token punctuation">,</span>        fallback<span class="token punctuation">:</span> <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span><span class="token string">"../../"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新build，重新部署之后，可以正常显示</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> vue </category>
          
          <category> element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat生成证书配置https</title>
      <link href="2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/"/>
      <url>2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/</url>
      
        <content type="html"><![CDATA[<blockquote><p>tomcat之https配置（生成证书）</p></blockquote><ul><li><h4 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h4><ul><li><p>管理员打开cmd窗口，输入</p><p><code>keytool -genkey -alias tomcat -keyalg RSA -keystore D:\ssl\tomcat.keystore -validity 36500</code></p><p>keytool 是jdk中的工具。</p><p><code>D:\ssl\tomcat.keystore</code> 是证书文件保存位置</p><p><code>tomcat.keystore</code>是证书文件名称</p><p><code>-validity 36500</code> 是证书有效期，36500表示100年，默认值是90天。</p></li><li><p>输入密钥库口令</p><ul><li>输入密钥库密码：此处需要输入大于6个字符的字符串，例如123456</li></ul></li><li><p>输入两次通过后，弹出一些问题</p><ul><li><p>“您的名字与姓氏是什么？” 这是必填项，并且必须是TOMCAT部署主机的域名或者IP [如：baidu.com 或者 127.0.0.1]，就是你将来要在浏览器中输入的访问地址;</p><p>其他得问题可填可不填，最后对照信息正确则输入y，不正确打算重来则输入n。</p></li></ul></li><li><p>输入密钥口令</p><p>密钥库口令，这里我理解的是tomcat的主密码，会在tomcat配置文件中使用，建议输入与keystore的密码一致，设置其它密码也可以生成完成，可在指定目录下找到证书文件。</p></li></ul></li><li><h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><ul><li><p>修改server.xml</p><ul><li>打开tomcat目录下conf/server.xml文件，修改如下</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8999<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>               <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span>                <span class="token attr-name">compression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span>                              <span class="token attr-name">compressionMinSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span>                <span class="token attr-name">maxPostSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>                <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token punctuation">/></span></span>               <span class="token comment" spellcheck="true">&lt;!-- A "Connector" using the shared thread pool--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>        <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span>        <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span>        <span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span>        <span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">sslProtocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TLS<span class="token punctuation">"</span></span>        <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/ssl/tomcat.keystore<span class="token punctuation">"</span></span>        <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改web.xml</p><ul><li>打开conf/web.xml，在最后增加以下代码：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login-config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-method</span><span class="token punctuation">></span></span>CLIENT-CERT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>realm-name</span><span class="token punctuation">></span></span>Client Cert Users-only Area<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>realm-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span><span class="token punctuation">></span></span>SSL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-data-constraint</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transport-guarantee</span><span class="token punctuation">></span></span>CONFIDENTIAL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transport-guarantee</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-data-constraint</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>至此tomcat配置完成，启动tomcat即可使用ssl，在浏览器输入localhost:8080</p><ul><li>Tomcat配置完成后，使用Https访问，Chrome会提示安全警告，点击“高级”，继续访问即可，之后再https下使用ip地址访问是没有问题的。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx生成证书</title>
      <link href="2021/05/08/nginx-sheng-cheng-zheng-shu/"/>
      <url>2021/05/08/nginx-sheng-cheng-zheng-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="OpenSSl安装配置"><a href="#OpenSSl安装配置" class="headerlink" title="OpenSSl安装配置"></a>OpenSSl安装配置</h4><ul><li>下载链接：<code>https://slproweb.com/products/Win32OpenSSL.html</code></li><li>安装OpenSSL，右键以管理员身份运行，选择安装路径，安装路径不要带中文。</li><li>OpenSSl环境变量配置<ul><li>变量名：OPENSSL_HOME</li><li>变量值：F:\tool\OpenSSL-Win64</li></ul></li><li>配置PATH<ul><li>在最后添加%OPENSSL_HOME%\bin</li></ul></li></ul></li><li><h4 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h4><ul><li>打开nginx安装目录，进入F:\nginux\nginx-1.17.1\conf，在地址栏输入cmd，按回车，打开命令行窗口</li><li>执行命令：openssl genrsa -des3 -out server.key，需要你设置一个密码</li><li>执创建csr证书，命令：openssl req -new -key server.key -out server.csr，照实填写即可（此处如果报错需先执行：set OPENSSL_CONF=F:\tool\OpenSSL-Win64\bin\openssl.cfg 设置配置文件路径）</li><li>拷贝目录下生成的server.key并重命名为server.key.org</li><li>去除密码，命令：openssl rsa -in server.key.org -out server.key</li><li>生成证书文件server.crt，命令：openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt （-days 365为证书生效时间，可以设长点）</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat部署vue项目</title>
      <link href="2021/05/08/tomcat-bu-shu-vue-xiang-mu/"/>
      <url>2021/05/08/tomcat-bu-shu-vue-xiang-mu/</url>
      
        <content type="html"><![CDATA[<ul><li><p>修改vue项目下config/index.js，注意dev和build都要改assetsPublicPath的配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改路由配置src/router/index.js，增加配置base: ‘/xxx/‘，也可为空。如果这里不配置，会导致部署的项目首页访问一片空白，但不报错，且引入的文件有正常加载</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如打包文件存放在Tomcat/webapps/xxxx下，那么base就这么写，如果放到ROOT下，则base:'/'</span>  base<span class="token punctuation">:</span> <span class="token string">'/xxx/'</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行npm run build，将打包生成的dist目录下的所有东西粘贴到Tomcat/webapps/xxxx路径下，xxxx是自定义的项目名</p></li><li><p>启动tomcat，在tomcat下的bin目录中双击startup.bat文件，或者打开命令行去访问startup.bat，</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自动触发标签点击事件</title>
      <link href="2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/"/>
      <url>2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题：页面加载时，触发某个元素的点击事件</p></li><li><p>解决思路</p><ul><li><code>directives</code></li><li><code>v-trigger</code><ul><li>directives 在生命周期内用</li></ul></li></ul><pre class="line-numbers language-vue"><code class="language-vue">export default {    data() {        return {             };    },    directives:{        'local-test':function(el,binding,vnode){            /** el可以获取当前dom节点，并且进行编译，也可以操作事件 **/            /** binding指的是一个对象，一般不用 **/            /** vnode 是 Vue 编译生成的虚拟节点 **/            //el.style.border="1px solid red";  //操作style所有样式            //console.log(el.value);  //获取v-model的值            //console.log(el.dataset.name) //data-name绑定的值，需要el.dataset来获取            //console.log(vnode.context.$route); //获取当前路由信息            trigger:{             inserted(el,binging){             console.log(el)             el.click()             // $(el).trigger('click')            }        }    },    components:{    },    filters:{    },    watch:{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目部署Nginx后，页面刷新404</title>
      <link href="2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/"/>
      <url>2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/</url>
      
        <content type="html"><![CDATA[<p>问题：</p><p>​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。</p><p>原因：</p><p>​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。</p><p>解决：</p><p>   在Nginx配置文件nginx.conf中的location节点加入如下配置。(index.html根据实际页面配置）</p><pre class="line-numbers language-shell"><code class="language-shell">try_files $uri $uri/ /index.html;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle账户解锁</title>
      <link href="2021/03/24/oracle-zhang-hu-jie-suo/"/>
      <url>2021/03/24/oracle-zhang-hu-jie-suo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Oracle账户被锁：the account is locked</p><ul><li>比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。</li><li>在Oracle中，连续十次尝试登录不成功，那么此账户将会被锁定</li><li>安装结束，弹出如下界面时，未正确选择“口令管理”，将scott用户解锁，并设置密码</li></ul></li><li><p><strong>解决方案步骤1：</strong></p><ul><li>Win+R打开命令行输入：sqlplus</li><li>使用system或sys账户登录，口令即安装Oracle时输入的管理口令。</li></ul></li><li><p><strong>解决方案步骤2：</strong></p><ul><li>使用命令解锁用户。命令为：alter user scott account unlock;</li></ul></li><li><p><strong>解决方案步骤3:</strong></p><ul><li>重置用户密码。命令为：alter user username identified by password;其中username为用户名（如：scott），password为新密码。</li></ul></li><li><p><strong>解决方案步骤4:</strong></p><ul><li>打开命令窗口，输入“sqlplus”命令，输入要登陆的用户名密码，查询数据库。</li></ul></li><li><p>scott用户解锁已完成</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的sql_mode设置</title>
      <link href="2021/03/03/mysql-de-sql-mode-she-zhi/"/>
      <url>2021/03/03/mysql-de-sql-mode-she-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li>查询sql_mode</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select @@GLOBAL.sql_mode或select @@SESSION.sql_mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置sql_mode<ul><li>通过命令设置</li><li>在配置文件中设置<ul><li>在/etc/my.cnf的[mysqld]下设置</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SET GLOBAL sql_mode = 'modes...';或SET SESSION sql_mode = 'modes...';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sql_mode常用值</li></ul><pre class="line-numbers language-shell"><code class="language-shell">ONLY_FULL_GROUP_BY对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中NO_AUTO_VALUE_ON_ZERO该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。STRICT_TRANS_TABLES在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制NO_ZERO_IN_DATE在严格模式下，不允许日期和月份为零NO_ZERO_DATE设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告ERROR_FOR_DIVISION_BY_ZERO在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULLNO_AUTO_CREATE_USER禁止GRANT创建密码为空的用户NO_ENGINE_SUBSTITUTION如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常PIPES_AS_CONCAT将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似ANSI_QUOTES启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符ORACLE的sql_mode设置等同：PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER.如果使用mysql，为了继续保留大家使用oracle的习惯，可以对mysql的sql_mode设置如下：在my.cnf添加如下配置[mysqld]sql_mode='ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
          <category> sql_Mode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> sql_Mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成websocket</title>
      <link href="2021/02/20/springboot-ji-cheng-websocket/"/>
      <url>2021/02/20/springboot-ji-cheng-websocket/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息"><a href="#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息" class="headerlink" title="一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息"></a>一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息</h3><ul><li><p>STOMP协议介绍</p><ul><li>STOMP，Streaming Text Orientated Message Protocol，是流文本定向消息协议，是一种为MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。</li><li>它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理(Broker)进行交互，类似于OpenWire(一种二进制协议)。</li><li>由于其设计简单，很容易开发客户端，因此在多种语言和多种平台上得到广泛应用。其中最流行的STOMP消息代理是Apache ActiveMQ。</li></ul></li><li><p>STOMP协议工作于TCP协议之上，使用了下列命令：</p><ul><li>SEND 发送</li><li>SUBSCRIBE 订阅</li><li>UNSUBSCRIBE 退订</li><li>BEGIN 开始</li><li>COMMIT 提交</li><li>ABORT 取消</li><li>ACK 确认</li><li>DISCONNECT 断开</li></ul></li><li><p>SpringBoot使用STOMP消息</p><ul><li>添加pom文件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建<code>WebSocketStompConfig</code><ul><li>java方式配置websocket stomp使用注解@EnableWebSocketMessageBroker，实现WebSocketMessageBrokerConfigurer</li><li>@EnableWebSocketMessageBroker注解。这表明这个配置类不仅配置了WebSocket，还配置了基于代理的STOMP消息。它重载了registerStompEndpoints()方法，将“/webServer”注册为STOMP端点。这个路径与之前发送和接收消息的目的地路径有所不同。这是一个端点，客户端在订阅或发布消息到目的地路径前，要连接该端点。将其目的地前缀设置为“/topic”和“/user”。这样的话，Spring就能知道所有目的地前缀为“/topic”或“/user”的消息都会发送到STOMP代理中。根据你所选择的STOMP代理不同，目的地的可选前缀也会有所限制。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">/** * 注解开启STOMP协议来传输基于代理的消息，此时控制器支持使用@MessageMapping */</span><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册STOMP端点，发布或者订阅消息的时候需要连接此端点     * SpringBoot2.4.0版本之前 使用setAllowedOrigins *表示允许跨域     * SpringBoot2.4.0版本之后 使用setAllowedOriginPatterns *表示允许跨域     * withSockJS  表示开始SockJS支持     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span>StompEndpointRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//广播</span>        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/webServer"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置消息代理,哪种路径的消息会进行代理处理     * enableSimpleBroker 服务端推送给客户端的路径前缀     * /topic 代表发布广播，即群发     * /user 代表点对点，即发指定用户     * setApplicationDestinationPrefixes 客户端给服务器端发送消息或订阅主题的一个前缀     * 例如客户端发送消息的目的地为/app/sendTest，则对应控制层@MessageMapping(“/sendTest”)     * 客户端订阅主题的目的地为/app/subscribeTest，则对应控制层@SubscribeMapping(“/subscribeTest”)     * setPathMatcher 可以以“.”来分割路径     * setUserDestinationPrefix 点对点使用的订阅前缀（客户端订阅路径上会体现出来），不设置的话，默认也是/user/     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span>MessageBrokerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span><span class="token string">"/topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setUserDestinationPrefix</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//registry.setPathMatcher(new AntPathMatcher("."));</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置发送与接收的消息参数，可以指定消息字节大小，缓存大小，发送超时时间     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span>WebSocketTransportRegistration registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输入消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输出消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientOutboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法的参数类型     * @param argumentResolvers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法返回值类型     * @param returnValueHandlers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addReturnValueHandlers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> returnValueHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加自定义的消息转换器     * spring 提供多种默认的消息转换器     * 返回false,不会添加消息转换器     * 返回true，会添加默认的消息转换器     * 当然也可以把自己写的消息转换器添加到转换链中     * @param messageConverters     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageConverter<span class="token operator">></span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息实体类</p><ul><li>任意对象都可以</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MessageParam{"</span> <span class="token operator">+</span>                <span class="token string">"content='"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageResult</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JSON 转换 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JsonUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把Java对象转换成json字符串     *     * @param object 待转化为JSON字符串的Java对象     * @return json串 or null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">parseObjToJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            string <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Json字符串信息转换成对应的Java对象     *     * @param json json字符串对象     * @param c    对应的类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseJsonToObj</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 日期工具类 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 格式化 LocalDateTime     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime localDateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ldStr <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>ldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ldStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 全局工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获得指定数目的UUID     *     * @param number int 需要获得的UUID数量     * @return String[] UUID数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> retArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得一个UUID     *     * @return String UUID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉“-”符号</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>webSocket控制层</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动推送模板     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> SimpMessagingTemplate template<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 广播推送     * @MessageMapping 接收客户端消息     * @SendTo 会将接收到的消息发送到指定的路径目的地，所有订阅该路径的用户都能收到，属于广播。     * result会被广播到”/topic/messages”这个订阅路径中，只要客户端订阅了这条路径，不管是哪个用户，都会接收到消息     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 精准推送，点对点订阅     * @MessageMapping接收客户端消息     * @SendToUser 会将消息路由到发送者对应的目的地。默认该注解前缀为/user。     * 如：用户订阅/user/topic/messages ，在@SendToUser('/topic/messages')查找目的地时，     * 会将目的地的转化为/user/{name}/topic/messages, 该操作是认为用户登录并且授权认证，使用name作为目的地标识。     * 发给消息来源的那个用户。（就是谁请求给谁，不会发给所有用户，区分就是依照name来区分的)。     * 此外该注解还有个broadcast属性，表明是否广播。就是当有同一个用户登录多个session时，是否都能收到。取值true/false.     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 点对点订阅     * 客户端订阅“/app/hello3”,服务器直接返回消息     * @return     */</span>    <span class="token annotation punctuation">@SubscribeMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"客户端订阅了/app/hello3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动精准推送，根据标识 “content” 向订阅了 /user/{{content}}/messages 路径的客户端推送消息     * content可以设置为用户标识     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 服务端发送消息给:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动广播推送，向所有订阅了“/messages”路径的客户端发送消息     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">" 上线了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>websocket测试页</p><ul><li>引入<code>jquery.js、sockjs.js、stomp.js</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket测试页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>断开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversationDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>发送消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send_message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>返回消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back_message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stompClient <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setConnected</span><span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'conversationDiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> connected <span class="token operator">?</span> <span class="token string">'visible'</span> <span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#response'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer"</span>    <span class="token comment" spellcheck="true">// http://localhost:8081/webServer</span>    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8081/webServer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>    stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/topic/messages”，对应@SendTo("/topic/messages")</span>        <span class="token comment" spellcheck="true">//或对应template.convertAndSend("/topic/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/user/topic/messages”</span>        <span class="token comment" spellcheck="true">//对应@SendToUser("/topic/messages")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应@SubscribeMapping("/hello3")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/app/hello3'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端订阅“/user/'+$('#username').val()+'/messages”,</span>        <span class="token comment" spellcheck="true">// 对应template.convertAndSendToUser("username", "/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 断开连接</span><span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span>    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"/app/hello5"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>content<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收返回的消息</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#back_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、Vue中使用webSocket"><a href="#二、Vue中使用webSocket" class="headerlink" title="二、Vue中使用webSocket"></a>二、Vue中使用webSocket</h3><ul><li>安装sockjs-client 和 stompjs</li></ul><pre class="line-numbers language-console"><code class="language-console">npm install sockjs-clientnpm install stompjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在vue项目中引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> SockJS <span class="token keyword">from</span> <span class="token string">'sockjs-client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Stomp <span class="token keyword">from</span> <span class="token string">'stompjs'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义一个全局变量，存放开启的webSocket实例</li></ul><pre class="line-numbers language-js"><code class="language-js">stompClient<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开启webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接webSocket 使用socket.js</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取用户的userId</span>      <span class="token keyword">let</span> userId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loginInfo<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer" `${this.$api}/webServer`</span>      <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/webServer`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// setConnected(true);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅消息路径  </span>        <span class="token comment" spellcheck="true">// join</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/join'</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// startMatch</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/startMatch'</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关闭webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">   <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 断开连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// setConnected(false);</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装mysql5.7</title>
      <link href="2021/02/01/docker-an-zhuang-mysql5-7/"/>
      <url>2021/02/01/docker-an-zhuang-mysql5-7/</url>
      
        <content type="html"><![CDATA[<ul><li>docker查找mysql5.7镜像<ul><li><code>docker search mysql5.7</code></li></ul></li><li>拉取MySQL镜像(:5.7 表示5.7版本)<ul><li><code>docker pull mysql:5.7</code></li></ul></li><li>创建挂载目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /home/app/mysql/confmkdir -p /home/app/mysql/datamkdir -p /home/app/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建my.cnf</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /home/app/mysql/conf/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在my.cnf中写入</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA## The MySQL  Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[mysqld]pid-file        = /var/run/mysqld/mysqld.pidsocket          = /var/run/mysqld/mysqld.sockdatadir         = /var/lib/mysqlsecure-file-priv= NULL# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# Custom config should go here!includedir /etc/mysql/conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行MySQL容器</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker run --restart=always -d --privileged=true -v /home/app/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /home/app/mysql/logs:/logs -v /home/app/mysql/data/mysql:/var/lib/mysql  -p 13306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=Root@123 mysql:5.7#参数说明run　run 是运行一个容器-d　 表示后台运行--restart=always 表示随docker重启-p　　表示容器内部端口和服务器端口映射关联--privileged=true　设置MySQL的root用户权限, 否则外部不能使用root用户登陆-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码--name mysql　　　　 设值容器名称为mysqlmysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器--character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci 设值数据库默认编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>新建MySQL用户</p><ul><li>先进入容器<code>docker exec -it mysql8 bash</code></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/1.png" title="进入容器"><ul><li>登录root用户：<code>mysql -uroot -p</code>，输入密码</li><li>新建用户<ul><li><code>CREATE USER 'username'@'host' IDENTIFIED BY 'password';</code><ul><li>username：你将创建的用户名</li><li>localhost：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li><li>实例<code>CREATE USER 'test'@'localhost' IDENTIFIED BY 'Test@123';</code></li></ul></li><li>更改host，设置可远程连接<ul><li><code>use mysql</code></li><li><code>update user set host='%' where user='username';</code></li></ul></li></ul></li><li>授权<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host'</code><ul><li>privileges：用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所有的权限则使用<code>ALL</code></li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li><li>实例<code>GRANT ALL ON *.* TO 'test'@'localhost';</code></li></ul></li><li>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;</code></li></ul></li></ul></li><li>设置与更改用户密码<ul><li>用于mysql5.7：<code>SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');</code><ul><li>更改当前登录用户密码：<code>SET PASSWORD = PASSWORD("newpassword");</code></li></ul></li><li>用于mysql8：<code>ALTER USER 'username'@'host' IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY 'newpassword';</code></li></ul></li><li>撤销用户权限<ul><li><code>REVOKE privilege ON databasename.tablename FROM 'username'@'host';</code></li><li>实例：<code>REVOKE ALL ON *.* FROM 'test'@'localhost';</code></li></ul></li><li>删除用户<ul><li><code>DROP USER 'username'@'host';</code></li><li>实例：<code>DROP USER 'test'@'localhost';</code></li></ul></li></ul></li><li><p>DBeaver连接测试</p></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/2.png" title="DBeaver测试链接"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装oracle11g</title>
      <link href="2021/02/01/docker-an-zhuang-oracle11g/"/>
      <url>2021/02/01/docker-an-zhuang-oracle11g/</url>
      
        <content type="html"><![CDATA[<ul><li><p>安装Docker</p><p>安装环境：Centos 7.5</p><ul><li>安装wget命令 </li><li>下载阿里云docker社区版 yum源<ul><li><code>cd /etc/yum.repos.d/</code></li><li><code>wget http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li></ul></li><li>查看docker安装包：<code>yum list | grep docker</code></li><li>安装Docker Ce 社区版本：<code>yum install -y docker-ce.x86_64</code></li><li>设置开机启动：<code>systemctl enable docker</code></li><li>更新xfsprogs：<code>yum -y update xfsprogs</code></li><li>启动docker：<code>systemctl start docker</code></li><li>查看版本：<code>docker version</code></li><li>查看详细信息：<code>docker info</code></li></ul></li><li><p>配置阿里云镜像加速</p><ul><li>阿里云镜像加速器配置地址：<code>https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</code></li><li>配置步骤：<code>vi /etc/docker/daemon.json</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">{"registry-mirrors": ["https://5xok66d4.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>重启：<code>systemctl daemon-reload &amp;&amp; systemctl restart docker</code></li></ul></li><li><p>常用命令</p><ul><li>查看镜像<code>docker images</code></li><li>搜索镜像<code>docker search xxxx</code></li><li>下载xxx镜像：<code>docker pull xxxx</code></li><li>本地镜像的删除：<code>docker rmi xxxx</code></li><li>创建并启动容器：<code>docker run -itd --name=自定义名 xxx:版本号</code></li><li>查看本地所有的容器：docker ps -a</li><li>查看本地正在运行的容器：docker ps</li><li>停止容器：<code>docker stop CONTAINER_ID / CONTAINER_NAME</code></li><li>一次性停止所有容器：<code>docker stop $(docker ps -a -q)</code></li><li>启动容器：<code>docker start CONTAINER_ID / CONTAINER_NAME</code></li><li>重启容器：<code>docker restart CONTAINER_ID / CONTAINER_NAME</code></li><li>删除容器：<code>docker rm CONTAINER_ID / CONTAINER_NAME</code></li><li>强制删除容器：<code>docker rmi -f CONTAINER_ID / CONTAINER_NAME</code></li><li>查看容器详细信息：<code>docker inspect CONTAINER_ID / CONTAINER_NAME</code></li><li>进入容器：<code>docker exec -it CONTAINER_ID /bin/bash</code></li></ul></li><li><p>Docker安装oracle_11g</p><ul><li>搜索oracle_11g镜像<ul><li><code>docker search oracle_11g</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/1.png" title="搜索oracle_11g镜像"><ul><li><p>下载oracle_11g镜像</p><ul><li><p><code>docker pull iatebes/oracle_11g</code> </p><p>或</p></li><li><p><code>docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></p></li><li><p>其余镜像可以自己测试</p></li></ul></li><li><p>查看镜像</p><ul><li><code>docker images</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/2.png" title="查看镜像"><ul><li><p>防火墙设置</p><ul><li>如果选择的是<code>iatebes/oracle_11g</code>镜像，必须先关闭firewall防火墙，并开启iptables防火墙，否则启动容器报以下错误提示：<ul><li>开启iptables防火墙后，需要重启docker</li><li>参考链接<code>https://blog.csdn.net/u013948858/article/details/83115388</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/3.png" title="错误提示"><ul><li>如果选择的是<code>registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code>镜像，可以关闭防护墙，或者给防火墙开放设置的数据库访问端口<ul><li>firewall开放端口<ul><li><code>firewall-cmd --zone=public --add-port=11521/tcp --permanent</code></li><li><code>firewall-cmd --reload</code></li><li><code>firewall-cmd --list-all</code></li></ul></li></ul></li></ul></li><li><p>创建容器并启动</p><ul><li><code>docker run --restart=always -p 11521:1521 --name oracle_11g -d registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></li><li><code>--restart=always</code> ：docker重启时，同时重启容器</li></ul></li><li><p>查看已创建并运行的镜像：<code>docker ps</code></p></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/4.png" title="已创建并运行的镜像"><ul><li>登录 Docker 中 Oracle 软件所在的 oracle 用户<ul><li><code>docker exec -it my_oracle_11g bash</code></li><li>如果进入后是root用户，修改一下root用户以及oracle用户的密码，再切换到oracle用户<ul><li>passwd root</li><li>passwd oracle</li></ul></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/5.png" title="登录 Docker 中 Oracle 软件所在的 oracle 用户"><ul><li>查看 oracle 用户<ul><li><code>id oracle</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/6.png" title="查看 oracle 用户"><ul><li>查找Oracle环境变量<code>.bash_profile</code>文件路径<ul><li>需要切换到root用户</li><li><code>/opt/oracle/.bash_profile</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/7.png" title="查找Oracle环境变量`.bash_profile`文件路径"><ul><li>刷新环境变量<ul><li><code>source /opt/oracle/.bash_profile</code></li></ul></li><li>查看监听<ul><li><code>lsnrctl status</code></li></ul></li></ul></li><li><p>配置软连接</p><ul><li><code>ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</code></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/8.png" title="查看监听"><ul><li>修改system密码<ul><li>oracle 用户下 输入 <code>sqlplus /nolog</code>，实现无用户名登录oracle</li></ul></li><li><code>conn /as sysdba</code>  连接到数据本地数据<ul><li><code>alter user system identified by password;</code> 修改system 密码 为password(你自定义的密码)</li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/9.png" title="修改system密码"></li><li><p>PLSQL测试链接</p><ul><li>输入用户名，口令，与数据库连接串 <code>ip:port/SID</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/10.png" title="PLSQL测试链接"><ul><li><p>从Docker退出到虚拟机</p><img src="/2021/02/01/docker-an-zhuang-oracle11g/11.png" title="从Docker退出到虚拟机"></li></ul><ul><li><p>Docker导入dmp文件到oracle容器</p><ul><li><p>上传文件</p><ul><li>把dmp文件上传到服务器，然后在复制到oracle容器中</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker cp /home/production/test.dmp 4480e931b512:/home/oracle/              dmp文件的全路径             容器id     复制到容器中的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>进入容器</p><pre class="line-numbers language-shell"><code class="language-shell">#查看容器docker ps#进入容器docker exec -it   容器名  /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-shell"><code class="language-shell">#登录 sqlplus   /nolog#使用超级管理员 sysdba默认密码是oracleconnect /as sysdba#创建用户create user test identified by 密码; # 给用户赋予权限grant dba to test; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开始导入dmp文件到oracle</p><pre class="line-numbers language-shell"><code class="language-shell">imp 用户名/密码@ocl file=/home/oracle/test.dmp full=y ignore=y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这里的路径一定要写全路径要不会找不到文件的</li><li>Import terminated successfully without warnings.出现如下字样表示导入成功</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware虚拟机设置静态IP</title>
      <link href="2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/"/>
      <url>2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/</url>
      
        <content type="html"><![CDATA[<p>以<code>VMware® Workstation 16 Pro</code> 为例</p><p>系统 <code>CentOS7.5</code></p><ul><li><p>编辑 =》虚拟网络编辑器 </p><ul><li>点击更改设置</li></ul><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/1.png" title="虚拟网络编辑器界面"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/2.png" title="虚拟网络编辑器界面"></li><li><p>检查宿主机VM8 网卡设置，打开网络和共享中心→ 更改适配器设置→，在VMware Network Adapter VMnet8上单击右键，选择属性按钮打开属性对话框。  </p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/3.png" title="VMware Network Adapter VMnet8"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/4.png" title="VMware Network Adapter VMnet8"></li><li><p>在虚拟机右下角，点击网络适配器按钮，右键选择断开连接，然后再重新连接，确保刚才的设置生效。然后开启虚拟机，输入<code>ifconfig</code>查看当前分配的IP。</p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/5.png" title="查看当前分配的ip"></li><li><p>关闭虚拟机防火墙</p><ul><li><code>systemctl stop firewalld</code></li></ul></li><li><p>关闭防火墙开机启动</p></li><li><p><code>systemctl disable firewalld</code></p></li><li><p>修改网络配置文件</p><ul><li><code>vim etc/sysconfig/network-scripts/xxxx</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#与自己的配置文件对比修改TYPE="Ethernet"PROXY_METHOD="none"BROWSER_ONLY="no"BOOTPROTO="static"IPADDR="192.168.6.128"NETMASK="255.255.255.0"GATEWAY="192.168.6.2"DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens32"UUID="7c379f83-cbd2-42e7-a7f6-0a8bc31c4d88"DEVICE="ens32"ONBOOT="yes"              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ul><li>ping宿主机IP（192.168.2.168）</li><li>宿主机VM8IP（192.168.6.1）</li><li>宿主机与虚拟机之前的网关IP（192.168.6.2）</li><li>ping外网IP或域名，比如（<code>www.baidu.com</code>）</li><li>都可以通则说明虚拟机固定IP设置成功。</li></ul></li><li><p>如果ping外网ip可以通，但是ping 域名，提示<code>ping: www.baidu.com: Name or service not known</code></p><ul><li><p>查看一下<code>DNS</code>的配置<code>cat /etc/resolv.conf</code></p><ul><li>如果发现<code>DNS</code>里面的配置就只有一行注释，则需要对DNS进行配置<code>vim  /etc/resolv.conf</code>，配置如下：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Generated by NetworkManagernameserver 8.8.8.8nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>重启network service</p></li><li><p><code>systemctl restart network</code></p></li><li><p>测试<code>ping www.baidu.com</code></p></li><li><p>通过</p></li><li><p>重启Linux，测试IP是否改变<code>reboot</code></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> VMware </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装oracle</title>
      <link href="2021/01/31/linux-an-zhuang-oracle/"/>
      <url>2021/01/31/linux-an-zhuang-oracle/</url>
      
        <content type="html"><![CDATA[<p>操作系统：CentOS Linux release 7.5.1804 (Core) </p><p>数据库版本：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</p><p>数据库安装包：linux.x64_11gR2_database_1of2.zip、linux.x64_11gR2_database_2of2.zip（可官网下载）</p><h3 id="一、操作系统配置"><a href="#一、操作系统配置" class="headerlink" title="一、操作系统配置"></a>一、操作系统配置</h3><p>注：在Root用户下执行以下步骤</p><ul><li><p>修改用户的 SHELL 的限制（资源限制），修改 /etc/security/limits.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 <code>/etc/pam.d/login</code> 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/pam.d/login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件:</li></ul><pre class="line-numbers language-shell"><code class="language-shell">session required /lib/security/pam_limits.sosession required pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 linux 内核，修改 /etc/sysctl.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表linux系统中可以打开的文件的数量fs.file-max = 6815744# 此参数限制并发未完成的请求，应该设置避免I/O子系统故障fs.aio-max-nr = 1048576# 可以使用的共享内存的总页数kernel.shmall = 2097152# 单个共享内存段的最大值（不能超过自己的内存大小，这里设置的值为2G）kernel.shmmax = 2147483648# 该参数是共享内存段的最大数量,建议用缺省值4096kernel.shmmni = 4096kernel.sem = 250 32000 100 128# IP4的端口可使用范围net.ipv4.ip_local_port_range = 9000 65500# 套接字接收缓冲区大小的缺省值net.core.rmem_default = 4194304# 套接字接收缓冲区大小的最大值net.core.rmem_max = 4194304# 套接字发送缓冲区大小的缺省值net.core.wmem_default = 262144# 套接字发送缓冲区大小的最大值net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>要使 <code>/etc/sysctl.conf</code>更改立即生效，执行以下命令</p><pre class="line-numbers language-shell"><code class="language-shell">sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>显示如下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">fs.file-max = 6815744fs.aio-max-nr = 1048576kernel.shmall = 2097152kernel.shmmax = 2147483648kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 4194304net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑 <code>/etc/profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">if [ $USER = "oracle" ]; thenif [ $SHELL = "/bin/ksh" ]; thenulimit -p 16384ulimit -n 65536elseulimit -u 16384 -n 65536fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出</li></ul></li><li><p>创建相关用户和组，作为软件安装和支持组的拥有者</p><ul><li>创建Oracle用户和密码,输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">groupadd  oinstall  groupadd  dbauseradd -g oinstall -g dba -m oraclepasswd oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后会让你输入密码，密码任意输入2次，但必须保持一致，回车确认</li></ul></li><li><p>创建数据库软件目录和数据文件存放目录，目录的位置，根据自己的情况来定，注意磁盘空间即可，这里我把其放到 oracle 用户下,输入命令</p><pre class="line-numbers language-shell"><code class="language-shell"> mkdir /home/oracle/app mkdir /home/oracle/app/oracle mkdir /home/oracle/app/oradata mkdir /home/oracle/app/oracle/product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更改目录属主为Oracle用户所有，输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> chown -Rf oracle:oinstall /home/oracle/app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 oracle 用户的环境变量，首先，切换到新创建的 oracle 用户下</p><pre class="line-numbers language-shell"><code class="language-shell">su – oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<code>.bash_profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i编辑 <code>.bash_profile</code>,进入编辑模式，增加以下内容，指定的 <code>ORACLE_SID</code> 为数据库实例名</li></ul><pre class="line-numbers language-shell"><code class="language-shell">export ORACLE_BASE=/home/oracle/appexport ORACLE_HOME=$ORACLE_BASE/oracle/product/11.2.0/dbhome_1export ORACLE_SID=orclexport PATH=$PATH:$HOME/bin:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出。</li></ul></li></ul><h3 id="二、安装-Oracle"><a href="#二、安装-Oracle" class="headerlink" title="二、安装 Oracle"></a>二、安装 Oracle</h3><ul><li><p>当上述系统要求操作全部完成后，注销系统，在图形界面以 Oracle 用户登陆。首先将下载的 Oracle 安装包 使用 FTP 发送到 Linux系统中。</p></li><li><p>运行 unzip 命令解压 oracle 安装文件，输入命令：</p><pre class="line-numbers language-shell"><code class="language-shell">unzip linux.x64_11gR2_database_1of2.zipunzip linux.x64_11gR2_database_2of2.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解压完成后 cd 进入其解压后的目录 database 使用 ls 命令可以查看解压后 database 所包含的文件</p><pre class="line-numbers language-shell"><code class="language-shell">doc  install  response  rpm  runInstaller  sshsetup  stage  welcome.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋于刚解压出来的文件夹权限</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 777 -R /home/oracle/database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装前检测依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">#可直接 yum -y install ... 安装以下依赖包rpm -q binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel gcc- gcc-c++ libaio-devel libaio libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel pdkshrpm -q binutils compat-db control-center gcc gcc-c++ glibc glibc-common gnome-libs libstdc++ libstdc++-devel make pdksh sysstat xscreensaver libaio openmotif21rpm -q gcc make binutils setarch compat-db compat-gcc compat-gcc-c++ compat-libstdc++ compat-libstdc++-devel unixODBC unixODBC-devel libaio-devel sysstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在oracle用户上执行安装oracle数据库软件</p><ul><li>进入<code>/home/oracle/database</code></li><li>执行<code>./runInstaller</code></li></ul></li><li><p>图形化界面安装参考以下链接</p><ul><li><p><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></p></li><li><p><code>https://www.cnblogs.com/alsw/p/4023245.html</code></p></li><li><p><code>Prepequisite Checks</code>，会列出所缺少的依赖包，按照提示信息一个一个解决。</p><ul><li>注意：<ul><li>OS Kernel Parameter 下的semmni的缺失是Oracle没有检测到，其实有，选中缺失的依赖包，如果下方详情栏里Expected value中有括号中标注(i386)或(i686)，是在提示缺少32位的依赖包，但是实际上已经安装了64位的依赖包，忽略它们，pdksh包已经安装，就是之前安装的ksh依赖包。</li><li>如果还有提示的其他缺少的依赖包没有安装就去安装，按提示解决缺少的依赖包，之后点击 “Check Again”，再检查一遍，没有问题了，勾选ignore all,点击“Next”</li></ul></li></ul></li><li><p>安装过程中可能会弹窗提示<code>error in invoking target install of makefile</code>错误</p><ul><li>解决方法参考链接：<code>http://blog.itpub.net/22996654/viewspace-2063349/</code></li></ul></li></ul></li><li><p>安装到最后一步，会跳出如下执行脚本的提示</p><ul><li>打开一个终端，使用root登录，执行要求执行的脚本，执行完毕后在图形界面点OK</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> cd /home/oracle/app/oracle/product/11.2.0/dbhome_1 ./root.sh #此处提示输入oracle_home路径 /home/oracle/oraInventory ./orainstRoot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据库建库和配置监听及本地服务</p><ul><li>参考链接：<ul><li><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></li><li><code>https://www.cnblogs.com/alsw/p/4023245.html</code></li></ul></li></ul></li><li><p>plsql测试是否能连接</p></li></ul><h3 id="三、根据需求建库建表"><a href="#三、根据需求建库建表" class="headerlink" title="三、根据需求建库建表"></a>三、根据需求建库建表</h3><ul><li><code>https://www.ldclass.club/2020/11/12/shu-ju-ku-bei-fen-huan-yuan/</code></li></ul><h3 id="四、oracle配置开机自启动"><a href="#四、oracle配置开机自启动" class="headerlink" title="四、oracle配置开机自启动"></a>四、oracle配置开机自启动</h3><ul><li><p>先以root身份登录到linux系统</p><ul><li><code>vim /etc/oratab</code></li><li>将<code>orcl:/home/oracle/app/oracle/product/11.2.0/dbhome_1:N</code>中的N 更改为 Y</li><li>:wq保存，关闭 </li></ul></li><li><p><code>chmod +x /etc/rc.d/rc.local</code></p></li><li><p><code>vim /etc/rc.d/rc.local</code></p></li><li><p>添加</p><ul><li><code>su oracle -lc "/home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start"</code></li><li><code>su oracle -lc /home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</code></li></ul></li><li><p>:wq保存，关闭</p></li><li><p><code>reboot</code>重启虚拟机，测试是否自启</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="2021/01/23/zookeeper/"/>
      <url>2021/01/23/zookeeper/</url>
      
        <content type="html"><![CDATA[<h3 id="一、注册中心之zookeeper"><a href="#一、注册中心之zookeeper" class="headerlink" title="一、注册中心之zookeeper"></a>一、注册中心之zookeeper</h3><ul><li><p>注册中心</p><ul><li>理解注册中心：服务管理,核心是有个服务注册表，心跳机制动态维护</li><li>服务提供者provider: 启动的时候向注册中心上报自己的网络信息</li><li>服务消费者consumer: 启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息</li></ul></li><li><p>主流的注册中心</p><ul><li>zookeeper、Eureka、nacos</li></ul></li><li><p>安装zookeeper</p><ul><li>下载zookeeper<ul><li><code>https://zookeeper.apache.org/</code></li></ul></li><li>重命名conf目录下的zoo_sample.cfg 文件为zoo.cfg 并修改里面的内容</li><li>主要配置项</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#心跳基本时间单位，毫秒级，ZK基本上所有的时间都是这个时间的整数倍tickTime=2000#集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数initLimit=10#集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数syncLimit=5#内存数据库快照存放地址，如果没有指定事务日志存放地址(dataLogDir)，默认也是存放在这个 路径下，建议两个地址分开存放到不同的设备上。dataDir=F:\zookeeper-3.4.12\zookeeper-3.4.12\data#端口clientPort=2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>centos下安装zk<ul><li>上传tar包到<code>url/local</code></li><li>解压<code>tar -zxvf zookeeper-3.4.12.tar.gz</code></li><li><code>cd /usr/local/zookeeper-3.4.12/conf</code></li><li><code>mv zoo_sample.cfg zoo.cfg</code></li><li><code>vim zoo.cfg</code></li><li>修改dataDir <code>/usr/local/zookeeper-3.4.12/data</code></li><li>新建zookeeper用户</li><li>将整个文件夹所属权赋予zookeeper用户 <code>chown -R zookeeper:zookeeper /usr/local/zookeeper-3.4.12</code></li><li>切换到zookeeper用户 su zookeeper</li><li><code>cd /usr/local/zookeeper-3.4.12/bin</code><ul><li>找到对应的zkServer.sh启动<code>./zkServer.sh start</code></li></ul></li><li>防火墙开放端口<ul><li><code>firewall-cmd --zone=public --permanent --add-port=2181/tcp</code></li></ul></li><li>重启防火墙<ul><li><code>systemctl restart firewalld</code></li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据备份</title>
      <link href="2021/01/21/mysql-shu-ju-bei-fen/"/>
      <url>2021/01/21/mysql-shu-ju-bei-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据备份"><a href="#一、数据备份" class="headerlink" title="一、数据备份"></a>一、数据备份</h3><ul><li><p>数据备份的意义</p><ul><li>保护数据的安全</li><li>在出现意外的时候（硬盘的损坏，断电，黑客的攻击），以便数据的恢复</li><li>导出生产的数据以便研发人员或者测试人员测试学习</li><li>高权限的人员操作失误导致数据丢失，以便恢复</li></ul></li><li><p>数据库的备份类型</p><ul><li>完全备份：对整个数据库的数据进行备份</li><li>部分备份：对部分数据进行备份（可以是一张表也可以是多张表）<ul><li>增量备份：是以上一次备份为基础来备份变更数据的，节约空间</li><li>差异备份：是以第一次完全备份的基础来备份变更备份的，浪费空间</li></ul></li></ul></li><li><p>数据库备份的方式</p><ul><li>逻辑备份：直接生成sql语句保存起来，在恢复数据的时候执行备份的sql语句来实现数据的恢复</li><li>物理备份：直接拷贝相关的物理数据</li><li>区别：逻辑备份效率低，恢复数据效率低，但是逻辑备份节约空间；物理备份浪费空间，但是相对逻辑备份而言效率比较高</li></ul></li><li><p>数据库备份的场景</p><ul><li>热备份：备份时，数据库的读写操作不会受到影响</li><li>温备份：备份时，数据库的读操作可以进行，但是写操作不能执行</li><li>冷备份：备份时，不能进行任何操作</li></ul></li></ul><h3 id="二、mysqldump数据备份"><a href="#二、mysqldump数据备份" class="headerlink" title="二、mysqldump数据备份"></a>二、mysqldump数据备份</h3><ul><li><p>mysqldump使用语法：</p><ul><li><code>mysqldump -u 用户 -h host -p 密码 dbname table &gt; 路径</code></li></ul></li><li><p>远程备份单库示例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库例子并保留创建库语句</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix | gzip > /mysql_data_back/zabbix_bak.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库单表</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix users | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份多库的例子</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix XD | gzip > /mysql_data_back/zabbix_XD.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份全库</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --all-databases | gzip > /mysql_data_back/all.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>问题一：<code>提示"mysqldump: command not found"</code></p><ul><li><p>解决方法：</p><ul><li>设置软链接</li></ul><pre class="line-numbers language-shell"><code class="language-shell">ln -fs /usr/local/mysql/bin/mysqldump /usr/binln -fs /usr/local/mysql/bin/mysql /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>问题二：<code>mysqldump: Got error: 1066: Not unique table/alias: 't' when doing LOCK TABL</code></p><ul><li><p>解决方法：</p><ul><li>配置文件<code>my.cnf</code>中设置变量<code>lower_case_table_names=0</code>，重启MySQL服务</li><li>提前规划，使用统一的命名规则，避免这样的问题出现</li><li>系统变量lower_case_table_names有三个值：分别是0、1、2.</li></ul><pre class="line-numbers language-shell"><code class="language-shell">设置成0：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时大小写敏感。设置成1：表名转小写后存储到硬盘，比较时大小写不敏感。 设置成2：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时统一转小写比较。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="三、mysql数据恢复"><a href="#三、mysql数据恢复" class="headerlink" title="三、mysql数据恢复"></a>三、mysql数据恢复</h3><ul><li>远程恢复数据（备份的数据文件里有创建库的语句）</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 < zabbix_bak.sqlmysql -uroot -pabc123456 -h120.25.93.69 --port3306 < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>远程恢复数据（备份的数据文件里没有创建库的语句）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 zabbix < zabbix_bak.sqlmysql -uroot -pabc123456 -h120.25.93.69 --port3306 zabbix < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、mysql物理备份"><a href="#四、mysql物理备份" class="headerlink" title="四、mysql物理备份"></a>四、mysql物理备份</h3><ul><li>查找数据库源文件路径</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'datadir%';datadir    /var/lib/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/my.cnfdatadir=/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>MyISAM表源文件</p><ul><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则</li><li>.frm ：记录着表结构信息的文件</li><li>.MYI：记录着索引的文件</li><li>.MYD :记录着表的数据</li></ul></li><li><p>InnoDB表源文件</p><ul><li>InnoDB有着共享表空间跟独立表空间的概念</li><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则􀁿􀁿</li><li>.frm ：记录着表结构信息的文件</li><li>.ibd ：独立表空间，里边记录这个表的数据和索引</li><li>ibdata1：共享表空间，里边记录表的数据和索引</li><li>ib_logfile0 ib_logfile1：事务日志, 物理备份不要忘记这两个文件</li></ul></li><li><p>热备时，请求全局读锁</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush tables with read lock;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解锁：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、二进制日志mysqlbinlog备份数据"><a href="#五、二进制日志mysqlbinlog备份数据" class="headerlink" title="五、二进制日志mysqlbinlog备份数据"></a>五、二进制日志mysqlbinlog备份数据</h3><ul><li><p>二进制日志</p><ul><li>二进制日志就是记录着mysql数据库中的一些写入性操作，比如一些增删改，但是，不包括查询！</li></ul></li><li><p>一般情况下，二进制日志有着数据复制和数据恢复的功能</p></li><li><p>开启二进制日志会有1%的性能消耗！</p></li><li><p>查看二进制日志是否开启</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'log_bin%';log_bin            ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启二进制日志 </li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/my.cnf[mysqld]log-bin=/data/mydata/log_bin/mysql-bin路径自定义创建server-id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有的binlog日志列表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show master logs;mysql-bin.000001    201mysql-bin.000002    201mysql-bin.000003    90274mysql-bin.000004    63489mysql-bin.000005    13788<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>刷新二进制日志：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush logs;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重置(清空）二进制日志文件</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用mysqldump备份数据时，加上-F选项可以重新生成一个新的二进制日志文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -p XD user -F > user_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、二进制日志mysqlbinlog恢复数据"><a href="#六、二进制日志mysqlbinlog恢复数据" class="headerlink" title="六、二进制日志mysqlbinlog恢复数据"></a>六、二进制日志mysqlbinlog恢复数据</h3><ul><li><p>查看二进制日志文件的内容</p><ul><li><p><code>cd /data/mydata/log_bin/mysql-bin</code></p></li><li><p><code>mysqlbinlog mysql-bin.000002</code></p></li><li><p>报错<code>mysqlbinlog: [ERROR] unknown variable 'default-character-set=utf8'</code></p></li><li><p>解决</p><ul><li>第一种：在mysqlbinlog 后边加上 –no-defaults</li><li>第二种：注释掉配置文件里边的default-character-set=utf8</li></ul></li></ul></li><li><p>把二进制日志文件导出成普通文件</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --base64-output=DECODE-ROWS -v mysql-bin.000002 > mysqlbin.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>找出要恢复的位置</p><ul><li>找出关键字(drop)的行数：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | grep -iw 'drop'</code></li><li>打印出相关内容(4170至4180行)：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | sed -n '4170,4180p'</code></li><li>找到<code># at xxxx</code></li></ul></li><li><p>恢复数据</p><ul><li>第一步：把备份的数据表恢复到数据库中：<code>mysql -uroot -p test &lt; sys_users.sql</code></li><li>第二步：利用上面找到的删除的位置进行恢复数据<ul><li><code>--start-position="xxxx"</code>可以省略</li></ul></li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --no-defaults --set-charset=utf8 --start-position="xxxx" --stop-position="xxxx" /usr/local/software/log_bin/mysql-bin.000002 | mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql语句优化思路</title>
      <link href="2021/01/21/mysql-yu-ju-you-hua-si-lu/"/>
      <url>2021/01/21/mysql-yu-ju-you-hua-si-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mysql的慢查询日志开启</p></blockquote><ul><li>查看是否已经开启了慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'slow%';slow_launch_time        2slow_query_log            ONslow_query_log_file        /var/lib/mysql/iZ2zeewcii3f53e59qe1neZ-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set global slow_query_log = on ;#日志路径也可以自定义：1.路径存在且mysql有读写权限：sudo chown mysql:mysql -R /usr/local/mysqlSlowLog/2.set global slow_query_log_file = '路径';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看慢查询的时间临界值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%long%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置慢查询的时间标准</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set long_query_time=0.4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>永久生效的设置方法  </li></ul><pre class="line-numbers language-shell"><code class="language-shell">#修改配置文件 vi /etc/my.cnf[mysqld]slow_query_log = 1long_query_time = 0.1slow_query_log_file =/usr/local/mysql/mysql_slow.log#必须重启服务才能生效！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mysql的sql语句执行过程解析</p></blockquote><ul><li>查看性能详情是否开启</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%profiling%';have_profiling            YESprofiling                ONprofiling_history_size    15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启性能记录功能</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set profiling = on ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看性能的记录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看语句的执行性能详情</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profile for query 4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>性能线程的详细解释官方文档链接<ul><li><code>https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html</code></li></ul></li></ul><blockquote><p>mysql语句优化思路</p></blockquote><ul><li>尽量避免使用select *from ，尽量精确到想要的结果字段</li><li>尽量避免条件使用or</li><li>记得加上limit 限制行数，避免数据量过大消耗性能</li><li>使用模糊查询时，%放在前面是会使索引失效</li><li>要小心条件字段类型的转换</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之索引与存储引擎</title>
      <link href="2021/01/21/mysql-zhi-suo-yin-yu-cun-chu-yin-qing/"/>
      <url>2021/01/21/mysql-zhi-suo-yin-yu-cun-chu-yin-qing/</url>
      
        <content type="html"><![CDATA[<h3 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h3><ul><li><p>存储引擎</p><ul><li>数据库引擎是数据库底层软件组件，不同的存储引擎提供不同的存储机制，索引技巧，锁定水平等功能，使用不同的数据库引擎，可以获得特定的功能</li></ul></li><li><p>查看引擎</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#如何查看数据库支持的引擎show engines;#查看当前数据的引擎：show create table 表名\G#查看当前库所有表的引擎：show table status\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表时指定引擎</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create table test (id int,name varchar(20)) engine='InnoDB';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改表的引擎</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 engine='MyiSAm';#修改默认引擎# vi /etc/my.cnf# [mysqld]下面# default-storage-engine=MyIsAM# 记得保存后重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>MyISAM与InnoDB的区别</p><ul><li>MyISAM<ul><li>支持全文索引（full text)</li><li>不支持事务</li><li>表级锁</li><li>保存表的具体行数</li><li>奔溃恢复不好</li></ul></li><li>Innodb：<ul><li>支持事务</li><li>以前的版本是不支持全文索引，但在5.6之后的版本就开始支持这个功能了</li><li>行级锁（并非绝对，当执行sql语句时不能确定范围时，也会进行锁全表例如： update table set id=3 where name like ‘a%’;)</li><li>不保存表的具体行数</li><li>奔溃恢复好</li></ul></li></ul></li><li><p>选择</p><ul><li>MyISAM：<ul><li>一般来说MyISAM不需要用到事务的时候</li><li>做很多count计算</li></ul></li><li>InnoDB：<ul><li>可靠性要求高的，或者要求支持事务</li><li>想要用到外键约束的时候（讲外键的时候会讲）</li></ul></li><li>推荐使用InnoDB</li></ul></li></ul><h3 id="二、常用索引"><a href="#二、常用索引" class="headerlink" title="二、常用索引"></a>二、常用索引</h3><ul><li><p>索引</p><ul><li>索引是一个单独的，存储在磁盘中上的数据库结构，它们包含着对数据表里的所有记录的引用指针。使用索引可以快速的找出在某列或多列中有特定值的行。</li></ul></li><li><p>索引的优点</p><ul><li>通过创建唯一索引，来保证数据库表中的每一行数据的唯一性。</li><li>可以加快数据的检索速度。</li><li>可以保证表数据的完整性与准确性</li></ul></li><li><p>索引的缺点</p><ul><li>索引需要占用物理空间。</li><li>对表中的数据进行改动时，索引也需要跟着动态维护，降低了数据的维护速度。</li></ul></li><li><p>索引的常见类型</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">index：普通索引unique：唯一索引primary key：主键索引foreign key：外键索引fulltext: 全文索引组合索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>普通索引与唯一索引</p></blockquote><ul><li><p>普通索引</p><ul><li>普通索引（index）顾名思义就是各类索引中最为普通的索引，主要任务就是提高查询速度。其特点是允许出现相同的索引内容，允许空（null）值</li></ul></li><li><p>唯一索引</p><ul><li>唯一索引：（unique）顾名思义就是不可以出现相同的索引内容，但是可以为空（null）值</li></ul></li><li><p>创建普通索引或者唯一索引</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">##创建表的时候创建create table test (id int(7) zerofill auto_increment not null,username varchar(20),servnumber varchar(30),password varchar(20),createtime datetime,unique (id))DEFAULT CHARSET=utf8;##直接为表添加索引#语法：alter table 表名 add index 索引名称 (字段名称);alter table test add unique unique_username (username);#注意：假如没有指定索引名称时，会以默认的字段名为索引名称##直接创建索引#语法：create index 索引 on 表名 (字段名);eg：create index index_createtime on test (createtime);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：show index from 表名\G#eg: show index from test\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法： drop index 索引名称 on 表名;#eg：drop index unique_username on test;#语法： alter table 表名 drop index 索引名;#eg：alter table test drop index createtime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>主键索引</p></blockquote><ul><li><p>主键索引</p><ul><li>把主键添加索引就是主键索引，它是一种特殊的唯一索引，不允许有空值，而唯一索引（unique是允许为空值的）。指定为“PRIMARY KEY”<ul><li>主键：主键是表的某一列，这一列的值是用来标志表中的每一行数据的。</li><li>注意：每一张表只能拥有一个主键</li></ul></li></ul></li><li><p>创建主键</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建表的时候创建~#直接为表添加主键索引#语法：alter table 表名 add primary key (字段名);#eg：alter table test add primary key (id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除主键</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：alter table 表名 drop primary key;#eg：alter table test drop primary key;#注意：在有自增的情况下，必须先删除自增，才可以删除主键#删除自增：alter table test change id id int(7) unsigned zerofill not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>全文索引</p></blockquote><ul><li><p>全文索引</p><ul><li>全文索引是将存储在数据库中的文章或者句子等任意内容信息查找出来的索引，单位是词。全文索引也是目前搜索引擎使用的一种关键技术。指定为 fulltex</li></ul></li><li><p>添加全文索引</p><ul><li>创建表的时候创建全文索引</li><li>通过alter添加</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table command add fulltext(instruction);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用全文索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from 表名 where match (字段名) against ('检索内容');select * from command where match(instruction) against ('sections');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看匹配度</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from command where match(instruction) against ('directory');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>停止词</p><ul><li>出现频率很高的词，将会使全文索引失效</li></ul></li><li><p>in boolean mode 模式</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#in boolean mode：意思是指定全文检索模式为布尔全文检索（简单可以理解为是检索方式）select * from 表名 where match (字段名) against ('检索内容' in boolean mode);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除全文索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table command drop index instruction;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意<ul><li>使用通配符*时，只能放在词的后边，不能放前边。</li><li>一般情况下创建全文索引的字段数据类型为 char、varchar、text 。其它字段类型不可以</li><li>全文索引不针对非常频繁的词做索引。比如is，no，not，you，me，yes这些，我们称之为停止词</li><li>对英文检索时忽略大小写</li></ul></li></ul><blockquote><p>外键约束</p></blockquote><ul><li><p>外键</p><ul><li>外键就是作用于两个表数据之间的链接的一列或多列，用来保证表与表之间的数据的完整性和准确性。</li></ul></li><li><p>添加外键约束</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：foreign key (字段名) references 关联的表名(关联表的字段名)#注意：主键跟外键的字段类型一定要相#create table的方法：CREATE TABLE `employee` (`empno` int(11) NOT NULL COMMENT '雇员编号',`ename` varchar(50) DEFAULT NULL COMMENT '雇员姓名',`job` varchar(30) DEFAULT NULL,`mgr` int(11) DEFAULT NULL COMMENT '雇员上级编号',`hiredate` date DEFAULT NULL COMMENT '雇佣日期',`sal` decimal(7,2) DEFAULT NULL COMMENT '薪资',`deptnu` int(11) DEFAULT NULL COMMENT '部门编号',PRIMARY KEY (`empno`),foreign key (deptnu) references dept(deptnu)) ENGINE=InnoDB DEFAULT CHARSET=utf8;#alter table的方法：alter table employee add foreign key (deptnu) references dept(deptnu);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除外键约束</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#注意：在干掉外键索引之前必须先把外键约束删除，才能删除索引<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意<ul><li>俩个表，主键跟外键的字段类型一定要相同</li><li>要使用外键约束表的引擎一定得是InnoDB引擎，MyISAM是不起作用的</li><li>在干掉外键索引之前必须先把外键约束删除，才能删除索引</li></ul></li></ul><blockquote><p>联合索引</p></blockquote><ul><li><p>联合索引</p><ul><li>联合索引又称组合索引或者复合索引，是建立在俩列或者多列以上的索引。</li></ul></li><li><p>创建联合索引</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 add index(字段1,字段2,字段3);alter table test add index(username,servnumber,password);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>删除联合索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table test drop index username;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>联合索引的效率远远高于单列索引</p></li><li><p>联合索引的最左原则</p></li><li><p>注意</p><ul><li>索引并非越多越好，过多的索引会增加数据的维护速度还有磁盘空间的浪费。</li><li>当表的数据量很大的时候，可以考虑建立索引。</li><li>表中经常查数据的字段，可以考虑建立索引。</li><li>想要保证表中数据的唯一性，可以考虑建立唯一索引。</li><li>想要保证俩张表中的数据的完整性跟准确性，可以考虑建立外键约束。</li><li>经常对多列数据进行查询时，可以考虑建立联合索引。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之事务、试图、触发器、存储过程</title>
      <link href="2021/01/21/mysql-zhi-shi-wu-shi-tu-hong-fa-qi-cun-chu-guo-cheng/"/>
      <url>2021/01/21/mysql-zhi-shi-wu-shi-tu-hong-fa-qi-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h3><ul><li><p>事务</p></li><li><p>数据库事务通常指对数据库进行读或写的一个操作过程。有两个目的，第一个是为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法；第二个是当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p></li><li><p>事务的特性（ACID）：</p><ul><li>原子性(Atomicity)：事务必须是原子工作单元，一个事务中的所有语句，应该做到：要么全做，要么一个都不做；</li><li>一致性(Consistency):让数据保持逻辑上的“合理性”，比如：小明给小红打10000块钱，既要让小明的账户减少10000，又要让小红的账户上增加10000块钱</li><li>隔离性(Isolation)：如果多个事务同时并发执行，但每个事务就像各自独立执行一样。</li><li>持久性(Durability)：一个事务执行成功，则对数据来说应该是一个明确的硬盘数据更改（而不仅仅是内存中的变化）。</li><li>要使用事务的话，表的引擎要为innodb引擎</li></ul></li><li><p>事务的开启与提交</p><ul><li>事务的开启：begin; start transaction;</li><li>事务的提交：commit;</li><li>事务的回滚：rollback;</li><li>开启autocommit（临时生效）：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#OFF（0）：表示关闭 ON （1）：表示开启set autocommit=0;show variables like 'autocommit';#autocommit | OFF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">set autocommit=1;show variables like 'autocommit';#autocommit | ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启autocommit（永久生效）：<ul><li>修改配置文件：vi /etc/my.cnf 在[mysqld]下面加上：autocommit=1 记得重启服务才会生效</li></ul></li></ul></li></ul><h3 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h3><ul><li><p>视图</p><ul><li>视图（view）是一种虚拟存在的表，是一个逻辑表，它本身是不包含数据的。作为一个select语句保存在数据字典中的。通过视图，可以展现基表（用来创建视图的表叫做基表base table）的部分数据，说白了视图的数据就是来自于基表</li></ul></li><li><p>试图的优点</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响;源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li><li>不占用空间：视图是逻辑上的表，不占用内存空间</li><li>总而言之，使用视图的大部分情况是为了保障数据安全性，提高查询效率。</li></ul></li><li><p>视图的缺点</p><ul><li>性能差：sql server必须把视图查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，sql server也要把它变成一个复杂的结合体，需要花费一定的时间。</li><li>修改限制：当用户试图修改试图的某些信息时，数据库必须把它转化为对基本表的某些信息的修改，对于简单的试图来说，这是很方便的，但是，对于比较复杂的试图，可能是不可修改的。</li></ul></li><li><p>视图的创建以及修改</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建的基本语法create view <视图名称> as select 语句;create view <视图名称> (字段) as select 语句;create or replace view <视图名称>;#修改的语法alter view <视图名称> as select 语句;#视图删除语法drop view <视图名称> ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、触发器"><a href="#三、触发器" class="headerlink" title="三、触发器"></a>三、触发器</h3><ul><li>触发器<ul><li>触发器就是监视某种情况，并触发某种操作</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建触发器的语法create trigger 触发器名称 after/before insert/update/delete on 表名for each rowbeginsql语句;end#after/before:可以设置为事件发生前或后#insert/update/delete:它们可以在执行insert、update或delete的过程中触发#for each row:每隔一行执行一次动作#删除触发器的语法drop trigger 触发器名称;#示例 员工迟到，向work_time_delay插入一条数据之后，更新employee，工资扣100元create trigger trig_work after insert on work_time_delayfor each rowbeginupdate employee set sal=sal-100 where empno=new.empno;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、存储过程"><a href="#四、存储过程" class="headerlink" title="四、存储过程"></a>四、存储过程</h3><ul><li>存储过程<ul><li>存储过程就是把复杂的一系列操作，封装成一个过程。类似于shell，python脚本等。</li></ul></li><li>存储过程的优缺点<ul><li>优点是：<ul><li>复杂操作，调用简单</li><li>速度快</li></ul></li><li>缺点是：<ul><li>封装复杂</li><li>没有灵活性</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建存储过程语法create procedure 名称 (参数....)    begin    过程体;    过程体;    end#参数：in|out|inout 参数名称 类型（长度）#in：表示调用者向过程传入值（传入值可以是字面量或变量）#out：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）#inout：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）#声明变量：declare 变量名 类型(长度) default 默认值;#给变量赋值：set @变量名=值;#调用存储命令：call 名称(@变量名);#删除存储过程命令：drop procedure 名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看创建的存储过程命令</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show create procedure 名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之DCL控制语言</title>
      <link href="2021/01/21/mysql-zhi-dcl-kong-zhi-yu-yan/"/>
      <url>2021/01/21/mysql-zhi-dcl-kong-zhi-yu-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DCL数据控制语言</p></blockquote><ul><li>数据控制语言（DCL：Data Control Language）是用来设置或者更改数据库用户或角色权限的语句，这些语句包括GRANT、DENY、REVOKE等语句</li></ul><blockquote><p>mysql限制root用户指定ip登录</p></blockquote><ul><li>查看root用户可以在哪台机器登录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select user,host from mysql.user where user='root';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改mysql库里边的user表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">update mysql.user set host='localhost' where user='root';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>刷新权限</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mysql之用户密码</p></blockquote><ul><li>修改用户密码分三种方法：<ul><li>第一种：set password for 用户@ip = password(‘密码’);</li><li>第二种：mysqladmin -u用户 -p旧密码 password 新密码;</li><li>第三种：update mysql.user set authentication_string=password(‘密码’) where user=’用户’ and host=’ip’;</li></ul></li><li>忘记密码<ul><li>第一步：修改配置文件my.cnf (默认在/etc/my.cnf)，在[mysqld]下面加上 skip-grant-tables （跳过权限的意思）</li></ul><ol start="2"><li>第二步：重启mysql服务</li><li>第三步：mysql -uroot -p 无需密码登录进入</li><li>第四步：修改密码</li></ol></li></ul><blockquote><p>创建新用户并限制ip网段登录</p></blockquote><ul><li>创建用户的语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create user 'username'@'host' identified by 'password';#username：你将创建的用户名#host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机 登陆，可以使用通配符%#password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器#创建一个pig用户，并指定登录密码：123456，可以在任何一台远程主机都可以登录create user 'pig'@'%' identified by '123456';#创建一个pig用户，并指定登录密码：为空，指定在120网段的机器登录create user 'pig'@'120.%.%.%' identified by '';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看权限</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show grants for 'root'@'localhost';#GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION#GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION#WITH GRANT OPTION:表示这个用户拥有grant权限，即可以对其他用户授权show grants for 'pig'@'%';#Grants for pig@%#GRANT USAGE ON *.* TO 'pig'@'%'#USAGE：无权限的意思<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除用户语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">drop user 'username'@'host';drop user 'pig'@'%';delete from mysql.user where user='pig';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>库表权限授权与回收</p></blockquote><ul><li>授权语法：grant 权限1,权限2….. on 数据库对象 to ‘用户’</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">grant 权限1,权限2..... on 数据库对象 to '用户'@'host' identified by 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>all privileges</code>：代表所有权限</li><li><code>.</code>：代表所有库所有表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#对现有用户进行授权：对现有用户pig授予所有库所有表所有权限。grant all privileges on *.* to 'pig';#对没有的用户进行授权：创建一个新用户dog授予XD库的所有权限，登录密码123456，任何一台主机登录grant all privileges on XD.* to 'dog'@'%' identified by '123456';#对没有的用户进行授权：创建一个新用户cat授予XD库的employee表 查与修改权限，登录密码123456，任何一台主机登录grant select,update on XD.employee to 'cat'@'%' identified by '123456'#对没有的用户进行授权：对用户cat授予XD库的employee表insert 权限，登录密码123456，任何一台主机登录grant insert on XD.employee to 'cat'@'%' identified by '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>回收语法：revoke 权限1,权限2….. on 数据库对象 from ‘用户‘@’host’;</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#回收pig用户的所有权限（注意：并没有回收它的登录权限）revoke all privileges on *.* from 'pig' @ '%';flush privileges;#回收pig用户的所有权限（并回收它的登录权限）delete from mysql.user where user='pig';flush privileges;#回收cat用户对XD库的employee的查与修改权限revoke select,update on XD.employee from 'cat'@'%';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高级查询</title>
      <link href="2021/01/21/mysql-gao-ji-cha-xun/"/>
      <url>2021/01/21/mysql-gao-ji-cha-xun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mysql查询之exists型子查询</p></blockquote><ul><li><p>exists型子查询后面是一个受限的select查询语句</p></li><li><p>exists子查询，如果exists后的内层查询能查出数据，则返回 TRUE 表示存在；为空则返回 FLASE则不存在。</p></li><li><p>exists 和 not exists</p></li></ul><blockquote><p>mysql查询之左连接查询与右连接查询</p></blockquote><ul><li>左连接称之为左外连接 右连接称之为右外连接 这俩个连接都是属于外连接</li><li>左连接关键字：left join 表名 on 条件 / left outer 表名 join on 条件 右连接关键字：right join 表名 on 条件/right outer 表名 join on 条件</li><li>左连接说明： left join 是left outer join的简写，左(外)连接，左表(a_table)的记录将会全部表示出来， 而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</li><li>右连接说明：right join是right outer join的简写，与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</li></ul><blockquote><p>mysql查询之内连接查询与联合查询</p></blockquote><ul><li><p>内连接：获取两个表中字段匹配关系的记录</p></li><li><p>主要语法：INNER JOIN 表名 ON 条件;</p></li><li><p>联合查询：就是把多个查询语句的查询结果结合在一起</p><ul><li>主要语法1：… UNION … （去除重复） 主要语法2：… UNION ALL …（不去重复）</li></ul></li><li><p>union查询的注意事项：</p><ul><li>两个select语句的查询结果的“字段数”必须一致；</li><li>通常，也应该让两个查询语句的字段类型具有一致性；</li><li>也可以联合更多的查询结果；</li><li>用到order by排序时，需要加上limit（加上最大条数就行），需要对子句用括号括起来</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql字符集</title>
      <link href="2021/01/21/mysql-zi-fu-ji/"/>
      <url>2021/01/21/mysql-zi-fu-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>查看当前mysql使用的字符集</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'character%';#character_set_client：客户端请求数据的字符集#character_set_connection：客户端与服务器连接的字符集#character_set_database：数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将默认使用配置上的字符集#character_set_results：返回给客户端的字符集(从数据库读取到的数据是什么编码的)#character_set_server：为服务器安装时指定的默认字符集设定。#character_set_system：系统字符集(修改不了的，就是utf8)#character_sets_dir：mysql字符集文件的保存路径character_set_client    utf8mb4character_set_connection    utf8mb4character_set_database    utf8character_set_filesystem    binarycharacter_set_results    utf8mb4character_set_server    latin1character_set_system    utf8character_sets_dir    /usr/share/mysql/charsets/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符集修改<ul><li>临时修改：set names gbk;</li><li>永久：修改配置文件my.cnf里边的</li></ul></li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>gbk</span>作用于外部的显示<span class="token selector">[mysqld]</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>gbk</span>作用于内部，会作用于创建库表时默认字符集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改库的字符集编码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter database xiaoxiao default character set gbk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改表的字符集编码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table employee default character set utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据表结构维护</title>
      <link href="2021/01/21/mysql-shu-ju-biao-jie-gou-wei-hu/"/>
      <url>2021/01/21/mysql-shu-ju-biao-jie-gou-wei-hu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改表名</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">rename table 旧表名 to 新表名;rename table student to user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>添加列</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">#给表添加一列：alter table 表名 add 列名 类型;alter table user add addr varchar(50);alter table add 列名 类型 comment '说明';alter table user add famliy varchar(50) comment '学生父母';#给表最前面添加一列：alter table 表名 add 列名 类型 first;alter table user add job varchar(10) first;#给表某个字段后添加一列：alter table 表名 add 列名 类型 after 字段名;alter table user add servnumber int(11) after id;#注意：没有给表某个字段前添加一列的说法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改列类型</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 modify 列名 新类型;alter table user modify servnumber varchar(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改列名</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 change 旧列名 新列名 类型;alter table user change servnumber telephone varchar(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除列</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 drop 列名;alter table user drop famliy;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改字符集</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 character set 字符集;alter table user character set GBK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>mysql表的删除</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">drop table 表名；drop table user;#看表是否存在，若存在则删除表：drop table if exists 表名;drop table if exists teacher;#delele 会把删除的操作记录给记录起来，以便数据回退，不会释放空间，而且不会删除定义。#truncate不会记录删除操作，会把表占用的空间恢复到最初，不会删除定义#drop会删除整张表，释放表占用的空间。truncate table 表名;delete from 表名;drop table 表名;#删除速度drop > truncate > delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="2021/01/19/nginx/"/>
      <url>2021/01/19/nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Nginx介绍"><a href="#一、Nginx介绍" class="headerlink" title="一、Nginx介绍"></a>一、Nginx介绍</h3><ul><li><p>官网：<code>http://nginx.org/</code></p></li><li><p>是一个高性能的[HTTP]和[反向代理]web服务器</p></li><li><p>Nginx代码完全用[C语言]编写</p></li><li><p>功能：负载均衡、静态文服务器、支持多种协议、https、POP3等等</p></li><li><p>正向代理服务器和反向代理服务器</p><ul><li>正向代理服务器<ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求指定目标服务器，然后代理向目标服务器请求并获得内容，并返回给客户端，平时说的代理服务器一般是正向代理服务器</li><li>核心：用户知道自己访问的目标服务器</li><li>场景：跳板机、访问原来无法访问的网站, 比如国外的一些站点</li></ul></li><li>反向代理服务器（Nginx）<ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求，然后代理向目标服务器请求并获得内容，并返回给客户端。反向代理隐藏了真实的服务器</li><li>核心：客户端不知道要访问的目标服务器是哪台服务器，代理会根据一定的策略选择一个真实的服务器进行请求</li></ul></li></ul></li></ul><h3 id="二、Linux安装Nginx"><a href="#二、Linux安装Nginx" class="headerlink" title="二、Linux安装Nginx"></a>二、Linux安装Nginx</h3><ul><li><p>http</p><ul><li>下载压缩包并上传<ul><li><code>http://nginx.org/en/download.html</code></li></ul></li><li>安装依赖<ul><li><code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></li></ul></li><li>创建一个文件夹，上传本地提供的nginx包<ul><li>解压<code>tar -zxvf nginx-1.18.0.tar.gz</code></li><li>依次执行以下命令<ul><li><code>./configure</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li>默认安装路径<code>/usr/local/nginx</code></li><li>启动<ul><li><code>cd /usr/local/nginx/sbin</code></li><li><code>./nginx</code></li></ul></li><li>防火墙开放端口，阿里云网络安全组配置80端口</li></ul></li></ul></li><li><p>https</p><ul><li><p>介绍</p><ul><li>HTTPS (Secure Hypertext Transfer Protocol)安全超文本传输协议，是身披SSL外壳的HTTP</li><li>HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。</li><li>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中被窃取、改变，确保数据的完整性</li></ul></li><li><p>阿里云申请并下载https证书</p></li><li><p>上传证书</p></li><li><p>Nginx配置https证书配置</p><ul><li>依次执行以下命令<ul><li><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li>修改<code>nginx.conf</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">  # HTTPS server    #    server {        listen       443 ssl;        #与证书关联的域名        server_name  www.ldclass.club;        #证书路径        ssl_certificate      /usr/local/software/key/5082518_www.ldclass.club.pem;        ssl_certificate_key  /usr/local/software/key/5082518_www.ldclass.club.key;        ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            #静态资源路径            root   /usr/local/hexo;            index  index.html index.htm;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防火墙关闭或者开放443端口</p></li><li><p>阿里云网络安全组开放443端口</p></li></ul></li></ul><h3 id="三、Nginx基础"><a href="#三、Nginx基础" class="headerlink" title="三、Nginx基础"></a>三、Nginx基础</h3><ul><li><p>Nginx目录</p><ul><li><p>源码编译安装后，默认⽬目录</p><ul><li><code>/usr/local/nginx</code></li></ul></li><li><p>核心目录</p><pre class="line-numbers language-shell"><code class="language-shell">conf #所有配置文件目录  - nginx.conf #默认的主要的配置文件  - nginx.conf.default #默认模板html # 这是编译安装时Nginx的默认站点目录  - 50x.html #错误页面  - index.html #默认首页logs # nginx默认的日志路径，包括错误日志及访问日志  - error.log #错误日志  - nginx.pid #nginx启动后的进程id  - access.log #nginx访问日志sbin #nginx命令的目录  - nginx #启动命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常见命令</p><pre class="line-numbers language-shell"><code class="language-shell">./nginx #默认配置文件启动./nginx -s reload #重启，加载默认配置文件./nginx -c /usr/local/nginx/conf/nginx.conf #启动指定某个配置文件./nginx -s stop #停止#关闭进程，nginx有master process 和worker process,关闭master即可ps -ef | grep "nginx"kill -9 PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、Nginx配置文件"><a href="#四、Nginx配置文件" class="headerlink" title="四、Nginx配置文件"></a>四、Nginx配置文件</h3><ul><li>nginx.conf<ul><li>全局配置</li><li>server 主机设置</li><li>location（URL匹配特定位置的设置）</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#每个配置项由配置指令和指令参数2个部分构成# 指定Nginx Worker进程运行以及用户组user  root;worker_processes  1;# 错误日志的存放路径和错误日志#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;# 进程PID存放路径#pid        logs/nginx.pid;#事件模块指令，用来指定Nginx的IO模型，Nginx支持的有select、poll、kqueue、epoll 等。不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，对于Linux系统，epoll工作模式是首选events {    use epoll;    # 定义Nginx每个进程的最大连接数， 作为服务器来说:worker_connections * worker_processes,    # 作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/2。因为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    # 自定义服务日志    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    # 是否开启高效传输模式 on开启 off关闭    sendfile        on;    # 减少网络报文段的数量    #tcp_nopush     on;    #keepalive_timeout  0;    # 客户端连接保持活动的超时时间，超过这个时间之后，服务器会关闭该连接    keepalive_timeout  65;    #gzip  on;    # 虚拟主机的配置    server {        # 虚拟主机的服务端口        listen       80;        #用来指定IP地址或域名，多个域名之间用空格分开        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        #URL地址匹配        location / {            # 服务默认启动目录            root   html;            #默认访问文件            index  index.html index.htm;        }        #错误状态码的显示页面        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    server {        listen       443 ssl;        server_name  www.ldclass.club;        ssl_certificate      /usr/local/software/key/5082518_www.ldclass.club.pem;        ssl_certificate_key  /usr/local/software/key/5082518_www.ldclass.club.key;        ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            root   /usr/local/hexo;            index  index.html index.htm;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Nginx虚拟主机配置</p><ul><li>虚拟主机<ul><li>指在一台物理主机服务器上划分出多个磁盘空间，每个磁盘空间都是一个虚拟主机，每台虚拟主机都可以对外提供Web服务，并且互不干扰，就类似虚拟机</li><li>利用虚拟主机把多个不同域名的网站部署在同一台服务器上，节省了服务器硬件成本和相关的维护费用</li></ul></li><li>配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">server {    listen 80;    server_name aabbcc.com;    location / {        root /usr/local/nginx/html;        index xdclass.html;    }}server {    listen 80;    server_name aabbccdd.com;    location / {        root html;        index xdclass.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、Nignx搭建图片-文件服务器"><a href="#五、Nignx搭建图片-文件服务器" class="headerlink" title="五、Nignx搭建图片-文件服务器"></a>五、Nignx搭建图片-文件服务器</h3><pre class="line-numbers language-shell"><code class="language-shell">#注意#在location / 中配置root目录#在location /path中配置alias虚拟目录， 目录后面的"/"符号一定要加上server {    listen 80;    server_name aabbccdd.com;    location /app/img {        alias /usr/local/software/img/;        autoindex on;   #允许nginx在浏览器以文件夹形式访问        autoindex_exact_size off;  #显示文件大小        autoindex_localtime on;    #显示文件时间        index index.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Nginx的访问日志"><a href="#六、Nginx的访问日志" class="headerlink" title="六、Nginx的访问日志"></a>六、Nginx的访问日志</h3><ul><li><p>access.log⽇日志⽤用处</p><ul><li>统计站点访问ip来源、某个时间段的访问频率<br>查看访问最频的⻚页⾯面、Http响应状态码、接⼝口性能<br>接⼝口秒级访问量量、分钟访问量量、⼩小时和天访问量量</li></ul></li><li><p>默认配置解析</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">117.61.17.26 - - [19/Jan/2021:11:24:05 +0800] "GET /medias/banner/2.jpg HTTP/1.1" 200 1435257 "https://www.ldclass.club/" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"$remote_addr 对应的是真实日志里的117.61.17.26 即客户端的IP。$remote_user 对应的是第二个中杠“-”，没有远程用户，所以用“-”填充。［$time_local］对应的是[19/Jan/2021:11:05:29 +0800]。“$request”对应的是"GET /medias/banner/2.jpg HTTP/1.1"。$status对应的是200状态码，200表示正常访问。$body_bytes_sent对应的是1435257字节，即响应body的⼤大小。“$http_referer” 对应的是”https://www.ldclass.club/“，若是直接打开域名浏览的时，referer就会没有值，为”-“。“$http_user_agent” 对应的是”Mozilla/5.0(Macintosh; Intel Mac OS X 10.12; rv:56.0) Gecko/20100101 Firefox/56.0”。即浏览器类型“$http_x_forwarded_for” 对应的是”-“或者空。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Nginx统计站点访问量、高频url统计</p><ul><li>查看访问最频繁的前100个IP</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#awk 是文本处理工具，默认按照空格切分，$N 是第切割后第N个，从1开始#sort命令用于将文本文件内容加以排序，-n 按照数值排，-r 按照倒序来排#案例的sort -n 是按照第一列的数值大小进行排序，从小到大，倒序就是 sort -rn#uniq 去除重复出现的行列, -c 在每列旁边显示该行重复出现的次数。awk '{print $1}' access_temp.log | sort -n |uniq -c | sort -rn | head -n 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>统计访问最多的url 前20名</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cat access_temp.log |awk '{print $7}'| sort|uniq -c| sort -rn| head -20 | more<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义日志格式，统计接口响应耗时</p><ul><li>日志格式增加 $request_time<ul><li>从接受用户请求的第一个字节到发送完响应数据的时间，即包括接收请求数据时间、程序响应时间、输出响应数据时间</li><li>$upstream_response_time：指从Nginx向后端建立连接开始到接受完数据然后关闭连接为止的时间</li><li>$request_time一般会比upstream_response_time大，因为用户网络较差，或者传递数据较大时，前者会耗时大很多</li></ul></li><li>配置自定义日志格式</li></ul><pre class="line-numbers language-shell"><code class="language-shell">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for" $request_time';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>统计耗时接口, 列出传输时间超过 2 秒的接口，显示前5条</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cat time_temp.log|awk '($NF > 2){print $7}'|sort -n|uniq -c|sort -nr|head -5#备注：$NF 表示最后一列, awk '{print $NF}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="七、Nginx配置集群应用"><a href="#七、Nginx配置集群应用" class="headerlink" title="七、Nginx配置集群应用"></a>七、Nginx配置集群应用</h3><ul><li><p>Nginx负载均衡upstream</p><ul><li>负载均衡（Load Balance）<ul><li>分布式系统中⼀个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略决定请求发往哪个节点，这就是所谓的负载均衡，</li><li>原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</li></ul></li><li>负载均衡的种类<ul><li>通过硬件来进行解决，常见的硬件有NetScaler、F5、Radware和Array等商用的负载均衡器，但比较昂贵的</li><li>通过软件来进行解决，常见的软件有LVS、Nginx等,它们是基于Linux系统并且开源的负载均衡策略</li><li>目前性能和成本来看，Nginx是目前多数公司选择使用的</li></ul></li><li>配置案例</li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.0.106:8080;    server 192.168.0.106:8081;}location /api/ {    proxy_pass http://lbs;    proxy_redirect default;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Nginx常见的负载均衡策略</p><ul><li>节点轮询（默认）<ul><li>简介：每个请求按顺序分配到不同的后端服务器</li><li>场景：会造成可靠性低和负载分配不均衡，适合静态文件服务器</li></ul></li><li>weight 权重配置<ul><li>简介：weight和访问比率成正比，数字越大，分配得到的流量越高</li><li>场景：服务器性能差异大的情况使用</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.159.133:8080 weight=5;    server 192.168.159.133:8081 weight=10;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ip_hash（固定分发）<ul><li>简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</li><li>场景：服务器业务分区、业务缓存、Session需要单点的情况</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    ip_hash;    server 192.168.159.133:8080;    server 192.168.159.133:8081;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>upstream还可以为每个节点设置状态值<ul><li>down 表示当前的server暂时不参与负载<ul><li><code>server 192.168.159.133:8080 down;</code></li></ul></li><li>backup 其它所有的非backup机器down的时候，会请求backup机器，这台机器压力会最轻，配置也会相对低<ul><li><code>server 192.168.159.133:8080 backup;</code></li></ul></li></ul></li></ul></li></ul><h3 id="八、Nginx后端节点可用性探测"><a href="#八、Nginx后端节点可用性探测" class="headerlink" title="八、Nginx后端节点可用性探测"></a>八、Nginx后端节点可用性探测</h3><ul><li><p>如果某个应用挂了，请求不应该继续分发过去</p><ul><li>max_fails 允许请求失败的次数，默认为1.当超过最大次数时就不会请求</li><li>fail_timeout : max_fails次失败后，暂停的时间，默认：fail_timeout为10s</li><li>参数解释<ul><li>max_fails=N 设定Nginx与后端节点通信的尝试失败的次数。</li><li>在fail_timeout参数定义的时间内，如果失败的次数达到此值，Nginx就这个节点不可用。</li><li>在下一个fail_timeout时间段到来前，服务器不会再被尝试。</li><li>失败的尝试次数默认是1，如果设为0就会停止统计尝试次数，认为服务器是一直可用的。</li></ul></li></ul></li><li><p>具体什么是nginx认为的失败</p><ul><li>可以通过指令proxy_next_upstream来配置什么是失败的尝试。</li><li>注意默认配置时，http_404状态不被认为是失败的尝试。</li></ul></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.0.106:8080 max_fails=2 fail_timeout=60s;    server 192.168.0.106:8081 max_fails=2 fail_timeout=60s;}location /api/ {    proxy_pass http://lbs;    proxy_next_upstream error timeout http_500 http_503 http_404;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、Nginx自定义全局异常json数据"><a href="#九、Nginx自定义全局异常json数据" class="headerlink" title="九、Nginx自定义全局异常json数据"></a>九、Nginx自定义全局异常json数据</h3><ul><li><p>任何接口都是可能出错，4xx、5xx等</p></li><li><p>如果业务没有做好统一的错误管理，直接暴露给用户，无疑是看不懂</p></li><li><p>所以假如后端某个业务出错，nginx层也需要进行转换。让前端知道Http响应是200，其实是将错误的状态码定向<br>至200，返回了全局兜底数据</p></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">location / {    proxy_pass http://lbs;    proxy_redirect default;    # 存放用户的真实ip    proxy_set_header Host $host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_next_upstream error timeout http_503 non_idempotent;    #开启错误拦截配置,一定要开启    proxy_intercept_errors on;}# 不加 =200，则返回的就是原先的http错误码；配上后如果出现500等错误都返回给用户200状态，并跳转至/default_apierror_page 404 500 502 503 504 =200 /default_api;location = /default_api {    default_type application/json;    return 200 '{"code":"-1","msg":"invoke fail, not found "}';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、Nginx封禁恶意IP"><a href="#十、Nginx封禁恶意IP" class="headerlink" title="十、Nginx封禁恶意IP"></a>十、Nginx封禁恶意IP</h3><ul><li><p>网络攻击时有发生，</p><ul><li>TCP洪水攻击、注入攻击、DOS等</li><li>比较难防的有DDOS等</li><li>数据安全，防止对手爬虫恶意爬取，封禁IP</li><li>一般就是封禁ip<ul><li>linux server的层面封IP：iptables</li><li>nginx的层面封IP ，方式多种 (但 req还是会打进来，让nginx 返回 403, 占用资源)</li><li>Nginx作为网关，可以有效的封禁ip</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#单独网站屏蔽IP的方法，把include xxx; 放到网址对应的在server{}语句块,虚拟主机所有网站屏蔽IP的方法，把include xxx; 放到http{}语句句块。nginx配置如下：http{    # ....    include blacklist.conf;}location / {    proxy_pass http://lbs;    proxy_redirect default;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#blacklist.conf⽬目录下⽂文件内容deny 192.168.159.2;deny 192.168.159.32;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>./nginx -s reload #重新加载配置，不中断服务</li></ul></li><li><p>拓展-自动化封禁思路</p><ul><li>编写shell脚本</li><li>AWK统计access.log，记录每秒访问超过60次的ip，然后配合nginx或者iptables进行封禁</li><li>crontab定时跑脚本</li></ul></li></ul><h3 id="十一、Nginx配置浏览器跨域"><a href="#十一、Nginx配置浏览器跨域" class="headerlink" title="十一、Nginx配置浏览器跨域"></a>十一、Nginx配置浏览器跨域</h3><ul><li><p>Nginx配置解决浏览器跨域</p><ul><li>跨域：浏览器同源策略 1995年年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”<ul><li>协议相同 http https</li><li>域名相同 <a href="http://www.xdclass.net" target="_blank" rel="noopener">www.xdclass.net</a></li><li>端口相同 80 81</li><li>一句话：浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</li><li>浏览器控制台跨域提示：<br><code>No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.</code></li></ul></li></ul></li><li><p>解决方法</p><ul><li>JSONP</li><li>Http响应头配置允许跨域</li><li>nginx层配置</li><li>程序代码中处理通过拦截器配置</li></ul></li><li><p>Nginx开启跨域配置</p><ul><li>location下配置</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">location / {    add_header 'Access-Control-Allow-Origin' $http_origin;    add_header 'Access-Control-Allow-Credentials' 'true';    add_header 'Access-Control-Allow-Headers' 'DNT,web-token,apptoken,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';    add_header 'Access-Control-Allow-Methods 'GET,POST,OPTIONS';    #如果预检请求则返回成功,不需要转发到后端    if ($request_method = 'OPTIONS') {        add_header 'Access-Control-Max-Age'1728000;        add_header 'Content-Type''text/plain; charset=utf-8';        add_header 'Content-Length' 0;        return 200;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十二、Nginx的locatioin规则-路径匹配"><a href="#十二、Nginx的locatioin规则-路径匹配" class="headerlink" title="十二、Nginx的locatioin规则-路径匹配"></a>十二、Nginx的locatioin规则-路径匹配</h3><ul><li>正则<ul><li>^ 以什么开始</li><li>$ 以什么结束</li></ul></li><li>location 路径匹配<ul><li>语法 location [ = | ~ | <del>* | ^</del> ] uri { …… }</li><li>location = /uri<ul><li>= 表示精准匹配，只要完全匹配上才能生效</li></ul></li><li>location /uri<ul><li>不带任何修饰符，表示前缀匹配</li></ul></li><li>location ^~ /uri/<ul><li>匹配任何以 /uri/ 开头的任何查询并且停止搜索</li></ul></li><li>location /<ul><li>通用匹配，任何未匹配到其他location的请求都会匹配到</li></ul></li><li>正则匹配<ul><li>区分大小写匹配（~）</li><li>不区分大小写匹配（~*）</li></ul></li><li>优先级<ul><li>精准匹配 &gt; 字符串匹配(若有多个匹配项匹配成功，那么选择匹配长的记录) &gt; 正则匹配</li></ul></li></ul></li></ul><h3 id="十三、Nginx的rewrite规则-地址重定向"><a href="#十三、Nginx的rewrite规则-地址重定向" class="headerlink" title="十三、Nginx的rewrite规则-地址重定向"></a>十三、Nginx的rewrite规则-地址重定向</h3><ul><li><p>重写-重定向</p><ul><li>rewrite 地址重定向，实现URL重定向的重要指令，他根据regex(正则表达式)来匹配内容跳转<ul><li>语法 <code>rewrite regex replacement[flag]</code></li></ul></li></ul></li><li><p><code>rewrite ^/(.*) https://www.ldclass.club/$1 permanent</code></p><ul><li>这是一个正则表达式，匹配完整的域名和后面的路径地址</li><li>replacement部分是<code>https://www.ldclass.club$1</code>，</li><li>$1是取自regex部分()里的内容</li></ul></li><li><p>常用正则表达式：</p></li></ul><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的起始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的字符零次或者多次</td></tr><tr><td>+</td><td>匹配前面字符串一次或者多次</td></tr><tr><td>?</td><td>匹配前面字符串的零次或者一次</td></tr><tr><td>.</td><td>匹配除“\n”之外的所有单个字符</td></tr><tr><td>(pattern)</td><td>匹配括号内的pattern</td></tr></tbody></table><ul><li><p>rewrite 最后一项flag参数</p><table><thead><tr><th>标记符号</th><th>说明</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后继续向下匹配新的location URI规则</td></tr><tr><td>break</td><td>本条规则匹配完成后终⽌止，不不在匹配任何规则</td></tr><tr><td>redirect</td><td>返回302临时重定向</td></tr><tr><td>permanent</td><td>返回301永久重定向</td></tr></tbody></table></li><li><p>应用场景</p><ul><li>非法访问跳转，防盗链</li><li>网站更换新域名</li><li>http跳转https</li><li>不同地址访问同一个虚拟主机的资源</li></ul></li></ul><h3 id="十四、Nginx-配置websocket反向代理-实时通信"><a href="#十四、Nginx-配置websocket反向代理-实时通信" class="headerlink" title="十四、Nginx 配置websocket反向代理-实时通信"></a>十四、Nginx 配置websocket反向代理-实时通信</h3><ul><li>配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">server {    listen 80;    server_name aaabbb.com;    location / {        proxy_pass http://lbs;        proxy_read_timeout 300s; #websocket空闲保持时长        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>核心是下面的配置，其他和普通反向代理没区别, 表示请求服务器升级协议为WebSocket</li></ul><pre class="line-numbers language-shell"><code class="language-shell">        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>服务器处理完请求后，响应如下报文# 状态码为101</li></ul><pre class="line-numbers language-shell"><code class="language-shell">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="十五、Nginx的配置服务端缓存"><a href="#十五、Nginx的配置服务端缓存" class="headerlink" title="十五、Nginx的配置服务端缓存"></a>十五、Nginx的配置服务端缓存</h3><ul><li><p>/root/cache</p><ul><li>本地路径，用来设置Nginx缓存资源的存放地址</li></ul></li><li><p>levels=1:2</p><ul><li>默认所有缓存文件都放在上面指定的根路径中，可能影响缓存的性能，推荐指定为 2 级目录来存储缓存文件；1和2表示用1位和2位16进制来命名目录名称。第一级目录用1位16进制命名，如a；第二级目录用2位16进制命名，如3a。所以此例中一级目录有16个，二级目录有16*16=256个,总目录数为16 *256=4096个。</li><li>当levels=1:1:1时，表示是三级目录，且每级目录数均为16个</li></ul></li><li><p>key_zone</p><ul><li>在共享内存中定义一块存储区域来存放缓存的 key和 metadata</li></ul></li><li><p>max_size</p><ul><li>最大缓存空间, 如果不指定会使用掉所有磁盘空间。当达到 disk 上限后，会删除最少使用的 cache</li></ul></li><li><p>inactive</p><ul><li>某个缓存在inactive指定的时间内如果不访问，将会从缓存中删除</li></ul></li><li><p>proxy_cache_valid</p><ul><li>配置nginx cache中的缓存文件的缓存时间,proxy_cache_valid 200 304 2m 对于状态为200和304的缓存文件的缓存时间是2分钟</li></ul></li><li><p>use_temp_path</p><ul><li>建议为 off，则 nginx 会将缓存文件直接写入指定的cache 文件中</li></ul></li><li><p>proxy_cache</p><ul><li>启用proxy cache，并指定key_zone，如果proxy_cache off表示关闭掉缓存</li></ul></li><li><p>add_header Nging-Cache “$upstream_cache_status”</p><ul><li>用于前端判断是否是缓存，miss、hit、expired(缓存过期)、updating(更新，使用旧的应答)</li></ul></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">proxy_cache_path /root/cache levels=1:2keys_zone=xd_cache:10m max_size=1ginactive=60m use_temp_path=off;server {    location /{        ...        proxy_cache xd_cache;        proxy_cache_valid 200 304 10m;        proxy_cache_valid 404 1m;        proxy_cache_key $host$uri$is_args$args;        add_header Nginx-Cache "$upstream_cache_status";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意<ul><li>nginx缓存过期影响的优先级进行排序为：inactvie &gt;源服务器端Expires/max-age &gt; proxy_cache_valid</li><li>如果出现 Permission denied 修改nginx.conf，将第一行修改为 user root</li><li>默认情况下GET请求及HEAD请求会被缓存，而POST请求不会被缓存，并非全部都要缓存，可以过滤部分路径不用缓存</li></ul></li></ul><h3 id="十六、Nginx性能优化之静态资源压缩"><a href="#十六、Nginx性能优化之静态资源压缩" class="headerlink" title="十六、Nginx性能优化之静态资源压缩"></a>十六、Nginx性能优化之静态资源压缩</h3><ul><li>压缩配置<ul><li>对文本、js和css文件等进行压缩，一般是压缩后的大小是原始大小的25%</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#开启gzip,减少我们发送的数据量gzip on;gzip_min_length 1k;#4个单位为16k的内存作为压缩结果流缓存gzip_buffers 4 16k;#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPUgzip_comp_level 4;#压缩的类型gzip_types application/javascript text/plain text/css application/json application/xml text/javascript;#给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩gzip_vary on;#禁用IE6以下的gzip压缩，IE某些版本对gzip的压缩支持很不好gzip_disable "MSIE [1-6].";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>压缩即是以时间换空间，也是以空间换时间<ul><li>web层主要涉及浏览器和服务器的网络交互，而网络交互显然是耗费时间的</li><li>要尽量减少交互次数</li><li>降低每次请求或响应数据量。</li><li>开启压缩<ul><li>在服务端是时间换空间的策略，服务端需要牺牲时间进行压缩以减小响应数据大小</li><li>压缩后的内容可以获得更快的网络传输速度，时间是得到了优化</li><li>双向</li></ul></li></ul></li></ul><h3 id="十七、Nginx高可用解决方案"><a href="#十七、Nginx高可用解决方案" class="headerlink" title="十七、Nginx高可用解决方案"></a>十七、Nginx高可用解决方案</h3><ul><li><p>Ngnix+LVS+KeepAlived</p></li><li><p>Nginx集群架构（vip ）</p></li><li><p>LVS</p><ul><li>官网 <code>www.linuxvirtualserver.org</code></li><li>LVS是Linux Virtual Server,Linux虚拟服务器，是一个虚拟的服务器集群系统</li><li>提供了10多种调度算法： 轮询、加权轮询、最小连接、目标地址散列、源地址散列等</li><li>三种负载均衡转发技术<ul><li>NAT：数据进出都通过 LVS, 前端的Master既要处理客户端发起的请求，又要处理后台RealServer的响应信息，将RealServer响应的信息再转发给客户端, 容易成为整个集群系统性能的瓶颈; (支持任意系统且可以实现端口映射)</li><li>DR: 移花接木,最高效的负载均衡规则,前端的Master只处理客户端的请求，将请求转发给RealServer，由后台的RealServer直接响应客户端，不再经过Master, 性能要优于LVS-NAT; 需要LVS和RS集群绑定同一个VIP（支持多数系统，不可以实现端口映射)</li><li>TUNL：隧道技术，前端的Master只处理客户端的请求，将请求转发给RealServer，然后由后台的RealServer直接响应客户端，不再经过Master；（支持少数系统，不可以实现端口映射）</li></ul></li></ul></li><li><p>keepalived</p><ul><li><p>核心：监控并管理 LVS 集群系统中各个服务节点的状态</p><ul><li>keepalived是一个类似于交换机制的软件,核心作用是检测服务器的状态，如果有一台web服务器工作出现故障，Keepalived将检测到并将有故障的服务器从系统中剔除，使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成。</li><li>后来加入了vrrp(虚拟路由器冗余协议)，除了为lvs提供高可用还可以为其他服务器比如Mysql、Haproxy等软件提供高可用方案</li></ul></li><li><p>安装</p><ul><li>注意: 如果有缺少依赖可以执行下面的命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install -y gccyum install -y openssl-develyum install -y libnl libnl-develyum install -y libnfnetlink-develyum install -y net-toolsyum install -y vim wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>yum install -y keepalived</code></li><li>默认安装路径<code>cd /etc/keepalived</code></li><li>启动和查看命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#启动systemctl start keepalived.service#停止systemctl stop keepalived.service#查看状态service keepalived status#重启systemctl restart keepalived.service#停止防火墙systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Keepalived核心配置</p><ul><li>配置<code>/etc/keepalived/keepalived.conf</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">! Configuration File for keepalivedglobal_defs {   router_id LVS_DEVEL # 设置lvs的id，在一个网络内应该是唯一的   enable_script_security #允许执行外部脚本}#配置vrrp_script，主要用于健康检查及检查失败后执行的动作。vrrp_script chk_real_server {#健康检查脚本，当脚本返回值不为0时认为失败    script "/usr/local/software/conf/chk_server.sh"#检查频率，以下配置每2秒检查1次    interval 2#当检查失败后，将vrrp_instance的priority减小5    weight -5#连续监测失败3次，才认为真的健康检查失败。并调整优先级    fall 3#连续监测2次成功，就认为成功。但不调整优先级    rise 2    user root}#配置对外提供服务的VIP vrrp_instance配置vrrp_instance VI_1 {#指定vrrp_instance的状态，是MASTER还是BACKUP主要还是看优先级。    state MASTER#指定vrrp_instance绑定的网卡，最终通过指定的网卡绑定VIP    interface ens32#相当于VRID，用于在一个网内区分组播，需要组播域内内唯一。    virtual_router_id 51#本机的优先级，VRID相同的机器中，优先级最高的会被选举为MASTER    priority 101#心跳间隔检查，默认为1s，MASTER会每隔1秒发送一个报文告知组内其他机器自己还活着。    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }#定义虚拟IP(VIP)为192.168.80.100，可多设，每行一个    virtual_ipaddress {        192.168.80.100    }    #本vrrp_instance所引用的脚本配置，名称就是vrrp_script 定义的容器名  track_script {      chk_real_server    }}# 定义对外提供服务的LVS的VIP以及portvirtual_server 192.168.80.100 80 {    # 设置健康检查时间，单位是秒    delay_loop 6    # 设置负载调度的算法为rr    lb_algo rr    # 设置LVS实现负载的机制，有NAT、TUN、DR三个模式    lb_kind NAT    # 会话保持时间    persistence_timeout 50   #指定转发协议类型(TCP、UDP)    protocol TCP    # 指定real server1的IP地址    real_server 192.168.80.129 80 {        # 配置节点权值，数字越大权重越高        weight 10        # 健康检查方式        TCP_CHECK {                  # 健康检查方式            connect_timeout 10       # 连接超时            retry 3           # 重试次数            delay_before_retry 3     # 重试间隔            connect_port 80          # 检查时连接的端口        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>健康检查脚本<code>/usr/local/software/conf/chk_server.sh</code></p><ul><li>作用<ul><li>如果某个realServer挂了，比如是Nginx挂了，那对应keepalived节点存活依旧可以转发过去，但是响应失败。</li><li>通过此脚本实现，当realServer挂了之后，自动停止对应keepalived节点，使VIP漂移到BACKUP上</li></ul></li><li>Nginx脚本示例</li></ul><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash#检查nginx进程是否存在counter=$(ps -C nginx --no-heading|wc -l)if [ "${counter}" -eq "0" ]; thenservice keepalived stopecho 'nginx server is died.......'fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：<ul><li>新建脚本需要赋予执行权限：<code>chmod +x chk_server.sh</code></li><li>需要关闭selinux，不然sh脚本可能不生效<ul><li><code>getenforce</code> 查看</li><li><code>setenforce 0</code> 关闭</li></ul></li></ul></li></ul></li><li><p>配置注意</p><ul><li>router_id后面跟的自定义的ID在同一个网络下是一致的</li><li>state后跟的MASTER和BACKUP必须是大写；否则会造成配置无法生效的问题</li><li>interface 网卡ID；要根据自己的实际情况来看，可以使用<code>ip a</code>查询</li><li>在BACKUP节点上，其keepalived.conf与Master上基本一致，修改state为BACKUP，priority值改小即可</li><li>authentication主备之间的认证方式，一般使用PASS即可；主备的配置必须一致，不能超过8位</li><li>虚拟ip要和主机ip在同一网段</li></ul></li></ul></li></ul><blockquote><p>keepalived 配置过程中遇到的问题</p></blockquote><ul><li><p>elinux的影响：keepalived配置了vrrp_script脚本总是无效</p><ul><li>解决<ul><li>执行脚本权限问题，关闭selinux就可以了,临时关闭：setenforce 0， 查看状态：getenforce，或者修改/etc/sysconfig/selinux文件把里面的一行修改为SELINUX=disabled，保存重启就可以了。</li></ul></li></ul></li><li><p>iptables的影响</p><ul><li><p>出现两台服务器都设置了同样的虚拟IP，这个是两台服务器的keepalived数据交互的问题，由于防火墙的原因，两台服务器没有收到相互的优先级等信息，都以为是master，所以设置了虚拟IP</p></li><li><p>解决</p><ul><li>关闭防火墙</li><li>添加keepalived组播地址<ul><li>在iptables 中加入对vrrp报文的允许<ul><li><code>-A INPUT -p vrrp -j ACCEPT</code></li></ul></li><li>CentOS7使用firewall，不使用iptables，依次执行以下命令，配置放过vrrp协议</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --direct --permanent --add-rule ipv4 filter OUTPUT 0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><blockquote><p>扩展</p></blockquote><ul><li>Nginx+OpenResty +Lua<ul><li>OpenResty<ul><li>官网：<code>http://openresty.org</code></li></ul></li><li>OpenResty安装<ul><li><code>http://openresty.org/en/linux-packages.html#centos</code></li></ul></li><li>Lua脚本介绍<ul><li>官网：<code>http://www.lua.org/start.html</code></li></ul></li><li><code>https://github.com/openresty/lua-nginx-module#ngxvarvariable</code></li><li>使用场景<ul><li>资源下载限速</li><li>内网访问限制</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态设计模式</title>
      <link href="2021/01/16/zhuang-tai-she-ji-mo-shi/"/>
      <url>2021/01/16/zhuang-tai-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>状态设计模式(State Pattern)</p></blockquote><ul><li><p>状态设计模式(State Pattern)</p><ul><li>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为 ,属于行为型模式</li><li>允许一个对象在其内部状态改变时改变它的行为</li><li>状态模式是策略模式的孪生兄弟，它们的UML图是一样的，但实际上解决的是不同情况的两种场景问题工作中用的不多，基本策略模式比较多</li></ul></li><li><p>应用场景</p><ul><li>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为</li><li>代码中包含大量与对象状态有关的条件语句 ，比如一个操作中含有庞大的多分支的条件if else语句，且这些分支依赖于该对象的状态</li><li>电商订单状态：未支付、已支付、派送中，收货完成等状态，各个状态下处理不同的事情</li></ul></li><li><p>角色</p><ul><li>Context 上下文: 定义了客户程序需要的接口并维护一个具体状态角色的实例，将与状态相关的操作委托给当前的Concrete State对象来处理</li><li>State 抽象状态类: 定义一个接口以封装与Context的一个特定状态相关的行为。</li><li>ConcreteState具体状态类: 实现抽象状态定义的接口。</li></ul></li><li><p>优点</p><ul><li>只需要改变对象状态即可改变对象的行为</li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数</li></ul></li><li><p>缺点</p><ul><li>状态模式的使用会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱</li><li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码</li></ul></li><li><p>状态设计和策略模式的区别</p><ul><li>UML图一样，结构基本类似</li><li>状态模式重点在各状态之间的切换，从而做不同的事情</li><li>策略模式更侧重于根据具体情况选择策略，并不涉及切换状态模式不同状态下做的事情不同，而策略模式做的都是同一件事。例如，聚合支付平台，有支付宝、微信支付、银联支付，虽然策略不同，但最终做的事情都是支付</li><li>状态模式，各个状态的同一方法做的是不同的事，不能互相替换</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> State state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单状态变更"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新订单，未支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用商户客服服务，有新订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新订单，已支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用商户客服服务，订单已支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用物流服务，未发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用短信服务，通知用户已发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新物流信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SendOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录设计模式</title>
      <link href="2021/01/16/bei-wang-lu-she-ji-mo-shi/"/>
      <url>2021/01/16/bei-wang-lu-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备忘录设计模式(Memento Pattern)</p></blockquote><ul><li><p>备忘录设计模式(Memento Pattern)</p><ul><li>在不破坏封闭的前提下，捕获一个对象的内部状态，保存对象的某个状态，以便在适当的时候恢复对象，又叫做快照模式，属于行为模式</li><li>备忘录模式实现的方式需要保证被保存的对象状态不能被对象从外部访问</li></ul></li><li><p>应用场景</p><ul><li>玩游戏的时候肯定有存档功能，下一次登录游戏时可以从上次退出的地方继续游戏棋盘类游戏的悔棋、数据库事务回滚</li><li>需要记录一个对象的内部状态时，为了允许用户取消不确定或者错误的操作，能够恢复到原先的状态提供一个可回滚的操作，如ctrl+z、浏览器回退按钮</li></ul></li><li><p>角色</p><ul><li>Originator: 发起者，记录当前的内部状态，并负责创建和恢复备忘录数据，允许访问返回到先前状态所需的所有数据，可以根据需要决定Memento存储自己的哪些内部状态</li><li>Memento: 备忘录，负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态</li><li>Caretaker: 管理者，对备忘录进行管理、保存和提供备忘录，只能将备忘录传递给其他角色</li><li>Originator 和 Memento属性类似</li></ul></li><li><p>优点</p><ul><li>给用户提供了一种可以恢复状态的机制实现了信息的封装，使得用户不需要关心状态的保存细节</li></ul></li><li><p>缺点</p><ul><li>消耗更多的资源，而且每一次保存都会消耗一定的内存</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleOriginator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 生命力     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> live <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 攻击力     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> attack <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> live<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLive</span><span class="token punctuation">(</span><span class="token keyword">int</span> live<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>live <span class="token operator">=</span> live<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAttack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> attack<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttack</span><span class="token punctuation">(</span><span class="token keyword">int</span> attack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> attack<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生命力: "</span> <span class="token operator">+</span> live<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"攻击力: "</span> <span class="token operator">+</span> attack<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//攻击力上涨</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> attack <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生命力下降</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>live <span class="token operator">=</span> live <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 保存快照，存储状态     * @return     */</span>    <span class="token keyword">public</span> RoleStateMemento <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateMemento</span><span class="token punctuation">(</span>live<span class="token punctuation">,</span>attack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 恢复     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverState</span><span class="token punctuation">(</span>RoleStateMemento memento<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getAttack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>live <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateMemento</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 生命力     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> live<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 攻击力     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> attack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoleStateMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> live<span class="token punctuation">,</span> <span class="token keyword">int</span> attack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>live <span class="token operator">=</span> live<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> attack<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> live<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLive</span><span class="token punctuation">(</span><span class="token keyword">int</span> live<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>live <span class="token operator">=</span> live<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAttack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> attack<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttack</span><span class="token punctuation">(</span><span class="token keyword">int</span> attack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> attack<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleStateCaretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RoleStateMemento memento<span class="token punctuation">;</span>    <span class="token keyword">public</span> RoleStateMemento <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span>RoleStateMemento memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memento <span class="token operator">=</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RoleOriginator role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleOriginator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存快照"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RoleStateCaretaker caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleStateCaretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">saveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"快挂了,恢复快照"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">recoverState</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器设计模式</title>
      <link href="2021/01/16/die-dai-qi-she-ji-mo-shi/"/>
      <url>2021/01/16/die-dai-qi-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>迭代器设计模式（Iterator Pattern）</p></blockquote><ul><li><p>迭代器设计模式</p><ul><li>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部实现，属于行为型模式</li><li>提到迭代器，想到它是与集合相关的，集合也叫容器，可以将集合看成是一个可以包容对象的容器，例如List，Set，Map，甚至数组都可以叫做集合，迭代器的作用就是把容器中的对象一个一个地遍历出来</li></ul></li><li><p>应用场景</p><ul><li>一般来说，迭代器模式是与集合是共存的，只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等都有自己的迭代器</li><li>JAVA 中的 iterator迭代器</li></ul></li><li><p>角色</p></li><li><p>抽象容器（Aggregate）：提供创建具体迭代器角色的接口，一般是接口，包括一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。</p></li><li><p>具体容器角色（ConcreteAggregate）：实现抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实LinkedList, Set接口的哈希列表的实现HashSet等。</p></li><li><p>抽象迭代器角色（Iterator）：负责定义访问和遍历元素的接口，包括几个核心方法，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移除当前对象的方法remove()</p></li><li><p>具体迭代器角色（ConcreteIterator）：实现迭代器接口中定义的方法，并要记录遍历中的当前位置，完成集合的迭代</p></li><li><p>优点</p><ul><li>可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据</li><li>支持以不同的方式遍历一个聚合对象</li></ul></li><li><p>缺点</p><ul><li>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐</li><li>迭代器模式在遍历的同时更改迭代器所在的集合结构会导致出现异常</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象迭代器 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取下一个元素     * @return     */</span>    Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 是否有下一个     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除元素     * @param obj     * @return     */</span>    Object <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteIterator</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICollection</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCollection</span> <span class="token keyword">implements</span> <span class="token class-name">ICollection</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ICollection collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令设计模式</title>
      <link href="2021/01/16/ming-ling-she-ji-mo-shi/"/>
      <url>2021/01/16/ming-ling-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>命令设计模式（Command Pattern）</p></blockquote><ul><li><p>命令设计模式（Command Pattern）</p><ul><li>请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的对象，并把该命令传给相应的对象执行命令，属于行为型模式命令模式是一种特殊的策略模式，体现的是多个策略略执行的问题，而不是选择的问题</li></ul></li><li><p>应用场景    </p><ul><li>只要是你认为是命令的地方，就可以采用命令模式</li><li>日常每个界面、按钮、键盘事件操作都是命令设计模式</li></ul></li><li><p>角色</p><ul><li>抽象命令(Command)：需要执行的所有命令都在这里声明</li><li>具体命令(ConcreteCommand)：定义一个接收者和行为之间的弱耦合，实现execute()方法，负责调用接收者的相应操作，execute()方法通常叫做执行方法。</li><li>接受者(Receiver)：负责具体实施和执行一个请求，干活的角色，命令传递到这里是应该被执行的，实施和执行请求的方法叫做行动方法</li><li>请求者(Invoker)：负责调用命令对象执行请求，相关的方法叫做行动方法</li><li>客户端(Client)：创建一个具体命令(ConcreteCommand)对象并确定其接收者。</li></ul></li><li><p>优点</p><ul><li>调用者角色与接收者角色之间没有任何依赖关系，不需要了解到底是哪个接收者执行，降低了系统耦合度扩展性强，新的命令可以很容易易添加到系统中去。</li></ul></li><li><p>缺点</p><ul><li>过多的命令模式会导致某些系统有过多的具体命令类</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 执行动作     */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空调开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空调关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空调开始制冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">warm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空调开始制暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对哪个receiver 进行命令处理     */</span>    <span class="token keyword">private</span> ConditionReceiver receiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OnCommand</span><span class="token punctuation">(</span>ConditionReceiver receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 必须实现一个命令的调用     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用开机操作</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OnCommand -> execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        receiver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对哪个receiver 进行命令处理     */</span>    <span class="token keyword">private</span> ConditionReceiver receiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OffCommand</span><span class="token punctuation">(</span>ConditionReceiver receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 必须实现一个命令的调用     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OffCommand -> execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        receiver<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoolCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对哪个receiver 进行命令处理     */</span>    <span class="token keyword">private</span> ConditionReceiver receiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CoolCommand</span><span class="token punctuation">(</span>ConditionReceiver receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 必须实现一个命令的调用     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CoolCommand -> execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        receiver<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarmCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对哪个receiver 进行命令处理     */</span>    <span class="token keyword">private</span> ConditionReceiver receiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WarmCommand</span><span class="token punctuation">(</span>ConditionReceiver receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 必须实现一个命令的调用     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WarmCommand -> execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        receiver<span class="token punctuation">.</span><span class="token function">warm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppInvoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command onCommand<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command offCommand<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command coolCommand<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command warmCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnCommand</span><span class="token punctuation">(</span>Command onCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onCommand <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOffCommand</span><span class="token punctuation">(</span>Command offCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>offCommand <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCoolCommand</span><span class="token punctuation">(</span>Command coolCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coolCommand <span class="token operator">=</span> coolCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWarmCommand</span><span class="token punctuation">(</span>Command warmCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>warmCommand <span class="token operator">=</span> warmCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开机     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        onCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关机     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        offCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 制冷     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        coolCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 制暖     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">warm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        warmCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建接受者</span>        ConditionReceiver receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建命令对象，设定命令的接受者</span>        Command onCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OnCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command offCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OffCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command coolCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoolCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command warmCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WarmCommand</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建请求者，把命令对象设置进去</span>        AppInvoker appInvoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">setOnCommand</span><span class="token punctuation">(</span>onCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">setOffCommand</span><span class="token punctuation">(</span>offCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">setCoolCommand</span><span class="token punctuation">(</span>coolCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">setWarmCommand</span><span class="token punctuation">(</span>warmCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">warm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appInvoker<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链设计模式</title>
      <link href="2021/01/16/ze-ren-lian-she-ji-mo-shi/"/>
      <url>2021/01/16/ze-ren-lian-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>责任链设计模式(Chain of Responsibility Pattern)</p></blockquote><ul><li><p>责任链设计模式(Chain of Responsibility Pattern)</p><ul><li>客户端发出一个请求，链上的对象都有机会来处理这一请求，而客户端不需要知道谁是具体的处理对象让多个对象都有机会处理请求，避免请求的发送者和接收者之间的耦合关系，将这个对象连成一条调用链，并沿着这条链传递该请求，直到有一个对象处理它才终止有两个核心行为：一是处理请求，二是将请求传递到下一节点</li></ul></li><li><p>应用场景</p><ul><li>Apache Tomcat 对 Encoding 编码处理的处理，SpringBoot里面的拦截器、过滤器链</li><li>在请求处理者不明确的情况下向多个对象中的一个提交请求</li><li>如果有多个对象可以处理同一个请求，但是具体由哪个对象处理是由运行时刻动态决定的，这种对象就可以使用职责链模式</li></ul></li><li><p>角色</p><ul><li>Handler抽象处理者：定义了⼀个处理请求的接口</li><li>ConcreteHandler具体处理者： 处理所负责的请求，可访问它的后续节点，如果可处理该请求就处理，否则就将该请求转发给它的后续节点</li></ul></li><li><p>优点</p><ul><li>客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者 降低了耦合度</li><li>通过改变链内的调动它们的次序，允许动态地新增或者删除处理类，比较很方便维护</li><li>增强了系统的可扩展性，可以根据需要增加新的请求处理类，满足开闭原则</li><li>每个类只需要处理自己该处理的工作，明确各类的责任范围，满足单一职责原则</li></ul></li><li><p>缺点</p><ul><li>处理都分散到了单独的职责对象中，每个对象功能单一，要把整个流程处理完，需要很多的职责对象，会产生大量的细粒度职责对象</li><li>不能保证请求一定被接收；</li><li>如果链路比较长，系统性能将受到一定影响，而且在进行代码调试时不太方便</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 类别     */</span>    <span class="token keyword">private</span> String requestType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 金额     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRequestType</span><span class="token punctuation">(</span>String requestType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestType <span class="token operator">=</span> requestType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RequestTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 转账     */</span>    TRANSFER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 体现     */</span>    CASH_OUT<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象处理者 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RiskControlManager</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更严格的风控策略     */</span>    <span class="token keyword">protected</span> RiskControlManager superior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RiskControlManager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置更严格的风控策略     * @param superior     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">setSuperior</span><span class="token punctuation">(</span>RiskControlManager superior<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>superior <span class="token operator">=</span> superior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理请求     * @param request     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handlerRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体处理者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstRiskControlManager</span> <span class="token keyword">extends</span> <span class="token class-name">RiskControlManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FirstRiskControlManager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RequestTypeEnum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通操作，输入支付密码即可"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",money:"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//下个节点处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>superior <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                superior<span class="token punctuation">.</span><span class="token function">handlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体处理者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondRiskControlManager</span> <span class="token keyword">extends</span> <span class="token class-name">RiskControlManager</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">SecondRiskControlManager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RequestTypeEnum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稍大额操作，输入支付密码+短信验证码即可"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",money:"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//下个节点处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>superior <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                superior<span class="token punctuation">.</span><span class="token function">handlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体处理者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdRiskControlManager</span> <span class="token keyword">extends</span> <span class="token class-name">RiskControlManager</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ThirdRiskControlManager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RequestTypeEnum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大额操作，输入支付密码+短信验证码+人脸识别即可"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",money:"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//下个节点处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>superior <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                superior<span class="token punctuation">.</span><span class="token function">handlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RiskControlManager firstRiskControlManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FirstRiskControlManager</span><span class="token punctuation">(</span><span class="token string">"初级风控"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RiskControlManager secondRiskControlManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecondRiskControlManager</span><span class="token punctuation">(</span><span class="token string">"中级风控"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RiskControlManager thirdRiskControlManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThirdRiskControlManager</span><span class="token punctuation">(</span><span class="token string">"高级风控"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//形成调用链</span>        firstRiskControlManager<span class="token punctuation">.</span><span class="token function">setSuperior</span><span class="token punctuation">(</span>secondRiskControlManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        secondRiskControlManager<span class="token punctuation">.</span><span class="token function">setSuperior</span><span class="token punctuation">(</span>thirdRiskControlManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setRequestType</span><span class="token punctuation">(</span>RequestTypeEnum<span class="token punctuation">.</span>TRANSFER<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstRiskControlManager<span class="token punctuation">.</span><span class="token function">handlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者设计模式</title>
      <link href="2021/01/16/guan-cha-zhe-she-ji-mo-shi/"/>
      <url>2021/01/16/guan-cha-zhe-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Observer观察者设计模式</p></blockquote><ul><li><p>观察者模式</p><ul><li>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新，也叫做发布订阅模式Publish/Subscribe，属于行为型模式</li></ul></li><li><p>应用场景</p><ul><li>消息通知里面：邮件通知、广播通知、微信朋友圈、微博私信等，就是监听观察事件</li><li>当一个对象的改变需要同时改变其它对象，且它不知道具体有多少对象有待改变的时候，考虑使用观察者模式</li></ul></li><li><p>角色</p><ul><li>Subject主题：持有多个观察者对象的引用，抽象主题提供了一个接口可以增加和删除观察者对象；有一个观察者数组，并实现增、删及通知操作</li><li>Observer抽象观察者：为具体观察者定义一个接口，在得到主题的通知时更新自己</li><li>ConcreteSubject具体主题：将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知</li><li>ConcreteObserver具体观察者：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态保持一致</li></ul></li><li><p>优点</p><ul><li>降低了目标与观察者之间的耦合关系，目标与观察者之间建立了一套触发机制观察者和被观察者是抽象耦合的</li></ul></li><li><p>缺点</p><ul><li>观察者和观察目标之间有循环依赖的话，会触发它们之间进行循环调用，可能导致系统崩溃一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增观察者     * @param observer     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除观察者     * @param observer     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteObserve</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通知所有观察者     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyAllObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Observer observer<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">)</span><span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 观察到消息后的操作     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体主题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BossConcreteSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"领导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他操作</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"视察"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notifyAllObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体观察者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GLConcreteObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"管理人员知道领导视察"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体观察者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LWConcreteObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工知道领导视察"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建主题</span>        BossConcreteSubject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BossConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建观察者</span>        Observer lwObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LWConcreteObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observer glObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLConcreteObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立观察者与主题之间的关系</span>        subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>lwObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>glObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主题开始活动，会通知观察者（相当于发布消息）</span>        subject<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法设计模式</title>
      <link href="2021/01/16/mo-ban-fang-fa-she-ji-mo-shi/"/>
      <url>2021/01/16/mo-ban-fang-fa-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模板方法模式Template Method</p></blockquote><ul><li><p>定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤，属于行为型模式</p></li><li><p>应用场景</p><ul><li>javaweb里面的Servlet，HttpService类提供了一个service()方法，</li><li>有多个子类共有逻辑相同的方法，可以考虑作为模板方法</li><li>设计一个系统时知道了算法所需的关键步骤，且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，可以延迟到子类进行完成</li></ul></li><li><p>角色</p><ul><li><p>抽象模板(Abstract Template): 定义一个模板方法，这个模板方法一般是一个具体方法，给出一个顶级算法骨架，而逻辑骨架的组成步骤在相应的抽象操作中，推迟到子类实现</p><ul><li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法</li><li>基本方法：是整个算法中的一个步骤，包括抽象方法和具体方法</li><li>抽象方法：在抽象类中申明，由具体子类实现。</li><li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它</li></ul></li><li><p>具体模板(Concrete Template):实现父类所定义的一个或多个抽象方法，它们是一个顶级算法逻辑的组成步骤</p></li></ul></li><li><p>优点</p><ul><li>扩展性好，对不变的代码进行封装，对可变的进行扩展，符合 开闭原则</li><li>提高代码复用性 将相同部分的代码放在抽象的父类中，将不同的代码放入不同的子类中</li><li>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制</li></ul></li><li><p>缺点</p><ul><li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，会使系统变得复杂</li></ul></li><li><p>模板方法模式和建造者模式区别</p><ul><li>两者很大的交集，建造者模式比模板方法模式多了一个指挥类，该类体现的是模板方法模式中抽象类的固定算法的功能，是一个创建对象的固定算法</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象模板</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProjectManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义模板方法,final类型，防止子类覆盖或者更改顺序     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">design</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">online</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个项目都需要需求评审     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"项目需求评审"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个项目都需要设计     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">design</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由具体子类进行实现，比如每个项目编码耗时不同     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由具体子类进行实现，比如自动化测试，安全测试，压力测试，手工测试等     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由具体子类进行实现，比如全量上线，灰度发布，停机发布等     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">online</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayServiceProjectManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProjectManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开发耗时30日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能测试，安全测试，压力测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">online</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全量上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProjectManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProjectManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开发耗时10日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能测试，压力测试，手工测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">online</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"灰度发布，全量上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractProjectManager projectManager<span class="token punctuation">;</span>        projectManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayServiceProjectManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projectManager<span class="token punctuation">.</span><span class="token function">processProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projectManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProjectManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projectManager<span class="token punctuation">.</span><span class="token function">processProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略设计模式</title>
      <link href="2021/01/16/ce-lue-she-ji-mo-shi/"/>
      <url>2021/01/16/ce-lue-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>策略模式(Strategy Pattern)</p></blockquote><ul><li><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换</p></li><li><p>应用场景</p><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么可以使用策略模式</li><li>不希望暴露复杂的、与算法有关的数据结构，那么可以使用策略模式来封装算法</li></ul></li><li><p>角色</p><ul><li>Context上下文：屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化</li><li>Strategy策略角色：抽象策略角色，是对策略、算法家族的抽象，定义每个策略或算法必须具有的方法和属性</li><li>ConcreteStrategy具体策略角色：用于实现抽象策略中的操作，即实现具体的算法</li></ul></li><li><p>优点</p><ul><li>满足开闭原则，当增加新的具体策略时，不需要修改上下文类的代码，上下文就可以引用新的具体策略的实例</li><li>避免使用多重条件判断，如果不用策略模式可能会使用多重条件语句不利于维护，和工厂模式的搭配使用可以很好地消除代码if-else的多层嵌套（工厂模式主要是根据参数，获取不同的策略）</li></ul></li><li><p>缺点</p><ul><li>策略类数量会增多，每个策略都是一个类，复用的可能性很小</li><li>对外暴露了类所有的行为和算法，行为过多导致策略类膨胀</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 简单订单对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> oldPrice<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> productId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProductOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ProductOrder</span><span class="token punctuation">(</span><span class="token keyword">double</span> oldPrice<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldPrice <span class="token operator">=</span> oldPrice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productId <span class="token operator">=</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getOldPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> oldPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOldPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> oldPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldPrice <span class="token operator">=</span> oldPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token keyword">int</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productId <span class="token operator">=</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象策略角色 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据简单订单对象，计算商品折扣后的价格     * @param productOrder     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">computePrice</span><span class="token punctuation">(</span>ProductOrder productOrder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: Context上下文 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PromotionContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PromotionContext</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据策略计算最终价格     * @param productOrder     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span>ProductOrder productOrder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">computePrice</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体策略角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computePrice</span><span class="token punctuation">(</span>ProductOrder productOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productOrder<span class="token punctuation">.</span><span class="token function">getOldPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体策略角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscountActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 折扣     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> rate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DiscountActivity</span><span class="token punctuation">(</span><span class="token keyword">double</span> rate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> rate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computePrice</span><span class="token punctuation">(</span>ProductOrder productOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 复杂计算</span>        <span class="token keyword">return</span> productOrder<span class="token punctuation">.</span><span class="token function">getOldPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> rate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体策略角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoucherActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 优惠券     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> voucher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">VoucherActivity</span><span class="token punctuation">(</span><span class="token keyword">double</span> voucher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voucher <span class="token operator">=</span> voucher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computePrice</span><span class="token punctuation">(</span>ProductOrder productOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">getOldPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>voucher<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> productOrder<span class="token punctuation">.</span><span class="token function">getOldPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>voucher<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>public static void main(String[] args) {        //简单订单对象        ProductOrder productOrder = new ProductOrder(800, 1, 33);        PromotionContext context;        double finalPrice;        //不同策略算出不同活动价格        context = new PromotionContext(new NormalActivity());        finalPrice = context.executeStrategy(productOrder);        System.out.println("NormalActivity = " + finalPrice);        //折扣        context = new PromotionContext(new DiscountActivity(0.8));        finalPrice = context.executeStrategy(productOrder);        System.out.println("DiscountActivity = " + finalPrice);        //优惠券        context = new PromotionContext(new VoucherActivity(100));        finalPrice = context.executeStrategy(productOrder);        System.out.println("VoucherActivity = " + finalPrice);    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元设计模式</title>
      <link href="2021/01/14/xiang-yuan-she-ji-mo-shi/"/>
      <url>2021/01/14/xiang-yuan-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>享元设计模式Flyweight Pattern</p></blockquote><ul><li><p>享元设计模式(Flyweight Pattern)</p><ul><li>属于结构型模式，主要用于减少创建对象的数量，以减少内存占用和提高性能， 它提供了减少对象数量从而改善应用所需的对象结构的方式。</li><li>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象</li></ul></li><li><p>应用场景</p><ul><li>JAVA 中的 String，如果字符串常量池里有则返回，如果没有则创建一个字符串保存在字符串常量池里面</li><li>数据库连接池、线程池等</li><li>如果系统有大量相似对象，或者需要缓冲池的时候可以使用享元设计模式，也就是池化技术</li><li>如果发现某个对象的生成了大量细粒度的实例，并且这些实例除了几个参数外基本是相同的，如果把那些共享参数移到类外面，在方法调用时将他们传递进来，就可以通过共享对象，减少实例的个数</li></ul></li><li><p>内部状态</p><ul><li>不会随环境的改变而有所不同，是可以共享的</li></ul></li><li><p>外部状态</p></li><li><p>不可以共享的，它随环境的改变而改变的，因此外部状态是由客户端来保持（因为环境的变化一般是由客户端引起的）</p></li><li><p>角色</p><ul><li>抽象享元角色：为具体享元角色规定了必须实现的方法，而外部状态就是以参数的形式通过此方法传入</li><li>具体享元角色：实现抽象角色规定的方法。如果存在内部状态，就负责为内部状态提供存储空间。</li><li>享元工厂角色：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键</li><li>客户端角色：维护对所有享元对象的引用，而且还需要存储对应的外部状态</li></ul></li><li><p>优点</p><ul><li>大大减少了对象的创建，降低了程序内存的占用，提高效率</li></ul></li><li><p>缺点</p><ul><li>提高了系统的复杂度，需要分离出内部状态和外部状态</li></ul></li><li><p>注意划分内部状态和外部状态，否则可能会引起线程安全问题，必须有一个工厂类加以控制</p></li><li><p>享元设计模式和原型、单例例模式的区别</p><ul><li>原型设计模式是指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</li><li>单例设计模式保证一个类仅有一个实例</li></ul></li><li><p>编码实例</p><ul><li>享元角色</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>抽象享元角色</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CloudWebSite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Company company<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>具体享元角色</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreateWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">CloudWebSite</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreateWebSite</span><span class="token punctuation">(</span>String category<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Company company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站分类:"</span> <span class="token operator">+</span> category <span class="token operator">+</span> <span class="token string">"公司："</span> <span class="token operator">+</span> company<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>享元工厂角色</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * map:key=category     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConcreateWebSite<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取分类站点     * @param category 分类     * @return 站点     */</span>    <span class="token keyword">public</span> CloudWebSite <span class="token function">getWebSiteByCategory</span><span class="token punctuation">(</span>String category<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            ConcreateWebSite site <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreateWebSite</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>site<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> site<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取分类个数     * @return 分类个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWebSiteCategorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebSiteFactory webSiteFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CloudWebSite companySite1 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteByCategory</span><span class="token punctuation">(</span><span class="token string">"企业官网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        companySite1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"淘宝"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CloudWebSite companySite2 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteByCategory</span><span class="token punctuation">(</span><span class="token string">"企业官网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        companySite2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"京东"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CloudWebSite byteSite1 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteByCategory</span><span class="token punctuation">(</span><span class="token string">"信息流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        byteSite1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"字节跳动"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CloudWebSite baiduSite <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteByCategory</span><span class="token punctuation">(</span><span class="token string">"百度查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baiduSite<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"百度"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站分类总数："</span><span class="token operator">+</span>webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCategorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观设计模式</title>
      <link href="2021/01/14/wai-guan-she-ji-mo-shi/"/>
      <url>2021/01/14/wai-guan-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>外观设计模式 Facade Pattern</p></blockquote><ul><li><p>门面模式，隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口</p></li><li><p>定义了一个高层接口，这个接口使得这系统更加容易使用</p></li><li><p>应用场景</p><ul><li>开发里面MVC三层架构，在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间使用interface接口进行交互，不用担心内部逻辑，降低耦合性<br>各种第三方SDK大多会使用外观模式，通过一个外观类，也就是整个系统的接口只有一个统一的高层接口，</li><li>这对用户屏蔽很多实现细节，外观模式经常用在封装API的常用手段</li><li>对于复杂难以维护的老系统进行拓展，可以使用外观设计模式</li><li>需要对一个复杂的模块或子系统提供一个外界访问的接口，外界对子系统的访问只要黑盒操作</li></ul></li><li><p>角色</p><ul><li>外观角色(Facade)：客户端可以调用这个角色的方法，这个外观方法知道多个子系统的功能和实际调用</li><li>子系统角色(SubSystem)：每个子系统都可以被客户端直接调用，子系统并不知道门面的存在</li></ul></li><li><p>优点</p><ul><li>减少了系统的相互依赖，提高了灵活性</li><li>符合依赖倒转原则<ul><li>针对接口编程，依赖于抽象而不依赖于具体</li></ul></li><li>符合迪米特法则<ul><li>最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用</li></ul></li></ul></li><li><p>缺点</p><ul><li>增加了系统的类和链路</li><li>不是很符合开闭原则，如果增加了新的逻辑，需要修改facade外观类</li></ul></li><li><p>编码实例</p><ul><li>定义抽象接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageManager</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>子系统</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailMessageManager</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"推送邮件消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatMessageManager</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"推送微信消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsMessageManager</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"推送短信消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DingDingMessageManager</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageManager</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"推送钉钉消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>外观类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageFacade</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageManager</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IMessageManager  wechatMessageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WechatMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IMessageManager  smsMessageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmsMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IMessageManager  mailMessageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IMessageManager  dingDingMessageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DingDingMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wechatMessageManager<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        smsMessageManager<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailMessageManager<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dingDingMessageManager<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IMessageManager iMessageManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iMessageManager<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理设计模式</title>
      <link href="2021/01/14/dai-li-she-ji-mo-shi/"/>
      <url>2021/01/14/dai-li-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代理设计模式（Proxy Pattern）</p></blockquote><ul><li><p>为其他对象提供一种代理以控制对这个对象的访问，属于结构型模式。</p></li><li><p>客户端并不直接调用实际的对象，而是通过调用代理，来间接的调用实际的对象</p></li><li><p>使用场景</p><ul><li>客户端不想直接访问实际的对象，或者访问实际的对象存在困难，通过一个代理对象来完成间接的访问</li><li>想在访问一个类时做⼀些控制，或者增强功能</li></ul></li><li><p>角色</p><ul><li>Subject: 抽象接口,真实对象和代理对象都要实现的一个抽象接口</li><li>Proxy： 包含了对真实对象的引用,从而可以随意的操作真实对象的方法</li><li>RealProject ：真实对象</li></ul></li><li><p>优点</p><ul><li>可以在访问一个类时做一些控制，或增加功能</li><li>操作代理类无须修改原本的源代码，符合开闭原则，系统具有较好的灵活性和可扩展性</li></ul></li><li><p>缺点</p></li><li><p>增加系统复杂性和调用链路</p></li><li><p>和装饰器模式的区别：</p><ul><li>代理模式主要是两个功能<ul><li>保护目标对象</li><li>增强目标对象，和装饰模式类似了</li></ul></li></ul></li><li><p>编码实例</p><ul><li>抽取公共方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DigitalSell</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>真实对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigitalSellReal</span> <span class="token keyword">implements</span> <span class="token class-name">DigitalSell</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销售华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代理对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigitalSellProxy</span> <span class="token keyword">implements</span> <span class="token class-name">DigitalSell</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> DigitalSell digitalSellReal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DigitalSellReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">makeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digitalSellReal<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">makeAD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个人流量很高的地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeAD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投放广告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//代理</span>        DigitalSell proxyObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DigitalSellProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObj<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger3.0接口文档</title>
      <link href="2021/01/14/swagger3-0-jie-kou-wen-dang/"/>
      <url>2021/01/14/swagger3-0-jie-kou-wen-dang/</url>
      
        <content type="html"><![CDATA[<ul><li><p>OpenApi规范：声明了⽤于⽂档的规范的版本</p><ul><li><p>地址：<code>https://github.com/OAI/OpenAPI-Specification</code></p></li><li><p>OpenAPI Initiative在GitHub上托管社区驱动的规范。</p></li><li><p>规范是⼀种与语⾔⽆关的格式，⽤于描述RESTful Web服务，应⽤程序可以解释⽣成的⽂件，这样才能⽣成代码、⽣成⽂档并根据其描述的服务创建模拟应⽤。</p></li><li><p>开放API规范（OAS）是⼀种⽆需编写实际API代码就可以记录API的⽅法。 这是⼀种开放源代码格式，可以⽤来描述API。 在此过程中，我们可以使⽤JSON或YAML格式。</p></li><li><p>OpenAPI⽂档有三个必需的部分或对象，也可以增加其他模块：</p><ul><li>openapi - OpenAPI规范版本的语义版本号</li><li>info - 有关API的元数据</li><li>paths - API的可⽤路径和操作</li></ul></li></ul></li><li><p>⾃动化接⼝⽂档⽣成解决⽅案</p><ul><li><p>ApiDoc</p><ul><li>地址：<code>https://apidocjs.com/</code></li><li>github:<code>https://github.com/apidoc/apidoc</code></li><li>简介：源代码中的注释直接⾃动⽣成api接⼝⽂档的⼯具<ul><li>在代码⾥⾯增加注释使⽤</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @apiGroup Product* @api {GET} /product/{id} 查询⼀个产品* @apiDescription 接⼝描述xxx* @apiParam {String} id 产品id(必填*)* @apiSuccessExample SuccessExample* HTTP/1.1 200* {* id: 'xxx',* name: 'xxx',* desc: 'xxxx'* }* @apiErrorExample ErrorExample*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Product <span class="token function">detail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点<ul><li>不⼊侵代码</li><li>⽀持跨语⾔使⽤</li><li>界⾯友好简洁</li></ul></li><li>缺点<ul><li>依赖环境 node/npm</li></ul></li></ul></li><li><p>Swagger 丝袜哥</p><ul><li><p>地址：<code>https://swagger.io/tools/swagger-ui/</code></p></li><li><p>简介：在java代码⾥⾯增加注解⽣成接⼝⽂档</p></li><li><p>优点</p><ul><li>⽀持SpringMVC、SpringBoot、SpringCloud等主流java框架</li><li>对java代码友好</li><li>界⾯简洁</li><li>国内⽐较活跃,主要是spring社区带动</li><li>功能⽐较多</li></ul></li><li><p>缺点</p><ul><li>对跨语⾔⽀持不友好（可以和knife4j整合解决这个问题）</li><li>代码需要引⼊相关依赖包和配置</li><li>⽂档相对缺少</li></ul></li></ul></li></ul></li><li><p>Swagger介绍</p><ul><li>基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源接⼝⽂档⾃动⽣成⼯具，可以让开发⼈员快速设计、构建、记录以及使⽤ Rest API</li><li>Swagger 主要包含了以下三个部分：<ul><li>Swagger Editor：基于浏览器的编辑器，我们可以使⽤它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API ⽂档，后⽂我将使⽤浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为OpenAPI（以前称为 Swagger）规范定义的任何API ⽣成服务器存根和客户端 SDK 来简化构建过程。</li></ul></li></ul></li><li><p>SpringFox介绍（是 spring 社区维护的⼀个⾮官⽅项⽬）</p><ul><li>是⼀个开源的API Doc的框架，Marty Pitt编写了⼀个基于Spring的组件swagger-springmvc，⽤于将swagger集成到springmvc中来， 它的前身是swaggerspringmvc，</li><li>可以将我们的Controller中的⽅法以⽂档的形式展现。官⽅定义为： Automated JSON APIdocumentation for API’s built with Spring。</li><li>地址：<code>https://github.com/springfox/springfox</code><ul><li>版本的说明<ul><li>SpringFox 3.0.0 发布（突破性的变更版本）</li><li>Spring5，Webflux⽀持，依赖少</li><li>⽀持OpenApi 3.0.3</li><li>有springboot的整合的starter，使⽤更便捷</li></ul></li></ul></li></ul></li></ul><blockquote><p>SpringBoot2.x整合Swagger3.x</p></blockquote><ul><li>SpringBoot添加pom⽂件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--接口文档自动生成--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置文件增加配置</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#spring.application.name=增加中文会乱码，可以修改文件编码，或者使用yml格式</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">1024shop</span><span class="token comment" spellcheck="true"># ===== 自定义swagger配置 ===== #</span><span class="token attr-name">swagger.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">swagger.application-name</span><span class="token punctuation">=</span> <span class="token attr-value">${spring.application.name}</span><span class="token attr-name">swagger.application-version</span><span class="token punctuation">=</span><span class="token attr-value">1.0</span><span class="token comment" spellcheck="true">#swagger.application-description=不要有中文</span><span class="token attr-name">swagger.application-description</span><span class="token punctuation">=</span><span class="token attr-value">1024shop api info</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建配置类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableOpenApi<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"swagger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableOpenApi</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 是否开启swagger，生产环境一般关闭，所以这里定义一个变量     */</span>    <span class="token keyword">private</span> Boolean enable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 项目应用名     */</span>    <span class="token keyword">private</span> String applicationName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 项目版本信息     */</span>    <span class="token keyword">private</span> String applicationVersion<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 项目描述信息     */</span>    <span class="token keyword">private</span> String applicationDescription<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 定义是否开启swagger，false为关闭，可以通过变量控制，线上关闭</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>enable<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//配置api文档元信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 选择哪些接口作为swagger的doc发布</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//apis() 控制哪些接口暴露给swagger，</span>                <span class="token comment" spellcheck="true">// RequestHandlerSelectors.any() 所有都暴露</span>                <span class="token comment" spellcheck="true">// RequestHandlerSelectors.basePackage("club.ldclass.*")  指定包位置</span>                <span class="token comment" spellcheck="true">// withMethodAnnotation(ApiOperation.class)标记有这个注解 ApiOperation</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span>applicationName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span>applicationDescription<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"http://www.ldclass.club"</span><span class="token punctuation">,</span> <span class="token string">"873791226@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>applicationVersion<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>新版访问路径</p><ul><li><code>http://localhost:8081/swagger-ui/index.html</code></li><li>注意：如果访问不成功，记得看是否有拦截器拦截了相关资源，配置不拦截即可</li></ul></li><li><p>Swagger3.x常⽤注解</p><ul><li>@Api 模块配置，⽤在controller类，描述API接⼝</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户模块"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"UserController"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@ApiOperation 接⼝配置，⽤在⽅法上，描述接⼝⽅法</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查看用户详情"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户Id"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@ApiParam ⽅法参数配置，⽤在⼊参上⾯，描述参数</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查看用户详情"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户Id"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@ApiIgnore 忽略此接⼝不⽣成⽂档</li></ul><pre class="line-numbers language-java"><code class="language-java">     <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"根据id删除用户"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">delById</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户Id"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象注解ApiModel</p><ul><li>@ApiModel()<ul><li>⽤于类 表示对类进⾏说明，⽤于参数⽤实体类接收，value–表示对象名，description–描述</li><li>这种⼀般⽤在post创建的时候，使⽤对象提交这样的场景</li></ul></li><li>@ApiModelProperty()<ul><li>⽤于⽅法，字段； 表示对model属性的说明或者数据操作更改</li><li>value–字段说明</li><li>name–重写属性名字</li><li>dataType–重写属性类型</li><li>required–是否必填</li><li>example–举例说明</li><li>hidden–隐藏</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"新增用户请求模型"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveUserRequest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"主键"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"邮箱"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"873791226@qq.com"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"手机号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>响应结果ApiResponse<ul><li>@ApiResponse 描述接⼝响应</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"⽤户登录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">"302"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"重定向，跳转登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">"403"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">login</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"⼿机号"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> String phone<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pwd"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Swagger3.x和项⽬整合的注意事项<ul><li>明确接⼝的Http请求⽅式<ul><li>⼀个接⼝使⽤@RequestMapping会⽣成多个⽂档</li></ul></li><li>线上不要开启接⼝⽂档</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus-generator代码生成器</title>
      <link href="2021/01/14/mybatis-plus-generator-dai-ma-sheng-cheng-qi/"/>
      <url>2021/01/14/mybatis-plus-generator-dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mybatis-plus-generator</p></blockquote><ul><li><p>AutoGenerator 是 MyBatis-Plus 的代码⽣成器，通过AutoGenerator 可以快速⽣成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代<br>码，极⼤的提升了开发效率。</p></li><li><p>底层是模板引擎技术，可以⾃定义⽣成的java类模板</p></li><li><p>mybatis-plus-genarator实战</p><ul><li>添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 代码自动生成依赖 begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- velocity --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 代码自动生成依赖 end--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码（标记TODO的地方要修改）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>MybatisPlusException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 全局配置</span>        GlobalConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否支持AR模式</span>        config<span class="token punctuation">.</span><span class="token function">setActiveRecord</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 作者</span>                <span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"ld"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 生成路径，最好使用绝对路径，window路径是不一样的</span>                <span class="token comment" spellcheck="true">//TODO  TODO  TODO  TODO</span>                <span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"F:/code/1024-shop-manager/src/main/java"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 文件覆盖</span>                <span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 主键策略</span>                <span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置生成的service接口的名字的首字母是否为I，默认Service是以I开头的</span>                <span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//实体类结尾名称</span>                <span class="token punctuation">.</span><span class="token function">setEntityName</span><span class="token punctuation">(</span><span class="token string">"%sDO"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//生成基本的resultMap</span>                <span class="token punctuation">.</span><span class="token function">setBaseResultMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//不使用AR模式</span>                <span class="token punctuation">.</span><span class="token function">setActiveRecord</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//生成基本的SQL片段</span>                <span class="token punctuation">.</span><span class="token function">setBaseColumnList</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 数据源配置</span>        DataSourceConfig dsConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置数据库类型</span>        dsConfig<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//TODO  TODO  TODO  TODO</span>                <span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/xd_shop?useSSL=false&amp;serverTimezone=UTC"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"Root@123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 策略配置globalConfiguration中</span>        StrategyConfig stConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//全局大写命名</span>        stConfig<span class="token punctuation">.</span><span class="token function">setCapitalMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 数据库表映射到实体的命名策略</span>                <span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//使用lombok</span>                <span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//使用restcontroller注解</span>                <span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 生成的表, 支持多表一起生成，以数组形式填写</span>                <span class="token comment" spellcheck="true">//TODO  TODO  TODO  TODO 两个方式，直接写，或者使用命令行输入</span>                <span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"product"</span><span class="token punctuation">,</span> <span class="token string">"banner"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"coupon"</span><span class="token punctuation">,</span> <span class="token string">"product_order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//.setInclude(scanner("表名，多个英文逗号分割").split(","));</span>        <span class="token comment" spellcheck="true">//4. 包名策略配置</span>        PackageConfig pkConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pkConfig<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"club.ldclass.shopmanager"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"dao"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span><span class="token string">"dao/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 整合配置</span>        AutoGenerator ag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsConfig<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>stConfig<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pkConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6. 执行操作</span>        ag<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======  Done 相关代码生成完毕  ========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 读取控制台内容     * &lt;/p>     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">scanner</span><span class="token punctuation">(</span>String tip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        help<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String ipt <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>ipt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ipt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusException</span><span class="token punctuation">(</span><span class="token string">"请输入正确的"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mybatis-plus-generator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
            <tag> mybatis-plus-generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus</title>
      <link href="2021/01/14/mybatis-plus/"/>
      <url>2021/01/14/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h3 id="一、mybatis-plus"><a href="#一、mybatis-plus" class="headerlink" title="一、mybatis-plus"></a>一、mybatis-plus</h3><ul><li>mybatis-plus<ul><li>官⽹<code>https://baomidou.com/</code></li><li>是⼀个 Mybatis 的增强⼯具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提⾼效率⽽⽣</li></ul></li></ul><h3 id="二、SpringBoot2-X整合mybatis-plus"><a href="#二、SpringBoot2-X整合mybatis-plus" class="headerlink" title="二、SpringBoot2.X整合mybatis-plus"></a>二、SpringBoot2.X整合mybatis-plus</h3><ul><li>添加依赖pom.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus和springboot整合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mybatis-plus相关配置</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#==============================mybatis-plus相关配置========================================</span><span class="token comment" spellcheck="true">#配置最新全局配置文件（是否开启xml配置）</span><span class="token comment" spellcheck="true">#mybatis-plus.config-location =classpath:mybatis-config.xml</span><span class="token comment" spellcheck="true">#mybatis plus 日志打印</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span class="token comment" spellcheck="true">#xml文件路径</span><span class="token attr-name">mybatis-plus.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath*:club/ldclass/shopmanager/**/mapper/*.xml</span><span class="token comment" spellcheck="true">#配置mybatis包路径</span><span class="token attr-name">mybatis-plus.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">club.ldclass.shopmanager.model</span><span class="token comment" spellcheck="true">#mybatis-plus下划线转驼峰配置，默认就是true</span><span class="token attr-name">mybatis-plus.configuration.map-underscore-tocamel-case</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#配置全局默认主键类型,实体类就不用加 @TableId(value ="id", type = IdType.AUTO)</span><span class="token attr-name">mybatis-plus.global-config.db-config.idtype</span><span class="token punctuation">=</span><span class="token attr-value">auto</span><span class="token comment" spellcheck="true">#逻辑删除</span><span class="token comment" spellcheck="true">#删除是1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicdelete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#未删除是0</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicnot-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#如果java实体类没加注解@TableLogic，则可以配置这个，推荐这里配置</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicdelete-field</span><span class="token punctuation">=</span><span class="token attr-value">deleted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>mybatis-plus常⽤注解</p><ul><li>@TableName ⽤于定义表名</li><li>@TableId ⽤于定义表的主键<ul><li>属性<ul><li>value ⽤于定义主键字段名</li><li>type ⽤于定义主键类型（主键策略 IdType）</li></ul></li><li>主键策略<ul><li>IdType.AUTO 主键⾃增，系统分配，不需要⼿动输⼊</li><li>IdType.NONE 未设置主键</li><li>IdType.INPUT 需要⾃⼰输⼊ 主键值</li><li>IdType.ASSIGN_ID 系统分配 ID，⽤于数值型数据（Long，对应 mysql 中 BIGINT 类型）</li><li>IdType.ASSIGN_UUID 系统分配 UUID，⽤于字符串型数据（String，对应 mysql 中 varchar(32) 类型）</li></ul></li></ul></li><li>@TableField ⽤于定义表的⾮主键字段<ul><li>value ⽤于定义⾮主键字段名,⽤于别名匹配，假如java对象属性和数据库属性不⼀样</li><li>exist ⽤于指明是否为数据表的字段， true 表示是，false 为不是，假如某个java属性在数据库没对应的字段则要标记为faslse</li><li>fill ⽤于指定字段填充策略（FieldFill，⽤的不多）<ul><li>字段填充策略：⼀般⽤于填充 创建时间、修改时间等字段<ul><li>FieldFill.DEFAULT 默认不填充</li><li>FieldFill.INSERT 插⼊时填充</li><li>FieldFill.UPDATE 更新时填充</li><li>FieldFill.INSERT_UPDATE 插⼊、更新时填充。</li></ul></li></ul></li></ul></li></ul></li><li><p>mybatis-plus常用API</p><ul><li>根据id查询<code>selectById</code></li><li>根据多个id查询<code>selectBatchIds</code></li><li>条件查询<code>selectOne</code></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BannerDO bannerDO <span class="token operator">=</span> bannerMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>BannerDO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"bannerDO {}"</span> <span class="token operator">+</span> bannerDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询总数<code>selectCount</code></li><li>查询列表<code>selectList</code></li><li>根据id删除 <code>deleteById</code></li><li>条件删除<code>deleteByMap</code></li><li>更新操作 update<ul><li>queryWrapper更新操作</li><li>updateWrapper更新操作</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BannerDO bannerDO <span class="token operator">=</span> BannerDO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"taobao.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> bannerMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bannerDO<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>BannerDO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rows {}"</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UpdateWrapper updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"aaa.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> bannerMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rows {}"</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增<code>insert</code></li></ul></li><li><p>QueryWrapper⽐较API</p><ul><li>eq 等于</li><li>ne 不等于</li><li>gt ⼤于</li><li>ge ⼤于等于</li><li>lt ⼩于</li><li>le ⼩于等于</li><li>or 拼接or</li><li>between 两个值中间</li><li>notBetween 不在两个值中间</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"bbb.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bannerMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>QueryWrapper模糊查询和其他API<ul><li>like 模糊匹配</li><li>notLike 不像</li><li>likeLeft 左匹配</li><li>likeRight 右边匹配</li><li>isNull 字段为空</li><li>in in查询</li><li>groupBy 分组</li><li>orderByAsc 升序</li><li>orderByDesc 降序</li><li>having having查询</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryWrapper2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"bbb.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bannerMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Mybatis-plus-分页插件配置"><a href="#三、Mybatis-plus-分页插件配置" class="headerlink" title="三、Mybatis plus 分页插件配置"></a>三、Mybatis plus 分页插件配置</h3><ul><li>项⽬配置分⻚</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusPageConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MybatisPlusInterceptor mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分页插件</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试分页</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>BannerDO<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一页，每页3条</span>        Page<span class="token operator">&lt;</span>BannerDO<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage<span class="token operator">&lt;</span>BannerDO<span class="token operator">></span> iPage <span class="token operator">=</span> bannerMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总条数 {}"</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总页数 {}"</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据 {}"</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、mybatis-plus进阶"><a href="#四、mybatis-plus进阶" class="headerlink" title="四、mybatis-plus进阶"></a>四、mybatis-plus进阶</h3><ul><li><p>Mybatis plus ⾃定义sql脚本</p><ul><li>新建xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace修改--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.shopmanager.dao.AddressMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置mapper.xml路径</p><ul><li>默认在resource/mapper</li><li>如果xml放到java路径下，需要配置pom.xml，再在配置文件中，配置mapper.xml路径</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--指定资源的位置（xml放在resources下，可以不用指定）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--xml放在java目录下--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#xml文件路径</span><span class="token attr-name">mybatis-plus.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath*:club/ldclass/shopmanager/**/mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>ActiveRecord应用</p><ul><li>Active Record(活动记录)，是⼀种领域模型模式，特点是⼀个模型类对应关系型数据库中的⼀个表，⽽模型类的⼀个实例对应表中的⼀⾏记录。</li><li>Mybatis Plus对AR有⼀定⽀持, 在MP中开启AR，仅需要实体类继承Model类即可</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">//表名映射,⽤于新增才需要</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"banner"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BannerDO</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token operator">&lt;</span>BannerDO<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String img<span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用AR</span>BannerDO bannerDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BannerDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BannerDO b <span class="token operator">=</span> bannerDO<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>BannerDO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使⽤建议<ul><li>业务逻辑⽐较简单，当类基本上和数据库中的表⼀⼀对应时, ActiveRecord是⾮常⽅便的, 即业务逻辑⼤多数是对单表操作，简单,直观 ⼀个类就包括了数据访问和业务逻辑.</li><li>ActiveRecord虽然有业务逻辑, 但基本上都是基于单表的. 跨表逻辑⼀般会放到当发⽣跨表的操作时, 往往会配合使⽤事务脚本(Transaction Script)中.</li><li>如果对象间的关联越来越多, 你的事务脚本越来越庞⼤,重复的代码越来越多, 就不建议使⽤了</li><li>模型容易混乱，ActiveRecord保存了数据, 使它有时候看上去像数据传输对象(DTO). 但是ActiveRecord有数据库访问能⼒, 所以所以分布式或者⼤型项⽬基本不⽤</li></ul></li></ul></li><li><p>数据库高并发之乐观锁</p><ul><li>乐观锁<ul><li>每次去拿数据的时候都认为别⼈不会修改，更新的时候会判断是别⼈是否回去更新数据，通过版本来判断，如果数据被修改了就拒绝更新</li><li>Java⾥⾯⼤量使⽤CAS, CAS这个是属于乐观锁，性能较悲观锁有很⼤的提⾼</li><li>AtomicXXX 等原⼦类底层就是CAS实现，⼀定程度⽐synchonized好，因为后者是悲观锁</li><li>⼩结：悲观锁适合写操作多的场景，乐观锁适合读操作多的场景，乐观锁的吞吐量会⽐悲观锁多</li></ul></li><li>数据库的乐观锁<ul><li>⼤多是基于数据版本 (Version)记录机制实现。即为数据增加⼀个版本标识，在基于数据库表的版本解决⽅案中，⼀般是通过为数据库表增加⼀个 “version” 字段来 实现。 读取出数据时，将此版本号⼀同读出，之后更新时，对此版本号加⼀。此时，将提交数据的版本数据与数据，库表对应记录的当前版本信息进⾏⽐对，如果提交的数据 版本号⼤于数据库表当前版本号，则予以更新，否则认为是过期数据</li></ul></li></ul></li><li><p>Mybatis-Plus之乐观锁插件</p><ul><li><p>使用</p><ul><li>实体类增加version属性配置</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>数据库增加version版本字段</li><li>增加乐观锁插件</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusPageConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MybatisPlusInterceptor mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分页插件</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乐观锁插件</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BannerDO bannerDO <span class="token operator">=</span> BannerDO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"aabbcc.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> bannerMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>bannerDO<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rows:{}"</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意<ul><li>乐观锁数据类型⽀持int、integer、long、timestamp</li><li>仅⽀持updateById和update⽅法</li></ul></li></ul></li></ul></li><li><p>mybatis-plus逻辑删除配置</p><ul><li>数据库增加deleted字段，0是未删除，1表示删除</li><li>实体类增加属性配置@TableLogic 或者 在配置⽂件配置</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#逻辑删除</span><span class="token comment" spellcheck="true">#删除是1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicdelete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#未删除是0</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicnot-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#如果java实体类没加注解@TableLogic，则可以配置这个，推荐这里配置</span><span class="token attr-name">mybatis-plus.global-config.db-config.logicdelete-field</span><span class="token punctuation">=</span><span class="token attr-value">deleted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>验证<ul><li>deleteById删除，结果是更新deleted字段</li><li>查询的时候会⾃动拼接上deleted=0的检索条件</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mybatis-plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok插件</title>
      <link href="2021/01/14/lombok-cha-jian/"/>
      <url>2021/01/14/lombok-cha-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Lombok"><a href="#一、Lombok" class="headerlink" title="一、Lombok"></a>一、Lombok</h3><ul><li><p>官⽹：<code>https://projectlombok.org/</code></p><ul><li>lombok消除Java的冗⻓代码，尤其是对于简单的Java对象，只要加上注解就⾏</li></ul></li><li><p>pom.xml添加依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.16--></span><span class="token comment" spellcheck="true">&lt;!--scope=provided，说明它只在编译阶段⽣效，不需要打⼊包中, Lombok在编译期将带Lombok注解的Java⽂件正确编译为完整的Class⽂件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>IDEA添加Lombok插件<ul><li>重启</li></ul></li></ul><img src="/2021/01/14/lombok-cha-jian/pz.jpg" title="安装完Lombok插件，需要在设置中启⽤annotation processors"><h3 id="二、Lombok常用注解"><a href="#二、Lombok常用注解" class="headerlink" title="二、Lombok常用注解"></a>二、Lombok常用注解</h3><ul><li>常⻅注解@Getter/@Setter<ul><li>作⽤类上，⽣成所有成员变量的getter/setter⽅法</li><li>作⽤于成员变量上，⽣成该成员变量的getter/setter⽅法</li><li>@Getter/@Setter添加参数<ul><li>@Getter(AccessLevel.NONE)</li><li>@Getter(AccessLevel.PROTECTED)</li><li>…</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span>AccessLevel<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span>AccessLevel<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * final 只会⽣成get    */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String PWD <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * static 不会生成get/set    */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Date createTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Lombok⾮空判断和构造函数注解</p><ul><li>@NonNull<ul><li>作⽤于⽅法上或者属性，⽤于⾮空判断，如果为空则抛异常</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String email<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>@NoArgsConstructor<ul><li>⽣成⽆参构造器</li></ul></li><li>@AllArgsConstructor<ul><li>⽣成全参构造器</li></ul></li><li>@RequiredArgsConstructor<ul><li>指定参数的构造函数，有以下的特征的字段<ul><li>final类型未被初始化的属性, 标记了@NonNull的属性</li></ul></li></ul></li><li>注意：@NoArgsConstructor不能与@RequiredArgsConstructor同时添加</li></ul></li><li><p>@ToString</p><ul><li>作⽤于类，覆盖默认的toString()⽅法</li><li>不包括某个字段<ul><li><code>@ToString(exclude = {"age"})</code></li></ul></li><li>只输出某个字段<ul><li><code>@ToString(of = {"name"})</code></li></ul></li></ul></li><li><p>对象匹配EqualsAndHashCode注解</p><ul><li><p>@EqualsAndHashCode</p><ul><li>作⽤于类，覆盖默认的equals和hashCode, 作⽤于全部属性</li></ul></li><li><p>不包括某个属性</p><ul><li><code>@EqualsAndHashCode(exclude = {"age"})</code></li></ul></li><li><p>只输出某个属性</p><ul><li><code>@EqualsAndHashCode(of = {"name"})</code></li></ul></li><li><p>重写hashcode和equal⽅法</p><ul><li><p>HashCode⽅法</p><ul><li>顶级类Object⾥⾯的⽅法，所有类都是继承Object的，返回值int类型</li><li>根据⼀定的hash规则(存储地址，字段，或者⻓度等)，映射成⼀个数值，即散列值</li></ul></li><li><p>Equals⽅法</p><ul><li>顶级类Object⾥⾯的⽅法，所有类都是继承Object的，返回值boolean类型</li><li>根据⾃定义的匹配规则，⽤于匹配两个对象是否⼀样, ⼀般逻辑是如下<ul><li>判断地址是否⼀样</li><li>⾮空判断和class类型判断</li><li>强转</li><li>对象⾥⾯的字段⼀⼀匹配</li></ul></li></ul></li><li><p>如果两个对象相等（这⾥的相等是指，通过equals()⽐较两个对象时返回true），那么它们的hashCode()值⼀定相同</p></li><li><p>如果两个对象hashCode()相等，它们并不⼀定相等。在散列表中hashCode()相等，即两个键值对的哈希值相等。然⽽哈希值相等，并不⼀定能得出键值对相等，就出现所谓的哈希冲突场景，还需判断equals⽅法判断对象是否相等</p></li><li><p>应⽤场景：当向集合中插⼊对象时，如何判别在集合中是否已经存在该对象，⽐如Set确保存储对象的唯⼀，并判断是不是同个对象呢？</p><ul><li><p>依据hashCode和equals进⾏判断</p><ul><li>Set存储的对象必须重写这两个⽅法,</li><li>判断两个对象是否⼀样<ul><li>⾸先判断插⼊obj的hashcode值是否存在，hashcode值不存在则直 接插⼊集合</li><li>值存在则还需判断equals⽅法判断对象是否相等</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@EqualsAndHashCode注解可以自动重写 equals和hashcode方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> id <span class="token operator">==</span> user<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> user<span class="token punctuation">.</span>email<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> user<span class="token punctuation">.</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><ul><li><p>lombok的data注解</p><ul><li>@Data<ul><li>作⽤于类上，是以下注解的集合<ul><li>@ToString</li><li>@EqualsAndHashCode</li><li>@Getter</li><li>@Setter</li><li>@RequiredArgsConstructor</li></ul></li></ul></li></ul></li><li><p>Lombok注解@Builder</p><ul><li><p>构造者模式：⼜称之为建造者模式</p><ul><li>场景：当⼀个bean类重载了多个构造⽅法时,并且参数随机使⽤时,考虑使⽤构造者模式</li></ul></li><li><p>@Builder注解</p><ul><li>作⽤在类上</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDO</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用</span>StudentDO studentDO <span class="token operator">=</span> StudentDO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">"794666918@qq"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentDO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意：</p><ul><li>使用@Builder时，要添加上<ul><li>@AllArgsConstructor</li><li>@NoArgsConstructor</li></ul></li></ul></li></ul></li><li><p>Lombok注解@Log-@Slf4j</p><ul><li><p>@Log / @Slf4j</p><ul><li>作⽤于类上，⽣成⽇志变量, ⽤于记录⽇志</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Log</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDO</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"test⽅法测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="三、Lombok插件原理-对⽐反射技术"><a href="#三、Lombok插件原理-对⽐反射技术" class="headerlink" title="三、Lombok插件原理-对⽐反射技术"></a>三、Lombok插件原理-对⽐反射技术</h3><ul><li><p>JSR 269插件化注解处理</p><ul><li>JSR 269: Pluggable Annotation Processing API 实现在Javac编译阶段利⽤“Annotation Processor”对⾃定义的注解进⾏预处理后⽣成真正在JVM上⾯执⾏的“Class⽂件</li><li>地址：<code>https://www.jcp.org/en/jsr/detail?id=269</code></li></ul></li><li><p>JSR是Java Specification Requests的缩写，意思是Java 规范提案。是指向JCP(Java Community Process)提出新增⼀个标准化技术规范的正式请求。</p><ul><li>任何⼈都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的⼀个重要标准。</li></ul></li><li><p>Javac 解析成AST抽象语法树后, Lombok根据⾃⼰编写的注解处理器，动态地修改 AST增加新的节点（即Lombok⾃定义注解所需要⽣成的代码）,最终⽣成JVM可执⾏的字节码Class⽂件可以看编译后的在target⽬录下的class⽂件</p></li></ul><h3 id="四、Lombok优缺点"><a href="#四、Lombok优缺点" class="headerlink" title="四、Lombok优缺点"></a>四、Lombok优缺点</h3><ul><li><p>缺点：</p><ul><li>Lombok的使⽤要求⼀定要在IDE中安装对应的插件，如果项⽬组中有⼀个⼈使⽤了Lombok则都要⽤</li><li>代码可读性，可调试性低，⽐如想知道某个类中的某个属性的getter⽅法都被哪些类引⽤</li><li>影响升级，如果升级到某个新版本的JDK的时候，如果其中的特性在Lombok中不⽀持的话就会受到影响</li><li>注意常⻅的细节点<ul><li>⽐如只使⽤了@Data，⽽不使⽤@EqualsAndHashCode(callSuper=true)的话，会默认是@EqualsAndHashCode(callSuper=false),这时候⽣成的equals()⽅法只会⽐较⼦类的属性，不会考虑从⽗类继承的属性，⽆论⽗类属性访问权限是否开放,只要知道是否需要使⽤⽗类的属性即可，也提供定制化配置，所以不⽤过多担⼼</li></ul></li></ul></li><li><p>优点：</p><ul><li>使⽤注解即可帮忙⾃动⽣成代码</li><li>⼤⼤减少了代码量，使代码⾮常简洁</li><li>部分注解在业务项⽬中开发能⼤⼤提⾼效率</li></ul></li><li><p>项⽬中是否使用</p><ul><li>不建议开发中间件的项⽬使⽤，中间件设计的要求是解耦少依赖</li><li>业务项⽬实体类可以⽤，且⽤的时候知道对应的常⻅的注解原理</li></ul></li><li><p>Lombok</p><ul><li>@Setter/@Getter</li><li>@NonNull</li><li>@NoArgsConstructor</li><li>@AllArgsConstructor</li><li>@RequiredArgsConstructor</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@Data</li><li>@Builder</li><li>@Log</li><li>@Slf4j</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Lombok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目风险管理</title>
      <link href="2021/01/13/xiang-mu-feng-xian-guan-li/"/>
      <url>2021/01/13/xiang-mu-feng-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>项目风险管理包括规划风险管理、识别风险、开展风险分析、规划风险应对、实施风险应对和监督风险的各个过程。项目风险管理的目标在于提高正面风险的概率和（或）影响，降低负面风险的概率和（或）影响，从而提高项目成功的可能性。</li></ul><blockquote><p>项目风险管理的过程</p></blockquote><p>11.1 规划风险管理 — 定义如何实施项目风险管理活动的过程。<br>11.2 识别风险 — 识别单个项目风险，以及整体项目风险的来源，并记录风险特征的过程。<br>11.3 实施定性风险分析 — 通过评估单个项目风险发生的概率和影响以及其他特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程。<br>11.4 实施定量风险分析 — 就已识别的单个项目风险和其他不确定性的来源对整体项目目标的综合影响进行定量分析的过程。<br>11.5 规划风险应对 — 为处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程。<br>11.6 实施风险应对 — 执行商定的风险应对计划的过程。<br>11.7 监督风险 — 在整个项目期间，监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程。</p><blockquote><p>项目风险管理的核心概念</p></blockquote><ul><li><p>每个项目都在两个层面上存在风险。每个项目都有会影响项目达成目标的单个风险，以及由单个项目风险和不确定性的其他来源联合导致的整体项目风险。考虑整体项目风险，也非常重要。</p></li><li><p>项目风险管理过程同时兼顾这两个层面的风险</p><ul><li>单个项目风险是一旦发生，会对一个或多个项目目标产生正面或负面影响的不确定事件或条件。</li><li>整体项目风险是不确定性对项目整体的影响，是相关方面临的项目结果正面和负面变异区间。它源于包括单个风险在内的所有不确定性。</li></ul></li><li><p>为有效管理特定项目的风险，项目团队需要知道，相对于要追求的项目目标，可接受的风险敞口究竟是多大。这通常用可测量的风险临界值来定义。</p></li><li><p>风险临界值反映了组织与项目相关方的风险偏好程度，是项目目标的可接受的变异程度。应该明确规定风险临界，并传达给项目团队，同时反映在项目的风险影响级别定义中。</p></li></ul><blockquote><p>项目风险管理的发展趋势和新兴实践</p></blockquote><ul><li>项目风险管理的关注面正在扩大，以便确保考虑所有类型的风险，并在更广泛的背景中理解项目风险。项目风险管理的发展趋势和新兴实践包括（但不限于）:<ul><li>非事件类风险。大多数项目只关注作为可能发生或不发生的不确定性未来事件的风险。不过，识别并管理非事件类风险的意识正在不断加强。非事件类风险有两种主要类型：<ul><li>变异性风险。已规划事件、活动或决策的某些关键方面存在不确定性，就导致变异性风险。</li><li>模糊性风险。对未来可能发生什么，存在不确定性。</li></ul></li><li>项目韧性。随着对所谓“未知-未知”因素的意识的增强，人们也越来越明确地知道确实存在突发性风险。这种风险只有在发生后才能被发现。可以通过加强项目韧性来应对突发性风险。</li><li>整合式风险管理。项目存在于组织背景中，可能是项目集或项目组合的一部分。在项目、项目集、项目组合和组织这些层面上，都存在风险。应该在适当的层面上承担和管理风险。应该采用协调式企业级风险管理方法，来确保所有层面的风险管理工作的一致性和连贯性。</li></ul></li></ul><blockquote><p>在敏捷或适应型环境中需要考虑的因素</p></blockquote><ul><li><p>从本质上讲，越是变化的环境就存在越多的不确定性和风险。要应对快速变化，就需要采用适应型方法管理项目，即：通过跨职能项目团队和经常审查增量式工作产品，来加快知识分享，确保对风险的认知和管理。在选择每个迭代期的工作内容时，应该考虑风险；在每个迭代期间应该识别、分析和管理风险。</p></li><li><p>此外，应该根据对当前风险敞口的理解的加深，定期更新需求文件，并随项目进展重新排列工作优先级。</p></li></ul><blockquote><p>风险应对措施</p></blockquote><ul><li>积极风险应对措施<ul><li>判断思路：<ul><li>如果采取措施之后，风险一定会发生，就是开拓</li><li>如果采取措施之后，风险会发生，风险发生的概率和影响增大了，就是提高</li><li>如果采取措施之后，风险会发生，但是有第三方一起来共担风险，就是分享</li><li>如果没有采取措施，就是接受</li></ul></li></ul></li></ul><table><thead><tr><th>应对措施</th><th>特点</th><th>举例</th><th>风险效果</th></tr></thead><tbody><tr><td>开拓</td><td>确保机遇实现</td><td>分配更多有能力的资源，以缩短完成时间或获取更高的资源</td><td>风险一定会发生</td></tr><tr><td>分享</td><td>将机会的责任分配给第三方（第三方最能为项目利益获得机会）</td><td>合资公司，风险分享的合作伙伴、团队</td><td>风险会发生，但是和第三方一起共担</td></tr><tr><td>提高</td><td>提高机会发生的概率和产生的影响</td><td>识别和发挥关键驱动因素，促进机遇的成因，积极强化触发条件</td><td>风险发生的概率和影响增大了</td></tr><tr><td>接受</td><td>机会发生时乐以利用，但不主动追求</td><td></td><td>风险会发生，且发生概率和影响不变</td></tr></tbody></table><ul><li>消极风险应对措施<ul><li>判断思路<ul><li>如果采取措施之后，风险不存在了，就是回避</li><li>如果采取措施之后，风险存在，风险发生的概率和影响减少了，就是减轻</li><li>如果采取措施之后，风险存在，但是风险发生概率和影响不变，就是转移</li><li>如果没有采取措施，就是接受</li><li>如果什么都不做，就是被动接受</li><li>虽然没有措施去改变风险，但是做了储备，就是主动接受</li></ul></li></ul></li></ul><table><thead><tr><th>应对措施</th><th>特点</th><th>举例</th><th>风险效果</th></tr></thead><tbody><tr><td>回避</td><td>消除风险或风险产生的原因</td><td>修改项目管理计划；对受威胁的目标放松要求，如延长进度或缩小范围；在项目初期澄清需求，获取信息，加强沟通，获得专门技术</td><td>风险不会再发生</td></tr><tr><td>转移</td><td>将风险或连同应对责任转移到第三方；处理财务风险最有效；一般支付风险费用</td><td>保险：履约保险；保证书或担保书；合同</td><td>风险会发生，但是转移给别人了</td></tr><tr><td>减轻</td><td>将风险改了和影响降低到可接受程度内</td><td>采用不太复杂的流程；使用成熟的技术；实施更多的测试；选择更加稳定的供应商；原型开发；在子系统中设计冗余</td><td>风险发生的概率和影响减小了</td></tr><tr><td>接受</td><td>接受风险</td><td>主动接受：建立应急储备，安排一定的时间、资金或资源<br>被动接受：只记录而不采取行动，待风险发生时进行处理</td><td>风险会发生，且发生概率和影响不变</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目沟通管理的3个子过程</title>
      <link href="2021/01/12/xiang-mu-gou-tong-guan-li-de-3-ge-zi-guo-cheng/"/>
      <url>2021/01/12/xiang-mu-gou-tong-guan-li-de-3-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划沟通管理</p></blockquote><ul><li><p>作用</p><ul><li>为及时向相关方提供相关信息，引导相关方有效参与项目，而编制书面沟通计划。</li><li>本过程应根据需要在整个项目期间定期开展</li></ul></li><li><p>需要在项目生命周期早期，针对项目相关方多样性的信息需求，制定有效的沟通管理计划。应该定期审核沟通管理计划，并进行必要的修改，例如在相关社区发生变化或每个新项目阶段开始时。</p></li><li><p>在大多数项目中，都需要很早就开展沟通规划工作，例如在识别相关方及制定项目管理计划期间</p></li></ul><blockquote><p>管理沟通</p></blockquote><ul><li><p>作用</p><ul><li>按沟通管理计划和相关方参与计划的要求优化信息传递流程。</li><li>本过程需要在整个项目期间开展</li></ul></li><li><p>管理沟通过程设计与开展有效沟通有关的所有方面，包括使用适当的技术、方法和技巧。此外，它还允许沟通活动具有灵活性，允许对方法和技术进行调整，以满足相关方及项目不断变化的需求。</p></li></ul><blockquote><p>监督沟通</p></blockquote><ul><li><p>作用</p><ul><li>按沟通管理计划和相关方参与计划的要求优化信息传递流程</li><li>本过程需要在整个项目期间开展</li></ul></li><li><p>项目沟通的影响和结果应该接受认真的评估和监督，以确保在正确的时间，通过正确的渠道，将正确的内容（发送方和接收方对其理解一致）传递给正确的受众。监督沟通可能需要采取各种方法，例如，开展客户满意度调查、整理经验教训、开展团队观察、审查问题日志中的数据，或评估相关方参与度评估矩阵中的变更</p></li></ul><blockquote><p>需求分析</p></blockquote><ul><li><p>沟通需求定义</p><ul><li>确定谁需要何种信息，何时需要，如何向他们传递，以及由谁传递</li></ul></li><li><p>内容</p><ul><li>项目相关方的沟通需求，包括所需信息的类型和格式，以及信息对干系人的价值<ul><li>组织结构图</li><li>项目组织和相关方之间的责任关系</li><li>项目所涉及的学科、部门和专业</li><li>有多少人在什么地点参与项目</li><li>内部信息需要（如何时在组织内部沟通）</li><li>外部信息需要（如何时与媒体、公众或承包商沟通）</li><li>来自相关方登记册的相关方信息和沟通需求</li></ul></li></ul></li><li><p>沟通渠道计算</p><ul><li>n(n-1)/2,n代表相关方的数量</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目沟通管理</title>
      <link href="2021/01/11/xiang-mu-gou-tong-guan-li/"/>
      <url>2021/01/11/xiang-mu-gou-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>项目沟通管理包括通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程。</li><li>项目沟通管理由两个部分组成：第一部分是制定策略，确保沟通对相关方行之有效；第二部分是执行必要活动，以落实沟通策略。</li></ul><blockquote><p>项目沟通管理的过程</p></blockquote><ul><li>规划沟通管理<ul><li>基于每个相关方或相关方群体的信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程。</li></ul></li><li>管理沟通<ul><li>确保项目信息及时且恰当地收集、生成、发布、存储、检索、管理、监督和最终处置的过程</li></ul></li><li>监督沟通<ul><li>确保满足项目及其相关方的信息需求的过程</li></ul></li></ul><blockquote><p>项目沟通管理的核心概念</p></blockquote><ul><li><p>沟通是指有意或无意的信息交换。交换的信息可以是想法、指示或情绪。</p></li><li><p>信息交换的方法</p><ul><li>书面形式。实物或电子形式。</li><li>口头形式。面对面或远程形式。</li><li>正式或非正式形式（用正式纸质或社交媒体）。</li><li>手势动作。语调和面部表情</li><li>媒体形式。图片、行动，甚至只是遣词造句</li><li>遣词造句。表达一种想法的词语往往不止一个，且各词语的含义会存在细微差异</li></ul></li><li><p>项目经理的大多数时间用于与团队成员和其他项目相关方沟通，包括来自组织内部（组织各个层级）和组织外部的人员。不同相关方可能有不同的文化和组织背景，以及不同的专业水平、观点和兴趣，而有效的沟通能够在他们之间架起一座桥梁</p></li><li><p>沟通活动可按多种纬度进行分类，包括（但不限于）：</p><ul><li>内部。针对项目内部或组织内部的相关方</li><li>外部。针对外部相关方，如客户、供应商、其他项目、组织、政府，公众和环保倡导者</li><li>正式。报告、正式会议（定期及临时）、会议议程和记录、相关方简报和演示。</li><li>非正式。采用电子邮件、社交媒体、网站，以及非正式临时讨论的一般沟通活动。</li><li>层级沟通。相关方或相关方群体相对于项目团队的位置将会以如下方式影响信息传递的形式和内容：<ul><li>向上沟通。针对高层相关方</li><li>向下沟通。针对承担项目工作的团队和其他人员</li><li>横向沟通。针对项目经理或团队的同级人员</li></ul></li><li>官方沟通。年报，呈交监管机构或政府部门的报告。</li><li>非官方沟通。采用灵活（往往为非正式）的手段，来建立和维护项目团队及其相关方对项目情况的了解和认可，并在他们之间建立强有力的关系。</li><li>书面与口头沟通。口头（用词和音调变化）及非口头（肢体语言和行为），社交媒体和网站、媒体发布</li></ul></li></ul><blockquote><p>项目沟通管理的发展趋势和新兴实践</p></blockquote><ul><li><p>在关注相关方，以及认可相关方的有效参与对项目及组织的价值的同时，也要认识到制定和落实适当的沟通策略，对维系与相关方的有效关系是至关重要的</p></li><li><p>项目沟通管理的发展趋势和新兴实践包括（但不限于）：</p><ul><li>将相关方纳入项目评审范围</li><li>让相关方参加项目会议</li><li>社交工具的使用日益增多</li><li>多面性沟通方法</li></ul></li></ul><blockquote><p>裁剪时需要考虑的因素</p></blockquote><ul><li>因为每个项目都是独特的，所以项目团队需要裁剪项目沟通管理过程。裁剪时应考虑的因素包括（但不限于）：<ul><li>相关方</li><li>物理地点</li><li>沟通技术</li><li>语言</li><li>知识管理</li></ul></li></ul><blockquote><p>在敏捷或适应型环境中需要考虑的因素</p></blockquote><ul><li><p>在模糊不定的项目环境中，必然需要对不断演变和出现的细节情况，进行更频繁和快速的沟通。因此，应该尽量简化团队成员获取信息的通道，频繁进行团队检查，并让团队成员集中办公</p></li><li><p>此外，为了促进与高级管理层和相关方的沟通，还需要以透明的方式发布项目工件，并定期邀请相关方评审项目工作。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器设计模式</title>
      <link href="2021/01/09/zhuang-shi-qi-she-ji-mo-shi/"/>
      <url>2021/01/09/zhuang-shi-qi-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>装饰器设计模式</p></blockquote><ul><li>装饰器设计模式<ul><li>也叫包装设计模式，属于结构型模式，它是作为现有的类的一个包装，允许向一个现有的对象添加新的功能，同时又不改变其结构</li><li>给对象增加功能，一般两种方式继承或关联组合，将一个类的对象嵌入另一个对象中，由另一个对象来决定是否调用嵌入对象的行为来增强功能，这个就是装饰器模式，比继承模式更加灵活</li></ul></li></ul><img src="/2021/01/09/zhuang-shi-qi-she-ji-mo-shi/zsq.jpg" title="装饰器设计模式"><ul><li><p>角色（装饰者和被装饰者有相同的超类(Component)）</p><ul><li>抽象组件（Component）<ul><li>定义装饰方法的规范</li></ul></li><li>被装饰者（ConcreteComponent）<ul><li>Component的具体实现，也就是我们要装饰的具体对象</li></ul></li><li>装饰者组件（Decorator）<ul><li>定义具体装饰者的行为规范, 和Component角色有相同的接口，持有组件(Component)对象的实例引用</li></ul></li><li>具体装饰物（ConcreteDecorator）<ul><li>负责给构件对象装饰附加的功能</li></ul></li></ul></li><li><p>优点</p><ul><li>装饰模式与继承关系的目的都是要扩展对象的功能，但装饰模式可以提供比继承更多的灵活性。</li><li>使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，原有代码无须改变，符合“开闭原则”</li></ul></li><li><p>缺点</p><ul><li>装饰模式增加了许多子类，如果过度使用会使程序变得很复杂 (多层包装)</li><li>增加系统的复杂度，加大学习与理解的难度</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象组件 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span>    String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体的被装饰者 ConcreteComponent */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigBike</span> <span class="token keyword">implements</span> <span class="token class-name">Bike</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">"大号自行车"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体的被装饰者 ConcreteComponent */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmallBike</span> <span class="token keyword">implements</span> <span class="token class-name">Bike</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">"小号自行车"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 装饰者组件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BikeDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Bike</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">"装饰器，没有实际意义"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: ConcreteDecorator 具体装饰器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSCBikeDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BikeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">"增加一个防爆胎"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Bike bike<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RSCBikeDecorator</span><span class="token punctuation">(</span>Bike bike<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bike <span class="token operator">=</span> bike<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: ConcreteDecorator 具体装饰器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuonaBikeDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BikeDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">"增加一个喇叭"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Bike bike<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuonaBikeDecorator</span><span class="token punctuation">(</span>Bike bike<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bike <span class="token operator">=</span> bike<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bike bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSCBikeDecorator</span><span class="token punctuation">(</span>bike<span class="token punctuation">)</span><span class="token punctuation">;</span>        bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuonaBikeDecorator</span><span class="token punctuation">(</span>bike<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bike<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 价格："</span><span class="token operator">+</span>bike<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装饰器模式和桥接模式对比<ul><li>相同点都是通过封装其他对象达到设计的目的，和对象适配器也类似，有时也叫半装饰设计模式</li><li>没有装饰者和被装饰者的主次区别，桥接和被桥接者是平等的，桥接可以互换，不用继承自同一个父类</li><li>桥接模式不用使用同一个接口；装饰模式用同一个接口装饰，接口在父类中定义</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合设计模式</title>
      <link href="2021/01/08/zu-he-she-ji-mo-shi/"/>
      <url>2021/01/08/zu-he-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>组合设计模式</p></blockquote><ul><li><p>组合设计模式</p><ul><li>又叫部分整体模式，将对象组合成树形结构以表示“部分-整体”的层次结构，可以更好的实现管理操作</li><li>组合模式使得用户可以使用一致的方法操作单个对象和组合对象</li><li>部分-整体对象的基本操作多数是一样的，但是应该还会有不一样的地方</li><li>核心：组合模式可以使用一棵树来表示</li></ul></li><li><p>应用场景</p><ul><li>银行总行，总行有前台、后勤、网络部门等，辖区下还有地方分行，也有前台、后勤、网络部门，最小的分行就没有子分行了</li><li>公司也是，总公司下有子公司，每个公司大部分的部门都类似</li><li>文件夹和文件，都有增加、删除等api，也有层级管理关系</li><li>当想表达对象的部分-整体的层次结构</li><li>当我们的要处理的对象可以生成一颗树形结构，我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子</li></ul></li><li><p>角色</p><ul><li>组合部件（Component）：它是一个抽象接口，表示树根，例子：总行</li><li>合成部件（Composite）：和组合部件类似，也有自己的子节点，例子：总行下的分行</li><li>叶子（Leaf）：在组合中表示子节点对象，注意是没有子节点，例子：最小地方的分行</li></ul></li><li><p>缺点</p><ul><li>客户端需要花更多时间理清类之间的层次关系</li></ul></li><li><p>优点</p><ul><li>客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题</li><li>方便创建出复杂的层次结构</li></ul></li></ul><blockquote><p>组合设计模式案例之文件展示-树叶子节点</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 根节点，抽象类，通用属性和方法 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Root</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Root</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addFile</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeRoot</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体的文件夹，里面可以添加子文件夹或文件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Root<span class="token operator">></span> folders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Folder</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Root<span class="token operator">></span> <span class="token function">getFolders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> folders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFolders</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Root<span class="token operator">></span> folders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>folders <span class="token operator">=</span> folders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFile</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        folders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeRoot</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        folders<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印横线和当前文件名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Root r <span class="token operator">:</span> folders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每个下级，横线多2个</span>            r<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 没有叶子节点，不用存储其他子类数组，所以是叶子节点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFile</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeRoot</span><span class="token punctuation">(</span>Root root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印横线和当前文件名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创造根文件夹</span>        Root root1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"C://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立子文件夹</span>        Root desktop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"桌面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Root myComputer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"我的电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立子文件</span>        Root javaFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"HelloWorld.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myComputer<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span>javaFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        desktop<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span>myComputer<span class="token punctuation">)</span><span class="token punctuation">;</span>        root1<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span>desktop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从0级开始展示，每下一级多两条横线</span>        root1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接设计模式</title>
      <link href="2021/01/08/qiao-jie-she-ji-mo-shi/"/>
      <url>2021/01/08/qiao-jie-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>桥接设计模式</p></blockquote><ul><li><p>桥接设计模式</p><ul><li>将抽象部分与实现部分分离，使它们都可以独立的变化<ul><li>通俗来说，是通过组合来桥接其它的行为/维度</li></ul></li></ul></li><li><p>应用场景</p><ul><li>系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性</li><li>不想使用继承导致系统类的个数急剧增加的系统</li><li>有时候一个类，可能会拥有多个变化维度，比如啤酒，有不同的容量和品牌，可以使用继承组合的方式进行开发，假如维度很多，就容易出现类的膨胀，使用桥接模式就可以解决这个问题，且解耦</li></ul></li><li><p>优点</p><ul><li>抽象和实现的分离。</li><li>优秀的扩展能力，符合开闭原则</li></ul></li><li><p>缺点</p><ul><li>增加系统的理解与设计难度</li><li>使用聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程，比如抽象类汽车，里面聚合了颜色类，有点像对象适配器</li></ul></li><li><p>总结和对比</p><ul><li>按GOF的说法，桥接模式和适配器模式用于设计的不同阶段，桥接模式用于设计的前期，精细化的设计，让系统更加灵活。适配器模式用于设计完成之后，发现类、接口之间无法一起工作，需要进行填坑</li><li>适配器模式经常用在第三方API协同工作的场合</li></ul></li></ul><blockquote><p>案例</p></blockquote><ul><li><p>业务背景</p><ul><li>需要构建一个手机类，知道手机有很多品牌，苹果、华为等，从另外一个颜色维度，又有多种颜色，红、黄、蓝等，</li><li>如果描述这些类的话，传统方式就直接通过继承，就需要特别多的类，品牌2，颜色3，就是6个类了，如果后续再增加品牌就更多了，类数目将会激增，即所谓的类爆炸</li><li>使用桥接模式就可以解决这个问题，且灵活度大大提高</li></ul></li><li><p>编码</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 颜色接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">useColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实例化颜色-蓝 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlueColor</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实例化颜色-红 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedColor</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象角色 手机 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过组合的方式桥接其他行为     */</span>    <span class="token keyword">public</span> Color color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>Color color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 手机运行     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实例化对象 苹果手机 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplePhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ApplePhone</span> <span class="token punctuation">(</span>Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        color<span class="token punctuation">.</span><span class="token function">useColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ApplePhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实例化对象 华为手机 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HWPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HWPhone</span> <span class="token punctuation">(</span>Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        color<span class="token punctuation">.</span><span class="token function">useColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HuaWei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//蓝色华为</span>        HWPhone blueHwPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HWPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlueColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blueHwPhone<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//红色苹果</span>        ApplePhone redApplePhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplePhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redApplePhone<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器设计模式</title>
      <link href="2021/01/08/gua-pei-qi-she-ji-mo-shi/"/>
      <url>2021/01/08/gua-pei-qi-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h3><ul><li><p>适配器模式</p><ul><li>作为两个不兼容的接口之间的桥梁，属于结构型模式</li><li>适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</li></ul></li><li><p>常见的几类适配器</p><ul><li>类的适配器模式<ul><li>想将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可</li></ul></li><li>对象的适配器模式<ul><li>想将一个对象转换成满足另一个新接口的对象时，可以创建一个适配器类，持有原类的一个实例，在适配器类的方法中，调用实例的方法就行</li></ul></li><li>接口的适配器模式<ul><li>不想实现一个接口中所有的方法时，可以创建一个Adapter，实现所有方法，在写别的类的时候，继承Adapter类</li></ul></li><li>JDK中InputStreamReader就是适配器</li><li>JDBC就是我们用的最多的适配器模式<ul><li>JDBC给出一个客户端通用的抽象接口，每一个具体数据库厂商 如 SQL Server、Oracle、MySQL等，就会开发JDBC驱动，就是一个介于JDBC接口和数据库引擎接口之间的适配器软件</li></ul></li></ul></li><li><p>优点</p><ul><li>可以让任何两个没有关联的类一起运行，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</li><li>增加灵活度, 提高复用性，适配器类可以在多个系统使用,符合开闭原则</li></ul></li><li><p>缺点</p><ul><li>整体类的调用链路增加，本来A可以直接调用C，使用适配器后是A调用B，B再调用C</li></ul></li></ul><h3 id="二、接口的适配器案例"><a href="#二、接口的适配器案例" class="headerlink" title="二、接口的适配器案例"></a>二、接口的适配器案例</h3><ul><li><p>场景</p><ul><li>有些接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要实现部分接口就可以了</li></ul></li><li><p>编码</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 支付相关 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayGateWay</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 下单     */</span>    <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 退款     */</span>    <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询支付状态     */</span>    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发红包     */</span>    <span class="token keyword">void</span> <span class="token function">sendRedPack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 接口适配器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayGateWayAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">PayGateWay</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRedPack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实现类 继承 适配器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductVideoOrder</span> <span class="token keyword">extends</span> <span class="token class-name">PayGateWayAdapter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductVideoOrder unifiedorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductVideoOrder refund"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 实现类 继承 适配器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductVipOrder</span> <span class="token keyword">extends</span> <span class="token class-name">PayGateWayAdapter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductVipOrder unifiedorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductVipOrder refund"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRedPack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductVipOrder sendRedPack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、类的适配器案例"><a href="#三、类的适配器案例" class="headerlink" title="三、类的适配器案例"></a>三、类的适配器案例</h3><ul><li><p>场景</p><ul><li>想将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口</li></ul></li><li><p>编码</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 旧类，有一个方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldModule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OldModule methodA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TargetModule</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 和需要适配的类方法名一致     */</span>    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新方法     */</span>    <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新方法     */</span>    <span class="token keyword">void</span> <span class="token function">methodC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 类适配器,集成旧类，实现新接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">OldModule</span> <span class="token keyword">implements</span> <span class="token class-name">TargetModule</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Adapter methodB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Adapter methodC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TargetModule targetModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetModule<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetModule<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetModule<span class="token punctuation">.</span><span class="token function">methodC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目资源管理的6个子过程</title>
      <link href="2021/01/08/xiang-mu-zi-yuan-guan-li-de-6-ge-zi-guo-cheng/"/>
      <url>2021/01/08/xiang-mu-zi-yuan-guan-li-de-6-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划资源管理</p></blockquote><ul><li><p>作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度。</p></li><li><p>资源规划用于确定和识别一种方法，以确保项目的成功完成有足够的可用资源。项目资源可能包括团队成员、用品、材料、设备、服务和设施。有效的资源规划需要考虑稀缺资源的可用性和竞争，并编制相应的计划</p></li><li><p>这些资源可以从组织内部资产获得，或者通过采购过程从组织外部获取。其他项目可能在同一时间和地点竞争项目所需的相同资源，从而对项目成本、进度、风险、质量和其他项目领域造成显著影响</p></li></ul><blockquote><p>估算活动资源</p></blockquote><ul><li>作用：明确完成项目所需的资源种类、数量和特性。</li><li>估算活动资源过程与其他过程紧密相关，例如估算成本过程，例如：<ul><li>建筑项目团队需要熟悉当地建筑法规。这类知识常可从当地卖方获取，但是，如果内部劳动力资源对不常用或专门的建筑技术缺乏经验，那么支付额外费用聘请咨询专家，可能就是了解当地建筑法规的最有效的方法。</li><li>汽车设计团队需要熟悉最新的自动装配技术。这些必要的知识可以通过聘请顾问、派设计人员参加机器人技术研讨会，或者邀请制造人员加入项目团队等方式来获取。</li></ul></li></ul><blockquote><p>获取资源</p></blockquote><ul><li>作用：概述和指导资源的选择，并将其分配给相应的活动。</li><li>项目所需资源可能来自项目执行组织的内部或外部。内部资源由职能经理或资源经理负责获取（分配），外部资源则是通过采购过程获得</li></ul><blockquote><p>建设团队</p></blockquote><ul><li><p>作用：改进团队协作、增强人际关系技能、激励员工、减少摩擦以及提升整体项目绩效。</p></li><li><p>项目经理应该能够定义、建立、维护、激励、领导和鼓舞项目团队，使团队高效运行，并实现项目目标。团队协作是项目成功的关键因素，而建设高效的项目团队是项目经理的主要职责之一。</p></li><li><p>有一种关于团队发展的模型叫塔克曼阶梯理论，其中包括团队建设通常要经过的五个阶段。</p><ul><li>形成阶段。</li><li>震荡阶段。</li><li>规范阶段。</li><li>成熟阶段。</li><li>解散阶段。</li></ul></li></ul><blockquote><p>管理团队</p></blockquote><ul><li><p>作用：影响团队行为、管理冲突以及解决问题</p></li><li><p>管理项目团队需要借助多方面的管理和领导力技能，来促进团队协作，整合团队成员的工作，从而创建高效团队。项目经理应该向团队成员分配富有挑战性的任务，并对优秀绩效进行表彰</p></li><li><p>项目经理应留意团队成员是否有意愿和能力完成工作，然后相应地调整管理和领导方式。相对那些已展现出能力和有经验的团队成员，技术能力较低的团队成员更需要强化监督</p></li></ul><blockquote><p>控制资源</p></blockquote><ul><li>作用：确保所分配的资源适时适地可用于项目，且在不再需要时被释放</li><li>控制资源过程关注实物资源，例如设备、材料、设施和基础设施。管理团队过程关注团队成员</li></ul><blockquote><p>团队建设阶段和领导风格</p></blockquote><table><thead><tr><th>名称</th><th>特点</th><th>PM领导风格</th></tr></thead><tbody><tr><td>形成阶段</td><td>团队成员相互认识，并了解项目情况及他们在项目中的正式角色与职责。团队成员倾向于相互独立，不一定开诚布公</td><td>指导型</td></tr><tr><td>震荡阶段</td><td>团队开始从事项目工作，制定技术解决和讨论项目管理方法，此时对团队成员的不同意见和观点要合理处置</td><td>教练型</td></tr><tr><td>规范阶段</td><td>团队协同工作，开始相互信任，调整各自的工作习惯</td><td>参与型</td></tr><tr><td>成熟阶段</td><td>团队成员之间相互依赖，协同解决问题</td><td>授权型</td></tr><tr><td>解散阶段</td><td>团队成员完成所有工作，团队成员离开项目</td><td>指导型</td></tr></tbody></table><img src="/2021/01/08/xiang-mu-zi-yuan-guan-li-de-6-ge-zi-guo-cheng/xq.png" title="人力资源七大激励理论"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者设计模式</title>
      <link href="2021/01/07/jian-zao-zhe-she-ji-mo-shi/"/>
      <url>2021/01/07/jian-zao-zhe-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>建造者模式（Builder Pattern）</p><ul><li>使用多个简单的对象一步一步构建成一个复杂的对象，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>允许用户只通过指定复杂对象的类型和内容就可以构建它们，不需要知道内部的具体构建细节</li></ul></li><li><p>核心组成</p><ul><li>Builder：抽象建造者，定义多个通用方法和构建方法</li><li>ConcreteBuilder：具体建造者，可以有多个</li><li>Director：指挥者，控制整个组合过程，将需求交给建造者，由建造者去创建对象</li><li>Product：产品⻆角⾊色</li></ul></li><li><p>优点</p><ul><li>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦</li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，更加精细地控制产品的创建过程</li><li>增加新的具体建造者无须修改原有类库的代码，符合开闭原则</li><li>建造者模式结合链式编程来使用，代码上更加美观</li></ul></li><li><p>缺点</p><ul><li>建造者模式所创建的产品一般具有较多的共同点，如果产品差异大则不建议使用</li></ul></li><li><p>建造者模式与抽象工厂模式的比较:</p><ul><li>建造者模式返回一个组装好的完整产品 ， 抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 产品 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> String memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mainboard<span class="token punctuation">;</span>    <span class="token keyword">private</span> String disk<span class="token punctuation">;</span>    <span class="token keyword">private</span> String power<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMainboard</span><span class="token punctuation">(</span>String mainboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainboard <span class="token operator">=</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> disk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDisk</span><span class="token punctuation">(</span>String disk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>disk <span class="token operator">=</span> disk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> power<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPower</span><span class="token punctuation">(</span>String power<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Computer{"</span> <span class="token operator">+</span>                <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", mainboard='"</span> <span class="token operator">+</span> mainboard <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", disk='"</span> <span class="token operator">+</span> disk <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", power='"</span> <span class="token operator">+</span> power <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象建造者 * 声明建造者的公共方法 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">buildCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">buildMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">buildDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体建造者，实现builder来创建不同的产品 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighComputerBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token string">"高配 cpu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMainboard</span><span class="token punctuation">(</span><span class="token string">"高配 主板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setDisk</span><span class="token punctuation">(</span><span class="token string">"高配 磁盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setPower</span><span class="token punctuation">(</span><span class="token string">"高配 电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token string">"高配 内存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体建造者，实现builder来创建不同的产品 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LowComputerBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token string">"低配 cpu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMainboard</span><span class="token punctuation">(</span><span class="token string">"低配 主板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setDisk</span><span class="token punctuation">(</span><span class="token string">"低配 磁盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setPower</span><span class="token punctuation">(</span><span class="token string">"低配 电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token string">"低配 内存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 指挥者 * 将产品和创建过程进行解耦，使用相同的创建过程创建不同的产品 * 控制产品生产过程 * Director是全程指导组装过程.具体的细节有Builder去操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Computer <span class="token function">create</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Computer lowComputer <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LowComputerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lowComputer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型设计模式</title>
      <link href="2021/01/07/yuan-xing-she-ji-mo-shi/"/>
      <url>2021/01/07/yuan-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>原型设计模式Prototype</p><ul><li>是一种对象创建型模式，使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象，主要用于创建重复的对象，同时又能保证性能</li><li>工作原理是将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己来实现创建过程</li><li>实现一个接口，重写一个方法即完成了原型模式</li></ul></li><li><p>核心组成</p><ul><li>Prototype: 声明克隆方法的接口,是所有具体原型类的公共父类，Cloneable接口</li><li>ConcretePrototype : 具体原型类</li><li>Client: 让一个原型对象克隆自身从而创建一个新的对象</li></ul></li><li><p>应用场景</p><ul><li>创建新对象成本较大，新的对象可以通过原型模式对已有对象进行复制来获得</li><li>如果系统要保存对象的状态，做备份使用</li></ul></li><li><p>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的</p></li><li><p>浅拷贝实现 Cloneable，深拷贝是通过实现Serializable 读取二进制流</p><ul><li>浅拷贝<ul><li>如果原型对象的成员变量是基本数据类型（int、double、byte、boolean、char等），将复制一份给克隆对象；</li><li>如果原型对象的成员变量量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向相同的内存地址</li><li>通过覆盖Object类的clone()方法可以实现浅克隆</li></ul></li><li>深拷贝<ul><li>无论原型对象的成员变量是基本数据类型还是引用类型，都将复制一份给克隆对象，如果需要实现深克隆，可以通过序列化(Serializable)等方式来实现</li></ul></li></ul></li><li><p>原型模式是内存二进制流的拷贝，比new对象性能高很多，使用的时候记得注意是选择浅拷贝还是深拷贝</p></li><li><p>优点</p><ul><li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，可以提高新实例的创建效率</li><li>可辅助实现撤销操作，使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用恢复到历史状态</li></ul></li><li><p>缺点</p><ul><li>需要为每一个类配备一个克隆方法，对已有的类进行改造时，需要修改源代码，违背了“开闭原则”</li><li>在实现深克隆时需要编写较为复杂的代码，且当对象之间存在多重的嵌套引用时，需要对每一层对象对应的类都必须支持深克隆</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Person <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 深拷贝     */</span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出 序列化</span>            ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输入 反序列化</span>            ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>            Person copyObj <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//浅拷贝</span>        <span class="token comment" spellcheck="true">//Person person2 = person1.clone();</span>        <span class="token comment" spellcheck="true">//深拷贝</span>        Person person2 <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> person1<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1="</span><span class="token operator">+</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", list="</span><span class="token operator">+</span>person1<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1="</span><span class="token operator">+</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", list="</span><span class="token operator">+</span>person2<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂设计模式</title>
      <link href="2021/01/06/gong-han-she-ji-mo-shi/"/>
      <url>2021/01/06/gong-han-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、工厂设计模式和应用"><a href="#一、工厂设计模式和应用" class="headerlink" title="一、工厂设计模式和应用"></a>一、工厂设计模式和应用</h3><ul><li><p>介绍</p><ul><li>它提供了一种创建对象的最佳方式，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</li></ul></li><li><p>工厂模式有 3 种不同的实现方式</p><ul><li>简单工厂模式：通过传入相关的类型来返回相应的类,这种方式比较单一,可扩展性相对较差;</li><li>工厂方法模式：通过实现类实现相应的方法来决定相应的返回结果,这种方式的可扩展性比较强；</li><li>抽象工厂模式：基于上述两种模式的拓展，且支持细化产品</li></ul></li><li><p>应用场景：</p><ul><li>解耦：分离职责，把复杂对象的创建和使用的过程分开</li><li>复用代码，降低维护成本：<ul><li>如果对象创建复杂且多处需用到，如果每处都进行编写，则很多重复代码，如果业务逻辑发生了改变，需要四处修改；</li><li>使用工厂模式统一创建，则只要修改工厂类即可，降低成本</li></ul></li></ul></li></ul><h3 id="二、简单工厂模式"><a href="#二、简单工厂模式" class="headerlink" title="二、简单工厂模式"></a>二、简单工厂模式</h3><ul><li><p>简单工厂模式</p><ul><li>又称静态工厂方法, 可以根据参数的不同返回不同类的实例，专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</li><li>由于工厂方法是静态方法，可通过类名直接调用，而且只需要传入简单的参数即可</li></ul></li><li><p>核心组成</p><ul><li>Factory：工厂类，简单工厂模式的核心，它负责实现创建所有实例的内部逻辑</li><li>IProduct：抽象产品类，简单工厂模式所创建的所有对象的父类，描述所有实例所共有的公共接口</li><li>Product：具体产品类，是简单工厂模式的创建目标</li></ul></li><li><p>实现步骤</p><ul><li>创建抽象产品类，里面有产品的抽象方法，由具体的产品类去实现</li><li>创建具体产品类，继承了他们的父类，并实现具体方法</li><li>创建工厂类，提供了一个静态方法createXXX用来生产产品，只需要传入你想产品名称</li></ul></li><li><p>优点：</p><ul><li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li></ul></li><li><p>缺点</p><ul><li>工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背</li><li>即开闭原则（Open Close Principle）对扩展开放，对修改关闭，程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果</li><li>将会增加系统中类的个数，在一定程度上增加了系统的复杂度和理解难度，不利于系统的扩展和维护，创建简单对象就不用模式</li></ul></li><li><p>电商支付的案例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 支付抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 统一下单     */</span>    <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 简单工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimplePayFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据参数返回对应的支付对象     * @param payType     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PayFactory <span class="token function">createPay</span><span class="token punctuation">(</span>String payType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>payType <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>payType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"WECHAT_PAY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>payType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ALI_PAY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//TODO 可以扩展</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//简单工厂</span>        PayFactory pay <span class="token operator">=</span> SimplePayFactory<span class="token punctuation">.</span><span class="token function">createPay</span><span class="token punctuation">(</span><span class="token string">"WECHAT_PAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pay<span class="token punctuation">.</span><span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、工厂方法模式"><a href="#三、工厂方法模式" class="headerlink" title="三、工厂方法模式"></a>三、工厂方法模式</h3><ul><li><p>工厂方法模式</p><ul><li>又称工厂模式，是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则</li><li>通过工厂父类定义负责创建产品的公共接口，通过子类来确定所需要创建的类型</li><li>相比简单工厂而言，此种方法具有更多的可扩展性和复用性，同时也增强了代码的可读性</li><li>将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化哪一个类。</li></ul></li><li><p>核心组成</p><ul><li>IProduct：抽象产品类，描述所有实例所共有的公共接口</li><li>Product：具体产品类，实现抽象产品类的接口，工厂类创建对象，如果有多个需要定义多个</li><li>IFactory：抽象工厂类，描述具体工厂的公共接口</li><li>Factory：具体工场类，实现创建产品类对象，实现抽象工厂类的接口，如果有多个需要定义多个</li></ul></li><li><p>实现步骤</p><ul><li>创建抽象产品类，里面有产品的抽象方法，由具体的产品类去实现</li><li>创建具体产品类，继承了他们的父类，并实现具体方法</li><li>创建抽象工厂类，提供一个描述具体工厂的公共接口</li><li>创建具体工厂类，实现抽象工具类的接口</li></ul></li><li><p>优点：</p><ul><li>符合开闭原则，增加一个产品类，只需要实现其他具体的产品类和具体的工厂类；</li><li>符合单一职责原则，每个工厂只负责生产对应的产品</li><li>使用者只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则<ul><li>迪米特法则：最少知道原则，实体应当尽量少地与其他实体之间发生相互作用</li><li>依赖倒置原则：针对接口编程，依赖于抽象而不依赖于具体</li><li>里氏替换原则：俗称LSP, 任何基类可以出现的地方，子类一定可以出现, 对实现抽象化的具体步骤的规范</li></ul></li></ul></li><li><p>缺点：</p><ul><li>增加一个产品，需要实现对应的具体工厂类和具体产品类；</li><li>每个产品需要有对应的具体工厂和具体产品类</li></ul></li></ul><img src="/2021/01/06/gong-han-she-ji-mo-shi/gcffms.jpg" title="工厂方法模式"><ul><li>电商支付的案例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 支付抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 统一下单     */</span>    <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    PayFactory <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PayFactory <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatPayFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PayFactory <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PayFactory aliPayFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AliPayFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PayFactory aliPay <span class="token operator">=</span> aliPayFactory<span class="token punctuation">.</span><span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aliPay<span class="token punctuation">.</span><span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PayFactory wechatPayFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WechatPayFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PayFactory wechatPay <span class="token operator">=</span>wechatPayFactory<span class="token punctuation">.</span><span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wechatPay<span class="token punctuation">.</span><span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、抽象工厂方法模式"><a href="#四、抽象工厂方法模式" class="headerlink" title="四、抽象工厂方法模式"></a>四、抽象工厂方法模式</h3><ul><li><p>工厂模式有 3 种不同的实现方式</p><ul><li>简单工厂模式：通过传入相关的类型来返回相应的类,这种方式比较单一,可扩展性相对较差;</li><li>工厂方法模式：通过实现类实现相应的方法来决定相应的返回结果,这种方式的可扩展性比较强；</li><li>抽象工厂模式：基于上述两种模式的拓展，是工厂方法模式的升级版，当需要创建的产品有多个产品线时使用抽象工厂模式是比较好的选择</li><li>抽象工厂模式在 Spring 中应用得最为广泛的一种设计模式</li></ul></li><li><p>背景</p><ul><li>工厂方法模式引入工厂等级结构，解决了简单工厂模式中工厂类职责过重的问题</li><li>但工厂方法模式中每个工厂只创建一类具体类的对象，后续发展可能会导致工厂类过多，因此将一些相关的具体类组成一个“具体类族”，由同一个工厂来统一生产，强调的是一系列相关的产品对象</li></ul></li><li><p>工厂方法模式和抽象工厂方法模式</p><ul><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，抽象工厂模式退化成工厂方法模式</li></ul></li><li><p>优点</p><ul><li>当一个产品族中的多个对象被设计成一起工作时，它能保证使用方始终只使用同一个产品族中的对象</li><li>产品等级结构扩展容易，如果需要增加多一个产品等级，只需要增加新的工厂类和产品类即可, 比如增加银行支付、退款</li></ul></li><li><p>缺点</p><ul><li>产品族扩展困难，要增加一个系列的某一产品，既要在抽象的工厂和抽象产品里修改代码，不是很符合开闭原则</li><li>增加了系统的抽象性和理解难度</li></ul></li><li><p>案例实现步骤</p><ul><li>定义两个抽象接口 Pay、Refund</li><li>创建具体的Pay产品、创建具体的Refund产品</li><li>创建抽象工厂 OrderFactory 接口里面两个方法 createPay/createRefund</li><li>创建支付宝产品族AliOderFactory，实现OrderFactory抽象工厂</li><li>创建微信支付产品族WechatOderFactory，实现OrderFactory抽象工厂</li><li>定义一个超级工厂创造器，通过传递参数获取对应的工厂</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 支付抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 统一下单     */</span>    <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 退款抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RefundFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 退款     */</span>    <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliRefund</span> <span class="token keyword">implements</span> <span class="token class-name">RefundFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝退款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatPay</span> <span class="token keyword">implements</span> <span class="token class-name">PayFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信支付 统一下单接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 具体产品类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatRefund</span> <span class="token keyword">implements</span> <span class="token class-name">RefundFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 具体业务逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信退款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 抽象工厂 - 超级工厂 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>    PayFactory <span class="token function">createPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RefundFactory <span class="token function">createRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 产品族 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliOrderFactory</span> <span class="token keyword">implements</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PayFactory <span class="token function">createPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RefundFactory <span class="token function">createRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AliRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 产品族 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WechatOrderFactory</span> <span class="token keyword">implements</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PayFactory <span class="token function">createPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RefundFactory <span class="token function">createRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WechatRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 超级工厂创造器，依赖简单工厂模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrderFactory <span class="token function">getFactory</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"WECHAT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WechatOrderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ALI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AliOrderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderFactory orderFactory <span class="token operator">=</span>FactoryProducer<span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"WECHAT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> orderFactory <span class="token operator">!=</span> null<span class="token punctuation">;</span>        orderFactory<span class="token punctuation">.</span><span class="token function">createPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unifiedorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderFactory<span class="token punctuation">.</span><span class="token function">createRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目资源管理</title>
      <link href="2021/01/06/xiang-mu-zi-yuan-guan-li/"/>
      <url>2021/01/06/xiang-mu-zi-yuan-guan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>项目资源管理包括识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和地点使用正确的资源。</li></ul><blockquote><p>项目资源管理过程</p></blockquote><ul><li><p>规划资源管理：定义如何估算、获取、管理和利用实物以及团队项目资源的过程</p></li><li><p>估算活动资源：估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程。</p></li><li><p>获取资源：获取项目所需的团队成员、设施、设备、材料、用品和其他资源的过程</p></li><li><p>建设团队：提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程</p></li><li><p>管理团队：跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程</p></li><li><p>控制资源：确保按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程</p></li><li><p>团队资源管理相对于实物资源管理，对项目经理提出了不同的技能和能力要求，实物资源管理包括设备、材料、设施和基础设施，而团队资源或人员指的是人力资源。项目团队成员可能具备不同的技能，可能是全职或兼职的，了能随项目进展而增加或减少。</p></li></ul><blockquote><p>项目资源管理的核心概念</p></blockquote><ul><li><p>项目团队由承担特定角色和职责的个人组成，他们为实现项目目标而共同努力。项目经理因此应在获取、管理、激励和增强项目团队方面投入适当的努力。尽管项目团队成员被分派了特定的角色和职责，但让他们全员参与项目规划和决策仍是有益的。团队成员参与规划阶段，即可使他们对项目规划工作贡献专业技能，又可以增强他们对项目的责任感</p></li><li><p>项目经理即是项目团队的领导者又是项目团队的管理者。除了项目管理活动，例如启动、规划、执行、监控和关闭各个项目阶段，项目经理还负责建设高效的团队</p></li><li><p>作为领导者，项目经理还负责积极培养团队技能和能力，同时提高并保持团队的满意度和积极性，项目经理还应留意并支持职业与道德行为，确保所有团队成员都遵守这些行为。</p></li></ul><blockquote><p>项目资源管理的趋势和新兴实践</p></blockquote><ul><li>项目管理风格正在从管理项目的命令和控制结构，转向更加协作和支持性的管理方法，通过将决策权分配给团队成员来提高团队能力。此外，现代的项目资源管理方法致力于寻求优化资源使用。</li><li>有关项目资源管理的趋势和新兴实践包括（但不限于）：<ul><li>资源管理方法。过去几年，由于关键资源稀缺，在某些行业中出现了一些普遍的趋势，涌现出很多关于精益管理、准时制生产、Kaizen（持续改善）、全员生产维护（TPM）、约束理论等方法的文献资料。项目经理应确定执行组织是否采用了一种或多种资源管理工具，从而对项目做出相应的调整。</li><li>情商。项目经理应提升内在（如自我管理和自我意识）和外在（如关系管理）能力，从而提高个人情商。研究表明，提高项目团队的情商或情绪能力可提高团队效率，还可以降低团队成员离职率</li><li>自组织团队。随着敏捷方法在IT项目中的应用越来越普遍，自组织团队（无需集中管控运作）越来越多。对于拥有自组织团队的项目，”项目经理”（可能不称为”项目经理”）的角色主要是为团队创造环境、提供支持并信任团队可以完成工作</li><li>虚拟团队/分布式团队。虚拟团队管理有独特的优势，例如能够利用项目团队的专业技术，即使相应的专家不在同一地理区域；将在家办公员工纳入团队；以及将行动不便者或残疾人纳入团队。而虚拟团队管理面临的挑战主要在于沟通，包括可能产生孤立感、团队成员之间难以分享知识和经验、难以跟进进度和生产率，以及可能存在时区和文化差异</li></ul></li></ul><blockquote><p>裁剪考虑因素</p></blockquote><ul><li>由于每个项目都是独特的，项目经理需要裁剪项目资源管理过程。</li><li>裁剪时应考虑的因素包括（但不限于）：<ul><li>多元化</li><li>物流位置</li><li>行业特定资源</li><li>团队成员的获得</li><li>团队管理</li><li>生命周期方法</li></ul></li></ul><blockquote><p>在敏捷或适应型环境中需要考虑的因素</p></blockquote><ul><li>易变性高的项目得益于最大限度地集中和协作团队结构，例如拥有通才的自组织团队。协作旨在提高生产率和促进创新的问题解决方式。协作型团队可以促进不同工作活动的加速整合、改善沟通、增加知识分享，以及提供工作分配的灵活性和其他优势</li></ul><blockquote><p>资源日历、资源直方图、资源分解结构</p></blockquote><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>资源日历</td><td>资源日历是表明每种具体资源的可用工作日或工作班次的日历<br>日历规定了在项目期间特定的项目资源何时可用、可用多久。可以在活动或项目层面建立资源日历<br>资源日历规定了在项目期间的资源可用性<br>从资源日历中了解项目资源的种类和使用时间<br>资源日历记录每个项目团队成员在项目上的工作时间段。必须很好地了解每个人的可用性和时间限制<br>（包括时区、工作时间、休假时间、当地节假日和在其他项目的工作时间）</td></tr><tr><td>资源直方图</td><td>显示在整个项目期间每周（或每月）需要某人、某部门或整个项目团队的工作小时数<br>可在资源直方图中画一条水平线，代表某特定资源最多可用的小时数<br>如果柱形超过该水平线，就表示需要采用资源优化策略<br>项目管理团队可用资源直方图向所有干系人直观地展示人力资源分配情况</td></tr><tr><td>资源分解结构</td><td>资源分解结构是资源依类别和类型的层级展现<br>资源类别包括人力、材料、设备和用品。资源类型包括技能水平、等级水平或适用于项目的其他类型<br>资源分解结构有助于结合资源使用情况，组织与报告项目的进度数据</td></tr></tbody></table><blockquote><p>导入概述</p></blockquote><ul><li>项目资源管理包括识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间地点使用正确的资源</li><li>资源管理不仅仅局限于团队资源管理，也包括诸如机器设备，材料，工具，基础设施等实物资源管理。团队资源指的是人力资源，项目团队成员可能具备不同的技能，可能是全职或兼职的，可能随项目进展而增加或减少。项目资源管理与项目相关方管理之间有重叠的部分</li></ul><blockquote><p>获取人力资源的主要工具技术</p></blockquote><ul><li><p>决策（用多标准决策分析对潜在资源进行评级打分）</p></li><li><p>人际关系与团队技能：谈判</p></li><li><p>预分派（竞标过程中的承诺，项目章程指定）</p></li><li><p>虚拟团队作用：明确完成项目所需的资源种类、数量和特性。</p></li></ul><blockquote><p>虚拟团队需要关注</p></blockquote><ul><li>项目经理需要特别关注虚拟团队的沟通问题。要花更多时间，来设定明确的期望，促进沟通，制定冲突解决方法，召集人员参与决策，理解文化差异，以及共享成功喜悦</li><li>虚拟团队可能产生孤立感，团队成员难以分享知识经验，难以跟进进度和生产率，以及可能存在时区和文化差异</li></ul><blockquote><p>跨国团队需要关注</p></blockquote><ul><li>对于跨国团队，需要关注团队成员位置、时区和沟通能力，以及文化差异</li></ul><blockquote><p>团队成员的职责和项目经理的职责</p></blockquote><ul><li>在规划资源管理的工具和技术的数据表现中</li><li>有层级型，责任分配矩阵，文本型三种表现方式。其中文本型就详细记录了团队成员的职责，可以在这里找到相应的信息</li></ul><blockquote><p>高效团队的特征</p></blockquote><ul><li>在建设团队中改善团队整体氛围，以提高项目绩效的过程<ul><li>使用开放与有效的沟通</li><li>创造团队建设机遇</li><li>建立团队成员之间的信任</li><li>以建设性的方式管理冲突</li><li>鼓励合作型的问题解决方法</li><li>鼓励合作型的决策方法</li></ul></li></ul><blockquote><p>团队绩效评价和项目绩效评估的区别</p></blockquote><img src="/2021/01/06/xiang-mu-zi-yuan-guan-li/jx.png" title="团队绩效评价和项目绩效评估的区别"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="2021/01/05/dan-li-she-ji-mo-shi/"/>
      <url>2021/01/05/dan-li-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>单例设计模式</p></blockquote><ul><li><p>单例意思只包含一个对象被称为单例的特殊类</p></li><li><p>通过单例模式可以保证系统中，应用该模式的类只有一个对象实例</p></li><li><p>使用场景</p><ul><li>业务系统全局只需要一个对象实例，比如发号器、redis连接对象等</li><li>Spring IOC容器中的bean默认就是单例</li><li>spring boot 中的controller、service、dao层中通过@autowire的依赖注入对象默认都是单例的</li></ul></li><li><p>分类</p><ul><li>懒汉：就是所谓的懒加载，延迟创建对象</li><li>饿汉：与懒汉相反，提前创建对象</li></ul></li><li><p>实现步骤</p><ul><li>私有化构造函数</li><li>提供获取单例的方法</li></ul></li></ul><blockquote><p>单例设计模式-懒汉实现方式</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 单例设计模式 - 懒汉实现方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//private static SingletonLazy instance;</span>    <span class="token comment" spellcheck="true">/**     * 单例对象的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法调用成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构造函数私有化     */</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 第一种方式     * 对外暴露一个方法获取类的对象     * 线程不安全，多线程下存在安全问题     */</span>    <span class="token comment" spellcheck="true">/*public static SingletonLazy getInstance(){        if(instance == null){            instance=new SingletonLazy();        }        return instance;    }*/</span>    <span class="token comment" spellcheck="true">/**     * 第二种实现方式     * 通过加锁， synchronized 保证单例     * 采用 synchronized 对方法加锁，有很大的性能开销     * 解决办法：锁粒度放小     */</span>    <span class="token comment" spellcheck="true">/*public static synchronized SingletonLazy getInstance() {        if (instance == null) {            instance = new SingletonLazy();        }        return instance;    }*/</span>    <span class="token comment" spellcheck="true">/**     * 第三种实现方式     * DCL 双重检查锁定（Double-Checked-Locking）,在多线程情况下保持高性能     *     * instance = new SingletonLazy(); 并不是原子性操作     * 1、分配空间给对象     * 2、在空间内创建对象     * 3、将对象赋值给引用instance     *     * 假如线程 1-》3-》2顺序，会把值写会主内存，其他线程就会读取到instance最新的值，     * 但是这个是不完全的对象     * (指令重排)     */</span>    <span class="token comment" spellcheck="true">/*public static SingletonLazy getInstance() {        if (instance == null) {            synchronized (SingletonLazy.class) {                if (instance == null) {                    instance = new SingletonLazy();                }            }        }        return instance;    }*/</span>    <span class="token comment" spellcheck="true">/**     * volatile 是java提供的关键词，它具有可见性和有序性，可以禁止指令重排‘     * 指令重排序是JVM对语句执行的优化，只要语句间没有依赖，那JVM就有权对语句进行优化     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> SingletonLazy instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一重检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//锁定</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingletonLazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第二重检查</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>单例设计模式-饿汉实现方式</p></blockquote><ul><li>饿汉方式：提前创建好对象</li><li>优点：实现简单，没有多线程同步问题</li><li>缺点：不管有没使用，instance对象一直占着这段内存</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 单例设计模式 - 饿汉实现方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonHungry instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造函数私有化     */</span>    <span class="token keyword">private</span> <span class="token function">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 单例对象的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法调用成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如何选择<ul><li>如果对象不大，且创建不复杂，直接用饿汉的方式即可</li><li>其他情况则采用懒汉实现方式</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式简介</title>
      <link href="2021/01/05/she-ji-mo-shi-jian-jie/"/>
      <url>2021/01/05/she-ji-mo-shi-jian-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设计模式的六大设计原则</p></blockquote><ul><li><p>六大原则的英文首字母拼在一起就是SOLID（稳定的），所以也称之为SOLID原则</p></li><li><p>单一职责原则</p><ul><li>一个类只负责一个功能领域中的相应职责，就一个类而言，应该只有一个引起它变化的原因</li><li>是实现高内聚、低耦合的指导方针</li><li>解释：<ul><li>高内聚<ul><li>尽可能类的每个成员方法只完成一件事（最大限度的聚合）</li><li>模块内部的代码， 相互之间的联系越强，内聚就越高， 模块的独立性就越好</li></ul></li><li>低耦合: 减少类内部，一个成员方法调用另一个成员方法, 不要有牵一发动全身</li></ul></li></ul></li><li><p>开闭原则</p><ul><li>对扩展开放，对修改关闭，在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果</li></ul></li><li><p>里氏替换原则LSP</p><ul><li>任何基类可以出现的地方，子类一定可以出现</li><li>在程序中尽量使用基类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象</li><li><code>controller-&gt;service-&gt;dao</code></li></ul></li><li><p>依赖倒转原则</p><ul><li>是开闭原则的基础，针对接口编程，依赖于抽象而不依赖于具体</li><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li></ul></li><li><p>接口隔离原则</p><ul><li>客户端不应该依赖那些它不需要的接口</li><li>使用多个隔离的接口，比使用单个接口要好，降低类之间的耦合度</li></ul></li><li><p>迪米特法则</p><ul><li>最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li><li>类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及</li><li>通过引入一个合理的第三者来降低现有对象之间的耦合度</li></ul></li></ul><blockquote><p>三大设计模式分类</p></blockquote><ul><li><p>设计模式主要是基于以下的面向对象设计原则</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承</li></ul></li><li><p>创建型模式</p><ul><li>提供了一种在创建对象的同时隐藏创建逻辑的方式，使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</li><li>常用：工厂模式、抽象工厂模式、单例模式、建造者模式</li><li>不常用：原型模式</li></ul></li><li><p>结构型模式</p><ul><li>关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</li><li>常用：适配器模式、桥接模式、装饰器模式、代理模式</li><li>不常用：组合模式、外观模式、享元模式、</li></ul></li><li><p>行为型模式</p><ul><li>特别关注对象之间的通信</li><li>常用：责任链模式、迭代器模式、观察者模式、状态模式、策略模式、模板模式</li><li>不常用：备忘录模式、命令模式</li><li>几乎不用：访问者模式、中介者模式、解释器模式</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目质量管理的3个子过程</title>
      <link href="2021/01/05/xiang-mu-zhi-liang-guan-li-de-3-ge-zi-guo-cheng/"/>
      <url>2021/01/05/xiang-mu-zhi-liang-guan-li-de-3-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划质量管理</p></blockquote><ul><li>作用：为在整个项目期间如何管理和核实质量提供指南和方向。</li><li>本过程仅开展一次或仅在项目的预定义点开展</li><li>质量规划应与其他规划过程并行开展。例如，为满足既定的质量标准而对可交付成果提出变更，可能需要调整成本或进度计划，并就该变更对相关计划的影响进行详细风险分析</li></ul><blockquote><p>管理质量</p></blockquote><ul><li>作用：提高实现质量目标的可能性，以及识别无效过程和导致质量低劣的原因。管理质量使用控制质量过程的数据和结果向相关方展示项目的总体质量状态。</li><li>本过程需要在整个项目期间开展</li><li>管理质量有时被称为“质量保证”，但“管理质量”的定义比“质量保证”更广，因其可用于非项目工作</li><li>在项目管理中，质量保证着眼于项目使用的过程，旨在高效地执行项目过程，包括遵守和满足标准，向相关方保证最终产品可以满足他们的需求、期望和要求</li><li>管理质量包括所有质量保证活动，还与产品设计和过程 改进有关</li><li>管理质量的工作属于质量成本框架中的一致性工作。</li><li>管理质量被认为是所有人的共同职责，包括项目经理、项目团队、项目发起人、执行组织的管理层，甚至是客户</li></ul><blockquote><p>控制质量</p></blockquote><ul><li>作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验收。控制质量过程确定项目输出是否达到预期目的，这些输出需要满足所有使用标准、要求、法规和规范。</li><li>本过程需要在整个项目期间开展</li><li>控制质量过程的目的是在用户验收和最终交付之前测量产品或服务的完整性、合规性和适用性。本过程通过测量所有步骤、属性和变量，来核实与规划阶段所描述规范的一致性和合规性</li><li>在整个项目期间应执行质量控制，用可靠的数据来证明项目已经达到发起人或客户的验收标准</li></ul><blockquote><p>三大审计</p></blockquote><table><thead><tr><th align="left"></th><th>质量审计</th><th>风险审计</th><th>采购审计</th></tr></thead><tbody><tr><td align="left">过程</td><td>执行</td><td>监控</td><td>监控</td></tr><tr><td align="left">内容</td><td>识别：正在实施的最佳实践、差距与不足<br>分享：组织的良好做法<br>协助：改进过程、提高效率<br>积累：积累经验教训<br>确认：批准的变更实施情况</td><td>检查：风险应对措施的有效性<br>检查：风险管理过程的有效性</td><td>调整：分析合同管理过程，提出变更以调整合同管理过程<br>积累：审计采购管理过程，总结经验教训</td></tr></tbody></table><blockquote><p>一致性成本和不一致成本</p></blockquote><ul><li><p>一致性成本（项目花费资金规避失败）</p><ul><li>预防成本（打造某种高质量产品）<ul><li>培训</li><li>文件过程</li><li>设备</li><li>完成时间</li></ul></li><li>评估成本（评估质量）<ul><li>测试</li><li>破坏性试验损失</li><li>检查</li></ul></li></ul></li><li><p>不一致成本（项目前后花费的资金-由于失败）</p><ul><li>内部失败成本（项目中发现的失败）<ul><li>返工</li><li>报废</li></ul></li><li>外部失败成本（客户发现的失败）<ul><li>债务</li><li>保修工作</li><li>失去业务</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目质量管理</title>
      <link href="2021/01/04/xiang-mu-zhi-liang-guan-li/"/>
      <url>2021/01/04/xiang-mu-zhi-liang-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目质量管理过程</p></blockquote><ul><li><p>规划质量管理</p><ul><li>识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程。</li></ul></li><li><p>管理质量：</p><ul><li>管理质量是把组织的质量政策用于项目，并将质量管理计划转化为可执行的质量活动的过程</li></ul></li><li><p>控制质量：</p><ul><li>为了评估绩效，确保项目输出完整、正确，并满足客户期望，而监督和记录质量管理活动执行结果的过程</li></ul></li><li><p>规划质量管理过程关注工作需要达到的质量，管理质量则关注管理整个项目期间的质量过程。</p></li><li><p>在管理质量过程期间，在规划质量管理过程中识别的质量要求成为测试与评估工具，将用于控制质量过程，以确认项目是否达到这些质量要求</p></li><li><p>控制质量关注工作成果与质量要求的比较，确保结果可接受</p></li><li><p>项目质量管理知识领域有两个用于其他知识领域的特定输出，即核实的可交付成果和质量报告</p></li></ul><blockquote><p>项目质量管理的核心概念</p></blockquote><ul><li>质量与等级不是相同的概念。质量作为实现的性能或成果，是一系列内在的特性满足要求的程度。</li><li>等级作为设计意图，是对用途相同但技术特性不同的可交付成果的级别分类。</li><li>项目经理及项目管理团队负责权衡，以便同时达到所要求的质量与等级水平。</li><li>质量水平未达到质量要求肯定是个问题，而低等级产品不一定是个问题</li><li>预防胜于检查</li><li>最好将质量设计到可交付成果中，而不是在检查时发现质量问题。预防错误的成本通常远低于在检查或使用中发现并纠正错误的成本。</li><li>项目管理团队应了解以下术语之间的差别：<ul><li>预防与检查<ul><li>预防是保证过程中不出现错误</li><li>检查时保证错误不落到客户手中</li></ul></li><li>属性抽样与变量抽样<ul><li>属性抽样是结果为合格或不合格</li><li>变量抽样是在连续的量表上标明结果所处的位置，表明合格的程度</li></ul></li><li>公差与控制界限<ul><li>公差是结果的可接受范围</li><li>控制界限是在统计意义上稳定的过程或过程绩效的普通偏差的边界</li></ul></li><li>质量成本（COQ）包括在产品生命周期中为预防不符合要求、为评价产品或服务是否符合要求，以及因未达到要求（返工）而发生的所有成本。</li></ul></li></ul><blockquote><p>项目质量管理的趋势和新兴实践</p></blockquote><ul><li>现代质量管理方法力求缩小差异，交付满足既定相关方要求的成果</li><li>项目质量管理的趋势可能包括（但不限于）：<ul><li>客户满意。了解、评估、定义和管理要求，以便满足客户的期望</li><li>持续改进。由休哈特提出并经戴明完善的计划-实施-监测-行动（PDCA）循环是质量改进的基础</li><li>管理层的责任。项目的成功需要项目团队全体成员的参与。管理层在其质量职责内，肩负着为项目提供具有足够能力的资源的相应责任</li><li>与供应商的互利合作关系。组织与其供应商相互依赖</li></ul></li></ul><blockquote><p>裁剪考虑的因素</p></blockquote><ul><li>政策合规与审计</li><li>标准与法规合规性</li><li>持续改进</li><li>相关方参与</li></ul><blockquote><p>关于敏捷/适应型环境的考虑因素</p></blockquote><ul><li>为引导变更、敏捷方法要求多个质量与审核步骤贯穿整个项目，而不是在面临项目结束时才执行</li></ul><blockquote><p>质量管理七大工具</p></blockquote><img src="/2021/01/04/xiang-mu-zhi-liang-guan-li/gj.jpg" title="质量管理七大工具"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="2020/12/31/xian-cheng-chi/"/>
      <url>2020/12/31/xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Future与Callable、FutureTask</p></blockquote><ul><li>Callable与Runable功能相似，Callable的call有返回值，可以返回给客户端，而Runable没有返回值，一般情况下，Callable与FutureTask一起使用，或者通过线程池的submit方法返回相应的Future</li><li>Future就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果、设置结果操作。get方法会阻塞，直到任务返回结果</li><li>FutureTask则是一个RunnableFuture，而RunnableFuture实现了Runnbale又实现了Futrue这两个接口</li></ul><blockquote><p>线程池的核心组成部分及其运行机制</p></blockquote><ul><li><p>corePoolSize：核心线程池大小 cSize</p></li><li><p>maximumPoolSize：线程池最大容量 mSize</p></li><li><p>keepAliveTime：当线程数量大于核心时，多余的空闲线程在终止之前等待新任务的最大时间。</p></li><li><p>unit：时间单位</p></li><li><p>workQueue:工作队列 nWorks</p></li><li><p>ThreadFactory：线程工厂</p></li><li><p>handler：拒绝策略</p></li><li><p>运行机制</p><p>通过new创建线程池时，除非调用prestartAllCoreThreads方法初始化核心线程，否则此时线程池中有0个线程，即使工作队列中存在多个任务，同样不会执行</p></li></ul><blockquote><p>Executor框架</p></blockquote><ul><li>通过相应的方法，能创建出6种线程池</li></ul><pre class="line-numbers language-java"><code class="language-java">        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ScheduledExecutorService scheduledExecutorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService3 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ScheduledExecutorService scheduledExecutorService1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>上面的方法最终都创建了ThreadPoolExecutor</p><ul><li>newCachedThreadPool：创建一个可以根据需要创建新线程的线程池，如果有空闲线程，优先使用空闲的线程  </li><li>newFixedThreadPool：创建一个固定大小的线程池，在任何时候，最多只有N个线程在处理任务  </li><li>newScheduledThreadPool：能延迟执行、定时执行的线程池  </li><li>newWorkStealingPool：工作窃取，使用多个队列来减少竞争  </li><li>newSingleThreadExecutor：单一线程的线程次，只会使用唯一一个线程来执行任务，即使提交再多的任务，也都是会放到等待队列里进行等待  </li><li>newSingleThreadScheduledExecutor：单线程能延迟执行、定时执行的线程池</li></ul></li><li><p>尽量避免使用Executor框架创建线程池</p><ul><li>newFixedThreadPool newSingleThreadExecutor 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。     </li><li>newCachedThreadPool newScheduledThreadPool 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM</li></ul></li></ul><blockquote><p>线程池拒绝策略</p></blockquote><ul><li>AbortPolicy：该策略直接抛出异常，阻止系统正常工作</li><li>CallerRunsPolicy：只要线程池没有关闭，该策略直接在调用者线程中，执行当前被丢弃的任务（叫老板帮你干活）</li><li>DiscardPolicy：直接啥事都不干，直接把任务丢弃</li><li>DiscardOldestPolicy：丢弃最老的一个请求（任务队列里面的第一个），再尝试提交任务</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程工具类</title>
      <link href="2020/12/31/xian-cheng-gong-ju-lei/"/>
      <url>2020/12/31/xian-cheng-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CountDownLatch</p></blockquote><ul><li>await(),进入等待的状态</li><li>countDown(),计数器减一</li><li>应用场景：启动三个线程计算，需要对结果进行累加。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"800米比赛结束，准备清空跑道并继续跨栏比赛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>finalI <span class="token operator">*</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"到达终点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CyclicBarrier–栅栏</p></blockquote><ul><li>允许一组线程相互等待达到一个公共的障碍点，之后再继续执行</li><li>和countDownLatch的区别<ul><li>CountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；不可重复使用 </li><li>CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；可重用的</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>finalI <span class="token operator">*</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"准备就绪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始比赛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Semaphore–信号量</p></blockquote><ul><li>控制并发数量</li><li>使用场景：接口限流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Exchanger</p></blockquote><ul><li>用于交换数据</li><li>它提供一个同步点，在这个同步点两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， 如果第一个线程先执行exchange方法，它会一直等待第二个线程也执行exchange，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。因此使用Exchanger的重点是成对的线程使用exchange()方法，当有一对线程达到了同步点，就会进行交换数据。因此该工具类的线程对象是【成对】的。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Exchanger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Exchanger<span class="token operator">&lt;</span>String<span class="token operator">></span> stringExchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"BBB"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"初始值==========>"</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String exchange <span class="token operator">=</span> stringExchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"交換后的数据==========>"</span> <span class="token operator">+</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"初始值==========>"</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String exchange <span class="token operator">=</span> stringExchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"交換后的数据==========>"</span> <span class="token operator">+</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程间通讯</title>
      <link href="2020/12/31/xian-cheng-jian-tong-xun/"/>
      <url>2020/12/31/xian-cheng-jian-tong-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、wait、notify、notifyAll"><a href="#一、wait、notify、notifyAll" class="headerlink" title="一、wait、notify、notifyAll"></a>一、wait、notify、notifyAll</h3><ul><li>在多线程环境下，有时候一个线程的执行，依赖于另外一个线程的某种状态的改变，这个时候，我们就可以使用wait与notify或者notifyAll</li><li>wait跟sleep的区别: <ul><li>wait会释放持有的锁，而sleep不会，sleep只是让线程在指定的时间内，不去抢占cpu的资源 </li><li>注意点: wait、notify必须放在同步代码块中, 且必须拥有当前对象的锁，即不能取得A对象的锁，而调用B对象的wait，哪个对象wait，就得调哪个对象的notify</li></ul></li><li>notify跟notifyAll的区别<ul><li>nofity随机唤醒一个等待的线程  </li><li>notifyAll唤醒所有在该对象上等待的线程</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、等待通知经典模型之生产者消费者"><a href="#二、等待通知经典模型之生产者消费者" class="headerlink" title="二、等待通知经典模型之生产者消费者"></a>二、等待通知经典模型之生产者消费者</h3><ul><li>生产者消费者模型一般包括：生产者、消费者、中间商</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//消费者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Medium medium<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Medium medium<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>medium <span class="token operator">=</span> medium<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            medium<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生产者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Medium medium<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Medium medium<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>medium <span class="token operator">=</span> medium<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            medium<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中间商</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Medium</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TOTAL <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接收生产数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断当前的库存，是否已经是最大的库存容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> TOTAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果不是，生产完成之后，通知消费者进行消费</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增库存-------->当前库存"</span> <span class="token operator">+</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>500L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是，则通知生产者进行等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增库存---------> 库存已满"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取消费数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断当前库存是否不足</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果充足，在消费完成之后通知生产者进行生产</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费库存-----------> 当前库存容量"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果不足，通知消费者暂停消费</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费库存-----------> 库存不足"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Medium medium <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Medium</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、使用管道流进行通信"><a href="#三、使用管道流进行通信" class="headerlink" title="三、使用管道流进行通信"></a>三、使用管道流进行通信</h3><ul><li>以内存为媒介，用于线程之间的数据传输。</li><li>主要有面向字节：【PipedOutputStream、PipedInputStream】、面向字符【PipedReader、PipedWriter】</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> PipedInputStream pipedInputStream<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Reader</span><span class="token punctuation">(</span>PipedInputStream pipedInputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pipedInputStream <span class="token operator">=</span> pipedInputStream<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pipedInputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String collect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>pipedInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            pipedInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PipedInputStream pipedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedOutputStream pipedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipedOutputStream<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>pipedInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Reader</span><span class="token punctuation">(</span>pipedInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader bufferedReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pipedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            pipedOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Thread-join通信"><a href="#四、Thread-join通信" class="headerlink" title="四、Thread.join通信"></a>四、Thread.join通信</h3><ul><li><p>使用场景：线程A执行到一半，需要一个数据，这个数据需要线程B去执行修改，只有B修改完成之后，A才能继续操作</p></li><li><p>线程A的run方法里面，调用线程B的join方法，这个时候，线程A会等待线程B运行完成之后，再接着运行</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、ThreadLocal的使用"><a href="#五、ThreadLocal的使用" class="headerlink" title="五、ThreadLocal的使用"></a>五、ThreadLocal的使用</h3><ul><li>线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。为每个线程单独存放一份变量副本，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。只要线程处于活动状态并且ThreadLocal实例可访问，那么每个线程都拥有对其本地线程副本的隐式引用变量一个线程消失后，它的所有副本线程局部实例受垃圾回收（除非其他存在对这些副本的引用）</li><li>ThreadLocal.get: <ul><li>获取ThreadLocal中当前线程共享变量的值。 </li></ul></li><li>ThreadLocal.set: <ul><li>设置ThreadLocal中当前线程共享变量的值。 </li></ul></li><li>ThreadLocal.remove: <ul><li>移除ThreadLocal中当前线程共享变量的值。</li></ul></li><li>ThreadLocal.initialValue: <ul><li>ThreadLocal没有被当前线程赋值时或当前线程刚调用remove方法后调用get方法，返回此方法值。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalDemo</span> <span class="token punctuation">{</span>    ThreadLocal<span class="token operator">&lt;</span>Integer<span class="token operator">></span> num <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 自增并输出num的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer myNum <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myNum<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----------->"</span> <span class="token operator">+</span> myNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocalDemo threadLocalDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    threadLocalDemo<span class="token punctuation">.</span><span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>finalI <span class="token operator">*</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Condition的使用"><a href="#六、Condition的使用" class="headerlink" title="六、Condition的使用"></a>六、Condition的使用</h3><ul><li>可以在一个锁里面，存在多种等待条件</li><li>主要的方法 await signal signalAll</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Medium medium<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span> Medium medium<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>medium <span class="token operator">=</span> medium<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            medium<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Medium medium<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Medium medium<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>medium <span class="token operator">=</span> medium<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            medium<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 中间商 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Medium</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TOTAL <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition consumerCondition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition producerCondition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接收生产数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断当前库存，是否已经是最大的库存容量，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> TOTAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增库存---------> 当前库存："</span> <span class="token operator">+</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果不是，生产完成之后，通知消费者进行消费</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>500L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                consumerCondition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果是，则通知生产者进行等待，</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增库存---------> 库存已满："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    producerCondition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取消费数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断当前库存是否不足</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果充足，在消费完成之后，通知生产者进行生产</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费库存------> 当前库存容量"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                producerCondition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不足，通知消费者暂停消费</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费库存---------> 库存不足："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    consumerCondition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Medium medium <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Medium</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程锁</title>
      <link href="2020/12/31/xian-cheng-suo/"/>
      <url>2020/12/31/xian-cheng-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>锁的分类</p></blockquote><ul><li>自旋锁： 线程状态及上下文切换消耗系统资源，当访问共享资源的时间短，频繁上下文切换不值得。jvm实现，使线程在没获得锁的时候，不被挂起，转而执行空循环，循环几次之后，如果还没能获得锁，则被挂起</li><li>阻塞锁：阻塞锁改变了线程的运行状态，让线程进入阻塞状态进行等待，当获得相应的信号（唤醒或者时间）时，才可以进入线程的准备就绪状态，转为就绪状态的所有线程，通过竞争，进入运行状态</li><li>重入锁:支持线程再次进入的锁,就跟我们有房间钥匙，可以多次进入房间类似</li><li>读写锁： 两把锁，读锁跟写锁，写写互斥、读写互斥、读读共享</li><li>互斥锁： 上厕所，进门之后就把门关了，不让其他人进来</li><li>悲观锁： 总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁</li><li>乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。</li><li>公平锁：大家都老老实实排队，对大家而言都很公平</li><li>非公平锁：一部分人排着队，但是新来的可能插队</li><li>偏向锁：偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁</li><li>独占锁：独占锁模式下，每次只能有一个线程能持有锁</li><li>共享锁：允许多个线程同时获取锁，并发访问共享资源</li></ul><blockquote><p>Lock接口</p></blockquote><ul><li>lock与synchronized的区别<ul><li>lock ：获取锁与释放锁的过程，都需要程序员手动的控制 ；Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就是CAS操作     </li><li>synchronized：托管给jvm执行，原始采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。</li></ul></li><li>实现了lock接口的锁</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnSafeThread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 每次调用对num进行++操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//每个线程执行完成之后，调用countdownLatch</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义锁</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isHoldLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Thread holdLockThread <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> reentryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 同一时刻，能且仅能有一个线程获取到锁，     * 其他线程，只能等待该线程释放锁之后才能获取到锁     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isHoldLock <span class="token operator">&amp;&amp;</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> holdLockThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        holdLockThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isHoldLock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        reentryCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断当前线程是否是持有锁的线程，是，重入次数减去1，不是就不做处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> holdLockThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reentryCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reentryCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isHoldLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目成本管理的4个子过程</title>
      <link href="2020/12/31/xiang-mu-cheng-ben-guan-li-de-4-ge-zi-guo-cheng/"/>
      <url>2020/12/31/xiang-mu-cheng-ben-guan-li-de-4-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划成本管理</p></blockquote><ul><li><p>作用：在整个项目期间为如何管理项目成本提供指南和方向。本过程仅开展一次或在项目的预定义点开展</p></li><li><p>应该在项目规划阶段的早期就对成本管理工作进行规划，建立各成本管理过程的基本框架，以确保各过程的有效性及各过程之间的协调性。成本管理计划是项目管理计划的组成部分，其过程及工具与技术应记录在成本管理计划中。</p></li></ul><blockquote><p>估算成本</p></blockquote><ul><li><p>作用：确定项目所需的资金。本过程应根据需要在整个项目期间定期开展</p></li><li><p>成本估算是对完成活动所需资源的可能成本的量化评估，是在某特定时点，根据已知信息所做出的成本预测。在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案；需要权衡备选成本方案并考虑风险，如比较自制成本与外购成本、购买成本与租赁成本及各种资源共享方案，以优化项目成本</p></li><li><p>在项目过程中，应该随着更详细信息的呈现和假设条件的验证，对成本估算进行审查和优化。在项目生命周期中，项目估算的准确性依将随着项目的进展而逐步提高。例如，在启动阶段可得出项目的粗略量级估算（ROM），其区间为-25%到+75%；之后，随着信息越来越详细，确定性估算的区间可缩小到-5%到+10%</p></li></ul><blockquote><p>制定预算</p></blockquote><ul><li><p>作用：确定可据以监督和控制项目绩效的成本基准。本过程仅开展一次或仅在项目的预定义点开展</p></li><li><p>项目预算包括经批准用于执行项目的全部资金，而成本基准是经过批准且按时间段分配的项目预算，包括应急储备，但不包括管理储备</p></li></ul><blockquote><p>控制成本</p></blockquote><ul><li><p>作用：在整个项目期间保持对成本基准的维护。本过程需要在整个项目期间开展</p></li><li><p>要更新预算，就需要了解截止目前的实际成本。只有经过实施整体变更控制过程的批准，才可以增加预算。只监督资金的支出，而不考虑由这些支出所完成的工作的价值，对项目没有什么意义，最多只能跟踪资金流。所以在成本控制中，应重点分析项目资金支出与相应完成的工作之间的关系。有效成本控制的关键在于管理经批准的成本基准。</p></li></ul><blockquote><p>应急储备与管理储备</p></blockquote><ul><li><p>应急储备：是包含在基准内的一部分预算用来应对已经接受的已识别的风险，以及已经制定应急或减轻措施的已识别风险，应对“已知-未知”风险。</p></li><li><p>管理储备：不包含在成本基准中，应对“未知-未知”风险</p></li></ul><blockquote><p>成本术语</p></blockquote><img src="/2020/12/31/xiang-mu-cheng-ben-guan-li-de-4-ge-zi-guo-cheng/cb.png" title="成本术语"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目成本管理</title>
      <link href="2020/12/31/xiang-mu-cheng-ben-guan-li/"/>
      <url>2020/12/31/xiang-mu-cheng-ben-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目成本管理</p></blockquote><ul><li><p>项目成本管理包括为使项目在批准的预算内完成而对成本进行规划、估算、预算、融资、筹资、管理和控制的各个过程，从而确保项目在批准的预算内完工。</p></li><li><p>项目成本管理过程包括：</p><ul><li>规划成本管理：确定如何估算、预算、管理、监督和控制项目成本的过程</li><li>估算成本：对完成项目活动所需货币资源进行近似估算的过程</li><li>制定预算：汇总所有单个活动或工作包的估算成本，建立一个经批准的成本基准的过程</li><li>控制成本：监督项目状态，以更新项目成本和管理成本基准变更的过程</li></ul></li><li><p>在某些项目，特别是范围较小的项目中，成本估算和成本预算之间的联系非常紧密，以至于可视为一个过程，由一个人在较短时间内完成。但本章仍然把这两个过程分开来介绍，因为它们所用的工具和技术各不相同。对成本的影响力在项目早期最大，因此尽早定义范围就至关重要。</p></li></ul><blockquote><p>项目成本管理的核心概念</p></blockquote><ul><li><p>项目成本管理重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响。例如，限制设计审查的次数可降低项目成本，但可能增肌由此带来的产品运营成本。</p></li><li><p>成本管理的另一个方面是认识到不同的相关方会在不同的时间，用不同的方法测算项目成本。</p></li><li><p>在很多组织中，预算和分析项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预算和分析工作。在这种情况下，项目成本管理还需使用其他过程和许多通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析等</p></li></ul><blockquote><p>项目成本管理的趋势和新兴实践</p></blockquote><ul><li>在项目成本管理的实践中，通过对挣值管理（EVM）的扩展，引入挣得进度（ES）这一概念。<ul><li>ES是EVM理论和实践的延伸。挣得进度理论用ES和实际时间AT替代了传统EVM所使用的进度偏差测量指标（挣值 - 计划价值），使用这种替代方法计算进度偏差ES-AT，如果挣得进度大于0，则表示项目进度提前了；换句话说，在某个给定的时间点，项目的挣值大于计划价值</li></ul></li><li>使用挣得进度测量指标的进度绩效指数（SPI）为ES与AT之比，表示完成项目的工作效率。此外，挣得进度理论通过挣得进度、实际时间和估算持续时间，提供了预测项目完成日期的计算公式</li></ul><blockquote><p>裁剪考虑因素</p></blockquote><ul><li>由于每个项目都是独特的，项目经理因此可能需要裁剪项目成本管理过程</li><li>裁剪时考虑的因素包括（但不限于）：<ul><li>知识管理</li><li>估算和预算</li><li>挣值管理</li><li>敏捷方法的使用</li><li>治理</li></ul></li></ul><blockquote><p>关于敏捷/适应型环境的考虑因素</p></blockquote><ul><li><p>对易变性高、范围并未完全明确、经常发生变更的项目，详细的成本计算可能没有多大帮助。在这种情况下，可以采用轻量级估算方法快速生成对项目人力成本的高层及预测，在出现变更时容易调整预测；而详细的估算适用于采用准时制的短期规划</p></li><li><p>如果易变的项目也遵循严格的预算，通常需要更频繁地更改范围和进度计划，以始终保持在成本制约因素之内</p></li></ul><blockquote><p>易混淆</p></blockquote><ul><li>成本估算和成本预算</li></ul><img src="/2020/12/31/xiang-mu-cheng-ben-guan-li/cb.png" title="成本估算和成本预算"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全性</title>
      <link href="2020/12/31/xian-cheng-an-quan-xing/"/>
      <url>2020/12/31/xian-cheng-an-quan-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="一、线程安全性"><a href="#一、线程安全性" class="headerlink" title="一、线程安全性"></a>一、线程安全性</h3><ul><li>当多个线程访问某个类,不管运行时环境采用何种调度方式或者这些线程如何交替执行,并且在主调代码中不需要任何额外的同步或协同,这个类都能表现出正确的行为,那么就称这个类为线程安全的。</li><li>线程不安全<ul><li>多线程并发访问时，得不到正确的结果。</li></ul></li></ul><h3 id="二、非原子性操作变成原子性"><a href="#二、非原子性操作变成原子性" class="headerlink" title="二、非原子性操作变成原子性"></a>二、非原子性操作变成原子性</h3><ul><li>volatile关键字仅仅保证可见性，并不保证原子性  synchronize关机字，使得操作具有原子性</li></ul><h3 id="三、synchronized"><a href="#三、synchronized" class="headerlink" title="三、synchronized"></a>三、synchronized</h3><ul><li>内置锁<ul><li>每个java对象都可以用做一个实现同步的锁，这些锁称为内置锁。线程进入同步代码块或方法的时候会自动获得该锁，在退出同步代码块或方法时会释放该锁。获得内置锁的唯一途径就是进入这个锁的保护的同步代码块或方法。</li></ul></li><li>互斥锁<ul><li>内置锁是一个互斥锁，这就是意味着最多只有一个线程能够获得该锁，当线程A尝试去获得线程B持有的内置锁时，线程A必须等待或者阻塞，直到线程B释放这个锁，如果B线程不释放这个锁，那么A线程将永远等待下去。</li></ul></li><li>修饰普通方法：锁住对象的实例</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修饰静态方法：锁住整个类</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">staticOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修饰代码块： 锁住一个对象 synchronized (lock) 即synchronized后面括号里的内容</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SynDemo synDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            synDemo<span class="token punctuation">.</span><span class="token function">myOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            synDemo<span class="token punctuation">.</span><span class="token function">myOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、volatile关键字及其使用场景"><a href="#四、volatile关键字及其使用场景" class="headerlink" title="四、volatile关键字及其使用场景"></a>四、volatile关键字及其使用场景</h3><ul><li>能且仅能修饰变量</li><li>保证该变量的可见性，volatile关键字仅仅保证可见性，并不保证原子性</li><li>禁止指令重排序</li><li>A、B两个线程同时读取volatile关键字修饰的对象，A读取之后，修改了变量的值,修改后的值，对B线程来说，是可见</li><li>使用场景 1：作为线程开关 2：单例，修饰对象实例，禁止指令重排序</li></ul><h3 id="五、单例与线程安全"><a href="#五、单例与线程安全" class="headerlink" title="五、单例与线程安全"></a>五、单例与线程安全</h3><ul><li>饿汉式–本身线程安全<ul><li>在类加载的时候，就已经进行实例化，无论之后用不用到。如果该类比较占内存，之后又没用到，就白白浪费了资源。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 饿汉式单例 * 在类加载的时候，就已经进行实例化，无论之后用不用到。 * 如果该类比较占内存，之后又没用到，就白白浪费了资源。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungerSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungerSingleton ourInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungerSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ourInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">HungerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>HungerSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>懒汉式 – 最简单的写法是非线程安全的<ul><li>在需要的时候再实例化</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉式单例 * 在需要的时候再实例化 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> LazySingleton lazySingleton <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断实例是否为空，为空则实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> lazySingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//模拟实例化时耗时的操作</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> lazySingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lazySingleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//否则直接返回</span>        <span class="token keyword">return</span> lazySingleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、如何避免线程安全性问题"><a href="#六、如何避免线程安全性问题" class="headerlink" title="六、如何避免线程安全性问题"></a>六、如何避免线程安全性问题</h3><ul><li>线程安全性问题成因<ul><li>多线程环境</li><li>多个线程操作同一共享资源</li><li>对该共享资源进行了非原子性操作</li></ul></li><li>如何避免<ul><li>打破成因中三点任意一点 <ul><li>多线程环境–将多线程改单线程（必要的代码，加锁访问）</li><li>多个线程操作同一共享资源–不共享资源（ThreadLocal、不共享、操作无状态化、不可变）</li><li>对该共享资源进行了非原子性操作– 将非原子性操作改成原子性操作（加锁、使用JDK自带的原子性操作的类、JUC提供的相应的并发工具类）</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程基础</title>
      <link href="2020/12/30/xian-cheng-ji-chu/"/>
      <url>2020/12/30/xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、进程与线程的区别"><a href="#一、进程与线程的区别" class="headerlink" title="一、进程与线程的区别"></a>一、进程与线程的区别</h3><ul><li>进程：是系统进行分配和管理资源的基本单位</li><li>线程：进程的一个执行单元，是进程内调度的实体、是CPU调度和分派的基本单位，是比进程更小的独立运行的基本单位。线程也被称为轻量级进程,线程是程序执行的最小单位。</li><li>一个程序至少一个进程，一个进程至少一个线程。</li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。 而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。 线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式进行。 如何处理好同步与互斥是编写多线程程序的难点。 多进程程序更健壮，进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响， 而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，所以可能一个线程出现问题，进而导致整个程序出现问题</li></ul><h3 id="二、线程的状态及其相互转换"><a href="#二、线程的状态及其相互转换" class="headerlink" title="二、线程的状态及其相互转换"></a>二、线程的状态及其相互转换</h3><ul><li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li><li>运行(RUNNABLE):处于可运行状态的线程正在JVM中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//RUNNABLE状态</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>阻塞(BLOCKED)：线程阻塞于synchronized锁，等待获取synchronized锁的状态。</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//BLOCKED状态</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>100000000L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>等待(WAITING)：Object.wait()、join()、 LockSupport.park(),进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li><li>超时等待(TIME_WAITING)：Object.wait(long)、Thread.join()、LockSupport.parkNanos()、LockSupport.parkUntil，该状态不同于WAITING，它可以在指定的时间内自行返回。</li><li>终止(TERMINATED)：表示该线程已经执行完毕。</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//TERMINATED</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相互转换</li></ul><img src="/2020/12/30/xian-cheng-ji-chu/state.jpg" title="线程状态相互转换"><h3 id="三、创建线程的方式"><a href="#三、创建线程的方式" class="headerlink" title="三、创建线程的方式"></a>三、创建线程的方式</h3><ul><li>继承Thread，并重写父类的run方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现Runable接口，并实现run方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意：实际开发中，选第2种：java只允许单继承     增加程序的健壮性，代码可以共享，代码跟数据独立</p></li><li><p>使用匿名内部类</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Lambda表达式</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>线程池</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、-线程的挂起跟恢复"><a href="#四、-线程的挂起跟恢复" class="headerlink" title="四、 线程的挂起跟恢复"></a>四、 线程的挂起跟恢复</h3><ul><li><p>挂起： 线程的挂起操作实质上就是使线程进入“非可执行”状态下，在这个状态下CPU不会分给线程时间片，进入这个状态可以用来暂停一个线程的运行。 </p><ul><li>在线程挂起后，可以通过重新唤醒线程来使之恢复运行</li></ul></li><li><p>为什么要挂起线程？</p><ul><li>cpu分配的时间片非常短、同时也非常珍贵。避免资源的浪费。</li></ul></li><li><p>如何挂起线程？</p><ul><li>被废弃的方法     <ul><li>thread.suspend() 该方法不会释放线程所占用的资源。如果使用该方法将某个线程挂起，则可能会使其他等待资源的线程死锁     </li><li>thread.resume() 方法本身并无问题，但是不能独立于suspend()方法存在 </li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuspendDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行 run方法,准备调用suspend方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行 run方法,调用suspend方法结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SuspendDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"占用资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"释放资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"对比线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread deadThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"死锁线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deadThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deadThread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用的方法     <ul><li>wait() 暂停执行、放弃已经获得的锁、进入等待状态     </li><li>notify() 随机唤醒一个在等待锁的线程 </li><li>notifyAll() 唤醒所有在等待锁的线程，自行抢占cpu资源</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object waitObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>waitObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"占用资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                waitObj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"释放资源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaitDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"对比线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaitDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"对比线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>waitObj<span class="token punctuation">)</span><span class="token punctuation">{</span>            waitObj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、线程的中断操作"><a href="#五、线程的中断操作" class="headerlink" title="五、线程的中断操作"></a>五、线程的中断操作</h3><ul><li>stop() 废弃方法，开发中不要使用。因为一调用，线程就立刻停止，此时有可能引发相应的线程安全性问题</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsafeWithStop</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i的值====="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j的值====="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        UsafeWithStop usafeWithStop <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UsafeWithStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usafeWithStop<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        usafeWithStop<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usafeWithStop<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Thread.interrupt方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterruptDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自行定义一个标志，用来判断是否继续执行</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyinterruptDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> FLAG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyinterruptDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        FLAG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、线程的优先级"><a href="#六、线程的优先级" class="headerlink" title="六、线程的优先级"></a>六、线程的优先级</h3><ul><li>线程的优先级告诉程序该线程的重要程度有多大。如果有大量线程都被堵塞，都在等候运行，程序会尽可能地先运行优先级的那个线程。但是，这并不表示优先级较低的线程不会运行。若线程的优先级较低，只不过表示它被准许运行的机会小一些而已。</li><li>线程的优先级设置可以为1-10的任一数值，Thread类中定义了三个线程优先级，分别是：MIN_PRIORITY（1）、NORM_PRIORITY（5）、MAX_PRIORITY（10），一般情况下推荐使用这几个常量，不要自行设置数值。</li><li>不同平台，对线程的优先级的支持不同。 编程的时候，不要过度依赖线程优先级，如果你的程序运行是否正确取决于你设置的优先级是否按所设置的优先级运行，那这样的程序不正确</li><li>任务：<ul><li>快速处理：设置高的优先级     </li><li>慢慢处理：设置低的优先级</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、-守护线程"><a href="#七、-守护线程" class="headerlink" title="七、 守护线程"></a>七、 守护线程</h3><ul><li>线程分类<ul><li>用户线程</li><li>守护线程<ul><li>任何一个守护线程都是整个程序中所有用户线程的守护者，只要有活着的用户线程，守护线程就活着。当JVM实例中最后一个非守护线程结束时，也随JVM一起退出</li></ul></li></ul></li><li>守护线程的用处：jvm垃圾清理线程</li><li>建议： 尽量少使用守护线程，因其不可控不要在守护线程里去进行读写操作、执行计算逻辑</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonThreadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DaemonThreadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Thread </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程原理</title>
      <link href="2020/12/30/bing-fa-bian-cheng-yuan-li/"/>
      <url>2020/12/30/bing-fa-bian-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<ul><li><p>任务会阻塞线程，导致之后的代码不能执行：比如一边从文件中读取，一边进行大量计算的情况 </p><ul><li>任务执行时间过长，可以划分为分工明确的子任务：比如分段下载</li><li>任务间断性执行：日志打印 </li><li>任务本身需要协作执行：比如生产者消费者问题</li></ul></li><li><p>并发编程的挑战之频繁的上下文切换</p><ul><li>cpu为线程分配时间片，时间片非常短（毫秒级别），cpu不停的切换线程执行，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态，让我们感觉是多个程序同时运行的。</li><li>上下文的频繁切换，会带来一定的性能开销</li><li>如何减少上下文切换的开销？<ul><li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据</li></ul></li><li>CAS<ul><li>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。使用最少线程</li></ul></li><li>使用最少线程。<ul><li>避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态</li></ul></li><li>协程<ul><li>在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li></ul></li></ul></li><li><p>并发编程之死锁</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object HAIR_A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object HAIR_B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HAIR_A<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>50L<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HAIR_B<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A成功抓住了B的头发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HAIR_B<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HAIR_A<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B成功抓住了A的头发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>并发编程之线程安全</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeThread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 每次调用对num进行++操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">inCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//每个线程执行完成之后，调用countDownLatch</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目进度管理的6个子过程</title>
      <link href="2020/12/29/xiang-mu-jin-du-guan-li-de-6-ge-zi-guo-cheng/"/>
      <url>2020/12/29/xiang-mu-jin-du-guan-li-de-6-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划进度管理</p></blockquote><ul><li>作用：为如何在整个项目期间管理项目进度提供指南和方向</li><li>本过程仅开展一次或仅在项目的预定义点开展</li></ul><blockquote><p>定义活动</p></blockquote><ul><li>作用：将工作包分解为进度活动，作为对项目工作进行进度估算、规划、执行、监督和控制的基础</li><li>本过程需要在整个项目期间开展</li></ul><blockquote><p>排列活动顺序</p></blockquote><ul><li><p>作用：定义工作之间的逻辑顺序，以便在既定的所有项目制约因素下获得最高的效率。</p></li><li><p>本过程需要在整个项目期间开展</p></li><li><p>除了收尾两项，每项活动都至少有一项紧前活动和一项紧后活动，并且逻辑关系适当。通过设计逻辑关系来创建一个切实的项目进度计划，可能有必要在活动之间使用提前量或滞后量，使项目进度计划更为切实可行；可以使用项目管理软件、手动技术或自动技术，来排列活动顺序。</p></li><li><p>排列活动顺序过程旨在将项目活动列表转化为图表，作为发布进度基准的第一步。</p></li></ul><blockquote><p>估算活动持续时间</p></blockquote><ul><li><p>作用：确定完成每个活动所需花费的时间量。</p></li><li><p>本过程需要在整个项目期间开展</p></li><li><p>估算活动持续时间依据的信息包括：工作范围、所需资源类型与技能水平、估算的资源数量和资源日历，而可能影响持续时间估算的其他因素包括对持续时间受到的约束、相关人力投入、资源类型（如固定持续时间、固定人力投入或工作、固定资源数量）以及所采用的进度网络分析技术</p></li><li><p>应该由项目团队中最熟悉具体活动的个人或小组提供持续时间估算所需的各种输入，对持续时间的估算也应该渐进明细，取决于输入数据的数量和质量。例如，在工程与设计项目中，随着数据越来越详细，越来越准确，持续时间估算的准确性和质量也会越来越高。</p></li></ul><blockquote><p>制定进度计划</p></blockquote><ul><li>作用：为完成项目活动而制定具有计划日期的进度模型。</li><li>本过程需要在整个项目期间开展</li><li>制定可行的项目进度计划是一个反复进行的过程。编制进度计划时，需要审查和修正持续时间估算、资源估算和进度储备，以制定项目进度计划，并在经批准后作为基准用于跟踪项目进度</li></ul><blockquote><p>控制进度</p></blockquote><ul><li><p>作用：在整个项目期间保持对进度基准的维护</p></li><li><p>需要在整个项目期间开展</p></li><li><p>进度基准的任何变更都必须经过实施整体变更控制过程的审批。控制进度作为实施整体变更控制过程的一部分，关注如下内容：</p><ul><li>判断项目进度的当前状态</li><li>对引起进度变更的因素施加影响</li><li>重新考虑必要的进度储备</li><li>判断项目进度是否已经发生变更</li><li>在变更实际发生时对其进行管理</li></ul></li></ul><blockquote><p>易混淆</p></blockquote><ul><li><p>赶工</p><ul><li>通过增加资源，以最小的成本增加来压缩进度工期的一种技术</li><li>赶工的例子包括：批准加班、增加额外资源或支付加急费用，来加快关键路径上的活动</li><li>赶工只适用于那些通过增加资源就能缩短持续时间的，且位于关键路径上的活动</li><li>缺点：赶工并非总是切实可行，它可能导致风险和成本的增加</li></ul></li><li><p>快速跟进</p><ul><li>将正常情况下按顺序进行的活动或阶段改为至少是部分并行开展</li><li>只适用于能够通过并行活动来缩短项目工期的情况</li><li>可能会造成返工和风险增加</li></ul></li></ul><blockquote><p>类比估算和参数估算</p></blockquote><table><thead><tr><th>类比估算</th><th>参数估算</th></tr></thead><tbody><tr><td>~类比估算时一种使用相似活动或项目的历史数据，来估算当前活动或项目的持续时间或成本的技术。</td><td>~参数估算是一种基于历史数据和项目参数，使用某种算法来计算成本或持续时间的估算技术</td></tr><tr><td>~类比估算以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来仙姑的同类参数或指标</td><td>~参数估算是指利用历史数据之间的统计关系和其他变量（如建筑施工中的平方英尺），来估算诸如成本，预算和持续时间等活动参数</td></tr><tr><td>~是一种粗略的估算方法</td><td>~参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性</td></tr><tr><td>~在项目详细信息不足时，就经常使用这种技术</td><td>~参数估算可以针对整个项目或项目中的某个部分，并可与其他估算方法联合使用</td></tr><tr><td>~如果以往活动是本质上而不是表面上类似，并且从事估算的项目团队成员具备必要的专业知识，那么类比估算就最为可靠</td><td></td></tr></tbody></table><blockquote><p>资源平衡和资源平滑</p></blockquote><table><thead><tr><th align="center">名称</th><th>资源平衡</th><th>资源平滑</th></tr></thead><tbody><tr><td align="center">定义</td><td><del>资源平衡是为了在资源需求与资源供给之间取得平衡，根据资源制约对开始日期和结束日期进行调整的一种技术。<br></del>如果共享资源或关键资源只在特定时间可用，数量有限，或被过度分配，如一个资源在同一时段内被分配至两个或多个活动，就需要进行资源平衡。<br><del>也可以为保持资源使用量处于均衡水平而进行资源平衡<br></del>资源平衡往往导致关键路径改变，通常是延长</td><td><del>资源平滑是对进度模型中的活动进行调整，从而使项目资源需求不超过预定的资源限制的一种技术<br></del>相对于资源平衡而言，资源平滑不会改变项目关键路径，完工日期也不会延迟。也就是说，活动只在其自由和总浮动时间内延迟。<br>~资源平滑技术可能无法实现所有资源的优化</td></tr><tr><td align="center">特点</td><td><del>资源平衡的前提：使用关键路径分析后的项目进度计划<br></del>目的是均匀使用资源，解决资源过载问题<br><del>资源平衡往往导致关键路径改变<br></del>资源平衡一般是将非关键路径上的资源优先分配给关键路径</td><td><del>针对进度模型的活动进行调整<br></del>只调整浮动时间<br>~可能无法实现优化</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目进度管理</title>
      <link href="2020/12/28/xiang-mu-jin-du-guan-li/"/>
      <url>2020/12/28/xiang-mu-jin-du-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目进度管理包括为管理项目按时完成所需的各个过程。其过程包括：</p></blockquote><ul><li>规划进度管理：未规划、编制、管理、执行和控制项目进度而制定政策、程序和文档的过程。</li><li>定义活动：识别和记录为完成项目可交付成果而采取的具体行动的过程。</li><li>排列活动顺序：识别和记录项目活动之间的关系的过程</li><li>估算活动持续时间：根据资源估算的结果，估算完成单项活动所需工作时段数的过程</li><li>制定进度计划：分析活动顺序、持续时间、资源需求和进度制约因素，创建项目进度模型，从而落实项目执行和监控过程</li><li>控制进度：监督项目状态，以更新项目进度和管理进度基准变更的过程。</li></ul><blockquote><p> 项目进度管理的核心概念</p></blockquote><ul><li><p>项目进度计划提供详尽的计划，说明项目如何以及何时交付项目范围中定义的产品、服务和成果，是一种用于沟通和管理相关方期望的工具，为绩效报告提供了依据。</p></li><li><p>项目管理团队选择进度计划方法，例如关键路径法或敏捷方法。之后，项目管理团队将项目特定数据，如活动、计划日期、持续时间、资源、依赖关系和制约因素等输入进度计划编制工具，以创建项目进度模型。这件工作的成果就是项目进度计划。</p></li><li><p>在小型项目中，定义活动、排列活动顺序、估算活动持续时间及制定进度模型等过程之间的联系非常密切，以至于可视为一个过程，能够由一个人在较短时间内完成。</p></li></ul><blockquote><p>项目进度管理的发展趋势和新兴实践</p></blockquote><ul><li>全球市场瞬息万变，竞争激烈，具有很高的不确定性和不可预测性，很难定义长期范围，因此，为应对环境变化，根据具体情景有效采用和裁剪开发实践就日益中。适应型规划虽然制定了计划，但也意识到工作开始之后，优先级可能发生改变，需要修改计划以反映新的优先级</li><li>有关项目进度计划方法的新兴实践包括（但不限于）：<ul><li>具有未完项的迭代型进度计划。<ul><li>这是一种基于适应生命周期的滚动式规划，例如敏捷的产品开发方法。</li><li>这种方法将需求记录在用户故事中，然后在建造之前按优先级排序并优化用户故事，最后在规定的时间盒内开发产品功能</li><li>这种方法的好处在于，它允许在整个开发生命周期期间进行变更</li></ul></li><li>按需进度计划<ul><li>这种方法通常用于看板体系，基于制约理论和来自精益生产的拉动式进度计划概念，根据团队的交付能力来限制团队正在开展的工作。按需进度计划方法不依赖于以前为产品开发或产品增量制定的进度计划，而是在资源可用时立即从未完项和工作序列中提取出来开展。</li></ul></li></ul></li></ul><blockquote><p>裁剪考虑因素</p></blockquote><ul><li>由于每个项目都是独特的，因此项目经理可能需要裁剪项目进度管理过程。</li><li>裁剪时应考虑的因素包括（但不限于）：<ul><li>生命周期方法</li><li>资源可用性</li><li>项目维度</li><li>技术支持</li></ul></li></ul><blockquote><p>关于敏捷/适应型环境的考虑因素</p></blockquote><ul><li>适应型方法采用短周期来开展工作、审查结果，并在必要时做出调整。这些周期可针对方法和可交付成果的适应性提供快速反馈，通常表现为迭代型进度计划和拉动式按需进度计划</li></ul><blockquote><p>项目时间管理脉络</p></blockquote><ul><li>项目时间管理是对项目进度管理，分为：进度计划编制阶段和进度控制阶段两部分<ul><li>进度计划编制阶段<ul><li>进度计划编制阶段分为：活动定义、活动排序、活动资源估算、活动历时估算、制订进度计划五个阶段</li></ul></li><li>进度控制阶段<ul><li>进度控制阶段主要的任务监控项目的实时进度，做出合理的调整</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务下的Docker介绍</title>
      <link href="2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/"/>
      <url>2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Docker介绍和使用场景"><a href="#一、Docker介绍和使用场景" class="headerlink" title="一、Docker介绍和使用场景"></a>一、Docker介绍和使用场景</h3><ul><li><p>官网：<code>https://www.docker.com/get-started</code></p></li><li><p>一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p></li><li><p>容器是完全使用沙箱机制，相互之间不会有任何接口，使用go语言编写，在LCX（linux容器）基础上进行的封装</p></li><li><p>简单来说：</p><ul><li>就是可以快速部署启动应用</li><li>实现虚拟化，完整资源隔离</li><li>一次编写，四处运行</li><li>但有一定的限制，比如Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li></ul></li><li><p>优点</p><ul><li>提供一次性的环境，假如需要安装Mysql，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</li><li>快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</li><li>组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</li><li>更好的资源隔离和共享</li><li>一句话：开箱即用，快速部署，可移植性强，环境隔离</li></ul></li></ul><h3 id="二、Centos-64位安装Docker"><a href="#二、Centos-64位安装Docker" class="headerlink" title="二、Centos 64位安装Docker"></a>二、Centos 64位安装Docker</h3><ul><li>依次运行以下命令添加yum源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum updateyum install epel-release -yyum clean allyum list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装并运行Docker</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install docker-io -ysystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>检查安装结果</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动使用Docker</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl start docker #运行Docker守护进程systemctl stop docker #停止Docker守护进程systemctl restart docker #重启Docker守护进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、Docker仓库、镜像、容器"><a href="#三、Docker仓库、镜像、容器" class="headerlink" title="三、Docker仓库、镜像、容器"></a>三、Docker仓库、镜像、容器</h3><ul><li><p>Docker 镜像 - Docker images：容器运行的只读模板，操作系统+软件运行环境+用户程序</p></li><li><p>Docker 容器 - Docker containers：容器包含了某个应用运行所需要的全部环境</p></li><li><p>Docker 仓库 - Docker registeries： 用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</p></li></ul><h3 id="四、Docker容器常见命令"><a href="#四、Docker容器常见命令" class="headerlink" title="四、Docker容器常见命令"></a>四、Docker容器常见命令</h3><ul><li><p>常用命令（安装部署好Docker后，执行的命令是docker开头）,xxx是镜像名称</p></li><li><p>搜索镜像：docker search xxx</p></li><li><p>列出当前系统存在的镜像：docker images</p></li><li><p>拉取镜像：docker pull xxx</p><ul><li>xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</li><li>REPOSITORY：表示镜像的仓库源,TAG：镜像的标签</li></ul></li><li><p>运行一个容器：</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker run --name nginx-xd -p 8080:80 -dnginxdocker run - 运行一个容器-d 后台运行-p 端口映射--name "xxx" 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>列举当前运行的容器：docker ps</li><li>检查容器内部信息：docker inspect 容器名称</li><li>删除镜像：docker rmi IMAGE_NAME</li><li>强制移除镜像不管是否有容器使用该镜像 增加 -f 参数</li><li>停止某个容器：docker stop 容器名称</li><li>启动某个容器：docker start 容器名称</li><li>移除某个容器： docker rm 容器名称 （容器必须是停止状态）</li><li>列举全部容器 ： docker ps -a</li><li>查看容器启动日志：docker logs -f containerid</li></ul><h3 id="五、Docker仓库"><a href="#五、Docker仓库" class="headerlink" title="五、Docker仓库"></a>五、Docker仓库</h3><ul><li><p>公共镜像仓库：</p><ul><li>官方：<code>https://hub.docker.com/</code></li></ul></li><li><p>阿里云私有镜像仓库</p><ul><li><code>https://cr.console.aliyun.com/</code></li><li><code>https://cr.console.aliyun.com/cn-shenzhen/instances/credentials</code></li></ul></li></ul><h3 id="六、AlibabaCloud微服务本地镜像打包"><a href="#六、AlibabaCloud微服务本地镜像打包" class="headerlink" title="六、AlibabaCloud微服务本地镜像打包"></a>六、AlibabaCloud微服务本地镜像打包</h3><ul><li><p>官方文档：<code>https://spring.io/guides/gs/spring-boot-docker/</code></p></li><li><p>父工程添加依赖pom.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot.version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子模块项目添加依赖pom.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--根据项目自行修改--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>alibaba-cloud-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dockerfile-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>${docker.image.prefix}/${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buildArgs</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JAR_FILE</span><span class="token punctuation">></span></span>target/${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>JAR_FILE</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buildArgs</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Spotify 的 docker-maven-plugin 插件是用maven插件方式构建docker镜像</p><ul><li>${project.build.finalName} 产出物名称，缺省为${project.artifactId}-${project.version}</li></ul></li><li><p>创建Dockerfile</p><ul><li>默认是根目录，（可以修改为src/main/docker/Dockerfile,如果修则需要制定路径）</li></ul></li><li><p>Dockerfile</p><ul><li>由一系列命令和参数构成的脚本，这些命令应用于基础镜像, 最终创建一个新的镜像</li></ul></li></ul><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM adoptopenjdk/openjdk11:ubiVOLUME /tmpARG JAR_FILECOPY ${JAR_FILE} app.jarENTRYPOINT ["java","-jar","/app.jar"]#FROM <image>:<tag> 需要一个基础镜像，可以是公共的或者是私有的，#后续构建会基于此镜像，如果同一个Dockerfile中建立多个镜像时，可以使用多个FROM指令#VOLUME 配置一个具有持久化功能的目录，主机/var/lib/docker目录下创建了一个临时文件，并链接到容器的/tmp。#该步骤是可选的，如果涉及到文件系统的应用就很有必要了。#/tmp目录用来持久化到 Docker 数据文件夹，因为Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录#ARG 设置编译镜像时加入的参数， JAR_FILE 是设置容器的环境变量(maven里面配置的)#COPY 只支持将本地文件复制到容器 ,还有个ADD更强大，但复杂#ENTRYPOINT 容器启动时执行的命令#EXPOSE 8080 暴露镜像端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>IDEA 本地打包</p><ul><li><code>mvn install -Dmaven.test.skip=true</code></li></ul></li><li><p>从Run-&gt;Edit Configrations进入配置界面。</p><ul><li>点击Docker，再点击+号，添加一个docker命令，输入Name，选择Server，选择Dockerfile文件，输入镜像tag，完成配置。</li></ul></li></ul><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d1.jpg" title="IDEA+docker配置"><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d2.jpg" title="IDEA+docker配置"><ul><li>配置docker服务器地址</li></ul><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d3.jpg" title="IDEA+docker配置"><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d4.jpg" title="IDEA+docker配置"><ul><li><p>配置完成后，执行此命令</p></li><li><p>docker images 查看镜像是否制作成功</p></li></ul><h3 id="七、推送镜像到阿里云私有仓库"><a href="#七、推送镜像到阿里云私有仓库" class="headerlink" title="七、推送镜像到阿里云私有仓库"></a>七、推送镜像到阿里云私有仓库</h3><ul><li>在阿里云创建私有仓库</li></ul><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d5.jpg" title="IDEA+docker配置"><img src="/2020/12/27/wei-fu-wu-xia-de-docker-jie-shao/d6.jpg" title="IDEA+docker配置"><ul><li>将镜像推送到Registry</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#登录docker login --username=用户名 registry.cn-beijing.aliyuncs.comdocker tag [ImageId] registry.cn-beijing.aliyuncs.com/ldclass-cloud/cloud-gateway:[镜像版本号]docker push registry.cn-beijing.aliyuncs.com/ldclass-cloud/cloud-gateway:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AlibabaCloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> AlibabaCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式配置中心</title>
      <link href="2020/12/25/fen-bu-shi-pei-zhi-zhong-xin/"/>
      <url>2020/12/25/fen-bu-shi-pei-zhi-zhong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>配置中心</p></blockquote><ul><li>统一管理配置, 快速切换各个环境的配置</li><li>相关产品<ul><li>百度的disconf 地址:<code>https://github.com/knightliao/disconf</code></li><li>阿里的diamand 地址：<code>https://github.com/takeseem/diamond</code></li><li>springcloud的configs-server: 地址：<code>http://cloud.spring.io/spring-cloud-config/</code></li><li>阿里的Nacos:既可以当服务治理，又可以当配置中心，Nacos = Eureka + Config</li></ul></li></ul><blockquote><p>Nacos配置中心</p></blockquote><ul><li>微服务添加依赖pom.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>官方文档：<code>https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</code></li></ul><blockquote><p>AlibabaCloud配置中心Nacos实战</p></blockquote><ul><li><p>配置文件优先级</p><ul><li>不能使用原先的application.yml, 需要使用bootstrap.yml作为配置文件</li><li>配置读取优先级 bootstrap.yml &gt; application.yml</li></ul></li><li><p>bootstrap.yml</p></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#Nacos配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true">#文件拓展格式</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>nacos添加配置</li></ul><img src="/2020/12/25/fen-bu-shi-pei-zhi-zhong-xin/pz.jpg" title="nacos配置中心"><ul><li>dataId组成，在 Nacos Spring Cloud 中，dataId 的完整格式如下    <ul><li>${prefix}-${spring.profiles.active}.${fileextension}</li><li>prefix 默认为 spring.application.name 的值</li><li>spring.profiles.active 即为当前环境对应的 profile,当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${fileextension}</li><li>file-exetension 为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</li></ul></li></ul><blockquote><p>Nacos动态刷新配置</p></blockquote><ul><li>添加<code>@RefreshScope</code>注解，nacos更改配置之后，程序会自动更新</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AlibabaCloud </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
            <tag> AlibabaCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务链路追踪系统</title>
      <link href="2020/12/25/wei-fu-wu-lian-lu-zhui-zong-xi-tong/"/>
      <url>2020/12/25/wei-fu-wu-lian-lu-zhui-zong-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、链路追踪系统"><a href="#一、链路追踪系统" class="headerlink" title="一、链路追踪系统"></a>一、链路追踪系统</h3><ul><li><p>两个常见问题</p><ul><li>微服务调用链路出现了问题怎么快速排查？</li><li>微服务调用链路耗时长怎么定位是哪个服务？</li></ul></li><li><p>链路追踪系统</p><ul><li>分布式应用架构虽然满足了应用横向扩展的需求，但是运维和诊断的过程变得越来越复杂，例如会遇到接口诊断困难、应用性能诊断复杂、架构分析复杂等难题，传统的监控工具并无法满足，分布式链路系统由此诞生</li></ul></li><li><p>核心：将一次请求分布式调用，使用GPS定位串起来，记录每个调用的耗时、性能等日志，并通过可视化工具展示出来</p></li><li><p>注意：AlibabaCloud全家桶还没对应的链路追踪系统，我们使用Sleuth和zipking（内部使用的鹰眼）</p></li></ul><h3 id="二、Sleuth链路追踪系统"><a href="#二、Sleuth链路追踪系统" class="headerlink" title="二、Sleuth链路追踪系统"></a>二、Sleuth链路追踪系统</h3><ul><li><p>一个组件，专门用于记录链路数据的开源组件</p></li><li><p>文档：<code>https://spring.io/projects/spring-cloud-sleuth</code></p></li><li><p>案例</p><ul><li><code>INFO [ldclass-video-service,0121c58626cf3d9d,b16e167f25e44b98,true]</code></li><li>第一个值，是spring.application.name的值</li><li>第二个值，0121c58626cf3d9d，sleuth生成的一个ID，叫Trace ID，用来标识一条请求链路，一条请求链路中包含一个Trace ID，多个Span ID</li><li>第三个值，b16e167f25e44b98、spanid 基本的工作单元，获取元数据，如发送一个http</li><li>第四个值：true/false，是否要将该信息输出到zipkin服务中来收集和展示。</li></ul></li><li><p>添加依赖pom.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-sleuth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、可视化链路追踪系统Zipkin"><a href="#三、可视化链路追踪系统Zipkin" class="headerlink" title="三、可视化链路追踪系统Zipkin"></a>三、可视化链路追踪系统Zipkin</h3><ul><li><p>官网</p><ul><li><code>https://zipkin.io/</code></li><li><code>https://zipkin.io/pages/quickstart.html</code></li></ul></li><li><p>大规模分布式系统的APM工具（Application Performance Management）,基于Google Dapper的基础实现，和sleuth结合可以提供可视化web界面分析调用链路耗时情况</p></li><li><p>同类产品</p><ul><li>鹰眼（EagleEye）</li><li>CAT</li><li>twitter开源zipkin，结合sleuth</li><li>Pinpoint，运用JavaAgent字节码增强技术</li></ul></li><li><p>下载：<code>zipkin-server-2.12.9-exec.jar</code></p></li><li><p>启动：<code>java -jar zipkin-server-2.12.9-exec.jar</code></p></li><li><p>访问入口：<code>http://127.0.0.1:9411/zipkin/</code></p></li><li><p>zipkin组成：Collector、Storage、Restful API、WebUI组成</p></li></ul><h3 id="四、链路追踪组件Zipkin-Sleuth整合"><a href="#四、链路追踪组件Zipkin-Sleuth整合" class="headerlink" title="四、链路追踪组件Zipkin+Sleuth整合"></a>四、链路追踪组件Zipkin+Sleuth整合</h3><ul><li><p>sleuth收集跟踪信息通过http请求发送给zipkin server</p></li><li><p>zipkin server进行跟踪信息的存储以及提供Rest API</p></li><li><p>Zipkin UI调用其API接口进行数据展示默认存储是内存，也可以用mysql 或者elasticsearch等存储</p></li><li><p>微服务加入依赖pom.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置地址和采样百分比配置application.yml</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> ldclass<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>9411/ <span class="token comment" spellcheck="true">#zipkin地址</span>    <span class="token key atrule">discovery-client-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#不用开启服务发现</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1.0 </span><span class="token comment" spellcheck="true">#采样百分比</span>        <span class="token comment" spellcheck="true">#默认为0.1，即10%，这里配置1，是记录全部的sleuth信息，是为了收集到更多的数据（仅供测试用）。</span>        <span class="token comment" spellcheck="true">#在分布式系统中，过于频繁的采样会影响系统性能，所以这里配置需要采用一个合适的值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、链路追踪系统Zipkin持久化配置"><a href="#五、链路追踪系统Zipkin持久化配置" class="headerlink" title="五、链路追踪系统Zipkin持久化配置"></a>五、链路追踪系统Zipkin持久化配置</h3><ul><li><p>zipkin+sleuth链路追踪日志持久化</p><ul><li>持久化配置：mysql或者elasticsearch</li><li>创建数据库表SQL脚本<ul><li>新建数据库<code>zipkin_log</code></li><li>运行以下建表语句</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE IF NOT EXISTS zipkin_spans (  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',  `trace_id` BIGINT NOT NULL,  `id` BIGINT NOT NULL,  `name` VARCHAR(255) NOT NULL,  `remote_service_name` VARCHAR(255),  `parent_id` BIGINT,  `debug` BIT(1),  `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',  `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',  PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';ALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';CREATE TABLE IF NOT EXISTS zipkin_annotations (  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null') ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces and autocomplete values';ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces and autocomplete values';ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';CREATE TABLE IF NOT EXISTS zipkin_dependencies (  `day` DATE NOT NULL,  `parent` VARCHAR(255) NOT NULL,  `child` VARCHAR(255) NOT NULL,  `call_count` BIGINT,  `error_count` BIGINT,  PRIMARY KEY (`day`, `parent`, `child`)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动zipkin命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">java -jar zipkin-server-2.12.9-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=127.0.0.1 --MYSQL_TCP_PORT=3306 --MYSQL_DB=zipkin_log --MYSQL_USER=root --MYSQL_PASS=root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AlibabaCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlibabaCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目范围管理的6个子过程</title>
      <link href="2020/12/25/xiang-mu-fan-wei-guan-li-de-6-ge-zi-guo-cheng/"/>
      <url>2020/12/25/xiang-mu-fan-wei-guan-li-de-6-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>规划范围管理</p></blockquote><ul><li>作用：在整个项目期间对如何管理范围提供指南和方向。本过程仅开展一次或仅在项目的预定义点开展</li><li>范围管理计划是项目或项目集管理计划的组成部分，描述将如何定义、制定、监督、控制和确认项目范围。制定范围管理计划和细化项目范围始于对下列信息的分析：项目章程中的信息、项目管理计划中已批准的子计划、组织过程资产中的历史信息和相关事业环境因素。</li></ul><blockquote><p>收集需求</p></blockquote><ul><li><p>作用：为定义产品范围和项目范围奠定基础，且仅开展一次或仅在项目的预定义点开展</p></li><li><p>需求是指根据特定协议或其他强制性规范，产品、服务或成果必须具备的条件或能力。它包括发起人、客户和其他相关方的已量化且书面记录的需求和期望。应该足够详细地探明、分析和记录这些需求，将其包含在范围基准中，并在项目执行开始后对其进行测量。需求将成为工作分解结构（WBS）的基础，也将成为成本、进度、质量和采购规划的基础。</p></li><li><p>需求管理计划包括以下内容：</p><ul><li>如何规划、跟踪和汇报各种需求活动</li><li>需求管理需要使用的资源</li><li>培训计划</li><li>项目干系人与需求管理策略</li><li>判断项目范围与需求不一致的准则和纠正规程</li><li>需求跟踪结构</li><li>配置管理活动</li></ul></li></ul><blockquote><p>定义范围</p></blockquote><ul><li>作用：描述产品、服务或成果的边界和验收标准</li><li>由于在收集需求过程中识别出的所有需求未必都包含在项目中，所以定义范围过程就需要从需求文件（收集需求过程的输出）中选取最终的项目需求，然后制定出关于项目及其产品、服务和成果的详细描述。准备好详细的项目范围说明书，对项目成果至关重要。</li><li>项目范围说明书内容：<ul><li>产品范围描述</li><li>验收标准</li><li>可交付成果</li><li>项目的除外责任</li><li>制约因素</li><li>假设条件</li></ul></li></ul><blockquote><p>创建WBS</p></blockquote><ul><li><p>作用：为所要交付的内容提供架构，它仅开展一次或仅在项目的预定义点开展</p></li><li><p>WBS是对项目团队为实现项目目标、创建所需可交付成功而需要实施的全部工作范围的层级分解</p></li><li><p>WBS组织并定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作</p></li><li><p>WBS最低层的组成部分称为工作包，其中包括计划的工作。工作包对相关活动进行归类，以便对工作安排进度、进行估算、开展监督与控制</p></li><li><p>在“工作分解结构”这个词语中，“工作”是指作为活动结果的工作产品或可交付成果，而不是活动本身</p></li><li><p>控制账户是一种管理控制点，在该控制点上，将范围、预算、实际成本和进度加以整合，并将它们与挣值进行比较，以测量绩效。</p></li><li><p>控制账户是WBS某个层次上的要素，可以是工作包，也可以是比工作包更高层次上的一个要素</p></li><li><p>规划包是指在控制账户下，工作包之上的WBS要素，由于当前无法分解到编制项目管理计划所需要的详细程度，规划包是暂时用来做计划的</p></li><li><p>注意事项：</p><ul><li>WBS必须面向可交付成果</li><li>WBS必须符合项目的范围</li><li>WBS的底层应该支持各计划控制</li><li>WBS的元素必须有人负责</li><li>WBS应该控制在4-6层</li><li>WBS也要控制外包出去的工作</li><li>WBS编制需要所有干系人及项目团队成员参与</li><li>WBS并非一成不变</li></ul></li></ul><blockquote><p>确认范围</p></blockquote><ul><li><p>作用：使验收过程具有客观性；同时通过确认每个可交付成果，来提高最终产品、服务或成果获得验收的可能性。本过程应根据需要在整个项目期间定期开展。</p></li><li><p>确认范围过程与控制质量过程的不同之处在于，前者关注可交付成果的验收，而后者关注可交付成果的正确性及是否满足质量要求。控制质量过程通常先于确认范围过程，但二者也可同时进行</p></li><li><p>确认范围与项目收尾的不同之处在于：虽然确认范围与项目收尾工作都在阶段末进行，但确认范围强调的是核实与接受可交付成果，而项目收尾强调的是结束项目（或阶段）所在做的流程性工作。确认范围与项目收尾都有验收工作，确认范围强调验收项目可交付成果，项目收尾强调验收产品</p></li></ul><blockquote><p>控制范围</p></blockquote><ul><li>控制范围是监督项目和产品的范围状态、管理范围基准变更过程</li><li>作用：在整个项目期间保持对范围基准的维护，且需要在整个项目期间开展。</li><li>控制项目范围确保所有变更请求、推荐的纠正措施或预防措施都通过实施整体变更控制过程进行处理。在变更实际发生时，也要采用控制范围过程来管理这些变更。未经控制的产品或项目范围的扩大（未对时间、成本和资源做相对应调整）被称为范围蔓延</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目范围管理</title>
      <link href="2020/12/24/xiang-mu-fan-wei-guan-li/"/>
      <url>2020/12/24/xiang-mu-fan-wei-guan-li/</url>
      
        <content type="html"><![CDATA[<ul><li>项目范围管理包括确保项目做且只做所需的全部工作，以成功完成项目的各个过程。管理项目范围主要在于定义和控制哪些工作应该包括在项目内，哪些不应该包括在项目内。</li></ul><blockquote><p>项目范围管理过程包括</p></blockquote><ul><li>规划范围管理<ul><li>为记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程</li></ul></li><li>收集需求<ul><li>为实现项目目标而确定、记录并管理相关方的需要和需求的过程。</li></ul></li><li>定义范围<ul><li>制定项目和产品详细描述的过程</li></ul></li><li>创建WBS<ul><li>将项目可交付成果和项目工作分解为较小的，更易于管理的组件的过程</li></ul></li><li>确认范围<ul><li>正式验收已完成的项目可交付成果的过程</li></ul></li><li>控制范围<ul><li>监督项目和产品的范围状态，管理范围基准变更的过程</li></ul></li></ul><blockquote><p>项目范围管理的核心概念</p></blockquote><ul><li><p>在项目环境中，“范围”这一术语有两种含义：</p><ul><li>产品范围。某项产品、服务或成果所具有的特征和功能</li><li>项目范围。为交付具有规定特性与功能的产品、服务或成果而必须完成的工作。<ul><li>项目范围有时也包括产品范围</li></ul></li></ul></li><li><p>在预测型生命周期中，在项目开始时就对项目可交付成果进行定义，对任何范围变化都要进行渐进管理</p></li><li><p>在适应型或敏捷型生命周期中，通过多次迭代来开发可交付成果，并在每次迭代开始时定义和批准详细的范围</p></li><li><p>采用适应型生命周期，旨在应对大量变更，需要相关方持续参与项目；因此，应将适应型项目的整体范围分解为一系列拟实现的需求和拟执行的工作（有时称为产品未完项）。在一个迭代开始时，团队将努力确定产品未完项中，哪些最优先项应在下一次迭代中交付。</p><ul><li>在每次迭代中，都会重复开展三个过程<ul><li>收集需求</li><li>定义范围</li><li>创建WBS</li></ul></li></ul></li><li><p>在预测型项目中，经过批准的项目范围说明书、工作分解结构（WBS）和相应的WBS词典构成项目范围基准。只有通过正式变更控制程序，才能进行基准变更。在开展确认范围、控制范围及其他控制过程时，基准被用作比较的基础</p></li><li><p>项目范围的完成情况是根据项目管理计划来衡量的，而产品范围的完成情况是根据产品需求来衡量的。在这里，“需求”是指根据特定协议或其他强制性规范，产品、服务或成果必须具备的条件或能力</p></li></ul><blockquote><p>项目范围管理的发展趋势和新兴实践</p></blockquote><ul><li><p>需求一直是项目管理中的重点，并且还将继续得到项目管理从业者的更多关注。随着全球环境变得日益复杂，组织开始认识到如何运用商业分析，通过定义、管理和控制需求活动来提高竞争优势。商业分析活动可在项目启动和项目经理任命之前就开始</p></li><li><p>在项目范围管理过程中，收集、记录和管理相关方需求。项目范围管理的范围趋势和新兴实践包括（但不限于）注重于商业分析专业人士的合作，以便：</p><ul><li>确定问题并识别商业需要</li><li>识别并推荐能够满足这些需要的可行解决方案</li><li>收集、记录并管理相关方需求，以满足商业和项目目标</li><li>推动项目集成或项目的产品、服务和最终成果的成功应用</li></ul></li><li><p>需求管理过程结束于需求关闭，即把产品、服务或成果移交给接收方，以便长期测量、监控、实现和维持效益</p></li></ul><blockquote><p>裁剪时需要考虑的因素</p></blockquote><ul><li>因为每个项目都是独特的，所以项目经理需要裁剪项目范围管理过程。裁剪时应考虑的因素包括（但不限于）：<ul><li>知识和需求管理</li><li>确认和控制</li><li>开发方法</li><li>需求的稳定性</li><li>治理</li></ul></li></ul><blockquote><p>在敏捷或适应型环境中需要考虑的因素</p></blockquote><ul><li>对于需求不断变化、风险大或不确定性高的项目，在项目开始时通常无法明确项目的范围，而需要在项目期间逐渐明确。敏捷方法特意在项目早期缩短定义和协商范围的时间，并为持续探索和明确范围而延长创建相应过程的时间。在许多情况下，不断涌现的需求往往导致真实的业务需求与最初所述的业务需求之间存在的差异。因此，敏捷方法有目的地构建和审查原型，并通过多次发布版本来明确需求。这样一来，范围会在整个项目期间被定义和再定义。在敏捷方法中，把需求列入未完项。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务核心组件之网关</title>
      <link href="2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/"/>
      <url>2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/</url>
      
        <content type="html"><![CDATA[<h3 id="一、微服务的网关和应用场景"><a href="#一、微服务的网关和应用场景" class="headerlink" title="一、微服务的网关和应用场景"></a>一、微服务的网关和应用场景</h3><ul><li><p>网关</p><ul><li><code>API Gateway</code>，是系统的唯一对外的入口，介于客户端和服务器端之间的中间层，处理非业务功能，提供路由请求、鉴权、监控、缓存、限流等功能</li><li>统一接入<ul><li>智能路由</li><li>AB测试、灰度测试</li><li>负载均衡、容灾处理</li><li>日志埋点（类似Nignx日志）</li></ul></li><li>流量监控<ul><li>限流处理</li><li>服务降级</li></ul></li><li>安全防护<ul><li>鉴权处理</li><li>监控</li><li>机器网络隔离</li></ul></li></ul></li><li><p>主流的网关</p><ul><li>zuul：是Netflix开源的微服务网关，和Eureka,Ribbon,Hystrix等组件配合使用，依赖组件比较多，性能较差</li><li>kong: 由Mashape公司开源的，基于Nginx的API gateway</li><li>nginx+lua：是一个高性能的HTTP和反向代理服务器,lua是脚本语言，让Nginx执行Lua脚本，并且高并发、非阻塞的处理各种请求</li><li>springcloud gateway: Spring公司专门开发的网关，替代zuul</li></ul></li><li><p>springcloud gateway</p><ul><li>Spring官方出品，基于Spring5+Reactor技术开发的网关</li><li>性能强劲基于Reactor+WebFlux、功能多样</li><li>基于springboot2.x, 直接可以jar包方式运行</li><li>官网：<code>https://spring.io/projects/spring-cloud-gateway</code></li></ul></li></ul><h3 id="二、集成SpringCloud-Gateway"><a href="#二、集成SpringCloud-Gateway" class="headerlink" title="二、集成SpringCloud Gateway"></a>二、集成SpringCloud Gateway</h3><ul><li>创建Gateway项目</li><li>添加依赖pom.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置application.yml</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">#路由唯一标识</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8000 </span><span class="token comment" spellcheck="true">#想要转发到的地址</span>          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true">#优先级，数字越小优先级越高</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#断言 配置哪个路径才转发</span>            <span class="token punctuation">-</span> Path=/order<span class="token punctuation">-</span>server/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#过滤器，请求在传递过程中通过过滤器修改</span>            <span class="token punctuation">-</span> StripPrefix=1 <span class="token comment" spellcheck="true">#去掉第一层前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、springcloud-gateway-整合nacos"><a href="#三、springcloud-gateway-整合nacos" class="headerlink" title="三、springcloud gateway 整合nacos"></a>三、springcloud gateway 整合nacos</h3><ul><li><p>Gateway配置Nocas</p><ul><li>网关添加naocs依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动类开启支持<ul><li><code>@EnableDiscoveryClient</code></li></ul></li><li>修改配置文件</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">#路由唯一标识</span>          <span class="token comment" spellcheck="true">#uri: http://127.0.0.1:8000 #想要转发到的地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//ldclass<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">#从nacos进行转发 lb是负载均衡轮询策略</span>          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true">#优先级，数字越小优先级越高</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#断言 配置哪个路径才转发</span>            <span class="token punctuation">-</span> Path=/order<span class="token punctuation">-</span>server/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#过滤器，请求在传递过程中通过过滤器修改</span>            <span class="token punctuation">-</span> StripPrefix=1 <span class="token comment" spellcheck="true">#去掉第一层前缀</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#开启网关拉取nacos的服务</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.80.129<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、Gateway配置和交互流程"><a href="#四、Gateway配置和交互流程" class="headerlink" title="四、Gateway配置和交互流程"></a>四、Gateway配置和交互流程</h3><ul><li><p>网关的配置项</p><ul><li>路由：是网关的基本单元，由ID、URI、一组Predicate、一组Filter组成，根据Predicate进行匹配转发</li><li>route组成部分<ul><li>id：路由的ID</li><li>uri：匹配路由的转发地址</li><li>predicates：配置该路由的断言，通过</li><li>PredicateDefinition类进行接收配置。</li><li>order：路由的优先级，数字越小，优先级越高。</li></ul></li></ul></li><li><p>交互流程</p><ul><li>客户端向Spring Cloud Gateway发出请求</li><li>如果网关处理程序映射确定请求与路由匹配则将其发送到网关Web处理程序</li><li>通过特定过滤器链运行，前置处理-后置处理</li></ul></li></ul><img src="/2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/gateway.jpg" title="gateway"><h3 id="五、Gateway内置路由断言"><a href="#五、Gateway内置路由断言" class="headerlink" title="五、Gateway内置路由断言"></a>五、Gateway内置路由断言</h3><ul><li><p>Gateway路由断言</p><ul><li>Predicate 来源于Java8，接受输入参数，返回一个布尔值结果</li><li>Spring Cloud Gateway 中 Spring利用 Predicate 的特性实现了各种路由匹配规则</li><li>转发的判断条件，SpringCloud Gateway支持多种方式，常见如：Path、Query、Method、Header等</li><li>支持多个Predicate请求的转发是必须满足所有的Predicate后才可以进行路由转发</li></ul></li><li><p>内置路由断言介绍 </p><ul><li><code>RoutePredicateFactory</code> 接口实现类</li></ul></li></ul><img src="/2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/dy.jpg" title="RoutePredicateFactory接口实现类"><ul><li>参数编写规则 XXXRoutePredicateFactory，使用XXX作为参数配置, 如下</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Host=<span class="token punctuation">-</span> Path=<span class="token punctuation">-</span> Method=<span class="token punctuation">-</span> Header=<span class="token punctuation">-</span> Query=<span class="token punctuation">-</span> Cookie=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>内置断言实例</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">#路由唯一标识</span>          <span class="token comment" spellcheck="true">#uri: http://127.0.0.1:8000 #想要转发到的地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//ldclass<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">#从nacos进行转发 lb是负载均衡轮询策略</span>          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true">#优先级，数字越小优先级越高</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#断言</span>            <span class="token punctuation">-</span> Path=/order<span class="token punctuation">-</span>server/** <span class="token comment" spellcheck="true">#根据路径</span>            <span class="token punctuation">-</span> Before=2020<span class="token punctuation">-</span>12<span class="token punctuation">-</span>24T01<span class="token punctuation">:</span>01<span class="token punctuation">:</span>01.000+08<span class="token punctuation">:</span><span class="token number">00 </span><span class="token comment" spellcheck="true">#根据时间，此时间点之后不能访问</span>            <span class="token punctuation">-</span> Query=source <span class="token comment" spellcheck="true">#根据参数 一定要携带这个参数，才能访问</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#过滤器，请求在传递过程中通过过滤器修改</span>            <span class="token punctuation">-</span> StripPrefix=1 <span class="token comment" spellcheck="true">#去掉第一层前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Gateway过滤器"><a href="#六、Gateway过滤器" class="headerlink" title="六、Gateway过滤器"></a>六、Gateway过滤器</h3><ul><li><p>过滤器生命周期</p><ul><li>PRE： 这种过滤器在请求被路由之前调用,一般用于鉴权、限流等</li><li>POST：这种过滤器在路由到微服务以后执行，一般用于修改响应结果，比如增加header信息、打点结果日志</li></ul></li><li><p>网关过滤器分类</p><ul><li>局部过滤器GatewayFilter：应用在某个路由上,每个过滤器工厂都对应一个实现类，并且这些类的名称必须以<br>GatewayFilterFactory 结尾</li><li>全局过滤器：作用全部路由上</li></ul></li><li><p>内置很多局部过滤器，顶级接口 GatewayFilterFactory</p></li></ul><img src="/2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/glq1.jpg" title="GatewayFilterFactory接口实现类"><ul><li>内置很多全局过滤器，顶级接口 GlobalFilter</li></ul><img src="/2020/12/24/wei-fu-wu-he-xin-zu-jian-zhi-wang-guan/glq2.jpg" title="GlobalFilter接口实现类"><ul><li>网关Gateway全局过滤器实现用户鉴权实例<ul><li>自定义全局过滤器实现鉴权</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写业务逻辑</span>        String token <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO 根据业务开发对应的鉴权规则</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//继续往下执行</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 优先级，数字越小，优先级越高     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：网关不要加太多业务逻辑，否则会影响性能</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
          <category> AlibabaCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlibabaCloud </tag>
            
            <tag> 网关 </tag>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK11-LTS</title>
      <link href="2020/12/23/jdk11-lts/"/>
      <url>2020/12/23/jdk11-lts/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JDK基础知识科普</p></blockquote><ul><li><p>OpenJDK和OracleJDK版本区别</p><ul><li>OpenJDK是JDK的开放源码版本，以GPL协议的形式发布（General Public License）<br>Oracle JDK采用了商业实现</li></ul></li><li><p>LTS</p><ul><li>Long Term Support 长期支持的版本，如JDK8、JDK11都是属于LTS</li><li>JDK9 和 JDK10 这两个被称为“功能性的版本”, 两者均只提供半年的技术支持</li></ul></li><li><p>甲骨文释出Java的政策，每6个月会有一个版本的释出，长期支持版本每三年发布一次，根据后续的发布计划，下一个长期支持版Java17 将于2021年发布</p></li><li><p>8u20、11u20</p><ul><li>就是Java的补丁，比如JDK8的8u20版本、8u60版本;java11的11u20、11u40版本</li></ul></li></ul><blockquote><p>升级JDK11</p></blockquote><ul><li><p>IDEA配置</p><ul><li>file =&gt; procject structure=&gt;[project]/[SDKS]/[Modules]</li><li>file=&gt;setting=&gt;Build,Execution,Deployment=&gt;Compiler=&gt;Java Compiler</li></ul></li><li><p>maven项目配置</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>版本选择：<ul><li>只要不是JDK8以下就行，</li><li>也不建议用最新的，比如现在JDK14或者JDK17</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDK11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目整合管理的7个子过程</title>
      <link href="2020/12/23/xiang-mu-zheng-he-guan-li-de-7-ge-zi-guo-cheng/"/>
      <url>2020/12/23/xiang-mu-zheng-he-guan-li-de-7-ge-zi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>制定项目章程</p></blockquote><ul><li>作用：明确项目与组织战略目标之间的直接联系，确立项目的正式地位，并展示组织对项目的承诺。</li><li>本过程仅开展一次或仅在项目的预定义点开展</li><li>项目章程一旦批准，就标志着项目的正式启动。</li><li>在项目中，应尽早确认并任命项目经理，最好在制定项目章程时就任命，且总应在规划之前任命。</li><li>项目章程可由发起人编制，或者由项目经理与发起机构合作编制。</li><li>项目章程授权项目经理规划、执行和控制项目</li></ul><blockquote><p>制定项目管理计划</p></blockquote><ul><li>作用：生成一份综合文件，用于确定所有项目工作的基础及其执行方式。</li><li>本过程仅开展一次或仅在项目的预定义点开展。</li><li>项目管理计划可以是概括或详细的，而每个组成部分的详细程度取决于具体项目的要求。</li><li>项目管理计划应基准化，即，至少应规定项目的范围、时间和成本方面的基准，以便据此考核项目执行情况和管理项目绩效。</li><li>在确定基准之前，可能要对项目管理计划进行多次更新，且这些更新无序遵循正式流程。但是，一旦确定了基准，就只能通过实施整体变更控制过程进行更新。</li></ul><blockquote><p>指导与管理项目工作</p></blockquote><ul><li>作用：对项目工作和可交付成果开展综合管理，以提高项目成功的可能性。</li><li>本过程需要在整个项目期间开展。</li><li>指导与管理项目工作包括执行计划的项目活动，以完成项目可交付成果并达成既定目标。</li><li>本过程需要分配可用资源并管理其有效使用，也需要执行因分析工作绩效数据和信息而提出的项目计划变更</li></ul><blockquote><p>管理项目知识</p></blockquote><ul><li><p>作用：利用已有的组织知识来创造或改进项目成果，并且使当前项目创造的知识可用于支持组织运营和未来的项目或阶段。</p></li><li><p>本过程需要在整个项目期间开展</p></li><li><p>知识通常分为”显性知识“（易使用文字、图片和数字进行编撰的知识）和”隐性知识“（个体知识以及难以明确表达的知识，如信念、洞察力、经验和”诀窍“）两种</p></li><li><p>知识管理指管理显性和隐性知识，旨在重复使用现有知识并生成新知识。有助于达成这两个目的的关键活动是知识分享和知识集成（不同领域的知识、情境知识和项目管理知识）</p></li></ul><blockquote><p>监控项目工作</p></blockquote><ul><li>作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态。</li><li>本过程需要在整个项目期间开展。</li><li>监督是贯穿于整个项目的项目管理活动之一，包括收集、测量和分析测量结果，以及预测趋势，以便推动过程改进。</li><li>持续的监督使项目管理团队能洞察项目的健康状况，并识别须特别关注的任何方面。控制包括制定纠正或预防措施或重新规划，并跟踪行动计划的实施过程，以确保它们能有效解决问题。</li></ul><blockquote><p>实施整体变更控制</p></blockquote><ul><li>作用：确保对项目中已记录在案的变更做综合评审。如果不考虑变更对整体项目目标或计划的影响就开展变更，往往会加剧整体项目风险。</li><li>本过程需要在整个项目期间开展。</li><li>实施整体变更控制过程贯穿项目始终，项目经理对此承担最终责任。</li><li>变更请求可能影响项目范围、产品范围以及任一项目管理计划组件或任一项目文件。</li><li>在整个项目生命周期的任何时间，参与项目的任何相关方都可以提出变更请求</li></ul><blockquote><p>结束项目或阶段</p></blockquote><ul><li>作用：存档项目或阶段信息，完成计划的工作，释放组织团队资源以开展新的工作。</li><li>它仅开展一次或仅在项目的预定义点开展。</li><li>在结束项目时，项目经理需要回顾项目管理计划，确保所有项目工作都已完成以及项目目标均已实现。</li><li>如果项目在完工前就提前终止，结束项目或阶段过程还需要制定程序，来调查和记录提前终止的原因。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos常见报错</title>
      <link href="2020/12/23/nacos-chang-jian-bao-cuo/"/>
      <url>2020/12/23/nacos-chang-jian-bao-cuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nacos 启动报错</p></blockquote><pre class="line-numbers language-error"><code class="language-error">java.lang.IllegalStateException: Failed to load property source from location 'file://usr/local/nacos/conf/application.properties'        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:526)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.loadForFileExtension(ConfigFileApplicationListener.java:475)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:445)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.lambda$null$6(ConfigFileApplicationListener.java:427)        at java.lang.Iterable.forEach(Iterable.java:75)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.lambda$load$7(ConfigFileApplicationListener.java:427)        at java.lang.Iterable.forEach(Iterable.java:75)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:424)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:323)        at org.springframework.boot.context.config.ConfigFileApplicationListener.addPropertySources(ConfigFileApplicationListener.java:204)        at org.springframework.boot.context.config.ConfigFileApplicationListener.postProcessEnvironment(ConfigFileApplicationListener.java:188)        at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:178)        at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:166)        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)        at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:76)        at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)        at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:342)        at org.springframework.boot.SpringApplication.run(SpringApplication.java:305)        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1204)        at com.alibaba.nacos.Nacos.main(Nacos.java:35)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)        at org.springframework.boot.loader.Launcher.launch(Launcher.java:107)        at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)        at org.springframework.boot.loader.PropertiesLauncher.main(PropertiesLauncher.java:467)Caused by: java.net.UnknownHostException: usr        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)        at java.net.Socket.connect(Socket.java:589)        at sun.net.ftp.impl.FtpClient.doConnect(FtpClient.java:962)        at sun.net.ftp.impl.FtpClient.tryConnect(FtpClient.java:924)        at sun.net.ftp.impl.FtpClient.connect(FtpClient.java:1019)        at sun.net.ftp.impl.FtpClient.connect(FtpClient.java:1005)        at sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:294)        at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)        at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:186)        at com.alibaba.nacos.sys.env.OriginTrackedPropertiesLoader$CharacterReader.<init>(OriginTrackedPropertiesLoader.java:153)        at com.alibaba.nacos.sys.env.OriginTrackedPropertiesLoader.load(OriginTrackedPropertiesLoader.java:71)        at com.alibaba.nacos.sys.env.OriginTrackedPropertiesLoader.load(OriginTrackedPropertiesLoader.java:60)        at com.alibaba.nacos.sys.env.NacosAutoRefreshPropertySourceLoader.loadProperties(NacosAutoRefreshPropertySourceLoader.java:87)        at com.alibaba.nacos.sys.env.NacosAutoRefreshPropertySourceLoader.load(NacosAutoRefreshPropertySourceLoader.java:56)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.loadDocuments(ConfigFileApplicationListener.java:544)        at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:499)        ... 31 common frames omitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原因：服务器内存不足</li></ul><blockquote><p>springboot 集成 nacos报错</p></blockquote><pre class="line-numbers language-error"><code class="language-error">failed to req API:/api//nacos/v1/ns/instance after all servers([127.0.0.1:8848])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>原因：Nacos负载过高</li><li>解决方法：删掉nacos文件夹下的data文件夹，重新启动</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向失败编程</title>
      <link href="2020/12/22/mian-xiang-shi-bai-bian-cheng/"/>
      <url>2020/12/22/mian-xiang-shi-bai-bian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>高并发下的微服务存在的问题</p></blockquote><ul><li><p>高并发下存在的问题</p><ul><li>微服务拆分多个系统，服务之间互相依赖，可能会由于系统负载过高，突发流量或者网络等各种异常情况导致服务不可用。</li></ul></li><li><p>核心思想-面向失败编程</p><ul><li>不被外界影响</li><li>不被请求拖垮<ul><li>上游服务</li><li>下游服务</li></ul></li></ul></li></ul><blockquote><p>面向失败编程-微服务架构容错方案</p></blockquote><ul><li><p>限流</p></li><li><p>漏斗，不管流量多大，均匀的流入容器，令牌桶算法，漏桶算法</p></li><li><p>熔断：</p><ul><li>保险丝，熔断服务，为了防止整个系统故障，包含当前和下游服务<ul><li>下单服务 -》商品服务-》用户服务 -》（出现异常-》熔断风控服务</li></ul></li></ul></li><li><p>降级：</p><ul><li>抛弃一些非核心的接口和数据，返回兜底数据 </li></ul></li><li><p>隔离：</p><ul><li>服务和资源互相隔离，比如网络资源，机器资源，线程资源等，不会因为某个服务的资源不足而抢占其他服务的资源</li></ul></li><li><p>熔断和降级互相交集</p><ul><li>相同点：<ul><li>从可用性和可靠性出发，为了防止系统崩溃，最终让用户体验到的是某些功能暂时不能用</li></ul></li><li>不同点<ul><li>服务熔断一般是下游服务故障导致的，而服务降级一般是从整体系统负荷考虑，由调用方控制</li></ul></li></ul></li><li><p>想进行微服务的容错，业界目前有Sentinel、Hystrix，相对于AlibabaCloud而言，Sentinel是最好的搭配</p></li></ul><blockquote><p>分布式系统的流量防卫兵Sentinel</p></blockquote><ul><li><p>Sentinel</p><ul><li>阿里巴巴开源的分布式系统流控工具</li><li>以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</li><li>丰富的应用场景：消息削峰填谷、集群流量控制、实时熔断下游不可用应用等</li><li>完备的实时监控：Sentinel 同时提供实时的监控功能</li><li>提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合</li><li>官网：<code>https://github.com/alibaba/Sentinel/wiki/介绍</code></li></ul></li><li><p>核心概念：</p><ul><li>资源：是 Sentinel 中的核心概念之一，可以是java程序中任何内容，可以是服务或者方法甚至代码，总结起来就是我们要保护的东西</li><li>规则：定义怎样的方式保护资源，主要包括流控规则、熔断降级规则等</li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/se.jpg" title="Sentinel"><blockquote><p>微服务引入Sentinel和控制台搭建</p></blockquote><ul><li><p>Sentinel 分为两个部分</p><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行环境，同时对 Dubbo、SpringCloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul></li><li><p>微服务引入Sentinel依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--引入sentinel--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Sentinel控制台搭建<ul><li>文档：<code>https://github.com/alibaba/Sentinel/wiki/控制台</code></li><li>控制台包含以下功能:<ul><li>查看机器列表以及健康情况：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。</li><li>监控 (单机和集群聚合)通过 Sentinel 客户端暴露的监控API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。</li><li>规则管理和推送：统一管理推送规则。</li><li>鉴权：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</li></ul></li><li>注意：Sentinel 控制台目前仅支持单机部署</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本，#-Dserver.port=8080 用于指定 Sentinel 控制台端口为 8080#默认用户名和密码都是 sentineljava -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AliababCloud微服务整合Sentinel限流配置</p></blockquote><ul><li>加入Sentinel配置</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">cloud</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>   <span class="token key atrule">transport</span><span class="token punctuation">:</span>    <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token comment" spellcheck="true">#dashboard: 8080 控制台端口</span><span class="token comment" spellcheck="true">#port: 9999 本地启的端口，随机选个不能被占用的，与dashboard进行数据交互，会在应用对应的机器上启动一个Http Server，该 Server 会与 Sentinel 控制台做交互, 若被占用,则开始+1一次扫描</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>微服务注册上去后，由于Sentinel是懒加载模式，所以需要访问微服务后才会在控制台出现</p></li><li><p>限流配置实操</p><ul><li>控制台配置</li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/lk.jpg" title="限流配置"><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/lk1.jpg" title="限流配置"><ul><li>配置限流阈值后，接口返回<code>Blocked by Sentinel (flow limiting)</code>，表示限流配置成功</li></ul><blockquote><p>Sentinel多种流控规则和实战</p></blockquote><ul><li><p>流量控制（flow control）</p><ul><li>原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</li></ul></li><li><p>两种规则</p><ul><li>基于统计并发线程数的流量控制<ul><li>并发数控制用于保护业务线程池不被慢调用耗尽</li><li>Sentinel 并发控制不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目（正在执行的调用数目）</li><li>如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。并发数控制通常在调用端进行配置</li></ul></li><li>基于统计QPS的流量控制<ul><li>当 QPS 超过某个阈值的时候，则采取措施进行流量控制</li></ul></li></ul></li><li><p>控制面板介绍</p><ul><li>资源名：默认是请求路径，可自定义</li><li>针对来源：对哪个微服务进行限流，默认是不区分来源，全部限流，这个是针对区分上游服务进行限流。<ul><li>比如：视频服务被订单服务、用户服务调用，就可以针对来源进行限流</li></ul></li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/lk2.jpg" title="控制面板"><ul><li>流控规则会下发到微服务，微服务如果重启，则流控规则会消失<ul><li>可以持久化配置</li></ul></li></ul><blockquote><p>流控规则效果</p></blockquote><ul><li><p>基于统计QPS的流量控制</p></li><li><p>流量控制的效果包括以下几种:</p><ul><li>直接拒绝：默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝</li><li>Warm Up：冷启动/预热，如果系统在此之前长期处于空闲的状态，我们希望处理请求的数量是缓步的增多，经过预期的时间以后，到达系统处理请求个数的最大值</li><li>匀速排队：严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法，主要用于处理间隔性突发的流量，如消息队列<ul><li>在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求</li><li>匀速排队等待策略是 Leaky Bucket 算法结合虚拟队列等待机制实现的。</li><li>匀速排队模式暂时不支持 QPS &gt; 1000 的场景</li></ul></li></ul></li><li><p>流控文档:<code>https://github.com/alibaba/Sentinel/wiki/流量控制</code></p></li></ul><blockquote><p>熔断降级规则</p></blockquote><ul><li><p>熔断降级（虽然是两个概念，基本都是互相配合）</p><ul><li>对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一</li><li>对不稳定的弱依赖服务调用进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩</li><li>熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置</li></ul></li><li><p>Sentinel降级规则</p><ul><li>文档：<code>https://github.com/alibaba/Sentinel/wiki/熔断降级</code><ul><li>就是配置一定规则，然后满足之后就对服务进行熔断降级</li></ul></li></ul></li><li><p>Sentinel 熔断策略</p><ul><li>慢调用比例(响应时间): 选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用<ul><li>比例阈值</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断</li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/jj1.jpg" title="慢调用比例"><ul><li>异常比例：当单位统计时长内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断<ul><li>比例阈值</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时，即使异常比率超出阈值也不会熔断</li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/jj2.jpg" title="异常比例"><ul><li>异常数：当单位统计时长内的异常数目超过阈值之后会自动进行熔断<ul><li>异常数:</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断</li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/jj3.jpg" title="异常数"></li></ul><blockquote><p>熔断状态和恢复</p></blockquote><ul><li>服务熔断一般有三种状态（画图）<ul><li>熔断关闭（Closed）<ul><li>服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制</li></ul></li><li>熔断开启（Open）<ul><li>后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法</li></ul></li><li>半熔断（Half-Open）<ul><li>所谓半熔断就是尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率</li></ul></li></ul></li></ul><img src="/2020/12/22/mian-xiang-shi-bai-bian-cheng/jj4.jpg" title="服务熔断"><ul><li>熔断恢复：<ul><li>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN状态）尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。</li><li>如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断状态</li></ul></li></ul><blockquote><p>Sentinel自定义异常-整合Open-Feign</p></blockquote><ul><li><p>Sentinel自定义异常降级-新旧版本差异</p></li><li><p>默认限流和熔断返回的数据不友好</p></li><li><p>v2.1.0到v2.2.0后，Sentinel里面依赖进行了改动，且不向下兼容</p></li><li><p>自定义降级返回数据</p><ul><li>【旧版】实现<code>UrlBlockHandler</code>并且重写<code>blocked</code>方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XdclassUrlBlockHandler</span> <span class="token keyword">implements</span> <span class="token class-name">UrlBlockHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blocked</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse        httpServletResponse<span class="token punctuation">,</span> BlockException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//降级业务处理理</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【新版】实现<code>BlockExceptionHandler</code>并且重写<code>handle</code>方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XdclassUrlBlockHandler</span> <span class="token keyword">implements</span> <span class="token class-name">BlockExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse        httpServletResponse<span class="token punctuation">,</span> BlockException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//降级业务处理理</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新版Sentinel自定义异常数据实例</p><ul><li>异常种类<ul><li><code>FlowException</code> //限流异常</li><li><code>DegradeException</code> //降级异常</li><li><code>ParamFlowException</code> //参数限流异常</li><li><code>SystemBlockException</code> //系统负载异常</li><li><code>AuthorityException</code> //授权异常</li></ul></li><li>【新版】实现<code>BlockExceptionHandler</code>并且重写<code>handle</code>方法</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ldclassBlockExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">BlockExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> BlockException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">FlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"限流异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">DegradeException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"降级异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ParamFlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"热点参数异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"系统负载异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">AuthorityException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"授权异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置Json返回</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Sentinel整合OpenFeign配置实例</p><ul><li>添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--引入sentinel--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启Feign对Sentinel的支持</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#开启Feign对Sentinel的支持</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建容错类, 实现对应的服务接口, 记得加注解</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceFallBack</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//准备兜底数据</span>        Video video <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        video<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"熔断降级数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> video<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Video video<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置feign容错类<code>fallback = VideoServiceFallBack.class</code></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"ldclass-video-service"</span> <span class="token punctuation">,</span>fallback <span class="token operator">=</span> VideoServiceFallBack<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id查找视频     * @param videoId 视频id     * @return 视频对象     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/v1/video/find_by_id"</span><span class="token punctuation">)</span>    Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"videoId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> videoId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试Post     * @param video     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/api/v1/video/save"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Video video<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Sentinel </category>
          
          <category> AlibabaCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlibabaCloud </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构理论</title>
      <link href="2020/12/21/fen-bu-shi-jia-gou-li-lun/"/>
      <url>2020/12/21/fen-bu-shi-jia-gou-li-lun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>分布式应用核心CAP</p></blockquote><ul><li><p>CAP定理: 指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）</p><ul><li>三者不可同时获得</li><li>一致性（C）：所有节点都可以访问到最新的数据，在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间的数据完<br>全一致，越多节点，数据同步越耗时）<ul><li>强一致性（strong consistency）。任何时刻，任何用户都能读取到最近一次成功更新的数据。 </li></ul></li><li>单调一致性（monotonic consistency）。任何时刻，任何用户一旦读到某个数据在某次更新后的值，那么就不会再读到比这个值更旧的值。也就是说，可获取的数据顺序必是单调递增的。<ul><li>会话一致性（session consistency）。任何用户在某次会话中，一旦读到某个数据在某次更新后的值，那么在本次会话中就不会再读到比这值更旧的值会话一致性是在单调一致性的基础上进一步放松约束，只保证单个用户单个会话内的单调性，在不同用户或同一用户不同会话间则没有保障。</li><li>最终一致性（eventual consistency）。用户只能读到某次更新后的值，但系统保证数据将最终达到完全一致的状态，只是所需时间不能保障。</li><li>弱一致性（weak consistency）。用户无法在确定时间内读到最新更新的值。</li></ul></li><li>可用性（A）：每个请求都是可以得到响应的，不管请求是成功还是失败。负载过大后，集群整体是否还能响应客户端的读写请求。（服务一直可用，而且是正常响应时间）</li><li>分区容错性（P）：除了全部整体网络故障，其他故障都不能导致整个系统不可用。分区容忍性，就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）</li></ul></li><li><p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡</p></li></ul><img src="/2020/12/21/fen-bu-shi-jia-gou-li-lun/CAP.jpg" title="CAP定理"><ul><li>CA： 如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的</li><li>CP: 如果不要求A（可用），每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统</li><li>AP：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</li></ul><blockquote><p>分布式核心CAP理论</p></blockquote><ul><li>常见注册中心：zookeeper、eureka、nacos</li></ul><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>Zookeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>心跳</td><td>TCP/HTTP/gRPC/Cmd</td><td>Keep Alive</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td><td>无</td></tr><tr><td>访问协议</td><td>HTTP/DNS</td><td>HTTP</td><td>HTTP/DNS</td><td>TCP</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><ul><li><p>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足</p></li><li><p>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点</p></li><li><p>结论：</p><ul><li>分布式系统中P,肯定要满足，所以只能在CA中二选一</li><li>没有最好的选择，最好的选择是根据业务场景来进行架构设计</li><li>如果要求一致性，则选择zookeeper/Nacos，如金融行业CP</li><li>如果要求可用性，则Eureka/Nacos，如电商系统 AP</li><li>CP ： 适合支付、交易类，要求数据强一致性，宁可业务不可用，也不能出现脏数据</li><li>AP: 互联网业务，比如信息流架构，不要求数据强一致，更想要服务可用</li></ul></li></ul><blockquote><p>一致性和可用性的权衡结果BASE理论</p></blockquote><ul><li><p>CAP 中的一致性和可用性进行一个权衡的结果，核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性</p></li><li><p>Basically Available(基本可用)</p><ul><li>假设系统，出现了不可预知的故障，但还是能用, 可能会有性能或者功能上的影响</li></ul></li><li><p>Soft state（软状态）</p><ul><li>允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时</li></ul></li><li><p>Eventually consistent（最终一致性）</p><ul><li>系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取到最新的值</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CAP </category>
          
          <category> AlibabaCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAP </tag>
            
            <tag> BASE </tag>
            
            <tag> AlibabaCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理知识领域</title>
      <link href="2020/12/21/xiang-mu-guan-li-zhi-shi-ling-yu/"/>
      <url>2020/12/21/xiang-mu-guan-li-zhi-shi-ling-yu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目管理知识领域</p></blockquote><ul><li>知识领域指按所需知识内容来定义的项目管理领域，并用其所含过程、实践、输入、输出、工具和技术进行描述。</li><li>十大知识领域<ul><li>项目整合管理</li><li>项目范围管理</li><li>项目进度管理</li><li>项目成本管理</li><li>项目质量管理</li><li>项目资源管理</li><li>项目沟通管理</li><li>项目风险管理</li><li>项目采购管理</li><li>项目相关方管理</li></ul></li></ul><blockquote><p>项目整合管理</p></blockquote><ul><li>项目整合管理包括对隶属于项目管理过程组的各种过程和项目管理活动进行识别、定义、组合、统一和协调的各个过程。在项目管理中，整合兼具统一、合并、沟通和建立联系的性质，这些行动应该贯穿项目始终。</li></ul><blockquote><p>项目整合管理包括以下选择：</p></blockquote><ul><li>资源分配</li><li>平衡竞争性需求</li><li>研究各种备选方法</li><li>为实现项目目标而裁剪过程</li><li>管理各个项目管理知识领域之间的依赖关系</li></ul><blockquote><p>项目整合管理过程包括：</p></blockquote><ul><li>制定项目章程：编写一份正式批准项目并授权项目经理在项目活动中使用组织资源的文件的过程</li><li>制定项目管理计划：定义、准备和协调项目计划的所有组成部分，并把它们整合为一份综合项目管理计划的过程</li><li>指导与管理项目工作：为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程</li><li>管理项目知识：使用现有知识并生成新知识，以实现项目目标，并且帮助组织学习的过程</li><li>监控项目工作：跟踪、审查和报告整体项目进展，以实现项目管理计划中确定的绩效目标的过程</li><li>实施整体变更控制：审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程</li><li>结束项目或阶段：终结项目、阶段或合同的所有活动的过程</li></ul><blockquote><p>项目整合管理的核心概念</p></blockquote><ul><li><p>项目整合管理由项目经理负责。项目经理必须对整个项目承担最终责任</p></li><li><p>项目与项目管理本质上具有整合性质，例如，为应急计划制定成本估算时，就需要整合项目成本管理、项目进度管理和项目风险管理知识领域中的相关过程</p></li><li><p>项目管理活成组的各个过程之间经常反复发生联系。例如，在项目早期，规划过程组为执行过程组提供书面的项目管理计划；然后，随着项目的进展，规划过程组还将根据变更情况，更新项目管理计划</p></li><li><p>项目整合管理指的是：</p><ul><li>确保产品、服务或成果的交付日期，项目生命周期以及效益管理计划这些方面保持一致</li><li>编制项目管理计划以实现项目目标</li><li>确保创造合适的知识并运用到项目中，并从项目中获取必要的知识</li><li>管理项目管理计划中活动的绩效和变更</li><li>做出针对影响项目的关键变更的综合决策</li><li>测量和监督项目进展，并采取适当措施以实现项目目标</li><li>收集关于已达成结果的数据，分析数据以获取信息，并与相关方分享信息</li><li>完成全部项目工作，正式关闭各个阶段、合同以及整个项目</li><li>管理可能需要的阶段过渡</li></ul></li><li><p>项目越复杂，相关方的期望越多样化，就需要越全面的整合方法</p></li></ul><blockquote><p>项目整合管理的发展趋势和新兴实践</p></blockquote><ul><li>项目整合管理知识领域要求整合所有其他知识领域的成果。与整合管理过程相关的发展趋势包括（但不限于）：<ul><li>使用自动化工具<ul><li>项目经理需要整合大量的数据和信息，因此有必要使用项目管理信息系统（PMIS）和自动化工具来收集、分析和使用信息，以实现项目目标和项目绩效。</li></ul></li><li>使用可视化管理工具<ul><li>有些项目团队使用可视化管理工具，而不是书面计划和其他文档，来获取和监督关键的项目要素</li></ul></li><li>项目知识管理<ul><li>项目人员的流动性和不稳定性越来越高，就要求采用更严格的过程，在整个项目声明周期中积累知识并传达给目标受众，以防止知识流失</li></ul></li><li>增加项目经理的职责<ul><li>项目经理被要求介入启动和结束项目，例如开展项目商业论证和效益管理。项目经理也需要更全面地识别相关方，并引导他们参与项目，包括管理项目经理与各职能部门、运营部门和高级管理人员之间的接口</li></ul></li><li>混合型方法<ul><li>经实践检验的新做法会不断地融入项目管理方法，例如，采用敏捷或其他迭代做法，为开展需求管理而采用商业分析技术，为分析项目复杂性而采用相关工具，以及为在组织中应用项目成果而采用组织变革管理方法</li></ul></li></ul></li></ul><blockquote><p>裁剪时需要考虑的因素</p></blockquote><ul><li>因为每个项目都是独特的，所以项目经理可能需要裁剪项目整合管理过程</li><li>裁剪时应考虑的因素包括(但不限于)：<ul><li>项目生命周期</li><li>开发生命周期</li><li>管理方法</li><li>知识管理</li><li>变更</li><li>治理</li><li>经验教训</li><li>效益</li></ul></li></ul><blockquote><p>在敏捷或适应型环境中需要考虑的因素</p></blockquote><ul><li>迭代和敏捷方法能够促进团队成员以相关领域专家的身份参与整合管理。团队成员自行决定计划及其组件的整合方式。</li><li>在适应型环境下，把对具体产品的规划和交付授权给团队来控制。项目经理的关注点在于营造一个合作型的决策氛围，并确保团队有能力应对变更。如果团队成员具备广泛的技能基础而不局限于某个狭窄的专业领域，那么这种合作型方法就会更加有效</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务AlibabaCloud全家桶</title>
      <link href="2020/12/15/wei-fu-wu-alibabacloud-quan-jia-tong/"/>
      <url>2020/12/15/wei-fu-wu-alibabacloud-quan-jia-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、微服务架构常见的核心组件"><a href="#一、微服务架构常见的核心组件" class="headerlink" title="一、微服务架构常见的核心组件"></a>一、微服务架构常见的核心组件</h3><ul><li>常见组件<ul><li>网关<ul><li>路由转发+过滤器</li></ul></li><li>注册中心<ul><li>调用和被调用方的信息维护</li></ul></li><li>配置中心<ul><li>管理配置，动态更新<code>application.properties</code></li></ul></li><li>链路追踪<ul><li>分析调用链路耗时</li></ul></li><li>负载均衡器<ul><li>分发流量到多个节点，降低压力</li></ul></li><li>熔断<ul><li>保护自己和被调用方</li></ul></li></ul></li></ul><h3 id="二、微服务架构常见解决方案"><a href="#二、微服务架构常见解决方案" class="headerlink" title="二、微服务架构常见解决方案"></a>二、微服务架构常见解决方案</h3><ul><li><p>ServiceComb</p><ul><li>华为内部的<code>CSE(Cloud Service Engine)</code>框架开源, 一个微服务的开源解决方案,社区比较小文档不多，通信领域比较强</li></ul></li><li><p>dubbo</p><ul><li><p><code>zookeeper + dubbo + springmvc/springboot</code></p></li><li><p>官方地址：<code>http://dubbo.apache.org/#!/?lang=zh-cn</code></p></li><li><p>配套</p><ul><li>通信方式：<code>rpc</code>    </li><li>注册中心：<code>zookeper/redis/nacos</code></li><li>配置中心：<code>diamond、nacos</code></li></ul></li></ul></li><li><p>SpringCloud</p><ul><li>全家桶+轻松嵌入第三方组件(Netflix 奈飞)</li><li>官网：<code>https://spring.io/projects/spring-cloud</code></li><li>配套<ul><li>通信方式：<code>http restful</code></li><li>注册中心：<code>eureka</code></li><li>配置中心：<code>config</code></li><li>断路器：<code>hystrix</code></li><li>网关：<code>zuul/gateway</code></li><li>分布式追踪系统：<code>sleuth+zipkin</code></li></ul></li></ul></li><li><p>Spring Alibaba Cloud</p><ul><li>全家桶+阿里生态多个组件组合+SpringCloud支持</li><li>官网<code>https://spring.io/projects/spring-cloud-alibaba</code></li><li>配套<ul><li>通信方式：<code>http restful</code></li><li>注册中心：<code>nacos</code></li><li>配置中心：<code>nacos</code></li><li>断路器：<code>sentinel</code></li><li>网关：<code>gateway</code></li><li>分布式追踪系统：<code>sleuth+zipkin</code></li></ul></li></ul></li><li><p><code>SpringCloud</code>和<code>Spring Alibaba Cloud</code>组件存在很大交集，互相配合</p><ul><li>SpringCloud很多组件是基于第三方整合，目前多个已经不更新了，比如zuul、eureka、hystrix等</li><li>AlibabaCloud 提供一站式微服务解决方法，已经和SpringCloud进行了整合，组件互相支持</li></ul></li><li><p>AlibabaCloud全家桶介绍</p><ul><li><code>https://github.com/alibaba/spring-cloud-alibaba</code></li><li>服务注册发现：<code>Nacos</code></li><li>服务限流降级：<code>Sentinel</code></li><li>分布配置中心：<code>Nacos</code></li><li>服务网关：<code>SpringCloud Gateway</code></li><li>服务之间调用：<code>Feign、Ribbon</code></li><li>链路追踪：<code>Sleuth+Zipkin</code></li></ul></li></ul><h3 id="三、Maven聚合工程创建"><a href="#三、Maven聚合工程创建" class="headerlink" title="三、Maven聚合工程创建"></a>三、Maven聚合工程创建</h3><ul><li>创建聚合工程（记得删除聚合工程src目录）</li><li>编辑pom.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>club.ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ldclass-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ldclass-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ldclass-video-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ldclass-user-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ldclass-order-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 一般来说父级项目的packaging都为pom，packaging默认类型jar类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--锁定版本--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/2.3.3.RELEASE --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies/Hoxton.SR8 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-alibaba-dependencies/2.2.1.RELEASE --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建子项目</li><li>添加子项目依赖<ul><li>例：子项目<code>ldclass-order-service</code></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ldclass-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>club.ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ldclass-order-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>club.ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ldclass-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加子项目配置文件<ul><li><code>application.yml</code></li></ul></li></ul><pre class="line-numbers language-yml"><code class="language-yml">server:  port: 9000spring:  application:    name: ldclass-video-service  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/cloud_video?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC    username: root    password: Root@123# 控制台输出sql、下划线转驼峰mybatis:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl    map-underscore-to-camel-case: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>controller-&gt;service-&gt;mapper 开发</p></li><li><p>启动类Application配置</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>VideoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、微服务之间的直接调用"><a href="#四、微服务之间的直接调用" class="headerlink" title="四、微服务之间的直接调用"></a>四、微服务之间的直接调用</h3><ul><li><p>RPC:</p><ul><li>远程过程调用，像调用本地服务(方法)一样调用服务器的服务</li><li>支持同步、异步调用</li><li>客户端和服务器之间建立TCP连接，可以一次建立一个，也可以多个调用复用一次链接</li><li>RPC数据包小<ul><li>protobuf</li><li>thrift</li></ul></li><li>rpc：编解码，序列化，链接，丢包，协议</li></ul></li><li><p>Rest(Http):</p><ul><li>http请求，支持多种协议和功能</li><li>开发方便成本低</li><li>http数据包大</li><li>java开发：RestTemplate或者httpclient</li></ul></li><li><p>实例：订单服务调用视频服务接口</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/video_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Video video <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9000/api/v1/video/find_by_id?videoId="</span> <span class="token operator">+</span> videoId<span class="token punctuation">,</span> Video<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> video <span class="token operator">!=</span> null<span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoId</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoTitle</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> videoOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存在的问题:<ul><li>服务之间的IP信息写死</li><li>服务之间无法提供负载均衡</li><li>多个服务直接关系调用维护复杂</li></ul></li></ul><h3 id="五、AlibabaCloud核心组件服务治理Nacos"><a href="#五、AlibabaCloud核心组件服务治理Nacos" class="headerlink" title="五、AlibabaCloud核心组件服务治理Nacos"></a>五、AlibabaCloud核心组件服务治理Nacos</h3><ul><li><p>注册中心（服务治理）</p><ul><li>服务注册：服务提供者provider，启动的时候向注册中心上报自己的网络信息</li><li>服务发现：服务消费者consumer,启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息</li><li>核心:服务管理,是有个服务注册表，心跳机制动态维护，服务实例在启动时注册到服务注册表，并在关闭时注销。</li></ul></li><li><p>微服务应用和机器越来越多，调用方需要知道接口的网络地址，如果靠配置文件的方式去控制网络地址，对于动态新增机器、维护带来很大问题</p></li><li><p>主流的注册中心：zookeeper、Eureka、consul、etcd、Nacos</p></li><li><p>AlibabaCloud搭配最好的是Nacos，且服务的注册发现之外，还支持动态配置服务</p></li><li><p>官网：<code>https://nacos.io/zh-cn/</code></p></li><li><p>Linux/Mac安装Nacos</p><ul><li>解压安装包</li><li>进入bin目录</li><li>单机启动 <code>sh startup.sh -m standalone</code></li><li>访问 <code>localhost:8848/nacos</code></li><li>默认账号密码 <code>nacos/nacos</code></li></ul></li><li><p>项目集成Nacos实现服务之间的调用</p><ul><li>添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--添加nacos客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>配置Nacos地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置Nacos地址</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> ldclass<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service  <span class="token comment" spellcheck="true">#配置Nacos地址   </span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.80.128<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动类增加注解</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>每个服务都要添加以上配置</li><li>服务之间的调用</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例：订单服务调用视频服务</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/video_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"find_video_by_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findVideoById</span><span class="token punctuation">(</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> list <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"ldclass-video-service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServiceInstance serviceInstance <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Video video <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>            <span class="token string">"http://"</span><span class="token operator">+</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/api/v1/video/find_by_id?videoId="</span><span class="token operator">+</span>videoId<span class="token punctuation">,</span>Video<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> video <span class="token operator">!=</span> null<span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoId</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoTitle</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> videoOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、常见的负载均衡策略和解决方案"><a href="#六、常见的负载均衡策略和解决方案" class="headerlink" title="六、常见的负载均衡策略和解决方案"></a>六、常见的负载均衡策略和解决方案</h3><ul><li><p>负载均衡（Load Balance）</p><ul><li>分布式系统中一个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略决定请求发往哪个节点，这就是所谓的负载均衡，</li><li>原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</li></ul></li><li><p>软硬件角度负载均衡的种类</p><ul><li>通过硬件来进行解决，常见的硬件有NetScaler、F5、Radware和Array等商用的负载均衡器，但比较昂贵</li><li>通过软件来进行解决，常见的软件有LVS、Nginx等,它们是基于Linux系统并且开源的负载均衡策略</li></ul></li><li><p>从端的角度负载均衡有两种</p><ul><li>服务端负载均衡</li><li>客户端负载均衡</li></ul></li><li><p>常见的负载均衡策略（看组件的支持情况）</p><ul><li>节点轮询<ul><li>简介：每个请求按顺序分配到不同的后端服务器</li></ul></li><li>weight 权重配置<ul><li>简介：weight和访问比率成正比，数字越大，分配得到的流量越高</li></ul></li><li>固定分发<ul><li>简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</li></ul></li></ul></li><li><p>随机选择、最短响应时间等等</p></li></ul><h3 id="七、AlibabaCloud集成Ribbon实现负载均衡"><a href="#七、AlibabaCloud集成Ribbon实现负载均衡" class="headerlink" title="七、AlibabaCloud集成Ribbon实现负载均衡"></a>七、AlibabaCloud集成Ribbon实现负载均衡</h3><ul><li><p>Ribbon是一个客户端负载均衡工具，通过Spring Cloud封装，可以轻松和AlibabaCloud整合</p></li><li><p>实例</p><ul><li><code>OrderApplication</code>中<code>getRestTemplate()</code>增加<code>@LoadBalanced</code>注解</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启服务发现</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>订单服务调用视频服务<ul><li>注：在订单和视频实体里中增加<code>ServerInfo</code>字段，方便测试负载均衡效果</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/video_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> VideoService videoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"find_video_by_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findVideoById</span><span class="token punctuation">(</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Video video <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://ldclass-video-service/api/v1/video/find_by_id?videoId="</span> <span class="token operator">+</span> videoId<span class="token punctuation">,</span> Video<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> video <span class="token operator">!=</span> null<span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoId</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoTitle</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setServerInfo</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getServeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> videoOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ribbon服务间调用负载均衡分析</p><ul><li>@LoadBalanced <ul><li>首先从注册中心获取provider的列表</li><li>通过一定的策略选择其中一个节点</li><li>再返回给restTemplate调用</li></ul></li></ul></li><li><p>负载均衡策略调整</p><ul><li>自定义Ribbon负载均衡策略</li><li>Ribbon支持的负载均衡策略</li></ul><table><thead><tr><th align="left">策略类</th><th align="center">命名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">RandomRule</td><td align="center">随机策略</td><td align="left">随机选择server</td></tr><tr><td align="left">RoundRobinRule</td><td align="center">轮询策略</td><td align="left">按照顺序选择server（默认）</td></tr><tr><td align="left">RetryRule</td><td align="center">重试策略</td><td align="left">当选择的server不成功时，短期内尝试选择一个可用的server</td></tr><tr><td align="left">AvailabilityFilteringRule</td><td align="center">可用过滤策略</td><td align="left">过滤掉一直失败并被标记为circuit tripped的server，过滤掉那些高并发链接的server（activeconnections超过配置的阈值）</td></tr><tr><td align="left">WeightedResponseTimeRule</td><td align="center">响应时间加权重策略</td><td align="left">根据server的响应时间分配权重，以响应时间作为权重，响应时间越短的服务器被选中的概率越大，综合了各种因素，比如：网络，磁盘，io等，都直接影响应时间</td></tr><tr><td align="left">ZoneAvoidanceRule</td><td align="center">区域权重策略</td><td align="left">综合判断server所在区域的性能，和server的可用性，轮询选择server</td></tr></tbody></table><ul><li><p>实例</p><ul><li>调用方增加配置</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ldclass-video-service</span><span class="token punctuation">:</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#随机选择server</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>策略选择</p><ul><li>如果每个机器配置一样，则建议不修改策略 (推荐)</li><li>如果部分机器配置强，则可以改为<code>WeightedResponseTimeRule</code></li></ul></li></ul></li></ul><h3 id="八、负载均衡组件Open-Feign"><a href="#八、负载均衡组件Open-Feign" class="headerlink" title="八、负载均衡组件Open-Feign"></a>八、负载均衡组件Open-Feign</h3><ul><li><p>Ribbon代码存在的问题：不规范，风格不统一，维护性比较差</p></li><li><p>Feign:</p><ul><li>SpringCloud提供的伪http客户端(本质还是用http)，封装了Http调用流程，更适合面向接口化</li><li>使用Java接口注解的方式调用Http请求.</li><li>不用像Ribbon中那样通过封装HTTP请求报文的方式调用 </li><li>Feign默认集成了Ribbon</li></ul></li><li><p>官方文档<code>https://spring.io/projects/spring-cloud-openfeign</code></p></li><li><p>Nacos支持Feign,可以直接集成实现负载均衡的效果</p></li><li><p>项目集成Feign实现远程方法调用</p><ul><li><p>Feign让方法调用更加解耦</p></li><li><p>使用feign步骤讲解</p><ul><li>加入依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">          <span class="token comment" spellcheck="true">&lt;!--引入feign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置注解</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开启Feign支持</span><span class="token annotation punctuation">@EnableFeignClients</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>增加一个接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"ldclass-video-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id查找视频     * @param videoId 视频id     * @return 视频对象     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/v1/video/find_by_id"</span><span class="token punctuation">)</span>    Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"videoId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> videoId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>controller调用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/video_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> VideoService videoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"find_video_by_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findVideoById</span><span class="token punctuation">(</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Video video <span class="token operator">=</span> videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>videoId<span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> video <span class="token operator">!=</span> null<span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoId</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setVideoTitle</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoOrder<span class="token punctuation">.</span><span class="token function">setServerInfo</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getServeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> videoOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>post方式对象传输 Open-Feign 实现远程方法调用</p><ul><li>实例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//视频服务</span>    <span class="token comment" spellcheck="true">//VideoController</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Video video<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//订单服务</span>    <span class="token comment" spellcheck="true">//ldclass-order-service => VideoService</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/api/v1/video/save"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Video video<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//OrderController</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Video video<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> videoService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Ribbon和feign两个的区别和选择</p><ul><li>选择feign</li><li>默认集成了ribbon</li><li>写起来更加思路清晰和方便</li><li>采用注解方式进行配置，配置熔断等方式方便</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AlibabaCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlibabaCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element常用组件</title>
      <link href="2020/12/08/element-chang-yong-zu-jian/"/>
      <url>2020/12/08/element-chang-yong-zu-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网</p></blockquote><ul><li><code>https://element.eleme.cn/</code></li></ul><blockquote><p>引入Element</p></blockquote><ul><li><p><code>vue add element</code></p></li><li><p>main.js</p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>布局组件</p></blockquote><ul><li>布局组件<ul><li>el-row、el-col</li><li>el-container、el-header、el-aside、el-main、el-footer</li></ul></li><li>常用属性<ul><li>span</li><li>gutter</li></ul></li></ul><blockquote><p>弹出类型组件</p></blockquote><ul><li><p>常用弹出组件</p><ul><li>el-dialog</li><li>el-popover</li></ul></li><li><p>sync修饰符的作用</p><ul><li>示例：ElementUI中的el-dialog</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--第一种写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第二种写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">:visible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogVisible<span class="token punctuation">"</span></span> <span class="token attr-name">:before-close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeClose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第一种写法关闭或是点击空白处无需特别处理，el-dialog组件内部会修改当前值状态，通过.sync修饰符传递给父组件；--></span><span class="token comment" spellcheck="true">&lt;!--第二种写法，需要在beforeClose方法内手动处理this.dialogVisible = false。--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dialog组件中的插槽<ul><li>title</li><li>footer</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--添加确定、取消按钮--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogVisible <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogVisible <span class="token punctuation">=</span> false<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>        <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表格组件</p></blockquote><ul><li><p>基础表格</p></li><li><p>在 Table 组件中，每一个表格由一个 Table-Column 组件构成，也就是表格的列</p></li><li><p>表格常用属性</p><table><thead><tr><th align="center">属性名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">height</td><td align="left">给表格设置高度，同时固定表头</td></tr><tr><td align="center">show-header</td><td align="left">设置是否显示表头</td></tr><tr><td align="center">row-class-name</td><td align="left">设置一个函数或者固定的名字作为行的类名</td></tr><tr><td align="center">border</td><td align="left">是否显示表格竖直方向的边框，设置后可通过改变边框设置列宽</td></tr></tbody></table></li><li><p>列常用属性</p><table><thead><tr><th align="center">属性名</th><th>作用</th></tr></thead><tbody><tr><td align="center">label</td><td>当前列的表头名称</td></tr><tr><td align="center">prop</td><td>传入的表格json数据的key值</td></tr><tr><td align="center">show-overflow-tooltip</td><td>是否设置文字超出列宽时悬浮显示完整内容</td></tr></tbody></table></li><li><p>通过<code>v-for</code>封装适用性更好的表格</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 封装基本table组件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val, key) in tableLabel<span class="token punctuation">"</span></span>        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span>        <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span>        <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>val<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShowOperate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleEdit(scope.$index, scope.row)<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>          <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>            <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleDelete(scope.$index, scope.row)<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>          <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    isShowOperate<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">"2020-12-08"</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"小A"</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">"北京市"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          date<span class="token punctuation">:</span> <span class="token string">"2016-12-08"</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"小B"</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span> <span class="token string">"上海市"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      tableLabel<span class="token punctuation">:</span> <span class="token punctuation">{</span>        date<span class="token punctuation">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleEdit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"edit"</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span>  <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表单组件</p></blockquote><ul><li><p>基础表单</p><ul><li>在 Form 组件中，每一个表单域由一个 Form-Item 组件构成，Form-item可以是下拉框、输入框、日期选择器等各种表单组件</li></ul></li><li><p>添加表单验证</p></li><li><p>封装表单组件</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in formLabel<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>      <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.key]<span class="token punctuation">"</span></span>        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>input<span class="token punctuation">'</span><span class="token punctuation">"</span></span>        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.placeholder<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.key]<span class="token punctuation">"</span></span>        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span>item.placeholder</span>        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>select<span class="token punctuation">'</span><span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(subItem, index) in item.options<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subItem.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subItem.value<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>date-picker<span class="token punctuation">'</span><span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span>item.placeholder</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.key]<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>form<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即创建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resetForm(<span class="token punctuation">'</span>form<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      form<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        region<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        date1<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        date2<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        delivery<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        resource<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        desc<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      formLabel<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          label<span class="token punctuation">:</span> <span class="token string">"活动名称"</span><span class="token punctuation">,</span>          key<span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>          placeholder<span class="token punctuation">:</span> <span class="token string">"请输入活动名称"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          label<span class="token punctuation">:</span> <span class="token string">"活动区域"</span><span class="token punctuation">,</span>          key<span class="token punctuation">:</span> <span class="token string">"region"</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"select"</span><span class="token punctuation">,</span>          placeholder<span class="token punctuation">:</span> <span class="token string">"请选择活动区域"</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              label<span class="token punctuation">:</span> <span class="token string">"区域1"</span><span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              label<span class="token punctuation">:</span> <span class="token string">"区域2"</span><span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          label<span class="token punctuation">:</span> <span class="token string">"活动时间"</span><span class="token punctuation">,</span>          key<span class="token punctuation">:</span> <span class="token string">"date1"</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"date-picker"</span><span class="token punctuation">,</span>          placeholder<span class="token punctuation">:</span> <span class="token string">"请选择活动时间"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"请输入活动名称"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"长度在 3 到 5 个字符"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        region<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"请选择活动区域"</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"change"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        date1<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>            required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span> <span class="token string">"请选择日期"</span><span class="token punctuation">,</span>            trigger<span class="token punctuation">:</span> <span class="token string">"change"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">submitForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"submit!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error submit!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">resetForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span>  <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>项目搭建</p></blockquote><ul><li><p>Vue create &lt;项目名&gt;</p></li><li><p>选择 <code>Manually select features</code>，手动配置项目</p></li><li><p>选择需要的配置</p><ul><li>babel转译js的新特性，兼容低版本浏览器</li><li>CSS预处理器，设置全局变量</li><li>ESLint检查代码写法是否规范</li><li>Router</li><li>Vuex</li></ul></li><li><p>配置项目按eslint规范格式化代码</p><ul><li><p>vscode下载ESlint , Prettier , Vetur 插件</p></li><li><p>打开vscode的设置</p><ul><li>【文件】-》【首选项】-》【设置】</li><li>选择【扩展】中的【ESLint】，之后点击在setting.json中编辑</li></ul><pre class="line-numbers language-json"><code class="language-json">  // 添加 vue 支持  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  // #每次保存的时候自动格式化  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 每次保存的时候将代码按eslint格式进行修复  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可自定义eslint的规则</p><ul><li>在.eslintrc.js 中覆盖prettier规则，覆盖是为了防止冲突</li><li>在rules里配置</li></ul><pre class="line-numbers language-js"><code class="language-js">     <span class="token comment" spellcheck="true">// 添加自定义规则</span>    <span class="token string">'prettier/prettier'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">//eslint校验不不成功后，error或2则报错，warn或1则警告，off或0则⽆无提示</span>      <span class="token string">'error'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//单引号代替双引号</span>        singleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//禁止;结尾</span>        semi<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//换行</span>        printWidth<span class="token punctuation">:</span> <span class="token number">160</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置完成后可运行npm run lint 格式化全部文件，或者保存后自动格式化代码</p></li></ul></li></ul><blockquote><p>配置scss全局变量</p></blockquote><ul><li><p>在<code>assets</code>文件夹下新建<code>scss</code>文件夹</p></li><li><p>新建<code>_variable.scss</code> 文件</p></li><li><p>在<code>vue.config.js</code>文件进行如下配置</p></li></ul><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3333</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置scss全局变量</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预处理器</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sass<span class="token punctuation">:</span> <span class="token punctuation">{</span>        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`@import "@/assets/scss/_variable.scss";`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>封装表单组件</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inline<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in formLabel<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.model<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.model]<span class="token punctuation">"</span></span> <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>请输入<span class="token punctuation">'</span> + item.label<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>input<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.model]<span class="token punctuation">"</span></span> <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>请选择<span class="token punctuation">'</span> + item.label<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>select<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>optItem in item.options<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>optItem.value<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>optItem.value<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>optItem.label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.model]<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>switch<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span> <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>请选择<span class="token punctuation">'</span> + item.label<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form[item.model]<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>date<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    form<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>    formLabel<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> Boolean  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>封装表格组件</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90%<span class="token punctuation">"</span></span> <span class="token attr-name">stripe</span> <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>序号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>85<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ (config.page - 1) * 20 + scope.$index + 1 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">show-overflow-tooltip</span> <span class="token attr-name">stripe</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.prop<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in tableLabel<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span> <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.width ? item.width : <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ scope.row[item.prop] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleEdit(scope.row)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleDelete(scope.row)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pager<span class="token punctuation">"</span></span>      <span class="token attr-name">background</span>      <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prev, pager, next<span class="token punctuation">"</span></span>      <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.total<span class="token punctuation">"</span></span>      <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.limit<span class="token punctuation">"</span></span>      <span class="token attr-name">:current-page.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.page<span class="token punctuation">"</span></span>      <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changePage<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    tableLabel<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>    tableData<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>    config<span class="token punctuation">:</span> Object  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleEdit</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'edit'</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleDelete</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">changePage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changePage'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.common-table</span> </span><span class="token punctuation">{</span>  <span class="token selector">height: calc(100% - 62px);  background-color: <span class="token id">#fff</span>;  position: relative;  <span class="token class">.pager</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>echart组件</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>echart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    chartData<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          xData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    isAxisChart<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isAxisChart <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>axisOption <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>normalOption    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">isCollapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Tab<span class="token punctuation">.</span>isCollapse    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    chartData<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      deep<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">isCollapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resizeChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      echart<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      axisOption<span class="token punctuation">:</span> <span class="token punctuation">{</span>        legend<span class="token punctuation">:</span> <span class="token punctuation">{</span>          textStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token string">'#333'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        grid<span class="token punctuation">:</span> <span class="token punctuation">{</span>          left<span class="token punctuation">:</span> <span class="token string">'20%'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        tooltip<span class="token punctuation">:</span> <span class="token punctuation">{</span>          trigger<span class="token punctuation">:</span> <span class="token string">'axis'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          axisLine<span class="token punctuation">:</span> <span class="token punctuation">{</span>            lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>              color<span class="token punctuation">:</span> <span class="token string">'#17b3a3'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          axisLabel<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token string">'#333'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        yAxis<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>            axisLine<span class="token punctuation">:</span> <span class="token punctuation">{</span>              lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                color<span class="token punctuation">:</span> <span class="token string">'#17b3a3'</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'#2ec7c9'</span><span class="token punctuation">,</span>          <span class="token string">'#b6a2de'</span><span class="token punctuation">,</span>          <span class="token string">'#5ab1ef'</span><span class="token punctuation">,</span>          <span class="token string">'#ffb980'</span><span class="token punctuation">,</span>          <span class="token string">'#d87a80'</span><span class="token punctuation">,</span>          <span class="token string">'#8d98b3'</span><span class="token punctuation">,</span>          <span class="token string">'#e5cf0d'</span><span class="token punctuation">,</span>          <span class="token string">'#97b552'</span><span class="token punctuation">,</span>          <span class="token string">'#95706d'</span><span class="token punctuation">,</span>          <span class="token string">'#dc69aa'</span><span class="token punctuation">,</span>          <span class="token string">'#07a2a4'</span><span class="token punctuation">,</span>          <span class="token string">'#9a7fd1'</span><span class="token punctuation">,</span>          <span class="token string">'#588dd5'</span><span class="token punctuation">,</span>          <span class="token string">'#f5994e'</span><span class="token punctuation">,</span>          <span class="token string">'#c05050'</span><span class="token punctuation">,</span>          <span class="token string">'#59678c'</span><span class="token punctuation">,</span>          <span class="token string">'#c9ab00'</span><span class="token punctuation">,</span>          <span class="token string">'#7eb00a'</span><span class="token punctuation">,</span>          <span class="token string">'#6f5553'</span><span class="token punctuation">,</span>          <span class="token string">'#c14089'</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      normalOption<span class="token punctuation">:</span> <span class="token punctuation">{</span>        tooltip<span class="token punctuation">:</span> <span class="token punctuation">{</span>          trigger<span class="token punctuation">:</span> <span class="token string">'item'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'#0f78f4'</span><span class="token punctuation">,</span> <span class="token string">'#dd536b'</span><span class="token punctuation">,</span> <span class="token string">'#9462e5'</span><span class="token punctuation">,</span> <span class="token string">'#a6a6a6'</span><span class="token punctuation">,</span> <span class="token string">'#e1bb22'</span><span class="token punctuation">,</span> <span class="token string">'#39c362'</span><span class="token punctuation">,</span> <span class="token string">'#3ed1cf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">initChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initChartData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>echart<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>echart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>echart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>echart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>echart<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>echart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">initChartData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isAxisChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chartData<span class="token punctuation">.</span>xData<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>axisOption<span class="token punctuation">.</span>xAxis<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartData<span class="token punctuation">.</span>xData        <span class="token keyword">this</span><span class="token punctuation">.</span>axisOption<span class="token punctuation">.</span>series <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartData<span class="token punctuation">.</span>series      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>normalOption<span class="token punctuation">.</span>series <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartData<span class="token punctuation">.</span>series      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">resizeChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>echart <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>echart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeChart<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeChart<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.x进阶</title>
      <link href="2020/12/04/vue2-x-jin-jie/"/>
      <url>2020/12/04/vue2-x-jin-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、全家桶项目成员"><a href="#一、全家桶项目成员" class="headerlink" title="一、全家桶项目成员"></a>一、全家桶项目成员</h3><ul><li><p>构建vue项目的利器</p><ul><li>脚手架vue-cli3    </li><li>参考地址：<code>https://cli.vuejs.org/zh/config/#vue-config-js</code></li></ul></li><li><p>安装node</p><ul><li>选择对应系统进行下载<code>http://nodejs.cn/download/</code></li><li>node -v</li></ul></li><li><p>安装vue-cli3</p><pre class="line-numbers language-shell"><code class="language-shell">//默认安装最新版本cnpm install -g @vue/cli//或者可以指定版本cnpm install -g @vue/cli @3.6.0vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建项目</p><pre class="line-numbers language-shell"><code class="language-shell">vue create ProjectName//或者可视化创建vue ui//初始化vue init webpack ProjectName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cli3启动方式：<code>cnpm run serve</code></p></li><li><p>3.0的目录简单了很多，少了build、config两个目录。需要对webpack进行配置的话，要手动在根目录新建一个vue.config.js文件</p></li><li><p>vue.config.js常用配置</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js 常用配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基本路径, vue.cli 3.3以前使用baseUrl</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出文件目录</span>    outputDir<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用于嵌套生成的静态资产（js，css，img，fonts）的目录。</span>    assetsDir<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 生产环境sourceMap</span>    productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// webpack配置</span>    configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    chainWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// css相关配置</span>    css<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启用 CSS modules</span>        modules<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 是否使用css分离插件</span>        extract<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 开启 CSS source maps?</span>        sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// css预设器配置项</span>        loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// webpack-dev-server 相关配置</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置代理</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 第三方插件配置</span>    pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、vue中组件间传值"><a href="#二、vue中组件间传值" class="headerlink" title="二、vue中组件间传值"></a>二、vue中组件间传值</h3><ul><li><p>父子组件传值</p><ul><li>props / $emit<ul><li>子组件中通过定义props接收父组件中通过v-bind绑定的数据</li><li>父组件中通过监听子组件中$emit的自定义事件接收数据</li></ul></li><li>$parent / children<ul><li>子组件中通过this.$parent这个对象获取父组件中的数据</li><li>父组件中通过this.$children这个数组获取子组件中的数据</li></ul></li><li>$ref<ul><li>父组件中定义子组件中的ref属性后，通过this.$refs.定义的属性名获取子组件数据</li></ul></li></ul></li><li><p>非父子间传值</p><ul><li><p>事件总线</p><ul><li>原理上就是建立一个公共的js文件，专门用来传递消息</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bus.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在需要传递消息的地⽅方引⼊入</span><span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">'./bus.js'</span><span class="token comment" spellcheck="true">// 传递消息</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 接受消息</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>$attrs</code>和 <code>$listeners</code></p><ul><li>解决多级组件间传值的问题</li><li><code>$attr</code> 将父组件中不包含props的属性传入子组件，通常配合<code>interitAttrs</code> 选项一起使用。<ul><li>如果不想在<code>dom</code>上出现属性，可设置<code>interitAttrs: false</code></li></ul></li><li><code>$listeners</code>监听子组件中数据变化，传递给父组件</li></ul></li><li><p>vuex </p><ul><li><code>https://vuex.vuejs.org/</code></li><li>状态管理理中⼼心</li><li>State<br>数据，存放⼀一些公⽤用部分的数据<br>Mutations<br>数据怎么改变，定义改变state的⼀一些⽅方法<br>Actions<br>异步改变， 如果需要异步改变state，则在这书写</li></ul></li><li><p>vuex里包含的基本参数</p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 组件间公共数据部分</span>state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 需要改变state中的数据时，要在mutation⾥里里定义改变的⽅方法</span>mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 当改变state中的数据是异步操作时，在action⾥里里定义</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vuex中的计算属性—Getters<ul><li>当你需要依赖vuex里的state中的数据，做进一步处理时使用</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js">state<span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 根据state中的count进⼀一步处理理，计算双倍值</span>getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>doubleCount <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模块化概念—Modules<ul><li>当vuex里的数据十分庞大时，可根据存放的数据所属模块进行划分</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 第⼀一步 引⼊入模块</span><span class="token keyword">import</span> text <span class="token keyword">from</span> <span class="token string">'./text'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第⼆二步 在初始化store时，加载模块</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        text    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、单页面应用的控制中心-vue-router"><a href="#三、单页面应用的控制中心-vue-router" class="headerlink" title="三、单页面应用的控制中心-vue-router"></a>三、单页面应用的控制中心-vue-router</h3><ul><li><p><code>https://router.vuejs.org/</code></p></li><li><p>路由的基本配置</p><ul><li>基本参数<ul><li>path：路由的访问路径。即url</li><li>component：访问路径对应的组件</li></ul></li><li>扩展参数<ul><li>name<ul><li>路由指定命名，设置后可用params传参及使用name进行路由跳转</li></ul></li></ul></li></ul></li><li><p>路由的跳转</p><ul><li>router-link标签跳转</li><li>编程式导航</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// route可以是对象，或者是字符串串</span><span class="token comment" spellcheck="true">// 对象的时候可通过路路由的path或者name进⾏行行跳转</span><span class="token comment" spellcheck="true">// 字符串串的话只能是路路由的path</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路路由传递参数, query和path配合， params和name配合</span>query<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>params<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>动态路由</p><ul><li>什么是动态路由<ul><li>组件是同一个，只是通过不同的url参数渲染不同的数据</li><li>路径参数”使用冒号” : 标记</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> home<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在path里显式声明后，通过params传参后，参数不丢失同时参数被设置成必传参数</li></ul></li><li><p>嵌套路由</p><ul><li>目的： 组件中嵌套不同组件</li><li>实现</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在需要嵌套的路路由中补充children字段</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> home<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导航守卫</p><ul><li>通过router中的beforeEach注册全局守卫，每次切换路由时触发</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// to, from是路路由对象，我们在路路由⾥里里定义的参数都可以在这⾥里里取到，例例如to.path或from.name</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数<ul><li>to： 将进入的路由对象</li><li>from： 将离开的路由对象</li><li>next() ：确认完成操作，最后一定要调用，不然路由就不会进行切换</li></ul></li></ul></li><li><p>路由懒加载</p><ul><li>提高页面加载速度</li><li>避免进入项目后加载全部组件</li><li>在路由中的component中设置函数，用import方式进行使用</li></ul><pre class="line-numbers language-js"><code class="language-js">component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="四、介绍mock-js及axios全局配置"><a href="#四、介绍mock-js及axios全局配置" class="headerlink" title="四、介绍mock.js及axios全局配置"></a>四、介绍mock.js及axios全局配置</h3><ul><li><p>Mock.js</p><ul><li>官网：<code>http://mockjs.com/</code></li><li>作用：生成随机数据，拦截ajax请求</li><li>安装：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yarn add mockjs#或npm install mockjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>核心：</p><ul><li>Mock.mock()</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 根据数据模板生成模拟数据</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span> rurl<span class="token punctuation">,</span> rtype<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** rurl: 表示需要拦截的 URL，可以是 URL 字符串或 URL 正则** eg. /\/domain\/list\.json/、'/domian/list.json'*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Mock.Random()<ul><li>随机生成数据</li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.X</title>
      <link href="2020/12/04/vue2-x/"/>
      <url>2020/12/04/vue2-x/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Vue核心知识"><a href="#Vue核心知识" class="headerlink" title="Vue核心知识"></a>Vue核心知识</h3></blockquote><ul><li>Vue框架是以数据驱动和组件化开发为核心</li><li>官网：<code>https://cn.vuejs.org/</code></li></ul><h4 id="一、引包、留坑、实例化-、插值表达式"><a href="#一、引包、留坑、实例化-、插值表达式" class="headerlink" title="一、引包、留坑、实例化 、插值表达式"></a>一、引包、留坑、实例化 、插值表达式</h4><ul><li><p>引包</p><ul><li>确认已经下载了node,然后执行命令 <code>cnpm install vue</code> (如需下载自己要的版本在vue后面加上@版本号)</li><li>页面引入刚下载的包</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>留坑 </p><ul><li>留一个vue模板插入的地方或者是vue代码对其生效的地方</li></ul></li><li><p>实例化 即启动Vue</p><ul><li><p>启动： </p><pre><code>- new Vue({el:目的地,template:模板内容});- 实例化传入的是一个对象options- options  - 目的地 el 对应上面留坑的坑位，可通过id名，类名，标签名来查找 。方式和jquery一样  - 内容 template  - 数据 data 值为函数形式也可是对象，但是都是用函数，因为用的函数最后也是return一个对象</code></pre></li></ul></li></ul><ul><li><p>插值表达式<code></code></p><ul><li>插值表达式内填入data里面的变量即可在页面取到变量值<code></code></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;div>我这里是模板内容{{ msg }}&lt;/div>                    &lt;span>{{ code }}&lt;/span>                &lt;/div>`</span></span><span class="token punctuation">,</span>                  data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">:</span><span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>                    code<span class="token punctuation">:</span><span class="token string">'200'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、常用指令"><a href="#二、常用指令" class="headerlink" title="二、常用指令"></a>二、常用指令</h4><ul><li><p>指令</p><ul><li>在vue中提供一些对于页面+数据的更为方便的操作，这些操作就叫做指令。<ul><li>譬如在HTML页面中这样使用<code>&lt;div v-xxx=''&gt;&lt;/div&gt;</code></li><li>在vue中v-xxx就是vue的指令</li></ul></li><li>指令就是以数据去驱动DOM行为的,简化DOM操作</li></ul></li><li><p>常用的指令</p><ul><li>v-text 不可解析html标签</li><li>v-html 可解析html标签</li><li>v-if 做元素的插入（append）和移除（remove）操作</li><li>v-else-if</li><li>v-else</li><li>v-show display:none 和display:block的切换</li><li>v-for<ul><li>数组 item，index</li><li>对象 value，key ，index</li></ul></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;div v-text='mytext'>&lt;/div>                    &lt;hr>                    &lt;div v-html='myhtml'>&lt;/div>                    &lt;hr>                    &lt;button v-if='num==1'>测试v-if&lt;/button>                    &lt;button v-else-if='num==2'>测试v-else-if&lt;/button>                    &lt;button v-else>测试v-else&lt;/button>                    &lt;hr>                    &lt;div v-show='checkshow'>v-show&lt;/div>                    &lt;hr>                    &lt;ul>                        &lt;li v-for='(item,index) in arrayFor'>{{index}}--{{item}}&lt;/li>                        &lt;/ul>                    &lt;hr>                    &lt;ul>                        &lt;li v-for='(value,key) in objectFor'>{{key}}--{{value}}&lt;/li>                        &lt;/ul>                &lt;/div>            `</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">{</span>                    mytext<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;h1>这里是v-text&lt;/h1>`</span></span><span class="token punctuation">,</span>                    myhtml<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;h1>这里是v-html&lt;/h1>`</span></span><span class="token punctuation">,</span>                    num<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>                    checkshow<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                    arrayFor<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    objectFor<span class="token punctuation">:</span><span class="token punctuation">{</span>play<span class="token punctuation">:</span><span class="token string">'篮球'</span><span class="token punctuation">,</span>people<span class="token punctuation">:</span><span class="token string">'小D'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token string">'25'</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、Vue单双向数据流及事件绑定"><a href="#三、Vue单双向数据流及事件绑定" class="headerlink" title="三、Vue单双向数据流及事件绑定"></a>三、Vue单双向数据流及事件绑定</h4><ul><li>vue单向数据流绑定属性值 v-bind: (属性) 简写 :(属性)<ul><li>单向数据绑定 内存改变影响页面改变</li><li>v-bind就是对属性的简单赋值,当内存中值改变，还是会触发重新渲染</li></ul></li><li>vue双向数据流 v-model 只作用于有value属性的元素<ul><li>双向数据绑定 页面对于input的value改变，能影响内存中name变量</li><li>内存js改变name的值，会影响页面重新渲染最新值</li></ul></li><li>事件绑定<code>v-on:事件名="表达式||函数名" 简写 @事件名="表达式||函数名"</code><ul><li>事件名可以是原生也可以是自定义的</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        new Vue({            el:'#app',            template:`                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--单向数据绑定--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!--双向数据绑定--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>                {{ name }}                <span class="token comment" spellcheck="true">&lt;!--事件绑定--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 点击改变name变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            `,            data:function(){                return{                    name:'hello'                }            },            methods:{                change:function(){                    this.name = "hello vue"                }            }         })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、过滤器"><a href="#四、过滤器" class="headerlink" title="四、过滤器"></a>四、过滤器</h4><ul><li><p>过滤器就是可以对我们的数据进行包装然后再显示</p></li><li><p>过滤器有全局过滤器和组件内的过滤器</p><pre><code>- 全局过滤器Vue.filter('过滤器名',过滤方式fn );- 组件内的过滤器 filters:{ '过滤器名',过滤方式fn }- {{ msg | 过滤器名}}</code></pre></li><li><p>最终都是在过滤方式fn里面return产出最终你需要的数据</p></li><li><p>vue中的this是vue封装好给我们使用的，跟平常方法里面的this是不同的</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        输入：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>instring<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        输出：{{ instring }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        {{ instring | reversal('翻转输出:')}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 全局过滤器</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'reversal'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> arg2<span class="token operator">+</span>val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">{</span>                    instring<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'vue的'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//过滤器</span>            <span class="token comment" spellcheck="true">// filters:{</span>            <span class="token comment" spellcheck="true">//     reversal(val,arg2){</span>            <span class="token comment" spellcheck="true">//         //       字符串转数组   翻转   数组转字符串</span>            <span class="token comment" spellcheck="true">//         return arg2+val.split('').reverse().join('')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、数据监听watch计算属性computed"><a href="#五、数据监听watch计算属性computed" class="headerlink" title="五、数据监听watch计算属性computed"></a>五、数据监听watch计算属性computed</h4><ul><li>watch监听单个，computed监听多个<ul><li>当watch监听的是复杂数据类型的时候需要做深度监听</li><li>computed 监视对象写在了函数内部, 凡是函数内部有this.相关属性改变，都会触发当前函数</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>watch监听数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg.text<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        (<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>n1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>n2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>)*        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>n3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>={{ result }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">:</span><span class="token punctuation">{</span>text<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    n1<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                    n2<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                    n3<span class="token punctuation">:</span><span class="token string">'1'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n3<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//简单对象</span>                <span class="token comment" spellcheck="true">// msg(newval,oldval){</span>                <span class="token comment" spellcheck="true">//     if(newval=='love'){</span>                <span class="token comment" spellcheck="true">//         alert(newval)</span>                <span class="token comment" spellcheck="true">//     }</span>                <span class="token comment" spellcheck="true">// }</span>                <span class="token comment" spellcheck="true">//复杂对象的深度监听</span>                msg<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">handler</span><span class="token punctuation">(</span>newval<span class="token punctuation">,</span>oldval<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>newval<span class="token punctuation">.</span>text<span class="token operator">==</span><span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">alert</span><span class="token punctuation">(</span>newval<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//开启深度监听</span>                    deep<span class="token punctuation">:</span><span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3></blockquote><h4 id="一、组件"><a href="#一、组件" class="headerlink" title="一、组件"></a>一、组件</h4><ul><li>创建组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Header <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span><span class="token string">'模板'</span> <span class="token punctuation">,</span> data是一个函数<span class="token punctuation">,</span>methods<span class="token punctuation">:</span>功能<span class="token punctuation">,</span>components<span class="token punctuation">:</span>子组件们 <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//局部声明</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'组件名'</span><span class="token punctuation">,</span>组件对象<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局注册 等于注册加声明了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>组件类型</p><ul><li>通用组件（例如表单、弹窗、布局类等)</li><li>业务组件（抽奖、机器分类）</li><li>页面组件（单页面开发程序的每个页面的都是一个组件、只完成功能、不复用）</li></ul></li><li><p>组件开发三步曲：声明、注册、使用</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//局部创建</span>        <span class="token keyword">var</span> MyHeader<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>header&lt;/div>            `</span></span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> MyBody<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>body&lt;/div>            `</span></span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//全局创建</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyFooter'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>footer&lt;/div>`</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                MyHeader<span class="token punctuation">,</span>                MyBody            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;my-body>&lt;/my-body>                    &lt;my-header>&lt;/my-header>                    &lt;my-footer>&lt;/my-footer>                &lt;/div>`</span></span><span class="token punctuation">,</span>                  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、slot插槽和ref、-parent"><a href="#二、slot插槽和ref、-parent" class="headerlink" title="二、slot插槽和ref、$parent"></a>二、slot插槽和ref、$parent</h4><ul><li><p>slot插槽</p><ul><li>slot就是子组件里给DOM留下的坑位</li><li>&lt;子组件&gt;DOM&lt;/子组件&gt;</li><li>slot是动态的DOM</li></ul></li><li><p>ref获取子组件实例</p><ul><li>识别：在子组件或元素上使用属性ref=”xxxx”</li><li>获取：this.$refs.xxxx 获取元素</li><li>$el 是拿其DOM</li></ul></li><li><p>$parent获取父组件实例（可在子组件直接使用this.$parent即可）</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>子组件                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> Parent <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>父组件                &lt;slot name='hello'>&lt;/slot>                &lt;child ref='childs'>&lt;/child>                &lt;/div>`</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                Child            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    parents<span class="token punctuation">:</span><span class="token string">'父组件'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// console.log(this.$refs.childs)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                Parent            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;parent>                        &lt;div slot='hello'>插槽内容1&lt;/div>                           &lt;div>插槽内容2&lt;/div>                        &lt;/parent>                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、父子组件的通信"><a href="#三、父子组件的通信" class="headerlink" title="三、父子组件的通信"></a>三、父子组件的通信</h4><ul><li><p>搭起专属于父子组件之间的沟通桥梁</p></li><li><p>父传子</p><ul><li>父用子的时候通过属性传递</li><li>子要声明<code>props:['属性名']</code>来接收</li><li>接收之后，可以直接使用<ul><li>在template中直接用</li><li>在js中<code>this.属性名</code>用</li></ul></li></ul></li><li><p>子传父</p><ul><li>子组件里通过<code>$emit('自定义事件名',变量1，变量2)</code>触发</li><li>父组件@自定义事件名=‘事件名’监听<ul><li>子组件方法里<code>this.$emit('sendfather',val1,val2)</code>触发自定义事件</li><li>父组件里<code>&lt;child @sendfather='mymethods'&gt;&lt;/child&gt;</code></li></ul></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//子组件定义好了props直接用</span>        <span class="token comment" spellcheck="true">//子组件通过sendparent传递了数据给父组件</span>         <span class="token keyword">var</span> Child<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>                子组件--{{sendchild}}                &lt;br>                &lt;button @click='sendparent'>反馈父组件信息&lt;/button>                &lt;/div>`</span></span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sendchild'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">sendparent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'fu'</span><span class="token punctuation">,</span><span class="token string">'这是子组件给的'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//父组件通过属性sendchild传递了数据给子组件</span>        <span class="token comment" spellcheck="true">//父组件定义reserve接收数据</span>        <span class="token keyword">var</span> Parent<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>父组件--{{msg}}                    &lt;child sendchild='这是父组件给的' @fu='reserve'>&lt;/child>                &lt;/div>`</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                Child            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">reserve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>val                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                Parent            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;parent>&lt;/parent>                &lt;/div>`</span></span><span class="token punctuation">,</span>                  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、非父子组件之间的通信"><a href="#四、非父子组件之间的通信" class="headerlink" title="四、非父子组件之间的通信"></a>四、非父子组件之间的通信</h4><ul><li><p>建立Bus总线机制实施非父子组件通讯</p><ul><li>创建一个空实例（bus中央事件总线也可以叫中间组件）</li><li>利用$emit $on的触发和监听事件实现非父子组件的通信<ul><li><code>Vue.prototype.$bus=new Vue()</code>//在vue上面挂载一个$bus作为中央处理组件</li><li><code>this.$bus.$emit('自定义事件名','传递的数据')</code>//触发自定义事件传递数据</li><li><code>this.$bus.$on('自定义事件名'，fn)</code>//监听自定义事件获取数据</li></ul></li></ul></li><li><p>解决的方案还有<code>vuex</code>、<code>provide/inject</code>是解决同根往下派发、本地存储也可以进行非父子组件之间的通信</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> MyHeader <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    头部&lt;br>                    {{headermsg}}                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    headermsg<span class="token punctuation">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// var self = this</span>                <span class="token comment" spellcheck="true">// this.$bus.$on('sending',function (val) {</span>                <span class="token comment" spellcheck="true">//     self.headermsg = val</span>                <span class="token comment" spellcheck="true">// })</span>                <span class="token comment" spellcheck="true">//箭头函数会改变this的指向</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'sending'</span><span class="token punctuation">,</span> val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>headermsg <span class="token operator">=</span> val                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> MyBody <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    身体                &lt;/div>`</span></span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> MyFooter <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    底部&lt;br>                    &lt;button @click="sendheader">跟头部通讯&lt;/button>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">sendheader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sending'</span><span class="token punctuation">,</span> <span class="token string">'我是底部的数据'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                MyHeader<span class="token punctuation">,</span>                MyBody<span class="token punctuation">,</span>                MyFooter            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;my-header>&lt;/my-header>&lt;hr>                    &lt;my-body>&lt;/my-body>&lt;hr>                    &lt;my-footer>&lt;/my-footer>                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、vue的生命周期"><a href="#五、vue的生命周期" class="headerlink" title="五、vue的生命周期"></a>五、vue的生命周期</h4><ul><li>Vue所有的生命周期钩子函数<ul><li>组件创建前:<code>beforeCreate</code></li><li>组件创建后:<code>created</code></li><li>DOM挂载前:<code>beforeMount</code></li><li>DOM挂载后:<code>mounted</code></li><li>数据更新前:<code>beforeUpdate</code></li><li>数据更新后:<code>updated</code></li><li>组件销毁前:<code>beforeDestroy</code></li><li>组件销毁后:<code>destroyed</code></li></ul></li><li>组件缓存<ul><li>内置组件中</li><li>使用<code>&lt;keep-alive&gt;</code>包裹的组件，在<code>v-if="false"</code>的时候，不会销毁，而是停用，<code>v-if="true"</code> 不会创建,而是激活</li><li>避免频繁创建组件对象的性能损耗</li><li>组件的激活和停用<ul><li>组件停用:<code>deactivated</code></li><li>组件激活:<code>activated</code></li></ul></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Test <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>Test组件{{ msg }}&lt;br>        &lt;button @click="msg+='1'">msg+1&lt;/button>        &lt;/div>    `</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'HELLO VUE'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//组件创建前</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件创建前：msg="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//组件创建后</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件创建后：msg="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//DOM挂载前</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"DOM挂载前="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//DOM挂载后</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"DOM挂载后="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//数据更新前</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据更新前="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//数据更新后</span>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据更新后="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//销毁前</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"销毁前="</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//销毁后</span>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"销毁后="</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//组件停用</span>    <span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件停用="</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//组件激活</span>    <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件激活="</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        Test    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//组件被&lt;keep-alive>包裹后，点销毁按钮，不是销毁，而是停用;点创建按钮，不是创建,而是激活</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>            &lt;keep-alive>&lt;test v-if='testshow'>&lt;/test>&lt;/keep-alive>            &lt;button @click="clickbut" v-if='num==1'>销毁组件&lt;/button>            &lt;button @click="clickbut" v-else>创建组件&lt;/button>        &lt;/div>`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            testshow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">clickbut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>testshow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">0</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>testshow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>testshow        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="Vue之路由"><a href="#Vue之路由" class="headerlink" title="Vue之路由"></a>Vue之路由</h3></blockquote><h4 id="一、路由的工作原理"><a href="#一、路由的工作原理" class="headerlink" title="一、路由的工作原理"></a>一、路由的工作原理</h4><ul><li><p>单页应用的路由模式有两种</p><ul><li>哈希模式（利用hashchange 事件监听 url的hash 的改变）</li><li>history模式（使用此模式需要后台配合把接口都打到我们打包后的index.html上）</li></ul></li><li><p>哈希模式原理</p></li></ul><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>核心是锚点值的改变，我们监听到锚点值改变了就去局部改变页面数据，不做跳转。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> appdiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'#/login'</span><span class="token punctuation">:</span>                    appdiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'登录页面'</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'#/register'</span><span class="token punctuation">:</span>                    appdiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'注册页面'</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、路由安装和使用"><a href="#二、路由安装和使用" class="headerlink" title="二、路由安装和使用"></a>二、路由安装和使用</h4><ul><li>路由是以插件的形式引入到我们的vue项目中来的<ul><li>vue-router是vue的核心插件</li><li>下载 <code>npm i vue-router -S</code></li><li>安装插件<code>Vue.use(VueRouter);</code></li><li>创建路由对象 <code>var router = new VueRouter();</code></li><li>配置路由规则 <code>router.addRoutes([路由对象]);</code><ul><li>路由对象<code>{path:'锚点值',component:要(填坑)显示的组件}</code></li></ul></li><li>将配置好的路由对象交给Vue<ul><li>在options中传递-&gt; key叫做 router</li></ul></li><li>留坑(使用组件) <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用路由插件  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> Login<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>登录页面&lt;/div>`</span></span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 安装路由插件</span>        Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建路由对象</span>        <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//配置路由</span>            routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Login<span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            router<span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;router-view>&lt;/router-view>                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、路由的跳转"><a href="#三、路由的跳转" class="headerlink" title="三、路由的跳转"></a>三、路由的跳转</h4><ul><li>路由的跳转方式有：<ul><li>通过标签：<code>&lt;router-link to='/login'&gt;&lt;/router-link&gt;</code></li><li>通过js控制跳转<code>this.$router.push({path:'/login'})</code></li><li>区别：<ul><li><code>this.$router.push()</code> 跳转到指定的url，会向history插入新记录</li><li><code>this.$router.replace()</code>同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录<ul><li>点击返回，会跳转到上上一个页面。上一个记录是不存在的。</li><li><code>this.$router.go(-1)</code> 常用来做返回，读history里面的记录后退一个</li></ul></li></ul></li><li><code>vue-router</code>中的对象：</li><li><code>$route</code>路由信息对象,只读对象</li><li><code>$router</code>路由操作对象,只写对象</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用路由插件  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> Login<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>登录页面&lt;/div>`</span></span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> Register<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>注册页面&lt;/div>`</span></span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> Buy<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>买买买！！&lt;/div>`</span></span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 安装路由插件</span>        Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建路由对象</span>        <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//配置路由</span>            routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Login<span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'register'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Register<span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/buy'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'buy'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Buy<span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 实例化</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            router<span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;router-link to='login'>登录&lt;/router-link>                    &lt;router-link to='register'>注册&lt;/router-link>                    &lt;hr>                    &lt;div>                        &lt;button @click="goregister">买买买！！！&lt;/button>                          &lt;button @click="back">返回&lt;/button>                       &lt;/div>                    &lt;hr>                    &lt;router-view>&lt;/router-view>                &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">goregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//push跟replace可以达到同样效果，但是replace是不会向history插入记录,无法返回</span>                    <span class="token comment" spellcheck="true">// this.$router.push({path:'/register'})</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/buy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、路由的传参和取参"><a href="#四、路由的传参和取参" class="headerlink" title="四、路由的传参和取参"></a>四、路由的传参和取参</h4><ul><li>查询参<ul><li>配置（传参）<code>:to="{name:'login',query:{id:loginid}}"</code></li><li>获取（取参）<code>this.$route.query.id</code></li></ul></li><li>路由参数<ul><li>配置（传参）<code>:to="{name:'register',params:{id:registerid} }"</code></li><li>配置路由的规则<code>{ name:'detail',path:'/detail/:id'}</code></li><li>获取 <code>this.$route.params.id</code></li></ul></li><li>总结:<ul><li>to传参的属性里 params是和name配对的 query和name或path都可以</li><li>使用路由参数必须要配置路由规则里面配置好参数名，否则刷新页面参数会丢失</li></ul></li><li>注意：js跳转路由传参和标签传参，存在路由相同而参数不同时页面不做刷新的问题<ul><li>解决方案：<code>&lt;router-view :key="$route.fullPath"&gt;&lt;/router-view&gt;</code></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用路由插件  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        var Login = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>登录页面                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>获取到的查询参数{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,            data() {                return {                    msg: ''                }            },            created() {                this.msg = this.$route.query.id            },        }        var Register = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>注册页面                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>获取到的路由参数{{ foo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,            //1.通过props取路由参数            props:['foo']            //2.            // data() {            //     return {            //         registerfoo: ''            //     }            // },            // created() {            //     this.registerfoo = this.$route.params.foo            // },        }        // 安装路由插件        Vue.use(VueRouter);        // 创建路由对象        var router = new VueRouter({            //配置路由            routes: [                { path: '/login', name: 'login', component: Login },                { path: '/register/:foo', name: 'register', props:true,component: Register },            ]        })        // 实例化        new Vue({            el: '#app',            router,            template: `                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--查询参数--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>login<span class="token punctuation">'</span>,query:{id:<span class="token punctuation">'</span>123<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--路由参数--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                        <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>register<span class="token punctuation">'</span>,params:{foo:<span class="token punctuation">'</span>bar<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jslink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>js跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--:key="$route.fullPath" 解决js路由跳转时，改变参数，路由不变，页面不刷新的问题--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.fullPath<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,            data() {                return {                }            },            methods: {                //js跳转传参                jslink(){                    this.$router.push({name:'login',query:{id:4569}})                }            },        })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、嵌套路由"><a href="#五、嵌套路由" class="headerlink" title="五、嵌套路由"></a>五、嵌套路由</h4><ul><li>路由配置</li></ul><pre class="line-numbers language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/nav'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span><span class="token string">'nav'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Nav<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//路由嵌套增加此属性</span>        children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//在这里配置嵌套的子路由</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用路由插件  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        var Nav = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--这里是子路由的入口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.index<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.personal<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.message<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>资讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.mine<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Index = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    首页                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Personal = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    个人中心                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Message = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    资讯                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Mine = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    我的                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        // 安装路由插件        Vue.use(VueRouter);        // 创建路由对象        var router = new VueRouter({            //配置路由            routes: [                {                    path: '/nav',                    name: 'nav',                    component: Nav,                    //嵌套路由增加children属性                    children: [                        //在这配置嵌套路由                        { path: '', redirect: '/nav/index' },                        { path: 'index', name: 'nav.index', component: Index },                        { path: 'personal', name: 'nav.personal', component: Personal },                        { path: 'message', name: 'nav.message', component: Message },                        { path: 'mine', name: 'nav.mine', component: Mine },                    ]                },            ]        })        // 实例化        new Vue({            el: '#app',            router,            template: `                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--这里是父路由的入口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,            data() {                return {                }            },            methods: {            },        })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、路由守卫"><a href="#六、路由守卫" class="headerlink" title="六、路由守卫"></a>六、路由守卫</h4><ul><li>路由守卫主要用于检验是否登录了，没登录就跳转到登录页面不让在其他页面停留，但是现在这种处理主要的都用请求的全局拦截来做了。</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//前置的钩子函数 最后要执行next（）才会跳转</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//后置的钩子函数 已经跳转了不需要next</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 留坑 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引包  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用路由插件  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        var Nav = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--这里是子路由的入口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.index<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.personal<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.message<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>资讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                        |                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>                         <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>nav.mine<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Index = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    首页                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Personal = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    个人中心                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Message = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    资讯                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        var Mine = {            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    我的                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`        }        // 安装路由插件        Vue.use(VueRouter);        // 创建路由对象        var router = new VueRouter({            //配置路由            routes: [                {                    path: '/nav',                    name: 'nav',                    component: Nav,                    //嵌套路由增加children属性                    children: [                        //在这配置嵌套路由                        { path: '', redirect: '/nav/index' },                        { path: 'index', name: 'nav.index', component: Index },                        { path: 'personal', name: 'nav.personal', component: Personal },                        { path: 'message', name: 'nav.message', component: Message },                        { path: 'mine', name: 'nav.mine', component: Mine },                    ]                },            ]        })        // 实例化        new Vue({            el: '#app',            router,            template: `                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--这里是父路由的入口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,            data() {                return {                    loginstate: true                }            },            methods: {            },            mounted() {                //路由守卫，前置钩子函数                router.beforeEach((to, from, next) => {                    console.log(to)                    if (to.path == '/nav/index') {                        next();                    } else {                                         setTimeout(function () {                            next()                        },2000)                    }                })            },        })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>简单购物车实例</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            课程：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>course<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            价格：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>price<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addcrouse<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>(list,index) in classlist<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                商品名称：{{list.text}}----价格：{{list.price}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addtochat(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加到购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chat</span> <span class="token attr-name">:chatarr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>chatarr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chat</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> Chat <span class="token operator">=</span> <span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'chatarr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                购物车                &lt;table border="1">                    &lt;tr>                        &lt;th>是否选中&lt;/th>                        &lt;th>商品&lt;/th>                        &lt;th>数量&lt;/th>                        &lt;th>价格&lt;/th>                    &lt;/tr>                    &lt;tr v-for='(chat,index) in chatarr'>                        &lt;td>&lt;input type="checkbox" name="" id="" v-model='chat.active'>&lt;/td>                        &lt;td>{{chat.text}}&lt;/td>                        &lt;td>                            &lt;span @click="reducecount(index)">-&lt;/span>                            {{chat.count}}                            &lt;span @click="addcount(index)">+&lt;/span>                        &lt;/td>                        &lt;td>{{chat.count*chat.price}}&lt;/td>                    &lt;/tr>                    &lt;tr>                        &lt;td colspan='2'>选中的商品：{{activeCount}}/{{count}}&lt;/td>                        &lt;td colspan='2'>需付金额：{{totalPrice}}&lt;/td>                    &lt;/tr>                &lt;/table>            &lt;/div>            `</span></span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span>active<span class="token punctuation">)</span><span class="token punctuation">.</span>length                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span>length                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            total <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">.</span>price <span class="token operator">*</span> v<span class="token punctuation">.</span>count                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> total                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                chatarr<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'chat'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    deep<span class="token punctuation">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//增加购物车商品数量</span>                <span class="token function">addcount</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//减少</span>                <span class="token function">reducecount</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">--</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`是否删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                Chat            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    classlist<span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'羽绒服'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">1500</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'毛衣'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'秋衣'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">150</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'卫衣'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'冲锋衣'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    course<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    price<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    chatarr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//购物车</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//添加到商品列表</span>                <span class="token function">addcrouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>classlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token string">''</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//添加到购物车</span>                <span class="token function">addtochat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">const</span> goods <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classlist<span class="token punctuation">[</span>index<span class="token punctuation">]</span>                    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span>text <span class="token operator">==</span> goods<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>goods<span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> active<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>chatarr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'chat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN系列</title>
      <link href="2020/12/03/svn-xi-lie/"/>
      <url>2020/12/03/svn-xi-lie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux SVN 安装</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#查看是否安装rpm -qa | grep subversion#卸载yum remove subversion#安装yum -y install subversion#查看是否安装成功svnserve --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建代码仓库</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#创建projectA和projectBmkdir -p /data/svn/projectAsvnadmin create /data/svn/projectAmkdir -p /data/svn/projectBsvnadmin create /data/svn/projectB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看代码库目录</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd /data/svn/projectA#目录结构#drwxr-xr-x. 2 root root  54 Dec  3 11:41 conf#drwxr-sr-x. 6 root root 233 Dec  3 11:41 db#-r--r--r--. 1 root root   2 Dec  3 11:41 format#drwxr-xr-x. 2 root root 231 Dec  3 11:41 hooks#drwxr-xr-x. 2 root root  41 Dec  3 11:41 locks#-rw-r--r--. 1 root root 229 Dec  3 11:41 README.txtcd conf/#三个配置文件#-rw-r--r--. 1 root root 1080 Dec  3 11:41 authz #权限控制文件#-rw-r--r--. 1 root root  309 Dec  3 11:41 passwd #帐号密码文件#-rw-r--r--. 1 root root 3090 Dec  3 11:41 svnserve.conf # SVN服务配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>统一管理用户权限</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#svn目录下创建conf目录，存放统一管理用户权限配置文件mkdir /data/svn/conf#复制projectA的conf文件夹下的authz和passwd到svn下的conf文件夹cd /data/svn/projectA/confcp authz passwd /data/svn/conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改代码库配置文件</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">vim //data/svn/projectA/conf/svnserve.conf#打开下面的几个注释(注意，要同时要删除#后面的空格，此处配置都要顶头)：anon-access = noneauth-access = write #授权用户可写password-db = /data/svn/conf/passwd #使用哪个文件作为账号文件 统一使用密码文件authz-db = /data/svn/conf/authz #使用哪个文件作为权限文件realm = projectA # 认证空间名，版本库所在目录 权限域名，很重要，写你的工程名#同时把projectB的svnserve.conf也改了anon-access = noneauth-access = writepassword-db = /data/svn/conf/passwdauthz-db = /data/svn/conf/authzrealm = projectB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改两个权限管理文件</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#配置用户密码vim //data/svn/conf/passwd#用户名 = 密码 （最前边不要有空格）[users]user1 = 123user2 = 123user3 = 123user4 = 123user5 = 123#保存#配置分组和权限vim //data/svn/conf/authz[groups]//分组admin = user1,user2guest1 = user3,user4guest2 = user5[projectA:/]@admin = rw #admin角色对projectA目录下的文件具有读写权限[projectB:/]@guest1 = rw #guest1角色对projectA目录下的文件具有读写权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动svn</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#结束进程ps -ef|grep svnkill -9 `pid`#启动svn/usr/bin/svnserve -d -r /data/svn/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>windows SVN checkout 更改用户名密码</p></blockquote><ul><li>SVN checkout 一次后会自动存储用户名和密码。更改密码的方法：<ul><li>右键 TortoiseSVN -&gt; settings -&gt; saved data -&gt; authentication data -&gt; clear all</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SVN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译安装mysql</title>
      <link href="2020/12/01/bian-yi-an-zhuang-mysql/"/>
      <url>2020/12/01/bian-yi-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<blockquote><p>编译安装mysql</p></blockquote><ul><li><p>解压 <code>tar -zxvf mysql-5.7.17.tar.gz</code></p></li><li><p>安装相应的依赖</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install make cmake gcc gcc-c++ bison bison-devel ncurses ncurses-devel autoconf automake wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载boost</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir /usr/local/boostwget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz --no-checkcertificate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>添加用户并创建相应目录存放数据</li></ul><pre class="line-numbers language-she"><code class="language-she">useradd mysql cd /home/mysql/ mkdir data logs temp chown -R mysql:mysql data logs temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行cmake</li></ul><pre class="line-numbers language-shel"><code class="language-shel">cmake \-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \-DDEFAULT_CHARSET=utf8 \-DDEFAULT_COLLATION=utf8_general_ci \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DWITH_INNOBASE_STORAGE_ENGINE=1 \-DWITH_ARCHIVE_STORAGE_ENGINE=1 \-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \-DWITH_MEMORY_STORAGE_ENGINE=1 \-DWITH_READLINE=1 \-DENABLED_LOCAL_INFILE=1 \-DMYSQL_DATADIR=/home/mysql/data \-DMYSQL_USER=mysql \-DMYSQL_TCP_PORT=3306 \-DWITH_BOOST=/usr/local/boost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译安装</li></ul><pre class="line-numbers language-shell"><code class="language-shell">make #进行编译 make install #安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改mysql安装目录权限</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chown -R mysql:mysql /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>初始化mysql，产生密码<code>eqK:iH;+S6dC</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/home/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除/etc下的my.cnf</li></ul><pre class="line-numbers language-she"><code class="language-she">rm /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制服务启动脚本</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动 MySQL 服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">service mysql start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置mysql服务开机自启动</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chkconfig mysql on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登陆mysql并设置可远程登陆</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -u root -p #回车 粘贴初始化时产生的临时密码 eqK:iH;+S6dC GRANT ALL PRIVILEGES ON .TO 'root'@'%' IDENTIFIED BY 'ldclass' WITH GRANT OPTION;#此时不让改，提示要先设置下密码SET PASSWORD = PASSWORD('ldclass'); ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER; flush privileges; exit； #重新登陆，使用刚刚设置的密码 mysql -u root -p 登陆完成之后，即可设置允许远程登陆 GRANT ALL PRIVILEGES ON . TO 'root'@'%' IDENTIFIED BY 'ldclass' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启防火墙端口</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysconfig/iptables#添加 -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用连接工具测试远程连接</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7防火墙常用配置</title>
      <link href="2020/12/01/centos7-fang-huo-qiang-chang-yong-pei-zhi/"/>
      <url>2020/12/01/centos7-fang-huo-qiang-chang-yong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Centos7和Centos6 防火墙的区别</p></blockquote><ul><li>使用的工具不一样了。Centos6 使用的是iptables，Centos7 使用的是firewall</li><li>iptables 用于过滤数据包，属于网络层防火墙。</li><li>firewall 能够允许哪些服务可用，哪些端口可用…属于更高一层的防火墙。</li></ul><blockquote><p>firewall 配置</p></blockquote><ul><li><p>firewalld的配置存储在各种XML文件中</p><ul><li>在/usr/lib/firewalld和/etc/firewalld中</li><li>这允许极大的灵活性，因为文件可以被编辑、写入、备份、用作其他安装的模板等等。</li></ul></li><li><p>注意：以下firewalld 的操作只有重启之后才有效：<code>service firewalld restart</code></p></li><li><p>系统配置目录（/usr/lib/firewalld/services）</p><ul><li>目录中存放定义好的网络服务和端口参数，系统参数，不能修改。</li></ul></li></ul><img src="/2020/12/01/centos7-fang-huo-qiang-chang-yong-pei-zhi/1.jpg" title="系统配置目录"><ul><li>用户配置目录（/etc/firewalld/）</li></ul><img src="/2020/12/01/centos7-fang-huo-qiang-chang-yong-pei-zhi/2.jpg" title="用户配置目录"><ul><li><p>自定义添加端口</p><ul><li><p>通过修改配置文件的方式添加端口</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1、添加需要的规则，开放通源ip为122.10.70.234，端口514，协议tcp；2、开放通源ip为123.60.255.14，端口10050-10051，协议tcp；3、开放通源ip为任意，端口9527，协议tcp；--></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zone</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>short</span><span class="token punctuation">></span></span>Public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>short</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>For use in public areas.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">family</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipv4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>122.10.70.234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>udp<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>514<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accept</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">family</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipv4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123.60.255.14<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tcp<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10050-10051<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accept</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--放通指定ip，指定端口、协议 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">family</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipv4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.249.87.114<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tcp<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accept</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--放通任意ip访问服务器的9527端口--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">family</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipv4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tcp<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9527<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accept</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zone</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过命令的方式添加端口</p><ul><li><p><code>firwall-cmd --permanent --add-port=9527/tcp</code></p></li><li><p>参数介绍：</p><ul><li>firwall-cmd：是Linux提供的操作firewall的一个工具；</li><li>–permanent：表示设置为持久；</li><li>–add-port：标识添加的端口；</li></ul></li><li><p>另外，firewall中有Zone的概念，可以将具体的端口制定到具体的zone配置文件中。</p><pre class="line-numbers language-shell"><code class="language-shell">#例如：添加8010端口firewall-cmd --zone=public --permanent --add-port=8010/tcp#--zone=public：#指定的zone为public；#如果--zone=dmz 这样设置的话，会在dmz.xml文件中新增一条。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注意：修改的内容会在<code>/etc/firewalld/</code>目录下的配置文件中体现。</p></li></ul></li></ul><blockquote><p>firewall常用命令</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">vim  /usr/lib/firewalld/services/ssh.xmlvim  /usr/lib/firewalld/services/http.xmlsystemctl enable firewalld.servicesystemctl restart firewalld.servicefirewall-cmd --state    #查看状态firewall-cmd --list-all   #查看过滤的列表信息firewall-cmd --zone=public --permanent --add-port=8502/tcp     #添加一个协议为tcp的8502端口过滤vim /etc/firewalld/zones/public.xml     <port protocol="tcp" port="8502"/>systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启、关闭、开启、firewalld.serverice 服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">service firewalld restart #重启service firewalld start  #开启service firewalld stop  #关闭systemctl status firewalld  #查看状态systemctl stop firewalld  #关闭systemctl start firewalld #开启systemctl restart firewalld #重启systemctl disable firewalld  #关闭开机启动systemctl enable firewalld #开启开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看启动状态</li></ul><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看防火墙规则</li></ul><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Centos7 切换为iptables防火墙</p></blockquote><ul><li>注意：切换到iptables首先应该关掉默认的firewalld，然后安装iptables服务。</li><li>关闭firewall：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop firewalld.servicesystemctl disable firewalld.service #禁止firewall开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装iptables防火墙：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install iptables-services #安装<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编辑iptables防火墙配置：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim  /etc/sysconfig/iptables #编辑防火墙配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>完成的iptables配置文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#Firewall configuration written by system-config-firewall  #Manual customization of this file is not recommended.  *filter  :INPUT ACCEPT [0:0]  :FORWARD ACCEPT [0:0]  :OUTPUT ACCEPT [0:0]  -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT  -A INPUT -p icmp -j ACCEPT  -A INPUT -i lo -j ACCEPT  -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT  -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT  -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT  -A INPUT -j REJECT --reject-with icmp-host-prohibited  -A FORWARD -j REJECT --reject-with icmp-host-prohibited  COMMIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动</li></ul><pre class="line-numbers language-shell"><code class="language-shell">service iptables start 或 systemctl start iptables.service #开启systemctl enable iptables.service #设置防火墙开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p> iptables常用命令</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">systemctl start iptables #启动systemctl status iptables #查看运行状态systemctl restart iptables.service #重启systemctl stop iptables.service #停止systemctl enable iptables.service #设置开机启动systemctl disable iptables.service #禁止开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">iptables -h #查询帮助iptables -L -n #列出（filter表）所有规则iptables -L -n --line-number #列出（filter表）所有规则，带编号iptables -L -n -t nat #列出（nat表）所有规则iptables -F #清除（filter表）中所有规则iptables -F -t nat #清除（nat表）中所有规则service iptables save #保存配置（保存配置后必须重启iptables）systemctl restart iptables.service #重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>iptables语法</p></blockquote><ul><li><p>filter表解析</p><ul><li>filter表是iptables默认使用的表，负责对流入、流出本机的数据包进行过滤，该表中定义了3个链<ul><li>INPUT：过滤进入主机的数据包</li><li>OUTPUT：处理从本机出去的数据包</li><li>FORWARD：负责转发流经本机但不进入本机的数据包，起到转发作用</li></ul></li></ul></li><li><p>iptables常用语法</p><ul><li><code>-A</code>：追加到规则的最后一条</li><li><code>-D</code>：删除记录</li><li><code>-I</code>：添加到规则的第一条</li><li><code>-p</code>：（proto）规定通信协议，常见的协议有：tcp、udp、icmp、all</li><li><code>-j</code>：（jump）指定要跳转的目标，常见的目标有：ACCEPT（接收数据包）、DROP（丢弃数据包）、REJECT（重定向）<ul><li>一般不使用重定向，会带来安全隐患</li></ul></li></ul></li><li><p>IP过滤</p><ul><li>禁止192.168.1.3 IP地址的所有类型数据接入<code>iptables -A INPUT ! -s 192.168.1.3 -j DROP</code></li></ul></li><li><p>开放端口</p><ul><li><p>开放端口<code>iptables -A INPUT -p tcp --dport 80 -j ACCEPT</code> #开放80端口</p></li><li><p>开放端口范围iptables -I INPUT -p tcp –dport 22:80 -j ACCEPT`#开放22-80范围的端口</p></li><li><p>不允许80端口流出<code>iptables -I OUTPUT -p tcp --dport 80 -j DROP</code></p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> firewall </category>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewall </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷持续集成</title>
      <link href="2020/11/30/min-jie-chi-xu-ji-cheng/"/>
      <url>2020/11/30/min-jie-chi-xu-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JDK、Maven安装"><a href="#一、JDK、Maven安装" class="headerlink" title="一、JDK、Maven安装"></a>一、JDK、Maven安装</h3><ul><li><p>Linux CentOS7</p><ul><li><p>JDK1.8</p><ul><li><p>解压jdk <code>tar -zxvf jdk-8u91-linux-x64.tar.gz -C /usr/local/</code></p></li><li><p>配置java环境变量</p><ul><li><p><code>vim</code>安装<code>yum -y install vim</code></p></li><li><p><code>vim etc/profile</code></p></li><li><p>按<code>i</code>进入编辑模式，在文件下方添加以下配置</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">JAVA_HOME=/usr/local/jdk1.8.0_91export JAVA_HOMECLASSPATH=.:$JAVA_HOME/libexport CLASSPATHPATH=$PATH:$JAVA_HOME/bin:$CLASSPATHexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>按<code>esc</code>退出编辑模式，再输入<code>:wq</code>保存退出</p></li><li><p>激活配置<code>source /etc/profile</code></p></li><li><p>测试<code>java -version</code></p></li></ul></li></ul></li><li><p>maven</p><ul><li><p>解压maven <code>tar -zxvf apache-maven-3.5.3-bin.tar.gz -C /usr/local/</code></p></li><li><p>配置maven环境变量</p><ul><li><code>vim /etc/profile</code></li></ul></li><li><p>按<code>i</code>进入编辑模式，在文件下方添加以下配置</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">MAVEN_HOME=/usr/local/apache-maven-3.5.3export MAVEN_HOMEPATH=$PATH:$MAVEN_HOME/binexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>按esc退出编辑模式，再输入:wq保存退出</li><li>激活配置<code>source /etc/profile</code></li><li>测试<code>mvn -version</code></li></ul></li></ul></li></ul><h3 id="二、nexus的安装"><a href="#二、nexus的安装" class="headerlink" title="二、nexus的安装"></a>二、nexus的安装</h3><ul><li><p><code>nexus</code>下载地址：<code>https://www.sonatype.com/download-oss-sonatype</code></p></li><li><p>上传到服务器</p></li><li><p>解压<code>tar -zxvf nexus-3.12.1-01-unix.tar.gz -C /usr/local/</code></p></li><li><p>修改配置文件<code>vim /usr/local/nexus-3.12.1-01/etc/nexus-default.properties</code></p><ul><li>修改端口<code>application-port</code>，默认是<code>8081</code></li></ul></li><li><p>修改防火墙</p><ul><li><code>vim /etc/sysconfig/iptables</code></li><li>开放端口 <code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT</code></li></ul></li><li><p>启动</p><ul><li><p>新建<code>nexus</code>用户，<code>useradd nexus</code></p></li><li><p><code>nexus-3.12.1-01</code>赋权限<code>chown -R nexus:nexus nexus-3.12.1-01</code></p></li><li><p><code>sonatype-work</code>赋权限<code>chown -R nexus:nexus sonatype-work</code></p></li><li><p>启动</p><ul><li><code>./nexus-3.12.1-01/bin/nexus start</code></li><li><code>./nexus-3.12.1-01/bin/nexus run</code></li></ul></li><li><p>默认账号<code>admin</code>，密码<code>admin123</code></p></li></ul></li><li><p>登录之后，页面右上角会提示</p><ul><li><p><code>System Requirement: max file descriptors [4096] likely too low, increase to atleast [65536].</code></p></li><li><p>修改<code>ulimit</code></p></li><li><p><code>vim /etc/security/limits.conf</code>，最下方添加</p><ul><li><code>* soft nofile 65536</code></li><li><code>* hard nofile 65536</code></li></ul></li></ul></li><li><p>配置开机启动</p><ul><li><code>vim /etc/rc.d/rc.local</code></li><li>添加<code>su - nexus -c '/usr/local/nexus-3.12.1-01/bin/nexus start'</code></li><li>给<code>rc.local</code>文件赋执行权限<code>chmod +x /etc/rc.d/rc.local</code></li><li><code>reboot</code>重启虚拟机，测试是否开机自启动</li></ul></li></ul><h3 id="三、nexus的使用"><a href="#三、nexus的使用" class="headerlink" title="三、nexus的使用"></a>三、nexus的使用</h3><ul><li><p>仓库类型</p><ul><li>proxy:代理仓库，用于代理远程仓库 </li><li>group:仓库组，通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包</li><li>hosted:宿主仓库，内部项目、付费jar </li><li>releases 发布内部release版本的仓库 </li><li>snapshots 发布内部snapshots版本的仓库 </li><li>third 自建第三方jar</li></ul></li><li><p>本地maven配置</p><ul><li>修改MAVEN_HOME下<code>conf/setting.xml</code></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--nexus私服的用户名密码--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 私有库地址--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.80.131:8081/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--插件库地址--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.80.131:8081/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据id选择激活的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>ldclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置代理</p><ul><li>修改<code>maven-central</code>-&gt;<code>Proxy</code>-&gt;<code>Remote storage</code></li><li>阿里云<code>http://maven.aliyun.com/nexus/content/groups/public/</code></li></ul></li><li><p>修改编辑器中maven的配置，将配置指向setting.xml</p></li><li><p>修改pom</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--pom.xml 远程仓库的配置 id要跟本地maven的setting.xml相同 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Ruizhi Release Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.80.131:8081/repository/maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ldclass-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Ruizhi Snapshot Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.80.131:8081/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、代码质量管理平台"><a href="#四、代码质量管理平台" class="headerlink" title="四、代码质量管理平台"></a>四、代码质量管理平台</h3><ul><li><p>sonarqube安装</p><ul><li>前置依赖：<code>mysql 5.6 or 5.7 、jdk 1.8</code></li><li>下载地址：<code>https://www.sonarqube.org/downloads/</code></li><li>安装<code>unzip</code><ul><li><code>yum -y install unzip</code></li></ul></li><li>解压<code>sonarqube.zip</code>并移动到<code>/usr/local</code><ul><li><code>unzip sonarqube-6.7.4.zip</code></li><li><code>mv sonarqube-6.7.4 /usr/local/</code></li></ul></li><li>mysql里新增数据库<ul><li><code>CREATE DATABASE sonar DEFAULT CHARACTER SET utf8;</code></li></ul></li><li>修改<code>sonarqube</code>相关配置<ul><li><code>vim /usr/local/sonarqube-6.7.4/conf/sonar.properties</code>，修改以下配置</li><li><code>sonar.jdbc.username=</code></li><li><code>sonar.jdbc.password=</code></li><li><code>sonar.jdbc.url=</code></li><li><code>sonar.web.context=/sonar</code></li><li><code>sonar.web.host=0.0.0.0</code></li><li>保存退出：<code>!wq</code></li></ul></li><li>新增用户，并将目录所属权赋予该用户<ul><li><code>useradd sonar</code></li><li><code>chown -R sonar:sonar sonarqube-6.7.4</code></li></ul></li><li>启动<ul><li><code>su - sonar -c '/usr/local/sonarqube-6.7.4/bin/linux-x86-64/sonar.sh start'</code></li></ul></li><li>配置开机启动<ul><li><code>vim /etc/rc.d/rc.local</code></li><li>添加<code>su - sonar -c '/usr/local/sonarqube-6.7.4/bin/linux-x86-64/sonar.sh start</code></li></ul></li><li>开放端口<ul><li><code>vim etc/sysconfig/iptables</code></li><li>添加<code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 9000 -j ACCEPT</code></li><li>保存关闭<code>:wq</code></li><li>重启网关<code>systemctl restart iptables.service</code></li></ul></li><li>访问：<code>http://192.168.80.128:9000/sonar</code></li><li>初始账号：<code>admin</code>，密码：<code>admin</code></li><li>汉化<ul><li>SonarQube默认为英文，可以安装SonarQube提供提供了中文插件</li><li>github地址：<code>https://github.com/SonarQubeCommunity/sonar-l10n-zh</code></li><li>参照说明，对应SonarQube版本下载对应的兼容插件即可。 </li><li>下载后，放入sonar目录如下<ul><li><code>sonarqube-5.6\extensions\plugins</code></li></ul></li><li>然后重启sonar</li></ul></li></ul></li><li><p>mvn 上传项目扫描</p><ul><li>记录令牌</li><li>项目根目录输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mvn sonar:sonar \  -Dsonar.host.url=http://192.168.80.128:9000/sonar \  -Dsonar.login=464d9a04b4ec06cee00c4cba032e41fd14322e4e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、Jenkins安装"><a href="#五、Jenkins安装" class="headerlink" title="五、Jenkins安装"></a>五、Jenkins安装</h3><ul><li>前置依赖<code>JDK、tomcat</code></li><li>解压<code>tar -zxvf apache-tomcat-9.0.8.tar.gz -C /usr/local/</code></li><li>新建tomcat用户 <code>useradd tomcat</code></li><li>给tomcat用户设置密码<code>passwd tomcat</code><ul><li>输入两次密码，提示<code>passwd: all authentication tokens updated successfully.</code></li></ul></li><li>赋权限<code>chown -R tomcat:tomcat /usr/local/apache-tomcat-9.0.8</code><ul><li>将整个目录的所属权转移给tomcat用户、tomcat组</li></ul></li><li>安装Jenkins<ul><li>下载地址：<code>https://jenkins.io/download/</code></li><li>将war包传输至tomcat的webapps文件夹下</li><li><code>chown -R tomcat:tomcat jenkins.war</code></li><li>修改tomcat默认端口：<code>vim conf/server.xml</code>，将8080更改为其它，防止端口被占用</li><li>切换到root用户开启防火墙<ul><li><code>vim /etc/sysconfig/iptables</code></li><li>添加<code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 9999 -j ACCEPT</code></li><li>重启<code>systemctl restart iptables.service</code></li></ul></li><li>切换到tomcat用户启动tomcat</li><li>访问地址<code>http://192.168.80.128:9999/jenkins/</code></li><li>查看管理员密码 <code>cat /home/tomcat/.jenkins/secrets/initialAdminPassword</code></li><li>点击继续后，发现jenkins离线</li><li>访问地址<code>http://192.168.80.128:9999/jenkins/pluginManager/advanced</code><ul><li>最底部，将<code>https://updates.jenkins.io/update-center.json</code>替换为<code>http://updates.jenkins.io/update-center.json</code></li><li>submit</li><li>check now</li></ul></li><li>重启tomcat</li></ul></li><li>解决jenkins 插件安装失败的问题（https证书）<ul><li><code>javac InstallCert.java</code></li><li><code>java InstallCert email.ssscc.com.cn:465</code></li><li>生成证书<code>jssecacerts</code></li><li>上传至 <code>$JAVA_HOEM/jre/lib/security</code><ul><li>如果是linux，需要重启服务器</li><li>删除jenkins的配置文件：<code>rm -rf /home/tomcat/.jenkins/</code></li><li>重启tomcat</li><li>重新安装插件</li><li>出现个别安装失败，多重试几次，网速有影响</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyStore<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateException<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>X509Certificate<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLException<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocket<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>TrustManager<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>TrustManagerFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>X509TrustManager<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstallCert</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String host<span class="token punctuation">;</span>          <span class="token keyword">int</span> port<span class="token punctuation">;</span>          <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> passphrase<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String<span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              host <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              port <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">443</span> <span class="token operator">:</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String p <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"changeit"</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              passphrase <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out                      <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java InstallCert &lt;host>[:port] [passphrase]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"jssecacerts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">char</span> SEP <span class="token operator">=</span> File<span class="token punctuation">.</span>separatorChar<span class="token punctuation">;</span>              File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> SEP <span class="token operator">+</span> <span class="token string">"lib"</span>                      <span class="token operator">+</span> SEP <span class="token operator">+</span> <span class="token string">"security"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"jssecacerts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"cacerts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Loading KeyStore "</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          KeyStore ks <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KeyStore<span class="token punctuation">.</span><span class="token function">getDefaultType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ks<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> passphrase<span class="token punctuation">)</span><span class="token punctuation">;</span>          in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          SSLContext context <span class="token operator">=</span> SSLContext<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          TrustManagerFactory tmf <span class="token operator">=</span> TrustManagerFactory                  <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tmf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>ks<span class="token punctuation">)</span><span class="token punctuation">;</span>          X509TrustManager defaultTrustManager <span class="token operator">=</span> <span class="token punctuation">(</span>X509TrustManager<span class="token punctuation">)</span> tmf                  <span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          SavingTrustManager tm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavingTrustManager</span><span class="token punctuation">(</span>defaultTrustManager<span class="token punctuation">)</span><span class="token punctuation">;</span>          context<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustManager</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> tm <span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          SSLSocketFactory factory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out                  <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Opening connection to "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          SSLSocket socket <span class="token operator">=</span> <span class="token punctuation">(</span>SSLSocket<span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>          socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting SSL handshake..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              socket<span class="token punctuation">.</span><span class="token function">startHandshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No errors, certificate is already trusted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SSLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain <span class="token operator">=</span> tm<span class="token punctuation">.</span>chain<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not obtain server certificate chain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                  System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server sent "</span> <span class="token operator">+</span> chain<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">" certificate(s):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          MessageDigest sha1 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          MessageDigest md5 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chain<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              X509Certificate cert <span class="token operator">=</span> chain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Subject "</span>                      <span class="token operator">+</span> cert<span class="token punctuation">.</span><span class="token function">getSubjectDN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   Issuer  "</span> <span class="token operator">+</span> cert<span class="token punctuation">.</span><span class="token function">getIssuerDN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              sha1<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   sha1    "</span> <span class="token operator">+</span> <span class="token function">toHexString</span><span class="token punctuation">(</span>sha1<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              md5<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   md5     "</span> <span class="token operator">+</span> <span class="token function">toHexString</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out                  <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter certificate to add to trusted keystore or 'q' to quit: [1]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> k<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              k <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"KeyStore not changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          X509Certificate cert <span class="token operator">=</span> chain<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>          String alias <span class="token operator">=</span> host <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ks<span class="token punctuation">.</span><span class="token function">setCertificateEntry</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> cert<span class="token punctuation">)</span><span class="token punctuation">;</span>          OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"jssecacerts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ks<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> passphrase<span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cert<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out                  <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Added certificate to keystore 'jssecacerts' using alias '"</span>                          <span class="token operator">+</span> alias <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> HEXDIGITS <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>          StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>              b <span class="token operator">&amp;=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>              sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>HEXDIGITS<span class="token punctuation">[</span>b <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>HEXDIGITS<span class="token punctuation">[</span>b <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SavingTrustManager</span> <span class="token keyword">implements</span> <span class="token class-name">X509TrustManager</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">final</span> X509TrustManager tm<span class="token punctuation">;</span>          <span class="token keyword">private</span> X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">;</span>          <span class="token function">SavingTrustManager</span><span class="token punctuation">(</span>X509TrustManager tm<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>tm <span class="token operator">=</span> tm<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAcceptedIssuers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">X509Certificate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//throw new UnsupportedOperationException();  </span>        <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkClientTrusted</span><span class="token punctuation">(</span>X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">,</span> String authType<span class="token punctuation">)</span>                  <span class="token keyword">throws</span> CertificateException <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkServerTrusted</span><span class="token punctuation">(</span>X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">,</span> String authType<span class="token punctuation">)</span>                  <span class="token keyword">throws</span> CertificateException <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>chain <span class="token operator">=</span> chain<span class="token punctuation">;</span>              tm<span class="token punctuation">.</span><span class="token function">checkServerTrusted</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> authType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Jenkins 用Tomcat部署War出现 反向代理设置有误 <ul><li>找到Tomcat配置文件，找到redirectPort的端口</li><li>修改jenkins系统配置–&gt;Jenkins Location</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/jenkins.jpg" title="配置jenkins"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/jenkins1.jpg" title="配置jenkins"><h3 id="六、配置jenkins"><a href="#六、配置jenkins" class="headerlink" title="六、配置jenkins"></a>六、配置jenkins</h3><ul><li>插件安装<ul><li><code>Maven Integration plugin</code></li><li><code>SonarQube Scanner for Jenkins</code></li><li><code>Publish Over SSH</code></li></ul></li><li>配置git<ul><li><code>whereis git</code>查看git路径</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/git.jpg" title="配置git"><ul><li>配置jdk</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/jdk.jpg" title="配置JDK"><ul><li>配置maven</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/maven.jpg" title="配置maven"><ul><li><p>添加Jenkins凭据</p><ul><li>添加全局凭证</li><li>类型选择<code>secret text</code></li><li>在secret框输入sonar生成的token</li><li>ID、描述自定义</li></ul></li><li><p>配置SonarQube server</p><ul><li><p>token在sonar生成</p></li><li><p>选择定义的全局凭证</p></li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/token.jpg" title="生成token"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/sonar.jpg" title="配置sonar"><ul><li>配置SonarQube Scanner</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/scanner.jpg" title="配置SonarQube Scanner"><ul><li>邮件配置<ul><li>密码为QQ邮箱设置smtp时，返回字符串</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/email1.jpg" title="配置邮件"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/email2.jpg" title="配置邮件"><ul><li><p>配置gitlab ssh授权</p><ul><li><p><code>yum -y install openssh-clients</code></p></li><li><p>产生私钥<code>ssh-keygen -t rsa</code></p></li><li><p>复制公钥<code>more ~/.ssh/id_rsa.pub</code>到gitlab的SSH key</p></li><li><p>复制私钥<code>more ~/.ssh/id_rsa</code>到jenkins的全局凭证</p></li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/add1.jpg" title="配置gitlab SSH key，在 SSH Key处输入公钥"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/add.jpg" title="配置jenkin全局凭证，集成gitlab,在 Private Key处输入私钥"><ul><li>配置gitlab http授权</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/http.jpg" title="配置jenkin全局凭证，集成gitlab"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/http1.jpg" title="git 源码管理"><ul><li>注意：创建项目，配置从gitlab拉取源码时，如果URL使用http，选择关于http的全局凭证，如果使用git,则选择关于SSH的全局凭证</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/success.jpg" title="新建项目，测试从gitlab上拉取项目，控制台出现success，表示成功"><blockquote><p>jenkins 手动集成测试</p></blockquote><ul><li>开发人员提交代码后，jenkins 需要手动构建</li><li>jenkins新建任务</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/1.jpg" title="jenkins新建一个maven项目"><ul><li>输入项目描述</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/2.jpg" title="输入项目描述"><ul><li>配置源码管理，此处为git</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/3.jpg" title="配置源码管理，选择已提交到gitlab的项目，输入git地址，选择相应的凭据和分支"><ul><li>构建触发器和构建环境先不选</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/4.jpg" title="构建触发器和构建环境"><ul><li>配置Pre Steps</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/5.jpg" title="Pre Steps"><ul><li>配置Post Steps<ul><li>选择 Run only if build  succeeds ，构建成功后执行以下步骤</li><li>Add post-build step :选择要执行的步骤，此处选择执行shell 和 Execute SonarQube Scanner</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#shell脚本，将jar包复制到已建好的文件夹下，执行java -jar 启动jar包cp target/*.jar /home/tomcat/democd /home/tomcat/demoBUILD_ID= java -jar ssmDemo-0.0.1-SNAPSHOT.jar > log 2>&1 &<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Execute SonarQube Scanner：将代码上传到SonarQube进行监测，以下为必要配置</span><span class="token comment" spellcheck="true">#required metadata</span><span class="token comment" spellcheck="true">#projectKey项目的唯一标识，不能重复</span><span class="token attr-name">sonar.projectKey</span><span class="token punctuation">=</span><span class="token attr-value">ssmdemo</span><span class="token attr-name">sonar.projectName</span><span class="token punctuation">=</span><span class="token attr-value">ssmdemo</span><span class="token attr-name">sonar.projectVersion</span><span class="token punctuation">=</span><span class="token attr-value">1.0</span><span class="token attr-name">sonar.sourceEncoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">sonar.modules</span><span class="token punctuation">=</span><span class="token attr-value">java-module</span><span class="token comment" spellcheck="true"># Java module</span><span class="token attr-name">java-module.sonar.projectName</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token attr-name">java-module.sonar.language</span><span class="token punctuation">=</span><span class="token attr-value">java</span><span class="token comment" spellcheck="true"># .表示projectBaseDir指定的目录</span><span class="token attr-name">java-module.sonar.sources</span><span class="token punctuation">=</span><span class="token attr-value">src</span><span class="token attr-name">java-module.sonar.projectBaseDir</span><span class="token punctuation">=</span><span class="token attr-value">.</span><span class="token attr-name">java-module.sonar.java.binaries</span><span class="token punctuation">=</span><span class="token attr-value">target/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/6.jpg" title="Post Steps"><ul><li>保存后，点立即构建，测试是否成功</li></ul><blockquote><p>jenkins自动集成测试</p></blockquote><ul><li><p>开发人员将代码提交到gitlab后，jenkins自动构建</p></li><li><p>需要安装GitLab插件，插件安装之后，项目中构建触发器如下图</p></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/7.jpg" title="构建触发器"><ul><li>选择之后，配置如下图，需要生成secret token</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/8.jpg" title="根据需求选择"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/9.jpg" title="点击Generate，生成token"><ul><li>自动构建需要配置gitlab</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/10.jpg" title="勾选允许从Web挂钩和服务到本地网络的请求"><ul><li>配置项目Settings-&gt;Webhooks<ul><li>填入jenkins 构建触发器时的url和生成的token，点击Add webHook,</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/11.jpg" title="填入jenkins 构建触发器时的url和生成的token"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/12.jpg" title="点击Add webHook后，出现Project Hooks ，选择Push events测试"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/13.jpg" title="出现此提示，表示配置成功"><ul><li>IDEA编辑器，修改代码，commit+push测试</li></ul><blockquote><p>使用脚本，将构建结果发布到其他服务器</p></blockquote><ul><li>创建可执行脚本</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashexport JAVA_HOME=/usr/local/software/jdk1.8export JRE_HOME=/$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin#这里可替换为你自己的执行程序，其他代码无需更改APP_NAME=/home/tomcat/demo/ssmDemo-0.0.1-SNAPSHOT.jar#使用说明，用来提示输入参数usage() {    echo "Usage: sh robotcenter.sh [start|stop|restart|status]"    exit 1}#检查程序是否在运行is_exist(){  pid=`ps -ef|grep $APP_NAME|grep -v grep|awk '{print $2}'`  #如果不存在返回1，存在返回0       if [ -z "${pid}" ]; then   return 1  else    return 0  fi}#启动方法start(){  is_exist  if [ $? -eq 0 ]; then    #echo "${APP_NAME} is already running. pid=${pid}"    kill -9 $pid    nohup java -jar ${APP_NAME}  >robotcenter.out 2>&1 &  else    nohup java -jar ${APP_NAME}  >robotcenter.out 2>&1 &  fi}#停止方法stop(){  is_exist  if [ $? -eq "0" ]; then    kill -9 $pid  else    echo "${APP_NAME} is not running"  fi  }#输出运行状态status(){  is_exist  if [ $? -eq "0" ]; then    echo "${APP_NAME} is running. Pid is ${pid}"  else    echo "${APP_NAME} is NOT running."  fi}#重启restart(){  stop  sleep 5  start}#根据输入参数，选择执行对应方法，不输入则执行使用说明case "$1" in  "start")    start    ;;  "stop")    stop    ;;  "status")    status    ;;  "restart")    restart    ;;  *)    usage    ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在另外一台服务器上新建tomcat用户，并在home下创建demo文件夹</p><ul><li><code>/home/tomcat/demo</code></li></ul></li><li><p>将脚本上传到<code>/home/tomcat/demo</code>，并赋予可执行权限<code>chmod +x demo.sh</code></p></li><li><p>创建jenkins主机和远程服务器的通讯</p><ul><li>jenkins主机，tomcat用户下输入<code>ssh-keygen</code></li><li>ssh-copy-id tomcat@远程服务器ip</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/14.jpg" title="创建主机与远程服务器tomcat用户的通讯"><ul><li>jenkins 配置 Publish over SSH</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/15.jpg" title="配置Publish over SSH，点击Test 测试，success"><ul><li>jenkins项目添加Post Steps配置<ul><li>Add post-build step</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/16.jpg" title="Post Steps,添加 Send files or execute commands over SSH"><ul><li>IDEA编辑器，修改代码，commit+push测试</li></ul><blockquote><p>FAQ</p></blockquote><ul><li><p>sh脚本执行报错bin/sh^M: bad interpreter: No such file or directory</p><ul><li>这个错误通常为编码格式问题</li><li>解决办法<ul><li>vim xxx.sh打开sh脚本文件</li><li>执行 :set ff 命令查看当前编码格式,此时可以看到类似如下的信息:fileformat=dos</li><li>执行 :set ff=unix  命令将sh脚本文件格式改为linux的格式</li><li>执行 :wq! 命令强制保存退出,再次执行该脚本即可正常运行</li></ul></li></ul></li><li><p>Exec exit status not zero. Status [126] 解决方法</p><ul><li>jenkins自动化构建时，执行远程SSH时，返回错误状态码 126.</li><li>解决办法：对应的.sh 脚本权限不足，修改需执行的脚本权限即可、<ul><li>赋予可执行权限<code>chmod +x demo.sh</code></li></ul></li></ul></li></ul><blockquote><p>jenkins+SVN+sonar自动构建</p></blockquote><ul><li><p>系统配置和全局配置与上同</p></li><li><p>源码管理-&gt;Subversion</p></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/svn1.jpg" title="配置svn源码管理"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/svn2.jpg" title="add添加凭证，填入svn账号密码"><ul><li>注意：选择svn时，与SonarQube Scanner集成， Analysis properties配置如下，其余配置如Git</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#required metadata</span><span class="token comment" spellcheck="true">#projectKey项目的唯一标识，不能重复</span><span class="token attr-name">sonar.projectKey</span><span class="token punctuation">=</span><span class="token attr-value">ssmdemo</span><span class="token attr-name">sonar.projectName</span><span class="token punctuation">=</span><span class="token attr-value">ssmdemo</span><span class="token attr-name">sonar.projectVersion</span><span class="token punctuation">=</span><span class="token attr-value">1.0</span><span class="token attr-name">sonar.sourceEncoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">sonar.modules</span><span class="token punctuation">=</span><span class="token attr-value">java-module</span><span class="token comment" spellcheck="true">#此配置是svn新增的。不然可能会报错</span><span class="token attr-name">sonar.scm.disabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Java module</span><span class="token attr-name">java-module.sonar.projectName</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token attr-name">java-module.sonar.language</span><span class="token punctuation">=</span><span class="token attr-value">java</span><span class="token comment" spellcheck="true"># .表示projectBaseDir指定的目录</span><span class="token attr-name">java-module.sonar.sources</span><span class="token punctuation">=</span><span class="token attr-value">src</span><span class="token attr-name">java-module.sonar.projectBaseDir</span><span class="token punctuation">=</span><span class="token attr-value">.</span><span class="token attr-name">java-module.sonar.java.binaries</span><span class="token punctuation">=</span><span class="token attr-value">target/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以上配置即可手动构建，测试是否能构建成功</li><li>构建触发器,选择轮询SCM</li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/svn5.jpg" title="选择SCM，不填写时间表，因此只有在提交后挂钩触发后，才会因SCM更改而运行"><ul><li>进入【系统管理】-【Jenkins命令行接口】，进入【Jenkins命令行】页面，下载jenkins-cli.jar<ul><li>放到Svn所在服务器的root目录下，如下图：</li></ul></li></ul><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/svn3.jpg" title="需要用到build命令"><img src="/2020/11/30/min-jie-chi-xu-ji-cheng/svn4.jpg" title="构建命令，与SVN钩子结合，触发自动构建"><ul><li>进入Svn的hooks目录下，创建文件post-commit，并赋予执行权限</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cd data/svn/SVN代码库/hooks/touch post-commitchmod +x post-commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>编辑post-commit，添加内容如下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashsource /etc/profilejava -jar /root/jenkins-cli.jar -s http://192.168.80.128:9999/jenkins/ -auth admin:admin build ssmDemoBySvn -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>修改代码，svn提交代码后，查看Jenkins任务是否触发构建</li></ul><blockquote><p>FAQ</p></blockquote><pre class="line-numbers language-console"><code class="language-console">Q：执行命令java -jar /root/jenkins-cli.jar -s http://192.168.80.128:9999/jenkins/ build ssmDemo出现如下错误：'ERROR: anonymous is missing the Overall/Read permission'R：没有进行身份验证S：方案一：进入Jenkins【系统管理】-【全局安全配置】-【授权策略】选中【登录用户可以做任何事】后保存方案二：命令中添加-auth参数，修改命令如下：java -jar /root/jenkins-cli.jar -s http://192.168.80.128:9999/jenkins/ -auth admin:admin build ssmDemo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> sonar </category>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonar </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装CentOS7</title>
      <link href="2020/11/26/xu-ni-ji-an-zhuang-centos7/"/>
      <url>2020/11/26/xu-ni-ji-an-zhuang-centos7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、VMware虚拟机下安装CentOS7"><a href="#一、VMware虚拟机下安装CentOS7" class="headerlink" title="一、VMware虚拟机下安装CentOS7"></a>一、<code>VMware</code>虚拟机下安装<code>CentOS7</code></h3><ul><li>VMware虚拟机<ul><li>下载安装</li></ul></li></ul><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/VMware.jpg" title="虚拟机"><ul><li>安装<code>CentOS7</code><ul><li>下载镜像包</li><li>安装步骤如下图</li></ul></li></ul><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/1.jpg" title="创建新的虚拟机"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/2.jpg" title="选择典型足够使用"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/3.jpg" title="选择稍后安装操作系统"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/4.jpg" title="选择Linux和CentOS 64位"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/5.jpg" title="自定义虚拟机名称和存放路径，选择磁盘空间大的"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/6.jpg" title="虚拟机分配最大磁盘空间"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/7.jpg" title="自定义硬盘，可以在设置界面移除不需要的设备，比如声卡，打印机等"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/8.jpg" title="虚拟机分配内存"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/9.jpg" title="虚拟机设置处理器"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/10.jpg" title="选择ISO镜像文件"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/11.jpg" title="点击完成之后，可以点编辑虚拟机设置，打开设置界面"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/12.jpg" title="开启虚拟机"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/13.jpg" title="选择Install CentOS 7"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/14.jpg" title="选择English,点击Continue"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/15.jpg" title="设置是否分区"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/16.jpg" title="设置root密码，左边是设置用户（可选），等待安装"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/17.jpg" title="等待安装完成，点击下方“我已完成安装”，再点击roboot重启虚拟机"><h3 id="二、VMware虚拟机的三种网络模式"><a href="#二、VMware虚拟机的三种网络模式" class="headerlink" title="二、VMware虚拟机的三种网络模式"></a>二、VMware虚拟机的三种网络模式</h3><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/19.jpg" title="编辑，打开虚拟网络编辑器，查看三种网络模式"><ul><li><p><code>VMnet0</code>虚拟交换机 ：<code>Bridged</code>桥接模式</p><ul><li>特点：</li><li>默认使用<code>VMnet0</code>，不提供<code>DHCP</code>服务（<code>DHCP</code>服务是指由服务器控制的一段<code>IP</code>地址范围，当客户机登录服务器时会自动获取服务器分配的<code>IP</code>地址与子网掩码）</li><li>虚拟机与外部主机需要在同一个网段上，与局域网的其它机器没有区别。</li><li>可以与局域网内其它主机通信，可以与外部网络通信</li><li>容易与局域网其他主机引起<code>ip</code>地址冲突</li></ul></li><li><p><code>VMnet1</code> 虚拟交换机 ：<code>Host-Only</code>仅主机模式</p><ul><li>特点：<ul><li>默认使用<code>VMnet1</code>，提供<code>DHCP</code>服务</li><li>虚拟机可以和物理主机互相访问，但虚拟机无法访问外部网络</li></ul></li></ul></li><li><p><code>VMnet8</code>虚拟交换机 ：NAT模式</p><ul><li>特点：<ul><li>默认使用<code>VMnet8</code>，提供<code>DHCP</code>服务</li><li>虚拟机可以和物理主机互相访问，可访问外部网络</li><li>局域网内其它机器访问不了</li></ul></li></ul></li></ul><h3 id="三、linux-CentOS7的网络设置"><a href="#三、linux-CentOS7的网络设置" class="headerlink" title="三、linux CentOS7的网络设置"></a>三、linux CentOS7的网络设置</h3><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/18.jpg" title="设置，网路适配器，可以更改网络连接"><ul><li><p>每次切换都要重启</p><ul><li>重启服务器：<code>reboot</code></li><li>重启网卡：<code>systemctl restart network.service</code></li><li>查看<code>ip</code>地址的命令:<code>ip addr</code></li><li><code>ping</code>命令可以检测网络是否畅通：<code>ping ip地址</code></li><li>清屏<code>ctrl+L</code></li></ul></li><li><p>Bridged桥接模式</p><ul><li>可以访问外网</li><li>容易与局域网的其它机器<code>ip</code>地址冲突</li></ul></li><li><p>Host-Only仅主机模式</p><ul><li>一般情况下不能访问外网，也可以在本机网络适配器更改</li><li>不会与局域网的其它机器<code>ip</code>地址冲突</li></ul></li><li><p>NAT模式</p><ul><li>可以访问外网</li><li>不会与局域网的其它机器<code>ip</code>地址冲突</li></ul></li><li><p>总结</p><ul><li>为了提供不同的测试环境，有的需要虚拟机与局域网内的其它机器环境隔离，有的不需要，所以就有了这几种网络设置</li></ul></li></ul><h3 id="四、虚拟机的快速克隆与快照恢复"><a href="#四、虚拟机的快速克隆与快照恢复" class="headerlink" title="四、虚拟机的快速克隆与快照恢复"></a>四、虚拟机的快速克隆与快照恢复</h3><ul><li>克隆<ul><li>关闭虚拟机</li><li>选中要克隆的虚拟机，右键–&gt;管理–&gt;克隆</li></ul></li></ul><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/20.jpg" title="克隆"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/21.jpg" title="根据需求选择"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/22.jpg" title="根据需求选择"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/23.jpg" title="自定义虚拟机名和存放路径，点击完成，等待"><ul><li>快照（备份）<ul><li>关闭虚拟机</li><li>选中要添加快照的虚拟机，右键–&gt;快照–&gt;拍摄快照</li><li>恢复快照：选中要还原的虚拟机，右键–&gt;快照–&gt;快照管理器</li></ul></li></ul><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/24.jpg" title="自定义快照名称和描述，点击拍摄快照"><img src="/2020/11/26/xu-ni-ji-an-zhuang-centos7/25.jpg" title="右键选中快照节点，转到快照，还原版本"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> VMware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab系列</title>
      <link href="2020/11/26/gitlab-xi-lie/"/>
      <url>2020/11/26/gitlab-xi-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Linux-CentOS7-GitLab的安装"><a href="#一、Linux-CentOS7-GitLab的安装" class="headerlink" title="一、Linux CentOS7 GitLab的安装"></a>一、Linux CentOS7 GitLab的安装</h3><ul><li>在防火墙里开放http跟ssh端口</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install curl policycoreutils openssh-server openssh-clientssudo systemctl enable sshdsudo systemctl start sshdsudo yum install postfixsudo systemctl enable postfixsudo systemctl start postfix#未关闭firewall防火墙的前提下sudo firewall-cmd --permanent --add-service=httpsudo systemctl reload firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加GitLab仓库,并安装到服务器上</li></ul><pre class="line-numbers language-shell"><code class="language-shell">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bashsudo yum install gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动GitLab</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>首次访问，默认端口80</p><ul><li>默认管理员账号 root</li><li>初次访问设置密码</li></ul></li><li><p>gitlab本身采用80端口,配置GitLab的URL</p><ul><li>修改<code>gitlab.rb</code> <ul><li><code>vim /etc/gitlab/gitlab.rb</code></li><li>vim 安装 <code>yum install vim</code></li><li>按<code>/</code>后输入<code>external_url</code> 搜索<ul><li>会搜到很多，找到文件最后未被注释掉的<code>external_url</code>，将url修改为<code>gitlab机子的ip+要使用的端口</code>比如8888</li></ul></li></ul></li><li>按<code>/</code>后输入 <code>listen_port</code>   ,搜索<ul><li>找到 nginx[listen_port]</li><li>将端口号修改为上一步设置的要使用的端口8888</li><li>每次修改完都要重新配置：<code>gitlab-ctl reconfigure</code></li><li>重启：<code>gitlab-ctl restart</code></li></ul></li><li>配置防火墙<ul><li><code>vim /etc/sysconfig/iptables</code></li><li>添加<code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT</code></li><li><code>service iptables restart</code></li></ul></li></ul></li><li><p>常用命令<code>gitlab-ctl start|stop|status|restart</code> 比如查看状态：<code>gitlab-ctl status</code></p></li><li><p>卸载GitLab</p><ul><li>停止gitlab，执行<code>sudo gitlab-ctl stop</code></li><li>卸载gitlab，执行<code>sudo rpm -e gitlab-ce</code></li><li>查看gitlab进程，杀掉第一个守护进程<code>kill -9 pid</code></li><li>删除gitlab文件，执行<code>find / -name gitlab|xargs rm -rf</code>删除所有包含gitlab的文件及目录，再执行<code>gitlab-ctl uninstall</code>删除自动在root下备份的配置文件。</li></ul></li></ul><h3 id="二、配置gitlab邮件服务"><a href="#二、配置gitlab邮件服务" class="headerlink" title="二、配置gitlab邮件服务"></a>二、配置gitlab邮件服务</h3><ul><li><p>配置邮箱服务的用途</p><ul><li>有合并请求时，邮件通知 账号注册时，邮件验证 修改密码时，通过邮件修改</li></ul></li><li><p>步骤</p><ul><li>开启QQ邮箱的smtp服务(不建议使用163邮箱，发几次之后，就不能发送)</li><li>设置–》账户–》smtp–》密保验证–》验证成功返回一串字符串，保存返回的字符串</li><li>修改gitlab配置<code>vim /etc/gitlab/gitlab.rb</code><ul><li>按<code>/</code>后输入<code>smtp_enable</code>，搜索，找到以下配置，取消注释并修改为自己的信息</li><li>修改完，保存，退出。执行<code>gitlab-ctl reconfigure</code></li></ul></li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = "smtp.qq.com"gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = "xxx@qq.com"gitlab_rails['smtp_password'] = "开通smtp时返回的字符"gitlab_rails['smtp_domain'] = "qq.com"gitlab_rails['smtp_authentication'] = "login"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = trueuser['git_user_email'] = "xxx@qq.com"gitlab_rails['gitlab_email_from'] = 'xxx@qq.com'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试邮件服务是否正常<ul><li>进入控制台<code>gitlab-rails console</code></li><li><code>Notify.test_email('接收方邮件地址','邮件标题','邮件内容').deliver_now</code>，回车发送，测试是否收到邮件</li></ul></li></ul><h3 id="三、gitlab的账号注册及分组"><a href="#三、gitlab的账号注册及分组" class="headerlink" title="三、gitlab的账号注册及分组"></a>三、gitlab的账号注册及分组</h3><ul><li><p>查看当前git用户和邮箱</p><ul><li><code>git config user.name</code></li><li><code>git config user.email</code></li></ul></li><li><p>更改git 提交用户和邮箱</p><ul><li><code>git config --global user.name "your name"</code></li><li><code>git config --global user.email "your email"</code></li></ul></li><li><p>开启注册邮箱验证</p></li></ul><img src="/2020/11/26/gitlab-xi-lie/1.jpg" title="gitlab首页打开admin area"><img src="/2020/11/26/gitlab-xi-lie/2.jpg" title="setting 选中 启用注册、需要管理员批准才能进行注册、在注册时发送确认电子邮件"><ul><li>注册用户</li></ul><img src="/2020/11/26/gitlab-xi-lie/3.jpg" title="gitlab注册用户"><ul><li>新建分组、项目<ul><li>访问级别<ul><li>Private：只有组成员才能看到</li><li>Internal：只要登录的用户就能看到</li><li>Public：所有人都能看到</li></ul></li></ul></li></ul><img src="/2020/11/26/gitlab-xi-lie/5.jpg" title="gitlab新建分组"><img src="/2020/11/26/gitlab-xi-lie/4.jpg" title="gitlab新建项目"><ul><li>邀请组员<ul><li>Guest：可以创建issue、发表评论，不能读写版本库</li><li>Reporter：可以克隆代码，不能提交</li><li>Developer：可以克隆代码、开发、提交、推送</li><li>Maintainer：可以创建项目、添加标签、保护分支、添加项目成员、编辑项目</li><li>Owner：可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员</li></ul></li></ul><img src="/2020/11/26/gitlab-xi-lie/6.jpg" title="gitlab新建项目"><ul><li>gitlab添加ssh秘钥<ul><li>键入命令：<code>ssh-keygen -t rsa</code></li><li>提醒你输入key的名称，输入如<code>id_rsa</code></li><li>在<code>C:\Users\用户\.ssh</code>下产生两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></li><li>用记事本打开<code>id_rsa.pub</code>文件，复制内容，在<code>gitlab.com</code>的网站上到<code>ssh密钥</code>管理页面，添加新公钥，随便取个名字，内容粘贴刚才复制的内容。</li></ul></li></ul><img src="/2020/11/26/gitlab-xi-lie/8.jpg" title="生成秘钥"><img src="/2020/11/26/gitlab-xi-lie/7.jpg" title="配置秘钥"><h3 id="四、gitlab分支及标签保护"><a href="#四、gitlab分支及标签保护" class="headerlink" title="四、gitlab分支及标签保护"></a>四、gitlab分支及标签保护</h3><ul><li>保护特定的分支不被随便合并，以免影响相应的分支</li><li>进入项目–&gt; repository–&gt;branches–&gt;project setting</li></ul><img src="/2020/11/26/gitlab-xi-lie/9.jpg" title="保护分支、标签"><img src="/2020/11/26/gitlab-xi-lie/10.jpg" title="保护分支、标签"><img src="/2020/11/26/gitlab-xi-lie/11.jpg" title="保护分支"><img src="/2020/11/26/gitlab-xi-lie/12.jpg" title="保护标签"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git系列</title>
      <link href="2020/11/26/git-xi-lie/"/>
      <url>2020/11/26/git-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>全球最大的同性交友网站：<code>https://github.com/</code></p><h3 id="一、安装git"><a href="#一、安装git" class="headerlink" title="一、安装git"></a>一、安装git</h3><ul><li><p><code>windows</code></p></li><li><p>官网：<code>https://git-scm.com/</code></p></li><li><p><code>linux</code></p><ul><li><p>yum命令安装：yum install git</p><ul><li>服务器可以连接外网</li><li>yum install 安装的git不是最新版本，如需最新版本需要自行编译</li></ul></li><li><p>编译git源码安装(下载很慢)：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p><ul><li><p>移除已经安装的git</p><ul><li><code>yum remove git</code></li></ul></li><li><p>安装git的依赖项</p><ul><li><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></li><li><code>yum install gcc perl-ExtUtils-MakeMaker</code></li></ul></li><li><p>进入git 解压目录</p></li><li><p>预编译git：<code>./configure --prefix=/usr/local/git目录</code></p></li><li><p>编译并安装git：<code>make &amp;&amp; make install</code></p></li><li><p>将git的脚本软连接到<code>/usr/bin/</code>目录下：<code>ln -s /usr/local/git_2.9.5/bin/* /usr/bin/</code></p></li><li><p>git安装完成</p></li></ul></li></ul></li></ul><h3 id="二、git的入门级命令"><a href="#二、git的入门级命令" class="headerlink" title="二、git的入门级命令"></a>二、git的入门级命令</h3><ul><li><p>工作区（未git add）</p></li><li><p>暂存区（git add，未git commit）</p></li><li><p>版本库 （git commit）</p></li><li><p>远程中央仓库 （git push）</p></li><li><p>git 本地操作</p><ul><li><code>git --help</code> 调出Git的帮助文档</li><li><code>git +命令 --help</code>查看某个具体命令的帮助文档，比如 <code>git add --help</code></li><li><code>git --version</code> 查看git的版本</li><li><code>git init</code> 生成空的本地仓库</li><li><code>git add *</code>将文件添加到暂存区，可以指定具体文件<code>git add test.txt</code></li></ul></li><li><p>初次commit时，需要配置用户邮箱和用户名</p><ul><li><code>git config --global user.email "Your email"</code></li><li><code>git config --global user.name "Your Name"</code></li></ul></li><li><p>git commit 将暂存区里的文件提交到本地仓库</p><ul><li>git commit -m “对本次提交的描述”</li></ul></li><li><p>在<code>github</code>创建一个存储库<code>Repository</code></p><p>​    Your repositories –&gt; new –&gt;输入 Repository name –&gt; 输入Description(描述) –&gt; create</p></li><li><p><code>git remote</code> 用于管理远程仓库</p><ul><li><code>git remote add origin 新建存储库的SSH/HTTPS地址</code></li><li>示例：<code>git remote add origin git@gitee.com:liudong666/ldclass-1024-shop.git</code></li></ul></li><li><p><code>git push -u origin master</code>往名字为<code>origin</code>的仓库的<code>master</code>分支上提交变更</p></li><li><p><code>git fetch</code> 拉取远程仓库的变更到本地仓库</p></li><li><p><code>git merge origin/master</code> 将远程的变更，合并到本地仓库的master分支</p></li><li><p><code>git pull</code> 不建议使用 等同于<code>fetch</code>之后<code>merge</code></p><ul><li>用git pull来更新代码的时候，遇到了下面的问题：<code>error: Your local changes to the following files would be overwritten by merge: xxx/xxx/xxx.js Please, commit your changes or stash them before you can merge. Aborting</code></li><li>出现这个问题的原因是其他人修改了<code>xxx.js</code>并提交到版本库中去了，而你本地也修改了<code>xxx.js</code>，这时候你进行git pull操作就好出现冲突了，解决方法，在上面的提示中也说的很明确了。</li><li>保留本地的方式修改<ul><li>步骤如下：<ul><li>通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li><code>git pull</code>:拉取服务器上的代码；</li><li><code>git stash pop</code>: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li><code>git stash list</code>: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li><code>git stash clear</code>: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</li></ul></li></ul></li></ul></li></ul><h3 id="三、git的文件状态"><a href="#三、git的文件状态" class="headerlink" title="三、git的文件状态"></a>三、git的文件状态</h3><ul><li><p><code>git status</code>  用于查看git的状态</p><img src="/2020/11/26/git-xi-lie/status1.jpg" title="新建一个文件，查看状态"><img src="/2020/11/26/git-xi-lie/add.jpg" title="add命令之后，查看状态"><img src="/2020/11/26/git-xi-lie/commit.jpg" title="commit命令之后，查看状态"><img src="/2020/11/26/git-xi-lie/push.jpg" title="push命令之后，查看状态"><img src="/2020/11/26/git-xi-lie/modified.jpg" title="修改文件之后，查看状态"><img src="/2020/11/26/git-xi-lie/delete.jpg" title="删除文件之后，查看状态"></li><li><p><code>git rm</code> 用于git文件的删除操作</p><ul><li>如果只是 <code>git rm --cache</code> 仅删除暂存区里的文件</li><li>如果不加<code>--cache</code> 会删除工作区里的文件 并提交到暂存区</li></ul></li><li><p>git checkout</p><ul><li>直接加文件名 从暂存区将文件恢复到工作区，如果工作区已经有该文件，则会选择覆盖</li><li>加了 分支名 文件名 ，则表示从所写的分支中拉取所写的文件 并覆盖工作区里的文件</li></ul></li></ul><h3 id="四、git的图形化客户端"><a href="#四、git的图形化客户端" class="headerlink" title="四、git的图形化客户端"></a>四、git的图形化客户端</h3><ul><li>下载地址：<code>https://www.sourcetreeapp.com/</code></li></ul><img src="/2020/11/26/git-xi-lie/sourceTree.jpg" title="git图形化管理界面"><ul><li>绕过登录<ul><li>推荐使用低一点版本<code>SourceTreeSetup-2.5.5</code>，新版本可能无法绕过，</li><li><code>https://www.cnblogs.com/diyishijian/p/6726792.html</code></li></ul></li></ul><h3 id="五、git-分支"><a href="#五、git-分支" class="headerlink" title="五、git 分支"></a>五、git 分支</h3><ul><li><code>git branch</code><ul><li><code>git branch 分支名</code> 创建分支<ul><li>创建分支的时候，分支名不用使用特殊符号</li></ul></li><li>不加任何参数，列出所有的分支，分支前面有*号，代表该分支为当前所在分支</li></ul></li></ul><img src="/2020/11/26/git-xi-lie/branch.jpg" title="新建分支，查看当前全部分支"><ul><li><p><code>git branch -d 分支名</code> </p><ul><li>删除分支</li><li><code>*</code>不能删除当前所在的分支</li></ul></li><li><p><code>git branch -m 旧分支名 新分支名</code></p><ul><li>修改分支名</li></ul></li><li><p><code>git checkout 分支名</code> </p><ul><li><p>切换分支</p></li><li><p>如果在分支上面对文件进行修改之后，没有commit就切换到另外一个分支， 这个时候会报错，因为没有commit的文件在切换分支之后会不覆盖。所以Git 报错提示。</p></li><li><p><code>git checkout -f 分支名</code> 强制切换到分支，如果当前有为提交的变更，会直接丢弃 -f 参数一定一定要非常非常小心使用，一般情况下不建议使用，除非真的要强制去执行</p></li></ul></li></ul><h3 id="六、log-命令"><a href="#六、log-命令" class="headerlink" title="六、log 命令"></a>六、log 命令</h3><ul><li>用于查看git的提交历史</li><li><code>git log</code><ul><li><code>git log -数字</code> 表示查看最近几次的提交</li><li><code>git log -p -2</code> 显示最近两次提交的不同点</li><li><code>git log --author 用户名</code> 查看具体某个作者的提交</li><li><code>git log --oneline</code> 输出简要的信息</li><li><code>git log --graph</code> 以一个简单的线串联起整个提交历史</li></ul></li></ul><h3 id="七、文件对比利器–git-diff"><a href="#七、文件对比利器–git-diff" class="headerlink" title="七、文件对比利器–git diff"></a>七、文件对比利器–git diff</h3><ul><li><p><code>diff --&gt;difference</code>的缩写，用于比较差异</p></li><li><p><code>git diff</code>不加任何参数 用于对比工作区(未 git add)和暂存区(git add 之后)</p></li><li><p><code>git diff --cached</code> 或者<code>--staged</code>对比暂存区(git add 之后)和版本库(git commit 之后)</p></li><li><p><code>git diff HEAD</code>对比工作区(未 git add)和版本库(git commit 之后)</p></li><li><p><code>git diff 分支名</code>查看当前分支跟指定的分支的差异</p></li><li><p><code>git diff 分支名1 分支名2</code>查看两个指定分支(已提交的)的差异，分支2 跟分支1的差别</p></li><li><p><code>git diff 文件名</code>查看指定文件的差异</p></li><li><p><code>git diff commitid1 commitid2</code> 用于列出两个历史提交的差异</p></li><li><p><code>git diff --stat</code>用于罗列有变更的文件</p></li></ul><h3 id="八、git更改状态"><a href="#八、git更改状态" class="headerlink" title="八、git更改状态"></a>八、git更改状态</h3><ul><li><p><code>git reset HEAD 文件名</code> 移除不必要的添加到暂存区的文件</p></li><li><p><code>git reset HEAD^</code>或者 <code>commitid</code> 去掉上一次的提交</p></li><li><p><code>git reset --soft HEAD^</code> 修改上次提交的信息，即commit -m “修改这里的内容”</p></li><li><p><code>git reset --soft</code>只是将HEAD引用指向指定的提交，工作区跟暂存区的内容不会改变</p></li><li><p><code>git reset --mixed</code> （默认选项）将HEAD指向指定的提交，暂存区的内容随之改变，工作区内容不变</p></li><li><p><code>git reset --hard</code>将HEAD指向指定的提交，暂存区跟工作区都会改变</p></li></ul><h3 id="九、分支合并及冲突解决"><a href="#九、分支合并及冲突解决" class="headerlink" title="九、分支合并及冲突解决"></a>九、分支合并及冲突解决</h3><ul><li><code>git merge</code> 分支名<ul><li>表示：拿指定的分支名与当前分支进行合并</li></ul></li><li><code>git diff --name-only --diff-filter=U</code> 用于查看产生冲突的文件</li></ul><h3 id="十、git的标签"><a href="#十、git的标签" class="headerlink" title="十、git的标签"></a>十、git的标签</h3><ul><li><code>git tag</code> 不加任何参数 表示显示标签（按字母序） 非按时间</li><li><code>git tag 标签名</code> 默认是给最近一次提交打上标签</li><li><code>git tag 标签名 commitId</code> 给相应的提交打上标签</li><li><code>git show 标签名</code> 显示该标签相关的那次提交的相关信息</li><li><code>git tag -d 标签名</code> 删除该标签</li><li><code>git push 远程分支名 标签名</code> 把某个标签（必须是本地已存在的，否则推送失败） 推送到远程分支</li><li>删除远程标签的步骤<ul><li>删除本地标签<code>git tag -d 标签名</code></li><li>在删除远程的 <code>git push origin :refs/tags/标签名</code></li></ul></li></ul><h3 id="十一、-gitignore文件"><a href="#十一、-gitignore文件" class="headerlink" title="十一、.gitignore文件"></a>十一、.gitignore文件</h3><ul><li><p>使用该文件，对不必要上传的文件进行忽略，使其不被git追踪</p></li><li><p>一把情况下，<code>.gitignore</code>文件，在项目一开始创建的时候就创建，并推送到远程服务器上。这样大家初次同步项目的时候，就是用到该文件，避免以后，团队成员把与项目无关的文件，传到远程服务器上</p></li><li><p>注意：<code>git add *</code> 无法将<code>.</code>开头的文件提交至暂存区，需要 指定 文件名 <code>git add .gitignore</code></p></li><li><p><code>*.log</code> 表示忽略项目中所有以<code>.log</code>结尾的文件</p></li><li><p><code>123?.log</code> 表示忽略项目中所有以<code>123加任意字符</code>的文件</p></li><li><p><code>/error.log</code> 表示忽略项目中<code>根目录中的error.log</code>文件</p></li><li><p><code>src/main/test/</code>表示忽略<code>/src/main/test/目录</code>下的所有文件</p></li><li><p><code>*.class</code>表示忽略项目中所有以<code>.class</code>结尾的文件</p></li><li><p><code>**/java/</code>匹配所有<code>java目录</code>下的所有文件</p></li><li><p><code>!/error.log</code> 表示在之前的匹配规则下，被命中的文件，可以使用<code>!</code>对前面的规则进行否定</p></li><li><p>对于已经提交到远程或本地仓库的文件，<code>.gitignore</code>配置之后不会生效。我们必须先删除本地暂存区里的文件，之后在加上<code>.gitignore</code> 文件，最后再把变更提交到远程仓库上。</p></li><li><p><code>git rm --cached 文件名</code> 从暂存区删除某个文件</p></li><li><p><code>git rm -rf --cached 文件夹</code> 表示递归删除暂存区该文件夹的所有东西</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发环境搭建</title>
      <link href="2020/11/26/vue-kai-fa-huan-jing-da-jian/"/>
      <url>2020/11/26/vue-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Node和Npm</p></blockquote><ul><li><p>Node.js 就是运行在服务端的 JavaScript</p><ul><li>Node安装包：<code>http://nodejs.cn/download/</code></li><li>新版的nodejs已经集成了npm，所以npm也一并安装好</li></ul></li><li><p>npm: nodejs的包管理工具，可以下载使用公共仓库的包，类似maven 包安装</p><ul><li>分为本地安装（local）、全局安装（global）两种</li></ul></li></ul><pre class="line-numbers language-vue"><code class="language-vue">npm install express # 本地安装expressnpm install express -g # 全局安装expressnpm list -g #查看所有全局安装的模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>验证是否成功</li></ul><pre class="line-numbers language-vue"><code class="language-vue">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>淘宝npm镜像</p></blockquote><ul><li>使用淘宝定制的 cnpm 命令行工具代替默认的 npm:(需要管理员权限)</li></ul><pre class="line-numbers language-vue"><code class="language-vue">npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>cnpm install [name]</code></p></li><li><p><code>https://developer.aliyun.com/mirror/NPM</code></p></li></ul><blockquote><p>Vue + 脚手架Vue-Cli</p></blockquote><ul><li><p>VUE ：一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合. </p></li><li><p>官方文档：<code>https://cn.vuejs.org/</code></p></li><li><p>安装新版Vue (直接使用 cli)</p></li></ul><pre class="line-numbers language-vue"><code class="language-vue">npm install vue (可以不用)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>VUE-CLI Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架</p></li><li><p>安装 新版vue-cli</p></li></ul><pre class="line-numbers language-vue"><code class="language-vue">cnpm install -g @vue/clicnpm install -g @vue/cli-init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看版本</li></ul><pre class="line-numbers language-vue"><code class="language-vue">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建项目</li></ul><pre class="line-numbers language-vue"><code class="language-vue">vue create my-project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>VSCode必备插件</p></blockquote><ul><li><p>vetur 插件: vue文件基本语法的高亮插件</p></li><li><p>eslint插件:智能错误检测插件，在具体开发中作用很大，能够及时的帮我们发现错误</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X跨域配置</title>
      <link href="2020/11/26/springboot2-x-kua-yu-pei-zhi/"/>
      <url>2020/11/26/springboot2-x-kua-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>跨域</p></blockquote><ul><li><p>跨域：浏览器同源策略。 1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A⽹页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”</p><ul><li>协议相同/ 域名相同 /端口相同</li></ul></li><li><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</p></li><li><p>浏览器控制台跨域提示：<br><code>No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.</code></p></li></ul><blockquote><p>解决方法</p></blockquote><ul><li><code>JSONP</code></li><li><code>Http</code>响应头配置允许跨域<ul><li><code>nginx</code>层配置<code>https://www.cnblogs.com/hawk-whu/p/6725699.html</code></li></ul></li><li>程序代码中处理：<code>SpringBoot</code>通过拦截器配置</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 跨域拦截器CorsInterceptor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//表示接受任意域名的请求,也可以指定域名</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span>                request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"origin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该字段可选，是个布尔值，表示是否可以携带cookie</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span>                <span class="token string">"GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//拦截器管理类InterceptorConfig</span><span class="token comment" spellcheck="true">//拦截全部路径，跨域拦截器需要放在最上边</span>registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">corsInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>OPTIONS<ul><li>~</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 跨域配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合Guava缓存</title>
      <link href="2020/11/25/ssm-zheng-he-guava-huan-cun/"/>
      <url>2020/11/25/ssm-zheng-he-guava-huan-cun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>缓存</p></blockquote><ul><li>程序经常要调用的对象存在内存中,方便便其使用时可以快速调用,不必去数据库或者其他持久化设备中查询，主要就是提高性能</li><li>DNS缓存、前端缓存、代理服务器缓存Nginx、应用程序缓存（本地缓存、分布式缓存）、数据库缓存</li></ul><blockquote><p>分布式缓存</p></blockquote><ul><li>与应用分离的缓存组件或服务，与本地应用隔离一个独立的应用，多个应用可直接的共享缓存</li><li>常见的分布式缓存 Redis、Memcached等</li></ul><blockquote><p>本地缓存</p></blockquote><ul><li>和业务程序一起的缓存，例如myabtis的一级或者二级缓存，本地缓存自然是最快的，但是不能在多个节点共享</li><li>常见的本地缓存：myabtis 一级缓存、mybatis二级缓存；框架本身的缓存；redis本地单机服务；ehchche；guava cache、Caffeine等</li></ul><blockquote><p>缓存框架Guava Cache</p></blockquote><ul><li><p>github地址：<code>https://github.com/google/guava/wiki/CachesExplained</code></p></li><li><p>添加依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--guava依赖包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>19.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>封装工具包</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>Cache<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Cache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> tenMinuteCache <span class="token operator">=</span> CacheBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//设置缓存初始大小，应该合理设置，后续会扩容</span>            <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//最大值</span>            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//并发数设置</span>            <span class="token punctuation">.</span><span class="token function">concurrencyLevel</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//缓存过期时间，写入后10分钟过期</span>            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//统计缓存命中率</span>            <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Cache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getTenMinuteCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tenMinuteCache<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTenMinuteCache</span><span class="token punctuation">(</span>Cache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> tenMinuteCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tenMinuteCache <span class="token operator">=</span> tenMinuteCache<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缓存key管理类</li></ul><pre class="line-numbers language-jav"><code class="language-jav">/** * 缓存key管理类 */public class CacheKeyManager {    /**     * 首页轮播图列表缓存key，命名规则：一般按照 模块:功能：列表划分     */    public static final String INDEX_BANNER_KEY = "index:banner:list";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>业务实现类</li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>VideoBanner<span class="token operator">></span> <span class="token function">listBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object cacheObj <span class="token operator">=</span> baseCache<span class="token punctuation">.</span><span class="token function">getTenMinuteCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CacheKeyManager<span class="token punctuation">.</span>INDEX_BANNER_KEY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>VideoBanner<span class="token operator">></span> bannerList <span class="token operator">=</span> videoMapper<span class="token punctuation">.</span><span class="token function">listVideoBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从数据库里面找轮播图列表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> bannerList<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheObj <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>VideoBanner<span class="token operator">></span> bannerList <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>VideoBanner<span class="token operator">></span><span class="token punctuation">)</span> cacheObj<span class="token punctuation">;</span>                <span class="token keyword">return</span> bannerList<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合mysql数据库控制事务</title>
      <link href="2020/11/25/ssm-zheng-he-mysql-shu-ju-ku-kong-zhi-shi-wu/"/>
      <url>2020/11/25/ssm-zheng-he-mysql-shu-ju-ku-kong-zhi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring常见的事务管理"><a href="#一、Spring常见的事务管理" class="headerlink" title="一、Spring常见的事务管理"></a>一、Spring常见的事务管理</h3><ul><li><p>事务：多个操作，要么同时成功，要么失败后一起回滚</p><ul><li>具备ACID四种特性<ul><li>Atomic（原子性）<ul><li>强调事务的不可分割</li><li>事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li></ul></li><li>Consistency（一致性）<ul><li>事务的执行的前后数据的完整性保持一致.</li><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li></ul></li><li>Isolation（隔离性）<ul><li>一个事务执行的过程中,不应该受到其他事务的干扰</li><li>一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li></ul></li><li>Durability（持久性）<ul><li>事务一旦结束,数据就持久到数据库</li><li>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul></li></ul></li></ul></li><li><p>Spring事务管理方式</p><ul><li>编程式事务管理:<ul><li>代码中调用<code>beginTransaction()</code>、<code>commit()</code>、<code>rollback()</code>等事务管理相关的方法，通过<code>TransactionTempalte</code>手动管理事务(用的少)</li></ul></li><li>声明式事务管理:<ul><li>通过<code>AOP</code>实现，可配置文件方式或者注解方式实现事务的管理控制(用的多)</li></ul></li></ul></li><li><p>声明式事务管理本质</p><ul><li>本质是对方法前后进行拦截，底层是建立在<code>AOP</code>的基础之上</li><li>在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</li></ul></li></ul><h3 id="二、Spring事务的传播属性和隔离级别"><a href="#二、Spring事务的传播属性和隔离级别" class="headerlink" title="二、Spring事务的传播属性和隔离级别"></a>二、Spring事务的传播属性和隔离级别</h3><ul><li>事物传播行为介绍:<br>如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为<br><code>@Transactional(propagation=Propagation.REQUIRED)</code> 如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)<br><code>@Transactional(propagation=Propagation.NOT_SUPPORTED)</code> 不为这个方法开启事务<br><code>@Transactional(propagation=Propagation.REQUIRES_NEW)</code>不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务<br><code>@Transactional(propagation=Propagation.MANDATORY)</code>必须在一个已有的事务中执行,否则抛出异常<br><code>@Transactional(propagation=Propagation.NEVER)</code> 必须在一个没有的事务中执行,否则抛出异常(与<code>Propagation.MANDATORY</code>相反)<br><code>@Transactional(propagation=Propagation.SUPPORTS)</code>如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.<br><code>@Transactional(propagation=Propagation.NESTED)</code> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行； 如果当前没有事务，则该取值等价于<code>Propagation.REQUIRED</code>。</li><li>事务隔离级别: 是指若干个并发的事务之间的隔离程度<br><code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code>读取未提交数据(会出现脏读,不可重复读) 基本不使用<br><code>@Transactional(isolation = Isolation.READ_COMMITTED)</code> 读取已提交数据(会出现不可重复读和幻读)<br><code>@Transactional(isolation = Isolation.REPEATABLE_READ)</code> 可重复读(会出现幻读)<br><code>@Transactional(isolation = Isolation.SERIALIZABLE)</code>串行化</li><li><code>MYSQL</code>: 默认为<code>REPEATABLE_READ</code>级别</li></ul><blockquote><p>脏读、幻读、不可重复度</p></blockquote><ul><li><p>脏读（读取了未提交的数据，针对单笔数据）</p><ul><li>一个事务会读进还没有被另一个事务提交的数据，所以你会看到一些最后被另一个事务回滚掉的数据。</li><li>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</li></ul></li><li><p>不可重复读(进行了读取，分别读取了不同的数据，重点在于修改和删除，也是针对单笔数据)</p><ul><li>一个事务读进一条记录，另一个事务更改了这条记录并提交完毕，这时候第一个事务再次读这条记录时，它已经改变了。</li><li>是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li></ul></li><li><p>幻读(进行了读取，分别读取了不同的数据，重点在于新增，针对多笔数据)</p><ul><li><p>一个事务用Where子句来检索一个表的数据，另一个事务插入一条新的记录，并且符合Where条件，这样，第一个事务用同一个where条件来检索数据后，就会多出一条记录。</p></li><li><p>是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p></li></ul></li><li><p>解决办法：如果在操作事务完成数据处理之前，任何其他事务都不可以添加新数据，则可避免该问题</p></li><li><p>不可重复读的重点是修改 :</p><ul><li>同样的条件, 你读取过的数据,再次读取出来发现值不一样了</li></ul></li><li><p>幻读的重点在于新增或者删除</p><ul><li>同样的条件, 第 一次和第 二 次读出来的记录数不一样</li></ul></li></ul><h3 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h3><ul><li>启动类加注解<code>@EnableTransactionManagement</code></li><li>业务类加<code>@Transactional</code></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//启动类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass.ssmDemo.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SsmDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SsmDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//domain</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Service</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//serviceImpl</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> row<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(name,phone)values(#{name},#{phone}) "</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//controller</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">save</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis3.X简单sql查询</title>
      <link href="2020/11/25/mybatis3-x-jian-dan-sql-cha-xun/"/>
      <url>2020/11/25/mybatis3-x-jian-dan-sql-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Mybatis在控制台打印sql"><a href="#一、Mybatis在控制台打印sql" class="headerlink" title="一、Mybatis在控制台打印sql"></a>一、Mybatis在控制台打印sql</h3><ul><li><p>Mybatis使用流程</p><ul><li>创建<code>mybatis-config.xml</code>全局的配置文件</li><li>创建<code>XXXMapper.xml</code>配置文件</li><li>创建<code>SqlSessionFactory</code></li><li>用<code>SqlSessionFactory</code>创建<code>SqlSession</code>对象</li><li>用<code>SqlSession</code>执行增删改查CRUD</li></ul></li><li><p>内置的日志工厂提供日志功能, 使用log4j配置打印sql,添加依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在应用的<code>classpath</code>中创建名称为<code>log4j.properties</code> 的文件</li></ul><pre class="line-numbers language-pro"><code class="language-pro">log4j.rootLogger=ERROR, stdout#log4j.logger.club.ldclass=DEBUGlog4j.logger.club.ldclass=TRACE#细化到打印某个mapper或某个方法#log4j.logger.club.ldclass.mybatis.dao.VideoMapper.selectVideoList=TRACElog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、查询"><a href="#二、查询" class="headerlink" title="二、查询"></a>二、查询</h3><ul><li>常用的查询<ul><li>默认参数查询<ul><li>单个参数，可以使用别名，也可以使用默认的名称，推荐使用别名，并加上@Param</li></ul></li><li>使用参数别名</li><li>模糊查询<ul><li>mysql自带函数使用</li></ul></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--        根据评分和标题，模糊查询 使用自带函数 concat()    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPointAndTitleLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain.Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from video        where point = #{point,jdbcType=DOUBLE}          and title like concat('%', #{title,jdbcType=VARCHAR}, '%')    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Mybatis配置驼峰字段到java类"><a href="#三、Mybatis配置驼峰字段到java类" class="headerlink" title="三、Mybatis配置驼峰字段到java类"></a>三、Mybatis配置驼峰字段到java类</h3><ul><li>修改<code>mybatis-config.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--配置文件标签有前后顺序，不能错位,settings加在environments之前--></span>    <span class="token comment" spellcheck="true">&lt;!--下划线自动映射驼峰字段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Mybatis入参parameterType和取值类型"><a href="#四、Mybatis入参parameterType和取值类型" class="headerlink" title="四、Mybatis入参parameterType和取值类型"></a>四、Mybatis入参parameterType和取值类型</h3><ul><li><p>parameterType 参数类型</p><ul><li>基本类型：<code>parameterType="java.lang.Long"</code> <code>parameterType="java.lang.String"</code></li><li>java集合：<code>parameterType="java.util.Map"</code> <code>parameterType="java.util.List"</code></li><li>java自定义对象</li></ul></li><li><p>取参数值，具体某个字段的类型，从java类型映射到数据库类型</p><ul><li>#{title, jdbcType=VARCHAR}</li><li>注意:<ul><li>多数情况不加是正常使用，但是如果出现报错：无效的列类型，有可能是缺少jdbcType;</li><li>只有当字段可为NULL时才需要jdbcType属性</li></ul></li></ul></li><li><p>常见的数据库类型和java类型对比</p></li></ul><table><thead><tr><th align="center">JDBC Type</th><th align="center">Java Type</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">String</td></tr><tr><td align="center">VARCHAR</td><td align="center">String</td></tr><tr><td align="center">LONGVARCHAR</td><td align="center">String</td></tr><tr><td align="center">NUMERIC</td><td align="center">java.math.BigDecimal</td></tr><tr><td align="center">DECIMAL</td><td align="center">java.math.BigDecimal</td></tr><tr><td align="center">BIT</td><td align="center">boolean</td></tr><tr><td align="center">BOOLEAN</td><td align="center">boolean</td></tr><tr><td align="center">TINYINT</td><td align="center">byte</td></tr><tr><td align="center">SMALLINT</td><td align="center">short</td></tr><tr><td align="center">INTEGER</td><td align="center">INTEGER</td></tr><tr><td align="center">INTEGER</td><td align="center">int</td></tr><tr><td align="center">BIGINT</td><td align="center">long</td></tr><tr><td align="center">REAL</td><td align="center">float</td></tr><tr><td align="center">FLOAT</td><td align="center">double</td></tr><tr><td align="center">DOUBLE</td><td align="center">double</td></tr><tr><td align="center">BINARY</td><td align="center">byte[]</td></tr><tr><td align="center">VARBINARY</td><td align="center">byte[]</td></tr><tr><td align="center">LONGVARBINARY</td><td align="center">byte[]</td></tr><tr><td align="center">DATE</td><td align="center">java.sql.Date</td></tr><tr><td align="center">TIME</td><td align="center">java.sql.Time</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">java.sql.Timestamp</td></tr><tr><td align="center">CLOB</td><td align="center">Clob</td></tr><tr><td align="center">BLOB</td><td align="center">Blob</td></tr><tr><td align="center">ARRAY</td><td align="center">Array</td></tr><tr><td align="center">DISTINCT</td><td align="center">mapping of underlying type</td></tr><tr><td align="center">STRUCT</td><td align="center">Struct</td></tr><tr><td align="center">REF</td><td align="center">Ref</td></tr><tr><td align="center">DATALINK</td><td align="center">java.net.URL</td></tr></tbody></table><h3 id="五、增加"><a href="#五、增加" class="headerlink" title="五、增加"></a>五、增加</h3><ul><li>新增一条视频记录，并获得自增主键</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--    插入一条数据，并返回自增主键    useGeneratedKeys：使用主键    keyProperty:实体类中的主键    keyColumn:数据库表中的主键    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>            <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO `video`            (`title`, `summary`, `cover_img`, `price`, `create_time`, `point`)        VALUES ( #{title,jdbcType=VARCHAR}, #{summary,jdbcType=VARCHAR}, #{coverImg,jdbcType=VARCHAR}               , #{price,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{point,jdbcType=DOUBLE})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>foreach批量插入语法<ul><li>foreach: 用于循环拼接的内置标签，常用于批量新增、in查询等</li><li>包含以下属性：<ul><li>collection：必填，值为要迭代循环的集合类型，情况有多种：<ul><li>入参是List类型的时候，collection属性值为list</li><li>入参是Map类型的时候，collection 属性值为map的key值</li></ul></li><li>item：每一个元素进行迭代时的别名</li><li>index：索引的属性名，在集合数组情况下值为当前索引值，当迭代对象是map时，这个值是map的key</li><li>open：整个循环内容的开头字符串</li><li>close：整个循环内容的结尾字符串</li><li>separator: 每次循环的分隔符</li></ul></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--批量插入,并获得自增id--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>            <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO `video`        (`title`, `summary`, `cover_img`, `price`, `create_time`, `point`)        VALUES        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (#{video.title,jdbcType=VARCHAR},#{video.summary,jdbcType=VARCHAR},#{video.coverImg,jdbcType=VARCHAR}            ,#{video.price,jdbcType=INTEGER},#{video.createTime,jdbcType=TIMESTAMP},#{video.point,jdbcType=DOUBLE})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、更新"><a href="#六、更新" class="headerlink" title="六、更新"></a>六、更新</h3><ul><li><p>动态字段更新 if test 标签使用</p><ul><li><p>可以选择性更新非空字段</p></li><li><p>if 标签可以通过判断传入的值来确定查询条件，test 指定一个OGNL表达式</p></li><li><p>常见写法</p></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--当前字段符合条件才更新这个字段的值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>title !<span class="token punctuation">=</span> null and id <span class="token punctuation">=</span><span class="token punctuation">=</span> 87 <span class="token punctuation">'</span></span><span class="token punctuation">></span></span> title = #{title}, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> title = #{title}, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>实例<ul><li>注意：一定要看pojo类里面的是基本数据类型，还是包装数据类型，只有包装数据类型才可以用 !=null 判断</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--    更新    包装数据类型才可以使用 !=null 判断非空    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateVideo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain.Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE `video`        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`title` = #{title,jdbcType=VARCHAR},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>summary !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`summary` = #{summary,jdbcType=VARCHAR},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>coverImg !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`cover_img` = #{coverImg,jdbcType=VARCHAR},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price !<span class="token punctuation">=</span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`price` = #{price,jdbcType=INTEGER},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`create_time` = #{createTime,jdbcType=TIMESTAMP},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>`point` = #{point,jdbcType=DOUBLE},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>        WHERE `id` = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、删除"><a href="#七、删除" class="headerlink" title="七、删除"></a>七、删除</h3><ul><li>xml中有些需要转义字符<ul><li>大于等于号: <code>&lt;![CDATA[ &gt;= ]]&gt;</code></li><li>小于等于号:<code>&lt;![CDATA[ &lt;= ]]&gt;</code></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5.X注解配置</title>
      <link href="2020/11/25/spring5-x-zhu-jie-pei-zhi/"/>
      <url>2020/11/25/spring5-x-zhu-jie-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring5-X注解配置"><a href="#一、Spring5-X注解配置" class="headerlink" title="一、Spring5.X注解配置"></a>一、Spring5.X注解配置</h3><ul><li>开启注解配置和包扫描</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//主类</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//扫描指定的包，包括子包</span>        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成初始化操作，核心方法</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"videoService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Spring5.X的常用注解</p><ul><li>bean定义</li><li>@Component 通用组件 细分： <code>@Controller</code> (用于web层) <code>@Service</code> (用于service层) <code>@Repository</code> (用于dao仓库层)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoController</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoDao</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bean取名<code>@Component("xxx")</code>  <code>getBean("xxx")</code><ul><li>如果没有指定名称，则默认为类名（第一个字母小写）作为bean的名称</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口实现类 </span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"vs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//扫描指定的包，包括子包</span>        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成初始化操作，核心方法</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"vs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bean注入<ul><li>类型注入<code>@Autowired</code></li><li>名称注入<code>@Qualifier</code></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>指明<span class="token annotation punctuation">@Service</span>的名称<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"videoServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"videoServiceImpl 根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"videoService2Impl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoService2Impl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"videoService2Impl 根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//两个实现类实现的同一个接口，Controller中只用AutoWired，无法区分指向哪个实现类，需要用到@Qualifier指明@Service的名称</span><span class="token comment" spellcheck="true">//或者使用@Resource(name = "xxx") 等同于 @AutoWired+@Qualifier("xxx")</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @Autowired</span><span class="token comment" spellcheck="true">//    @Qualifier("VideoService2Impl")</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> VideoService videoService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bean的生命周期<ul><li><code>@PostConstruct</code>初始化、<code>@PreDestroy</code>销毁</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video类 init方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video类 destroy方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bean作用范围<ul><li><code>@scope</code>注解</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单例,默认</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多例</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、-Configuration和-Bean"><a href="#二、-Configuration和-Bean" class="headerlink" title="二、@Configuration和@Bean"></a>二、@Configuration和@Bean</h3><ul><li><p><code>@Configuration</code>标注在类上，相当于把该类作为<code>Spring</code>的<code>xml</code>配置文件</p><ul><li>作用为：配置Spring容器(应用上下文)</li></ul></li><li><p><code>@bean</code>注解：用于告诉方法产生一个Bean对象，然后这个Bean对象交给Spring管理，Spring将会将这个Bean对象放在自己的IOC容器中</p></li><li><p>注意点:SpringIOC容器管理一个或者多个bean，这些bean都需要在@Configuration注解下进行创建</p></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用@Bean注解，表明这个bean交给spring管理     * 如果没有制定名称，则默认采用 方法名+第一个字母小写 作为bean的名称     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"vo"</span><span class="token punctuation">,</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">,</span>destroyMethod <span class="token operator">=</span> <span class="token string">"destroy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> VideoOrder <span class="token function">videoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//videoOrder实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"videoOrder init被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"videoOrder destroy被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VideoOrder注入id时，调用setId方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//主类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//扫描指定的包，包括子包</span>        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成初始化操作，核心方法</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token punctuation">(</span>VideoOrder<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"vo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、-PropertySource"><a href="#三、-PropertySource" class="headerlink" title="三、@PropertySource"></a>三、@PropertySource</h3><ul><li><p>@PropertySource，指定加载配置文件    </p><ul><li>配置文件映射到实体类</li></ul></li><li><p>使用@Value映射到具体的java属性</p></li><li><p>实例</p><ul><li>创建config.properties</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建CustomConfig.java</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:config.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.host}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHost</span><span class="token punctuation">(</span>String host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomConfig customConfig<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl 根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customConfig<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//扫描指定的包，包括子包</span>        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成初始化操作，核心方法</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、注解配置AOP面向切面编程"><a href="#四、注解配置AOP面向切面编程" class="headerlink" title="四、注解配置AOP面向切面编程"></a>四、注解配置AOP面向切面编程</h3><ul><li>声明切面类 @Aspect(切面): 通常是一个类，里面可以定义切入点和通知，并配置切入点和通知</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">/** * 表明是一个切面类,此类定义切入点和通知 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 切入点     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* club.ldclass.spring.service.VideoService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     * @param joinPoint     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"aspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeLog</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LogAdvice beforeLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知     * @param joinPoint     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"aspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterLog</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LogAdvice afterLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"aspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LogAdvice around"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启SpringAOP注解配置<ul><li>定义类AnnotationAppConfig.java</li><li>主类中更改为 <code>AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AnnotationAppConfig.class);</code></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"club.ldclass"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 开启切面 */</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationAppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义注解配置类`AnnotationAppConfig.java`后，此一句话即可代替之前的</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AnnotationAppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过AOP的环绕通知统计方法调用耗时</p></blockquote><ul><li>切面类LogAdvice<ul><li>@Around</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"aspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object o <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用者="</span><span class="token operator">+</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        Object method <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用方法="</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过joinPoint获取参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用参数="</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，环绕前==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ProceedingJoinPoint<span class="token punctuation">)</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，环绕后==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总耗时="</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>VideoServiceImpl<ul><li>findById()</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl 根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义注解配置类`AnnotationAppConfig.java`后，此一句话即可代替之前的</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AnnotationAppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"VideoServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台输出</li></ul><pre class="line-numbers language-console"><code class="language-console">调用者=club.ldclass.spring.service.impl.VideoServiceImpl调用方法=Video club.ldclass.spring.service.VideoService.findById(int)调用参数=44环绕通知，环绕前===========LogAdvice beforeLogVideoServiceImpl 根据id查找视频环绕通知，环绕后===========总耗时=2001msLogAdvice afterLog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5.X面向切面编程AOP</title>
      <link href="2020/11/24/spring5-x-mian-xiang-qie-mian-bian-cheng-aop/"/>
      <url>2020/11/24/spring5-x-mian-xiang-qie-mian-bian-cheng-aop/</url>
      
        <content type="html"><![CDATA[<h3 id="一、AOP面向切面编程"><a href="#一、AOP面向切面编程" class="headerlink" title="一、AOP面向切面编程"></a>一、AOP面向切面编程</h3><ul><li><p>Aspect Oriented Program` 面向切面编程</p><ul><li>在不改变原有逻辑上增加额外的功能，比如解决系统层面的问题，或者增加新的功能</li></ul></li><li><p>场景</p><ul><li>权限控制</li><li>缓存</li><li>日志处理</li><li>事务控制</li></ul></li><li><p>AOP思想把功能分两个部分，分离系统中的各种关注点</p><ul><li>核心关注点<ul><li>业务的主要功能</li></ul></li><li>横切关注点<ul><li>非核心、额外增加的功能</li></ul></li></ul></li><li><p>好处</p><ul><li>减少代码侵入，解耦</li><li>可以统一处理横切逻辑</li><li>方便添加和删除横切逻辑</li></ul></li></ul><h3 id="二、AOP相关核心概念"><a href="#二、AOP相关核心概念" class="headerlink" title="二、AOP相关核心概念"></a>二、AOP相关核心概念</h3><ul><li>横切关注点<ul><li>对哪些方法进行拦截，拦截后怎么处理，这些就叫横切关注点</li><li>比如 权限认证、日志、事物</li></ul></li><li>通知 <code>Advice</code><ul><li>在特定的切入点上执行的增强处理，有5种通知，</li><li>比如需要记录日志，控制事务 ，提前编写好通用的模块，需要的地方直接调用</li></ul></li><li>连接点<code>JointPoint</code><ul><li>要用通知的地方，业务流程在运行过程中需要插入切面的具体位置，</li><li>一般是方法的调用前后，全部方法都可以是连接点</li></ul></li><li>切入点 <code>Pointcut</code><ul><li>不能全部方法都是连接点，通过特定的规则来筛选连接点, 就是<code>Pointcut</code>，选中你需要的方法</li><li>在程序中主要体现为书写切入点表达式（通过通配、正则表达式）过滤出特定的一组<code>JointPoint</code>连接点</li><li>过滤出相应的 <code>Advice</code>将要发生的<code>joinpoint</code>地方</li></ul></li><li>切面 <code>Aspect</code><ul><li>通常是一个类，里面定义切入点+通知 , 定义在什么地方； 什么时间点、做什么事情</li><li>通知 <code>advice</code>指明了时间和做的事情（前置、后置等）</li><li>切入点 <code>pointcut</code>指定在什么地方干这个事情</li><li>web接口设计中，web层-&gt;网关层-&gt;服务层-&gt;数据层，每一层之间也是一个切面，对象和对象，方法和方法之间都是一个个切面</li></ul></li><li>目标<code>target</code><ul><li>目标类，真正的业务逻辑，可以在目标类不知情的条件下，增加新的功能到目标类的链路上</li></ul></li><li>织入 <code>Weaving</code><ul><li>把切面（某个类）应用到目标函数的过程称为织入</li></ul></li><li>AOP代理<ul><li>AOP框架创建的对象，代理就是目标对象的加强</li><li>Spring中的AOP代理可以使<code>JDK动态代理</code>，也可以是<code>CGLIB代理</code></li></ul></li></ul><h3 id="三、通知Advice类型讲解"><a href="#三、通知Advice类型讲解" class="headerlink" title="三、通知Advice类型讲解"></a>三、通知Advice类型讲解</h3><ul><li><code>@Before</code>前置通知<ul><li>在执行目标方法之前运行</li></ul></li><li><code>@After</code>后置通知<ul><li>在目标方法运行结束之后</li></ul></li><li><code>@AfterReturning</code>返回通知<ul><li>在目标方法正常返回值后运行</li></ul></li><li><code>@AfterThrowing</code>异常通知<ul><li>在目标方法出现异常后运行</li></ul></li><li><code>@Around</code>环绕通知<ul><li>在目标方法完成前、后做增强处理 ,环绕通知是最重要的通知类型 ,像事务,日志等都是环绕通知</li><li>注意编程中核心是一个<code>ProceedingJoinPoint</code>，需要手动执行 <code>joinPoint.procced()</code></li></ul></li></ul><h3 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h3><ul><li>常见例子<ul><li>用户下单<ul><li>核心关注点：创建订单</li><li>横切关注点：记录日志、控制事务</li></ul></li><li>用户观看付费视频<ul><li>核心关注点：获取播放地址</li><li>横切关注点：记录日志、权限认证</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">VideoOrderService<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//新增订单</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查询订单</span><span class="token function">findOrderById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除订单</span><span class="token function">delOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//更更新订单</span><span class="token function">updateOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//joinPoint连接点：目标类 VideoOrderService，里面每个方法都是连接点 addOrder/findOrderById/delOrder/updateOrder</span><span class="token comment" spellcheck="true">//PointCut切入点：过滤出joinPoint中哪些目标函数作为切入点</span><span class="token comment" spellcheck="true">//切入点是CUD类型的方法，R读取的不作为切入点 CRDU全称：增加(Create)、读取查询(Retrieve)、更更新(Update)和删除(Delete)</span><span class="token comment" spellcheck="true">//切入点 定义了什么地方</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public int net.xdclass.sp.service.VideoOrderService.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Advice通知：在切入点中的函数上执行的动作，如记录日志、权限校验等</span><span class="token comment" spellcheck="true">//before通知，表示在目标方法执行前切入, 并指定在哪个方法前切入</span><span class="token comment" spellcheck="true">//什么时候，做什么事情</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">permissionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在 xxx 之前执行权限校验"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Aspect切面：由切入点和通知组合而成，定义通知应用到哪些切入点</span><span class="token comment" spellcheck="true">//Weaving织入：把切面的代码应用到目标函数的过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、AOP切入点表达式"><a href="#五、AOP切入点表达式" class="headerlink" title="五、AOP切入点表达式"></a>五、AOP切入点表达式</h3><ul><li>切入点表达式<ul><li>除了返回类型、方法名和参数外，其它项都是可选的 (修饰符基本都是省略不写)</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">            访问修饰符             返回值类型（必填）                                 包和类 方法（必填）<span class="token function">execution</span><span class="token punctuation">(</span>modifiers<span class="token operator">-</span>pattern<span class="token operator">?</span> ret<span class="token operator">-</span>type<span class="token operator">-</span>pattern declaring<span class="token operator">-</span>type<span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token function">namepattern</span><span class="token punctuation">(</span>param<span class="token operator">-</span>pattern<span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>常见匹配语法</p><ul><li><code>*</code>：匹配任何数量字符，单个；</li><li><code>..</code>：匹配任何数量字符，可以多个，在类型模式中匹配任何数量子包；在方法参数模式中匹配任何数量参数</li><li><code>()</code> 匹配一个不接受任何参数的方法</li><li><code>(..)</code> 匹配一个接受任意数量参数的方法</li><li><code>(*)</code> 匹配了一个接受一个任何类型的参数的方法</li><li><code>(*,Integer)</code> 匹配了一个接受两个参数的方法，其中第一个参数是任意类型，第二个参数必须是Integer类型</li></ul></li><li><p>常见例子</p><ul><li>任意公共方法：<code>execution（public * *（..））</code></li><li>任何一个名字以“save”开始的方法：<code>execution（* save*（..））</code></li><li><code>VideoService</code>接口定义的任意方法（识别）：<code>execution（* net.xdclass.service.VideoService.*（..））</code></li><li>在<code>service</code>包中定义的任意方法（识别）：<code>execution（* net.xdclass.service.*.*（..））</code></li><li>匹配 <code>service</code>包,子孙包下所有类的所有方法（识别）：<code>execution（* net.xdclass.service..*.*（..））</code></li></ul></li></ul><h3 id="六、AOP代理"><a href="#六、AOP代理" class="headerlink" title="六、AOP代理"></a>六、AOP代理</h3><ul><li>代理<ul><li>为某一个对象创建一个代理对象，程序不直接用原本的对象，而是由创建的代理对象来控制对原对象，通过代理类这中间一层，能有效控制对委托类对象的直接访问，也可以很好地隐藏和保护委托类对象，同时也为实施不同控制策略预留了空间</li></ul></li><li>静态代理<ul><li>由程序创建或特定工具自动生成源代码，在程序运行前，代理类的.class文件就已经存在</li></ul></li><li>动态代理<ul><li>在程序运行时，运用反射机制动态创建而成，无需手动编写代码<ul><li>JDK动态代理</li><li>CGLIB动态代理</li></ul></li></ul></li></ul><h3 id="七、静态代理"><a href="#七、静态代理" class="headerlink" title="七、静态代理"></a>七、静态代理</h3><ul><li><p>通过将目标类与代理类实现同一个接口，让代理类持有真实类对象，然后在代理类方法中调用真实类方法，在调用真实类方法的前后添加我们所需要的功能扩展代码来达到增强的目的</p></li><li><p>优点</p><ul><li>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可</li><li>方便增加功能，拓展业务逻辑</li></ul></li><li><p>缺点</p><ul><li>代理类中出现大量冗余的代码，非常不利于扩展和维护</li><li>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建测试接口PayService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>    String <span class="token function">callback</span><span class="token punctuation">(</span>String outTranNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span><span class="token keyword">int</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建实现类PayServiceImpl</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">callback</span><span class="token punctuation">(</span>String outTranNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标类 PayServiceImpl 回调方法 callback "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> outTranNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标类 PayServiceImpl 回调方法 save "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建静态代理StaticPayServiceImpl</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticPayServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构造函数注入     */</span>    <span class="token keyword">private</span> PayService payService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StaticPayServiceImpl</span><span class="token punctuation">(</span>PayService payService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>payService <span class="token operator">=</span> payService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">callback</span><span class="token punctuation">(</span>String outTranNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StaticPayServiceImpl callback begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> payService<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>outTranNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StaticPayServiceImpl callback end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StaticPayServiceImpl save begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> payService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StaticPayServiceImpl save begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//============测试类===================</span><span class="token comment" spellcheck="true">//不使用代理时：</span><span class="token comment" spellcheck="true">//控制台输出</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 callback </span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 save </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PayService payService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payService<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用静态代理时</span><span class="token comment" spellcheck="true">//控制台输出：</span><span class="token comment" spellcheck="true">//StaticPayServiceImpl save begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 save </span><span class="token comment" spellcheck="true">//StaticPayServiceImpl save begin</span><span class="token comment" spellcheck="true">//StaticPayServiceImpl callback begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 callback </span><span class="token comment" spellcheck="true">//StaticPayServiceImpl callback end</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PayService payService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticPayServiceImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payService<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、JDK动态代理"><a href="#八、JDK动态代理" class="headerlink" title="八、JDK动态代理"></a>八、JDK动态代理</h3><ul><li><p>JDK动态代理与静态代理一样，目标类需要实现一个代理接口,再通过代理对象调用目标方法</p></li><li><p>实例</p><ul><li>应用静态代理模块的接口和实现类</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: JDK动态代理 * 定义一个java.lang.reflect.InvocationHandler接口的实现类，重写invoke方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 目标类     */</span>    <span class="token keyword">private</span> Object targetObject<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取代理对象     * @param targetObject     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Object targetObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>targetObject <span class="token operator">=</span> targetObject<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定关系，也就是和具体的哪个实现类关联</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span> targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param proxy 被代理的对象     * @param method 要调用的方法     * @param args 方法调用时所需要参数     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过JDK动态代理调用"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",打印日志 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过JDK动态代理调用"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",打印日志 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试==============</span><span class="token comment" spellcheck="true">//应用JDK动态代理</span><span class="token comment" spellcheck="true">//控制台打印</span><span class="token comment" spellcheck="true">//通过JDK动态代理调用save,打印日志 begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 save </span><span class="token comment" spellcheck="true">//通过JDK动态代理调用save,打印日志 end</span><span class="token comment" spellcheck="true">//通过JDK动态代理调用callback,打印日志 begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 callback </span><span class="token comment" spellcheck="true">//通过JDK动态代理调用callback,打印日志 end</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JDKProxy jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理类对象</span>        PayService payServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>PayService<span class="token punctuation">)</span> jdkProxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payServiceProxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payServiceProxy<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、CGLib动态代理"><a href="#九、CGLib动态代理" class="headerlink" title="九、CGLib动态代理"></a>九、CGLib动态代理</h3><ul><li><p>CgLib动态代理的原理是对指定的业务类生成一个子类，并覆盖其中的业务方法来实现代理</p></li><li><p>实例</p><ul><li>应用静态代理模块的接口和实现类</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description:CgLib动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 目标类     */</span>    <span class="token keyword">private</span> Object targetObject<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取代理对象     *     * @param targetObject     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Object targetObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>targetObject <span class="token operator">=</span> targetObject<span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置代理类的父类（目标类）</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建子类（代理对象）</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过CgLib动态代理调用"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",打印日志 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过CgLib动态代理调用"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",打印日志 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试==============</span><span class="token comment" spellcheck="true">//应用CgLib动态代理</span><span class="token comment" spellcheck="true">//控制台打印</span><span class="token comment" spellcheck="true">//通过CgLib动态代理调用save,打印日志 begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 save </span><span class="token comment" spellcheck="true">//通过CgLib动态代理调用save,打印日志 end</span><span class="token comment" spellcheck="true">//通过CgLib动态代理调用callback,打印日志 begin</span><span class="token comment" spellcheck="true">//目标类 PayServiceImpl 回调方法 callback </span><span class="token comment" spellcheck="true">//通过CgLib动态代理调用callback,打印日志 end</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JDKProxy jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理类对象</span>        PayService payServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>PayService<span class="token punctuation">)</span> jdkProxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payServiceProxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payServiceProxy<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、CGLib动态代理和JDK动态代理总结"><a href="#十、CGLib动态代理和JDK动态代理总结" class="headerlink" title="十、CGLib动态代理和JDK动态代理总结"></a>十、CGLib动态代理和JDK动态代理总结</h3><ul><li>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理，解耦和易维护</li><li>两种动态代理的区别：<ul><li><code>JDK</code>动态代理：要求目标对象实现一个接口，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以用<code>CGLib</code>动态代理</li><li><code>CGLib</code>动态代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展</li><li><code>JDK</code>动态代理是自带的，<code>CGlib</code>需要引入第三方包</li><li><code>CGLib</code>动态代理基于继承来实现代理，所以无法对<code>final</code>类、<code>private</code>方法和<code>static</code>方法实现代理</li></ul></li><li><code>Spring AOP</code>中的代理使用的默认策略：<ul><li>如果目标对象实现了接口，则默认采用<code>JDK</code>动态代理</li><li>如果目标对象没有实现接口，则采用<code>CgLib</code>进行动态代理</li><li>如果目标对象实现了接口，程序里面依旧可以指定使用<code>CGlib</code>动态代理</li></ul></li></ul><blockquote><p>基于Spring的AOP快速实现通用日志打印</p></blockquote><ul><li>定义VideoService接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Video video<span class="token punctuation">)</span><span class="token punctuation">;</span>    Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义实现类VideoServiceImpl</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VideoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Video video<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟业务实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Video <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟业务实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"根据id查找视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟发生异常</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义横切关注点TimeHandler</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"printBefore 前置日志 time="</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"printAfter 后置日志 time="</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printAfterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"printAfterThrowing 发生异常日志 time="</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入相关依赖包</li></ul><pre class="line-numbers language-xml"><code class="language-xml">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加schema<ul><li>修改<code>applicationContext.xml</code></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        <span class="token comment" spellcheck="true">&lt;!--aop --></span>                           http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"        xmlns:aop="http://www.springframework.org/schema/aop">    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置bean和aop</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.aop.TimeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.service.impl.VideoServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--aop配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--横切关注点--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeAspect<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--定义切入点表达式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodLogPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* club.ldclass.spring.service.VideoService.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置前置后置通知--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printBefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodLogPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printAfterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodLogPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printAfter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodLogPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测试aop</span>        <span class="token function">testAop</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回调函数</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAop</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span><span class="token punctuation">{</span>        VideoService videoService <span class="token operator">=</span> <span class="token punctuation">(</span>VideoService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"videoService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        videoService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//控制台输出</span><span class="token comment" spellcheck="true">//printBefore 前置日志 time=2020-11-24T17:58:38.773</span><span class="token comment" spellcheck="true">//保存video</span><span class="token comment" spellcheck="true">//printAfter 后置日志 time=2020-11-24T17:58:38.774</span><span class="token comment" spellcheck="true">//printBefore 前置日志 time=2020-11-24T17:58:38.775</span><span class="token comment" spellcheck="true">//根据id查找视频</span><span class="token comment" spellcheck="true">//printAfterThrowing 发生异常日志 time=2020-11-24T17:58:38.775</span><span class="token comment" spellcheck="true">//printAfter 后置日志 time=2020-11-24T17:58:38.775</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5.X之bean</title>
      <link href="2020/11/24/spring5-x-zhi-bean/"/>
      <url>2020/11/24/spring5-x-zhi-bean/</url>
      
        <content type="html"><![CDATA[<h3 id="一、scope作用域"><a href="#一、scope作用域" class="headerlink" title="一、scope作用域"></a>一、scope作用域</h3><ul><li><p>singleton：单例, 默认值，调用getBean方法返回是同一个对象,实例会被缓存起来，效率比较高，当一个bean被标识为singleton时候，spring的IOC容器中只会存在一个该bean</p></li><li><p>prototype: 多例，调用getBean方法创建不同的对象，会频繁的创建和销毁对象造成很大的开销</p></li><li><p>其他用 （作用域 只在 WebApplicationContext）</p><ul><li>request ：每个Http请求都会创建一个新的bean</li><li>session: 每个Http Session请求都会创建一个新的bean</li><li>global session（基本不用）</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">       <span class="token comment" spellcheck="true">&lt;!--单例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--多例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testScope</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Video video <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Video video1 <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//scope为singleton时，控制台输出true；scope为prototype时，控制台输出为false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video <span class="token operator">==</span> video1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、常见的注入方式"><a href="#二、常见的注入方式" class="headerlink" title="二、常见的注入方式"></a>二、常见的注入方式</h3><ul><li>通过实体类中<code>set</code>方法注入</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过实体类中构造函数注入，必须具有和constructor-arg一致的构造参数，同时记得一定保留无参构造函数</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试constructor-arg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>POJO类型注入(property 没有使用value属性，而是使用了ref属性)，依赖注入</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.VideoOrder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcdefg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--依赖于video --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、List-Map类型的注入"><a href="#三、List-Map类型的注入" class="headerlink" title="三、List-Map类型的注入"></a>三、List-Map类型的注入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//video实体类中添加两个属性，以及对应的get/set方法</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> chapterList<span class="token punctuation">;</span>  <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> videoMap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chapterList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>第一章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>第二章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>第三章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>S<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、spring-ioc容器Bean之间的依赖和继承"><a href="#四、spring-ioc容器Bean之间的依赖和继承" class="headerlink" title="四、spring ioc容器Bean之间的依赖和继承"></a>四、spring ioc容器Bean之间的依赖和继承</h3><ul><li>bean继承：两个类之间大多数的属性都相同，避免重复配置，通过bean标签的parent属性重用已有的Bean元素的配置信息 继承指的是配置信息的复用，和Java类的继承没有关系</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//video1实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//video2实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String summary<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--通过bean标签的parent属性重用video1的配置信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video2<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxxxxxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性依赖: 如果类A是作为类B的属性, 想要类A比类B先实例化，设置两个Bean的依赖关系</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.VideoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcdefg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--依赖于video --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、bean-的生命周期和二次处理"><a href="#五、bean-的生命周期和二次处理" class="headerlink" title="五、bean 的生命周期和二次处理"></a>五、bean 的生命周期和二次处理</h3><ul><li><code>init</code>和<code>destroy</code>方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//video实体类添加init()和 destroy()</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video类 init方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video类 destroy方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//测试</span>    <span class="token comment" spellcheck="true">//控制台打印顺序</span>    <span class="token comment" spellcheck="true">//video类 init方法被调用</span>    <span class="token comment" spellcheck="true">//tom</span>    <span class="token comment" spellcheck="true">//video类 destroy方法被调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Video video <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回调函数,触发destroy方法</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、后置处理器-BeanPostProcessor"><a href="#六、后置处理器-BeanPostProcessor" class="headerlink" title="六、后置处理器 BeanPostProcessor"></a>六、后置处理器 BeanPostProcessor</h3><ul><li><p>BeanPostProcessor</p><ul><li>是Spring IOC容器给我们提供的一个扩展接口</li><li>在调用初始化方法前后对 Bean 进行额外加工，ApplicationContext 会自动扫描实现了BeanPostProcessor的 bean，并注册这些 bean 为后置处理器</li><li>是Bean的统一前置后置处理而不是基于某一个bean</li></ul></li><li><p>执行顺序</p><ul><li>Spring IOC容器实例化Bean</li><li>调用BeanPostProcessor的postProcessBeforeInitialization方法</li><li>调用bean实例的初始化方法</li><li>调用BeanPostProcessor的postProcessAfterInitialization方法</li><li>调用bean实例的销毁方法</li></ul></li><li><p>自定义<code>CustomBeanPostProcessor</code></p><ul><li>注意：接口重写的两个方法不能返回null，如果返回null那么在后续初始化方法时将报空指针异常或者通过getBean()方法获取不到bean实例对象</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomBeanPostProcessor postProcessBeforeInitialization beanName="</span><span class="token operator">+</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomBeanPostProcessor postProcessAfterInitialization beanName="</span><span class="token operator">+</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>applicationContext.xml</code>添加<code>bean</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.processor.CustomBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Video video <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回调函数</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台输出</li></ul><pre class="line-numbers language-console"><code class="language-console">video 注入时被调用video 注入时被调用CustomBeanPostProcessor postProcessBeforeInitialization beanName=videovideo类 init方法被调用CustomBeanPostProcessor postProcessAfterInitialization beanName=videovideo类 destroy方法被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以注册多个Bean<code>PostProcessor</code>顺序<ul><li>在Spring机制中可以指定后置处理器调用顺序，通过BeanPostProcessor接口实现类实现Ordered接口getOrder方法，该方法返回整数，默认值为 0，优先级最高，值越大优先级越低</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//CustomBeanPostProcessor.java中添加，表示优先级为1，值越大优先级越低</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、bean自动装配Autowire属性"><a href="#七、bean自动装配Autowire属性" class="headerlink" title="七、bean自动装配Autowire属性"></a>七、bean自动装配Autowire属性</h3><ul><li><p>Spring自动注入</p><ul><li>使用元素的 autowire 属性为一个 bean 定义指定自动装配模式</li><li>autowire设置值<ul><li>no：不开启</li><li>byName: 根据bean的id/name，注入到对应的属性里面</li><li>byType：根据bean需要注入的类型，注入到对应的属性里面<ul><li>如果按照类型注入，存在2个以上相同类型的bean的话会抛异常<code>expected single matching bean but found 2</code></li></ul></li></ul></li><li>constructor: 通过构造函数注入，需要这个实体类中包含这个类型的构造函数</li></ul></li><li><p>实例：videoOrder通过三种方式自动注入video</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.VideoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;bean name="videoOrder" class="club.ldclass.spring.domain.VideoOrder" autowire="byType">--></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;bean name="videoOrder" class="club.ldclass.spring.domain.VideoOrder" autowire="constructor">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcdefg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5.X快速入门</title>
      <link href="2020/11/24/spring5-x-kuai-su-ru-men/"/>
      <url>2020/11/24/spring5-x-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="一、spring框架"><a href="#一、spring框架" class="headerlink" title="一、spring框架"></a>一、spring框架</h3><ul><li><p>轻量级的 DI / IoC 和 AOP 容器的开源框架</p><ul><li><code>https://spring.io/projects/spring-framework</code></li></ul></li><li><p>用途</p><ul><li>用于管理创建和组装对象之间的依赖关系</li><li>面向切面编程（AOP）可以解耦核心业务和边缘业务的关系</li><li>场景：用户调用下单购买视频接口，需要判断登录，拦截器是AOP思想的一种实现<ul><li>使用前：代码写逻辑，每次下单都调用方法判断，多个方法需要判断登录则都需要登录方法判断</li><li>使用后：根据一定的方法或者路径规则进行判断是否要调用，降低代码耦合度</li></ul></li><li>包含java大型项目里面常见解决方案 web层、业务层、数据访问层等</li><li>极其便利的整合其他主流技术栈，比如redis、mq、mybatis、jpa</li><li>社区庞大和活跃，在微服务、大数据、云计算都有对应的组件</li></ul></li></ul><h3 id="二、IDEA-Maven-Spring5-X项目创建"><a href="#二、IDEA-Maven-Spring5-X项目创建" class="headerlink" title="二、IDEA+Maven+Spring5.X项目创建"></a>二、IDEA+Maven+Spring5.X项目创建</h3><ul><li>创建maven项目</li><li>添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-context --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-core --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-beans --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建配置文件<code>applicationContext.xml</code><ul><li>添加bean配置</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取bean</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Video video <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、ApplicationContext-xml配置文件"><a href="#三、ApplicationContext-xml配置文件" class="headerlink" title="三、ApplicationContext.xml配置文件"></a>三、ApplicationContext.xml配置文件</h3><ul><li>bean标签<ul><li>id属性：指定Bean的名称，在Bean被别的类依赖时使用</li><li>name属性：用于指定Bean的别名，如果没有id，也可以用name</li><li>class属性：用于指定Bean的来源，要创建的Bean的class类，需要全限定名</li></ul></li><li>很多配置，比如aop、beans生命周期</li></ul><h3 id="四、IOC-容器"><a href="#四、IOC-容器" class="headerlink" title="四、IOC 容器"></a>四、IOC 容器</h3><ul><li>IOC：<code>Inverse of Control（控制反转）</code>是一种设计思想 ，将原本在程序中手动创建对象的流程，交由Spring框架来管理。<ul><li>核心：把创建对象的控制权反转给Spring框架，对象的生命周期由Spring统一管理</li></ul></li><li>把<code>spring ioc</code> 当成一个容器，里面存储管理的对象称为Bean(类实例)</li></ul><h3 id="五、DI依赖注入"><a href="#五、DI依赖注入" class="headerlink" title="五、DI依赖注入"></a>五、DI依赖注入</h3><ul><li><p>DI：<code>Dependency Injection</code> ,依赖注入。</p><ul><li>IOC容器在运行期间，动态地将对象某种依赖关系注入到对象之中，比如视频订单对象，依赖于视频对象</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.Video<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoOrder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.spring.domain.VideoOrder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcdefg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--videoOrder依赖于video--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoOrder videoOrder <span class="token operator">=</span> <span class="token punctuation">(</span>VideoOrder<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"videoOrder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可同时获得videoOrder和video两个bean的属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>videoOrder<span class="token punctuation">.</span><span class="token function">getOutTradeNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>videoOrder<span class="token punctuation">.</span><span class="token function">getVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3.X整合Mysql数据库事务</title>
      <link href="2020/11/23/mybatis3-x-zheng-he-mysql-shu-ju-ku-shi-wu/"/>
      <url>2020/11/23/mybatis3-x-zheng-he-mysql-shu-ju-ku-shi-wu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MyBatis3.x 的事务管理形式</p></blockquote><ul><li><p>使用JDBC的事务管理</p><ul><li>使用<code>java.sql.Connection</code>对象完成对事务的提交<code>（commit()）</code>、回滚<code>（rollback()）</code>、关闭<code>(close()）</code></li></ul></li><li><p>使用MANAGED的事务管理</p><ul><li>MyBatis自身不会去实现事务管理，而让程序的容器如<code>（Spring, JBOSS）</code>来实现对事务的管理</li></ul></li><li><p>事务工厂<code>TransactionFactory</code>的两个实现类</p><ul><li>JdbcTransactionFactory-&gt;JdbcTransaction</li><li>ManagedTransactionFactory-&gt;ManagedTransaction</li></ul></li><li><p>注意：如果不是web程序，然后使用的事务管理形式是MANAGED, 那么将没有事务管理功能</p></li></ul><blockquote><p>Innodb和MyISAM引擎的区别</p></blockquote><table><thead><tr><th align="center">区别项</th><th align="center">Innodb</th><th align="center">myisam</th></tr></thead><tbody><tr><td align="center">事务</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">锁粒度</td><td align="center">行锁，适合高并发</td><td align="center">表锁，不适合高并发</td></tr><tr><td align="center">是否默认</td><td align="center">默认</td><td align="center">非默认</td></tr><tr><td align="center">支持外键</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">适合场景</td><td align="center">读写均衡，写大于读场景，需要事务</td><td align="center">读多写少场景，不需要事务</td></tr><tr><td align="center">全文索引</td><td align="center">可以通过插件实现，更多使用ElasticSearch</td><td align="center">支持全文索引</td></tr></tbody></table><blockquote><p>MyBatis3.x 的事务控制</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"config/mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建Session工厂</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Session</span>        SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取mapper</span>            VideoMapper videoMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>VideoMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Video video <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            video<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"测试事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            videoMapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模拟异常</span>            <span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提交</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回滚</span>            sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3.X多级缓存和懒加载</title>
      <link href="2020/11/23/mybatis3-x-duo-ji-huan-cun-he-lan-jia-zai/"/>
      <url>2020/11/23/mybatis3-x-duo-ji-huan-cun-he-lan-jia-zai/</url>
      
        <content type="html"><![CDATA[<h3 id="一、一级缓存"><a href="#一、一级缓存" class="headerlink" title="一、一级缓存"></a>一、一级缓存</h3><ul><li><p>缓存</p><ul><li>程序经常要调用的对象存在内存中,方便其使用时可以快速调用,不必去数据库或者其他持久化设备中查询，主要就是提高性能</li></ul></li><li><p>Mybatis一级缓存</p><ul><li>简介：一级缓存的作用域是<code>SQLSession</code>，同一个<code>SqlSession</code>中执行相同的<code>SQL</code>查询(相同的<code>SQL</code>和参数)，第一次会去查询数据库并写在缓存中，第二次会直接从缓存中取</li><li>基于<code>PerpetualCache</code> 的 <code>HashMap</code>本地缓存</li><li>默认开启一级缓存</li></ul></li><li><p>失效策略：当执行<code>SQL</code>时候两次查询中间发生了增删改的操作，即<code>insert、update、delete</code>等操作，<code>commit</code>后会清空该<code>SQLSession</code>缓存; 比如<code>sqlsession</code>关闭，或者清空等</p></li><li><p>测试</p></li></ul><pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">//连续调用两次selectById(44),控制台只打印一次sql</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//调用接口,通过mapper.xml</span>                Video video <span class="token operator">=</span> videoMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、二级缓存"><a href="#二、二级缓存" class="headerlink" title="二、二级缓存"></a>二、二级缓存</h3><ul><li><code>Mybatis</code>二级缓存<ul><li>简介：二级缓存是<code>namespace</code>级别的，多个<code>SqlSession</code>去操作同一个<code>namespace</code>下的Mapper的<code>sql</code>语句，多个<code>SqlSession</code>可以共用二级缓存,如果两个<code>mapper</code>的<code>namespace</code>相同，（即使是两个<code>mapper</code>，那么这两个<code>mapper</code>中执行<code>sql</code>查询到的数据也将存在相同的二级缓存区域中，但是最后是每个<code>Mapper</code>单独的名称空间）</li><li>基于<code>PerpetualCache</code>的<code>HashMap</code>本地缓存，可自定义存储源，如<code>Ehcache/Redis</code>等</li><li>默认是没有开启二级缓存</li><li>操作流程：第一次调用某个<code>namespace</code>下的<code>SQL</code>去查询信息，查询到的信息会存放该<code>mapper</code>对应的二级缓存区域。 第二次调用同个<code>namespace</code>下的<code>mapper</code>映射文件中相同的<code>sql</code>去查询信息，会去对应的二级缓存内取结果失效策略：执行同个<code>namespace</code>下的<code>mapepr</code>映射文件中增删改<code>sql</code>，并执行了<code>commit</code>操作,会清空该二级缓存</li><li>注意：实现二级缓存的时候，<code>MyBatis</code>建议返回的<code>POJO</code>是可序列列化的， 也就是建议实体类实现<code>Serializable</code>接口</li><li>缓存淘汰策略：会使用默认的<code>LRU</code>算法来收回（最近最少使用的）</li></ul></li><li>如何开启某个二级缓存<code>mapper.xml</code>里面配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--开启mapper的namespace下的二级缓存--></span><span class="token comment" spellcheck="true">&lt;!--eviction:代表的是缓存回收策略，常见下面两种。(1) LRU,最近最少使用的，最长时间不用的对象(2) FIFO,先进先出，按对象进入缓存的顺序来移除他们flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果不配置，当SQL被执行的时候才会去刷新缓存。size:引用数目，代表缓存最多可以存储多少个对象，设置过大会导致内存溢出readOnly:只读，缓存数据只能读取而不能修改，默认值是false--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span> <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100000<span class="token punctuation">"</span></span> <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--全局配置：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--这个配置使全局的映射器(二级缓存)启⽤用或禁用缓存，全局总开关，这里关闭，mapper中开启了也没用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要控制全局mapper里面某个方法不使用缓存，可以配置 <code>useCache="false"</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Video<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base_video_field<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        from video        where id = #{video_id,jdbcType=INTEGER}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试结果：控制台只打印一次sql,打印两次video</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sqlSessionCacheDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"config/mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建Session工厂</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Session</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SqlSession sqlSession1 <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取mapper</span>            VideoMapper videoMapper1 <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>VideoMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Video video1 <span class="token operator">=</span> videoMapper1<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession1<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlSession sqlSession2 <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取mapper</span>            VideoMapper videoMapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>VideoMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Video video2 <span class="token operator">=</span> videoMapper2<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession2<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一级缓存和二级缓存使用顺序    <ul><li>优先查询二级缓存-&gt;查询一级缓存-&gt;数据库</li></ul></li></ul><h3 id="三、懒加载"><a href="#三、懒加载" class="headerlink" title="三、懒加载"></a>三、懒加载</h3><ul><li><p>懒加载： 按需加载，先从单表查询，需要时再从关联表去关联查询，能大大提高数据库性能,并不是所有场景下使用懒加载都能提高效率</p></li><li><p><code>Mybatis</code>懒加载： <code>resultMap</code>里面的<code>association</code>、<code>collection</code>有延迟加载功能</p></li><li><p>配置</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--全局参数设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--延迟加载总开关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--将aggressiveLazyLoading设置为false表示按需加载，默认为true--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--懒加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrderResultMapLazy<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_trade_no<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total_fee<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totalFee<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_title<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoTitle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--        select： 指定延迟加载需要执行的statement id        column： 和select查询关联的字段        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByUserId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--一对一订单管理查询，订单内部包含用户属性 懒加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryVideoOrderListLazy<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrderResultMapLazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select            o.id id,            o.user_id,            o.out_trade_no,            o.create_time,            o.state,            o.total_fee,            o.video_id,            o.video_title         from video_order o    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByUserId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试结果：只打印mapper中，queryVideoOrderListLazy的sql</span>List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> videoOrders <span class="token operator">=</span> videoOrderMapper<span class="token punctuation">.</span><span class="token function">queryVideoOrderListLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>videoOrders<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getVideoTitle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试结果：先打印mapper中，queryVideoOrderListLazy的sql，然后根据查询结果中的user_id查询用户，打印findUserByUserId的sql，user_id相同的，执行一级缓存</span>List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> videoOrders <span class="token operator">=</span> videoOrderMapper<span class="token punctuation">.</span><span class="token function">queryVideoOrderListLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>videoOrders<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>videoOrder <span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>videoOrder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>dubug</code>模式测试懒加载不准确，直接<code>run</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3.X复杂sql查询</title>
      <link href="2020/11/23/mybatis3-x-fu-za-sql-cha-xun/"/>
      <url>2020/11/23/mybatis3-x-fu-za-sql-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、resultMap"><a href="#一、resultMap" class="headerlink" title="一、resultMap"></a>一、resultMap</h3><ul><li>Mybatis的SQL语句返回结果有两种<ul><li>resultType<ul><li>查询出的字段在相应的pojo中必须有和它相同的字段对应，或者基本数据类型</li><li>适合简单查询</li></ul></li><li>resultMap<ul><li>需要自定义字段，或者多表查询，一对多等关系，比resultType更强大</li><li>适合复杂查询</li></ul></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--        单表resultMap 1对1        id:指定查询列的唯一标识        column:数据库字段的名称        property：pojo类的属性    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_title<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>coverImg<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover_img<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBaseFieldByIdWithResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,title as video_title,summary,cover_img from video where id = #{video_id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、association"><a href="#二、association" class="headerlink" title="二、association"></a>二、association</h3><ul><li>association: 映射到POJO的某个复杂类型属性，比如订单order对象里面包含 user对象··</li></ul><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrderResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_trade_no<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total_fee<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totalFee<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_title<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoTitle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            association:配置属性1对1            property：对应videoOrder里的user属性名            javaType：这个属性的类型        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head_img<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headImg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--一对一订单管理查询，订单内部包含用户属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryVideoOrderList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrderResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select            o.id id,            o.user_id,            o.out_trade_no,            o.create_time,            o.state,            o.total_fee,            o.video_id,            o.video_title,            u.name,            u.head_img,            u.create_time,            u.phone         from video_order o left join user u on u.id = o.user_id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、collection"><a href="#三、collection" class="headerlink" title="三、collection"></a>三、collection</h3><ul><li>collection: 一对多查询结果查询映射，比如user有多个订单</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserOrderResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head_img<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headImg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            property：pojo类中集合类属性的名称            ofType：集合里面的pojo对象        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoOrders<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VideoOrder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置主键，管理order的唯一表示--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out_trade_no<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outTradeNo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total_fee<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totalFee<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video_title<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoTitle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserOrder<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserOrderResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select            u.id,            u.name,            u.head_img,            u.create_time,            u.phone,            o.id order_id,            o.user_id,            o.out_trade_no,            o.create_time,            o.state,            o.total_fee,            o.video_id,            o.video_title        from user u left join video_order o on u.id = o.user_id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、ResultMap复杂对象查询总结"><a href="#四、ResultMap复杂对象查询总结" class="headerlink" title="四、ResultMap复杂对象查询总结"></a>四、ResultMap复杂对象查询总结</h3><ul><li><p>association 映射的是一个pojo类，处理一对一的关联关系。</p></li><li><p>collection 映射的一个集合列表，处理的是一对多的关联关系</p></li><li><p>模板</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>唯一的标识<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>映射的pojo对象<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表的主键字段,或查询语句中的别名字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>映射pojo对象的主键属性<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表的一个字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>映射到pojo对象的一个属性<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo的一个对象属性<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo关联的pojo对象<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关联pojo对象对应表的主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关联pojo对象的属性<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表的字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关联pojo对象的属性<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 集合中的property 需要为oftype定义的pojo对象的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo的集合属性名称<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合中单个的pojo对象类型<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合中pojo对象对应在表的主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合中pojo对象的主键属性<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>任意表的字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合中的pojo对象的属性<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3.X常见配置</title>
      <link href="2020/11/23/mybatis3-x-chang-jian-pei-zhi/"/>
      <url>2020/11/23/mybatis3-x-chang-jian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mybatis-config.xml常见配置</p></blockquote><ul><li><p>核心配置文件（按照dom节点顺序要求，不然报错）</p></li><li><p>官方文档：<code>https://mybatis.org/mybatis-3/zh/configuration.html#</code></p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理理器器）objectFactory（对象⼯工⼚厂）plugins（插件，少⽤用）environments（环境配置，不不配多环境，基本在Spring⾥里里⾯面配置）environment（环境变量量）transactionManager（事务管理理器器）dataSource（数据源）databaseIdProvider（数据库⼚厂商标识）mappers（映射器器）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Mybatis的查询类别名typeAlias</p></blockquote><ul><li><p>typeAlias<br>类型别名，给类取个别名，mapper.xml中就可以不用输入类的全限定名</p></li><li><p>本身就内置很多别名，比如Integer、String、List、Map 等</p></li><li><p>mybatis-config.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--位于settings之后，environments之前--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--给某个实体类取别名--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="club.ldclass.mybatis.domain.Video" alias="Video"/>--></span>        <span class="token comment" spellcheck="true">&lt;!--指定某个包下的实体类均以文件名为别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例：Videomapper.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--&lt;select id="selectById" parameterType="java.lang.Integer" resultType="club.ldclass.mybatis.domain.Video">--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from video        where id = #{video_id,jdbcType=INTEGER}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MyBatis3.X的Sql片段</p></blockquote><ul><li><p>select * 是不推荐的，查询性能低</p></li><li><p>sql片段</p><ul><li>根据业务需要，自定制要查询的字段，并可以复用</li></ul></li><li><p>例：VideoMapper.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base_video_field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,title,summary,cover_img    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base_video_field<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        from video        where id = #{video_id,jdbcType=INTEGER}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3.X基础</title>
      <link href="2020/11/23/mybatis3-x-ji-chu/"/>
      <url>2020/11/23/mybatis3-x-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原生jdbc访问数据库缺点</p></blockquote><ul><li>原生jdbc缺点<ul><li>每次要加载驱动，连接信息是硬编码</li><li><code>sql</code>和<code>java</code>代码耦合一起，改动不易</li><li>参数设置缺少灵活性</li><li>处理结果集麻烦，不能自动映射到实体类</li><li>连接资源不能复用，资源浪费</li></ul></li></ul><blockquote><p>ORM框架</p></blockquote><ul><li><code>ORM</code>框架<ul><li>对数据库的表和<code>POJO(Plain Ordinary Java Object)</code>Java对象的做映射的框架</li></ul></li><li>市面上的<code>ORM</code>框架<ul><li><code>hibernate (ssh)</code><ul><li>比较笨重，<code>sql</code>调优麻烦</li></ul></li><li><code>JPA - Spring Data JPA</code><ul><li><code>Java Persistence API</code>, 轻量级，部分中小项目适合</li></ul></li><li><code>mybatis</code><ul><li>半自动化(半<code>ORM</code>框架)，便于写<code>sql</code>，轻量级，目前广泛使用</li></ul></li></ul></li></ul><blockquote><p>MyBatis3.X基础知识</p></blockquote><ul><li><p><code>Apahce</code>的一个开源项目</p></li><li><p>一款优秀的持久层框架，它支持自定义 <code>SQL</code>、存储过程以及高级映射</p></li><li><p>免除了几乎所有的 <code>JDBC</code>代码以及设置参数和获取结果集的工作</p></li><li><p>通过简单的 <code>XML</code> 或注解来配置和映射<code>Java</code>对象到数据库中的记录</p></li><li><p>官方地址：<code>https://mybatis.org/mybatis-3/</code></p></li><li><p>依赖地址: <code>https://mvnrepository.com/artifact/org.mybatis/mybatis/3.5.4</code></p></li><li><p>核心流程:<code>https://mybatis.org/mybatis-3/zh/getting-started.html</code></p><ul><li>每个基于 <code>MyBatis</code> 的应用都是以一个 <code>SqlSessionFactory</code>的实例为核心</li><li><code>SqlSessionFactory</code>的实例可以通过<code>SqlSessionFactoryBuilder</code> 获得</li><li><code>SqlSessionFactoryBuilder</code> 可以从 XML 配置文件或一个预先配置的 <code>Configuration</code> 实例来构建出<code>SqlSessionFactory</code>实例</li><li>工厂设计模式里面需要获取<code>SqlSession</code> ，里面提供了在数据库执行<code>SQL</code> 命令所需的所有方法</li></ul></li><li><p>流程图</p></li></ul><img src="/2020/11/23/mybatis3-x-ji-chu/mybatis.png" title="mybatis流程图"><blockquote><p>MyBatis测试</p></blockquote><ul><li>添加相关maven依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">          <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写 <code>mybatis-config.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--格式基本固定，修改url,username,password即可 --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--注意：pom.xml引入的mysql依赖版本号为8.x,而数据库是5.x,则url中加入serverTimezone=UTC，标明时区，否则会报错 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/online_xdclass?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;useSSL<span class="token punctuation">=</span>false&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper/VideoMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置测试<code>VideoMapper.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--命名空间，保持唯一，与dao层的mapper一致可以映射 sql语句到对应的方法名称和参数、返回类型MyBatis是使用接口动态代理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>指定dao层mapper的命名空间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.dao.VideoMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        statement sql        id：当前mapper需要唯一,与dao层mapper中的接口名称一致        resultType：sql查询结果集的封装        #{value}：参数要与dao层mapper中的接口参数一致        #{value}：推荐使用        ${value}：不推荐使用，存在sql注入风险     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>club.ldclass.mybatis.domain.Video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from video where id = #{video_id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写测试实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> String coverImg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 价格     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 评分     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> point<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> summary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSummary</span><span class="token punctuation">(</span>String summary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>summary <span class="token operator">=</span> summary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCoverImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> coverImg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCoverImg</span><span class="token punctuation">(</span>String coverImg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coverImg <span class="token operator">=</span> coverImg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreateTime</span><span class="token punctuation">(</span>Date createTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token keyword">double</span> point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Video{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", title='"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", summary='"</span> <span class="token operator">+</span> summary <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", coverImg='"</span> <span class="token operator">+</span> coverImg <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", createTime="</span> <span class="token operator">+</span> createTime <span class="token operator">+</span>                <span class="token string">", point="</span> <span class="token operator">+</span> point <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写测试<code>videoMapper</code></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 视频接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @desc: xml方式根据视频Id查找视频对象     * @param videoId 视频id     * @ver: 1.0     */</span>    Video <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"video_id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> videoId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @desc: 注解方式查询全部视频列表     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from video"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Video<span class="token operator">></span> <span class="token function">selectVideoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main函数测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"config/mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建Session工厂</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Session</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取mapper</span>            VideoMapper videoMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>VideoMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用接口,通过mapper.xml</span>            Video video <span class="token operator">=</span> videoMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用接口,通过注解</span>            List<span class="token operator">&lt;</span>Video<span class="token operator">></span> videos <span class="token operator">=</span> videoMapper<span class="token punctuation">.</span><span class="token function">selectVideoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>videos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合定时任务和异步任务</title>
      <link href="2020/11/23/springboot2-x-zheng-he-ding-shi-ren-wu-he-yi-bu-ren-wu/"/>
      <url>2020/11/23/springboot2-x-zheng-he-ding-shi-ren-wu-he-yi-bu-ren-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、定时任务Schedule"><a href="#一、定时任务Schedule" class="headerlink" title="一、定时任务Schedule"></a>一、定时任务Schedule</h3><ul><li><p>定时任务，使用场景</p><ul><li>某个时间定时处理某个任务</li><li>发邮件、短信等</li><li>消息提醒</li><li>订单通知</li><li>统计报表系统<br>…</li></ul></li><li><p>常见定时任务</p><ul><li>Java自带的<code>java.util.Timer</code>类配置比较麻烦，时间延后问题</li><li><code>Quartz</code>框架: 配置更简单,xml或者注解，适合分布式或者大型调度作业</li><li>SpringBoot框架自带</li></ul></li><li><p>SpringBoot使用注解方式开启定时任务</p><ul><li>启动类里面<code>@EnableScheduling</code>开启定时任务，自动扫描</li><li>定时任务业务类 加注解 <code>@Component</code>被容器扫描</li><li>定时执行的方法加上注解<code>@Scheduled(fixedRate=2000)</code> 定期执行一次</li></ul></li><li><p>定时任务表达式配置</p><ul><li><code>cron</code> 定时任务表达式 <code>@Scheduled(cron="*/1 * * * * *")</code> 表示每秒</li><li><code>crontab</code> 工具<code>https://tool.lu/crontab/</code></li><li><code>fixedRate</code>: 定时多久执行一次（上一次开始执行时间点后xx秒再次执行；）</li><li><code>fixedDelay</code>: 上一次执行结束时间点后xx秒再次执行</li></ul></li></ul><blockquote><p>实例</p></blockquote><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启定时任务</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoProjectApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试定时器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoOrderTask</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@Scheduled(fixedRate = 4000) //4 与任务开始时间间隔4秒再次执行</span>    <span class="token comment" spellcheck="true">//@Scheduled(fixedDelay = 4000) //4+2 与任务结束时间间隔4秒后再次执行</span>    <span class="token comment" spellcheck="true">//@Scheduled(cron = "*/4 * * * * *") //每4秒执行一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"当前交易额="</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、异步任务EnableAsync"><a href="#二、异步任务EnableAsync" class="headerlink" title="二、异步任务EnableAsync"></a>二、异步任务EnableAsync</h3><ul><li><p>异步任务和使用场景：</p><ul><li>适用于处理log、发送邮件、短信……等</li></ul></li><li><p>启动类里面使用<code>@EnableAsync</code>注解开启功能，自动扫描</p></li><li><p>定义异步任务类并使用@Component标记组件被容器扫描,异步方法加上<code>@Async</code>，也可以在整个类加<code>@Async</code>，表示这个类所有方法均为异步</p></li><li><p>异步任务使用<code>Future</code>获取结果</p><ul><li>定义异步任务类需要获取结果</li><li>注意点：<ul><li>要把异步任务封装到类里面，不能直接写到Controller</li><li>增加Future 返回结果 <ul><li><code>AsyncResult("task执行完成");</code></li></ul></li><li>如果需要拿到结果，需要判断全部任务 <code>task.isDone()</code></li></ul></li></ul></li></ul><blockquote><p>实例</p></blockquote><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启异步任务</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoProjectApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异步任务封装</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 异步任务 */</span><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//表示此类所有方法均为异步</span><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>4000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>4000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>4000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">task4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>4000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"任务4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">task5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>4000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异步任务测试类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AsyncTask asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test_async"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测试异步任务，没有返回结果</span><span class="token comment" spellcheck="true">//        asyncTask.task1();</span><span class="token comment" spellcheck="true">//        asyncTask.task2();</span><span class="token comment" spellcheck="true">//        asyncTask.task3();</span>        <span class="token comment" spellcheck="true">//测试异步任务，有返回结果</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> task4 <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">task4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>User<span class="token operator">></span> task5 <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">task5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>task4<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> task5<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    String taskResult <span class="token operator">=</span> task4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>taskResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                    User user <span class="token operator">=</span> task5<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Schedule </tag>
            
            <tag> Async </tag>
            
            <tag> Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合模板引擎thymeleaf和FK</title>
      <link href="2020/11/23/springboot2-x-zheng-he-mo-ban-yin-qing-thymelea-he-fk/"/>
      <url>2020/11/23/springboot2-x-zheng-he-mo-ban-yin-qing-thymelea-he-fk/</url>
      
        <content type="html"><![CDATA[<blockquote><p>thymeleaf</p></blockquote><ul><li>pom.xml配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--thymeleaf--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sourceforge.nekohtml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nekohtml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>yml配置</li></ul><pre class="line-numbers language-yml"><code class="language-yml">spring:  profiles:    #启用的配置文件    active: dev  #不配置，默认是此加载顺序  resources:    static-locations: classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/  ################ thymeleaf配置 开始  ################  thymeleaf:    #开发时关闭缓存，不然无法看到实时页面    cache: false    mode: HTML5    #前缀    prefix: classpath:/templates/    #编码    encoding: utf-8    #类型    servlet:      content-type: text/html    #后缀    suffix: .html  ################ thymeleaf配置 结束  ################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>html配置</li></ul><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X过滤器/拦截器/监听器</title>
      <link href="2020/11/23/springboot2-x-guo-lu-qi-lan-jie-qi-jian-ting-qi/"/>
      <url>2020/11/23/springboot2-x-guo-lu-qi-lan-jie-qi-jian-ting-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SpringBoot2-X过滤器"><a href="#一、SpringBoot2-X过滤器" class="headerlink" title="一、SpringBoot2.X过滤器"></a>一、SpringBoot2.X过滤器</h3><ul><li>SpringBoot2.X里面的过滤器</li></ul><pre class="line-numbers language-java"><code class="language-java">ApplicationContextHeaderFilterOrderedCharacterEncodingFilterOrderedFormContentFilterOrderedRequestContextFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>优先级</p><ul><li>Ordered.HIGHEST_PRECEDENCE Ordered.LOWEST_PRECEDENCE</li><li>低位值意味着更高的优先级 Higher values are interpreted as lower priority</li></ul></li><li><p>自定义Filter，避免和默认的Filter优先级一样，不然会冲突</p></li><li><p>注册Filter配置两种方式</p><ul><li>bean FilterRegistrationBean</li><li>Servlet3.0 webFileter</li></ul></li></ul><h3 id="二、Servlet3-0的注解开发自定义Filter"><a href="#二、Servlet3-0的注解开发自定义Filter" class="headerlink" title="二、Servlet3.0的注解开发自定义Filter"></a>二、Servlet3.0的注解开发自定义Filter</h3><ul><li><p>使用Servlet3.0的注解进行配置步骤</p><ul><li>启动类里面增加 @ServletComponentScan，进行扫描</li><li>新建一个Filter类，implements Filter，并实现对应的接口</li><li>@WebFilter 标记一个类为filter，被spring进行扫描</li><li>urlPatterns：拦截规则，支持正则</li><li>控制chain.doFilter的方法的调用，来实现是否通过放行</li><li>不放行，web应用resp.sendRedirect(“/index.html”) 或者 返回json字符串</li></ul></li><li><p>使用场景：权限控制、⽤用户登录状态控制等</p></li><li><p>实例：用户登录过滤器</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试UserDao，提供数据</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xdclass-lw"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"xdclass-lw"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建videoOrderController</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/pri/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoOrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token string">"下单成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//启动类添加注解</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoProjectApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义filter,并返回未登录/token失效错误码</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/api/v1/pri/*"</span><span class="token punctuation">,</span> filterName <span class="token operator">=</span> <span class="token string">"LoginFilter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 序列化json     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">private</span> ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @desc: 容器加载时调用     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init LoginFilter=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter LoginFilter=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断token是否合法 TODO</span>            User user <span class="token operator">=</span> UserServiceImpl<span class="token punctuation">.</span>sessionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                JsonData jsonData <span class="token operator">=</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"登录失败，token无效"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//序列化json</span>                String jsonStr <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renderJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            JsonData jsonData <span class="token operator">=</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"未登录"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//序列化json</span>            String jsonStr <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">renderJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 工具类，将json传给前台     * @param response     * @param json     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">renderJson</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 容器销毁时调用     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy LoginFilter==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Servlet3-0的注解自定义原生Servlet"><a href="#三、Servlet3-0的注解自定义原生Servlet" class="headerlink" title="三、Servlet3.0的注解自定义原生Servlet"></a>三、Servlet3.0的注解自定义原生Servlet</h3><ul><li>javaweb的使用doPost和doGet方法，使用Servlet3.0替代更轻量级</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 使用Servlet3.0开发原生接口 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userServlet"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this is my custom servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Servlet3-0的注解自定义原生Listener监听器"><a href="#四、Servlet3-0的注解自定义原生Listener监听器" class="headerlink" title="四、Servlet3.0的注解自定义原生Listener监听器"></a>四、Servlet3.0的注解自定义原生Listener监听器</h3><ul><li>监听器：应用启动监听器，会话监听器，请求监听器</li><li>常用监听器：<ul><li>ServletContextListener 应用启动监听</li><li>HttpSessionLisener 会话监听</li><li>ServletRequestListener 请求监听</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 应用上下文监听器,资源初始化等 */</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationListener</span>  <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextInitialized======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContextEvent======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 请求监听，日志打印等 */</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletRequestEvent=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletRequestEvent=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 会话监听 */</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HttpSessionEvent=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HttpSessionEvent=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、Spingboot2-x配置拦截器"><a href="#五、Spingboot2-x配置拦截器" class="headerlink" title="五、Spingboot2.x配置拦截器"></a>五、Spingboot2.x配置拦截器</h3><ul><li><p>拦截器： 和过滤器用途基本类似</p></li><li><p>SpringBoot2.x使用步骤</p><ul><li>SpringBoot2.X 配置拦截器 implements WebMvcConfigurer<ul><li>自定义拦截器 HandlerInterceptor</li><li>preHandle：调用Controller某个方法之前</li><li>postHandle：Controller之后调用，视图渲染之前，如果控制器Controller出现了异常，则不会执行此方法</li><li>afterCompletion：不管有没有异常，这个afterCompletion都会被调用，用于资源清理</li></ul></li><li>按照注册顺序进行拦截，先注册，先拦截</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 自定义拦截器配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册拦截器，可注册多个,先注册先拦截</span><span class="token comment" spellcheck="true">//        调用接口控制台打印</span><span class="token comment" spellcheck="true">//        loginInterceptor preHandle</span><span class="token comment" spellcheck="true">//        TwoInterceptor preHandle</span><span class="token comment" spellcheck="true">//        TwoInterceptor postHandle</span><span class="token comment" spellcheck="true">//        loginInterceptor postHandle</span><span class="token comment" spellcheck="true">//        TwoInterceptor afterCompletion</span><span class="token comment" spellcheck="true">//        loginInterceptor afterCompletion</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">loginIntercepter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//配置拦截路径</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/v1/pri/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TwoInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//配置拦截路径</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/v1/pri/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> loginInterceptor <span class="token function">loginIntercepter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">loginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 登录拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">loginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 序列化json     */</span>    <span class="token keyword">private</span> ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loginInterceptor preHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断token是否合法 TODO</span>            User user <span class="token operator">=</span> UserServiceImpl<span class="token punctuation">.</span>sessionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                JsonData jsonData <span class="token operator">=</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"登录失败，token无效"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//序列化json</span>                String jsonStr <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renderJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            JsonData jsonData <span class="token operator">=</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"未登录"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//序列化json</span>            String jsonStr <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">renderJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//return HandlerInterceptor.super.preHandle(request,response,handler);</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loginInterceptor postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerInterceptor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 工具类，将json传给前台     * @param response     * @param json     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">renderJson</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loginInterceptor afterCompletion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerInterceptor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>拦截器不生效常见问题：</p><ul><li>是否有加<code>@Configuration</code></li><li>拦截路径是否有问题 <code>**</code> 和 <code>*</code></li><li>拦截器最后路径一定要<code>/**</code> 如果是目录的话则是 <code>/*/</code></li></ul></li><li><p>场景：权限控制、用户登录状态控制等</p></li><li><p>和Filter过滤器的区别</p><ul><li>Filter和Interceptor二者都是AOP编程思想的体现，功能基本都可以实现</li><li>拦截器功能更强大，Filter能做的事情它都能做</li><li>Filter只在Servlet前后起作用，而Interceptor够深入到方法前后、异常抛出前后等</li><li>filter依赖于Servlet容器即web应用中，而Interceptor不依赖于Servlet容器所以可以运行在多种环境。</li><li>在接口调用的生命周期里，Interceptor可以被多次调用，而Filter只能在容器初始化时调用一次。</li><li>Filter和Interceptor的执行顺序<ul><li>过滤前-&gt;拦截前-&gt;action执行-&gt;拦截后-&gt;过滤后</li></ul></li></ul></li><li><p>配置不拦截某些路径</p></li></ul><pre class="line-numbers language-java"><code class="language-java">registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginIntercepter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/v1/pri/**"</span><span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span>配置不拦截某些路径，比如静态资源    <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**/*.html"</span><span class="token punctuation">,</span><span class="token string">"/**/*.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
            <tag> Listener </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X全局异常处理</title>
      <link href="2020/11/23/springboot2-x-quan-ju-yi-chang-chu-li/"/>
      <url>2020/11/23/springboot2-x-quan-ju-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>优点</p></blockquote><ul><li><p>统一的错误页面或者错误码</p></li><li><p>对⽤用户更友好</p></li><li><p>Springboot2.X配置全局异常</p><ul><li>类添加注解<ul><li>@ControllerAdvice，如果需要返回json数据，则方法需要加@ResponseBody</li><li>@RestControllerAdvice, 默认返回json数据，方法不需要加@ResponseBody</li></ul></li><li>方法添加处理器<ul><li>捕获全局异常,处理所有不可知的异常</li><li>@ExceptionHandler(value=Exception.class)</li></ul></li></ul></li></ul><blockquote><p> 创建自定义异常处理器,返回json数据或者返回页面</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 自定义异常处理器 返回json数据 * @author: LD * @date: 2020-11-22 16:15 */</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExtHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    JsonData <span class="token function">handlerException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"服务端出问题了"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> NullPointerException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    JsonData <span class="token function">handlerException</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"空指针异常"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    JsonData <span class="token function">handlerException</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"算数运算异常"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 自定义异常处理器，返回页面 * @author: LD * @date: 2020-11-22 16:28 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExtHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    Object <span class="token function">handlerException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> NullPointerException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    Object <span class="token function">handlerException</span><span class="token punctuation">(</span>NullPointerException e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    Object <span class="token function">handlerException</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试TestController.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * .ArithmeticException: / by zero     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * .NullPointerException     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建测试返回页面</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 返回自定义异常界面，需要引入thymeleaf依赖(非必须，如果是简单的html界面则不用)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www/thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>异常信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 全局异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X单元测试</title>
      <link href="2020/11/22/springboot2-x-dan-yuan-ce-shi/"/>
      <url>2020/11/22/springboot2-x-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>软件开发测试流程</p></blockquote><ul><li>需求分析-&gt;设计-&gt;开发-&gt;测试-&gt;上线</li><li>测试里面的种类<ul><li>单元测试</li><li>常见问题：<ul><li>完成最小的软件设计单元的验证工作，目标是确保模块被正确的编码</li></ul></li><li>黑盒测试<ul><li>不考虑内部结构，主要测试功能是否满足需求</li></ul></li><li>白盒测试<ul><li>针对代码级别，测试开发工程师一般具备白盒测试能力，针对程序内部的逻辑结构进行代码级别的测试</li></ul></li><li>回归测试<ul><li>对原先提出的缺陷进行二次验证，开发人员修复后进行二次的验证</li></ul></li><li>集成测试<ul><li>测试模块和模块之间的整合，且测试主要的业务功能</li></ul></li><li>系统测试<ul><li>针对整个产品系统进行的测试，验证系统是否满足产品业务需求</li></ul></li></ul></li></ul><blockquote><p>SpringBoot2.X的单元测试</p></blockquote><ul><li>pom.xml引入相关依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--springboot程序测试依赖，如果是自动创建项目默认添加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在test目录，建立测试类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//底层用junit SpringJUnit4ClassRunner</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>XdvideoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//启动整个springboot工程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试After"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//断言，判断测试用例是否通过</span>        TestCase<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试Test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试Test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><pre class="line-numbers language-console"><code class="language-console">//test1这是测试before这是测试Afterjunit.framework.AssertionFailedError: Expected :1 //预计值Actual   :2 //目标值//test2这是测试before这是测试Test2这是测试After<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Springboot单元测试Controller-Service层接口</p></blockquote><ul><li>Controller层登录方法测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//底层用junit  SpringJUnit4ClassRunner</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//启动整个springboot工程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserController userController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JsonData jsonData  <span class="token operator">=</span> userController<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestCase<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>jsonData<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Service层查询全部订单接口测试</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> VideoService videoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TestList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Video<span class="token operator">></span> list <span class="token operator">=</span> videoService<span class="token punctuation">.</span><span class="token function">listVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestCase<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Springboot的MockMvc调用api层接口</p></blockquote><ul><li><p>如何测试Controller对外提供的接口</p><ul><li>增加类注解 @AutoConfigureMockMvc</li><li>注入一个MockMvc类</li><li>相关API ：<ul><li>perform执行一个RequestBuilder请求</li><li>andExpect：添加ResultMatcher-&gt;MockMvcResultMatchers验证规则</li><li>andReturn：最后返回相应的MvcResult-&gt;Response</li></ul></li></ul></li><li><p>实例，测试查询全部订单接口</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>DemoProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> VideoService videoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般只需要更换接口地址即可</span>        MvcResult mvcResult <span class="token operator">=</span> mockMvc                <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>MockMvcRequestBuilders                        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/v1/pub/video/list"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//判断是否是预期</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsonData工具类</title>
      <link href="2020/11/22/jsondata-gong-ju-lei/"/>
      <url>2020/11/22/jsondata-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: 封装JsonData工具类 * @author: LD * @date: 2020-11-22 14:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonData</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 状态码,0表示成功，-1表示失败     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 结果     */</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 错误描述     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JsonData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">JsonData</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> Object data<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 成功，传入数据     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 成功，传入数据     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 失败，传入描述信息     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 失败，传入描述信息,状态码     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 成功，传入数据,及描述信息     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span>Object data<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 成功，传入数据,及状态码     * @auth: LD     * @date: 2020/11/22     * @ver: 1.0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JsonData <span class="token function">buildSuccess</span><span class="token punctuation">(</span>Object data<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"JsonData{"</span> <span class="token operator">+</span>                <span class="token string">"code="</span> <span class="token operator">+</span> code <span class="token operator">+</span>                <span class="token string">", data="</span> <span class="token operator">+</span> data <span class="token operator">+</span>                <span class="token string">", msg='"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JSONDATA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSONDATA </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X监控Actuator</title>
      <link href="2020/11/22/springboot2-x-jian-kong-actuator/"/>
      <url>2020/11/22/springboot2-x-jian-kong-actuator/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X服务器主动推送技术</title>
      <link href="2020/11/22/springboot2-x-fu-wu-qi-zhu-dong-tui-song-ji-zhu/"/>
      <url>2020/11/22/springboot2-x-fu-wu-qi-zhu-dong-tui-song-ji-zhu/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 服务端常用推送技术</p></blockquote><ul><li>客户端轮询:ajax定时拉取</li><li>服务端主动推送:WebSocket（推荐使用，数据有变化才推送）<ul><li>全双工的，本质上是一个额外的tcp连接，建立和关闭时握手使用http协议，其他数据传输不使用http协议</li><li>更加复杂一些，适用于需要进行复杂双向数据通讯的场景</li></ul></li><li>服务端主动推送:SSE (Server Send Event) （定时推送，无论数据有没有变化）<ul><li>html5新标准，用来从服务端实时推送数据到浏览器端，</li><li>直接建立在当前http连接上，本质上是保持一个http长连接，轻量协议</li><li>简单的服务器数据推送的场景，使用服务器推送事件    </li><li>学习资料：<code>http://www.w3school.com.cn/html5/html_5_serversentevents.asp</code></li></ul></li></ul><blockquote><p>SpringBoot2.x整合SSE</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sse"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSEController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get_data"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第三方数据源调用</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"data: 行情"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//服务端推送sse,需要判断浏览器是否支持，可以去w3c查看</span>        <span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">'sse/get_data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X响应式编程</title>
      <link href="2020/11/22/springboot2-x-xiang-ying-shi-bian-cheng/"/>
      <url>2020/11/22/springboot2-x-xiang-ying-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SprinBoot2-x响应式编程"><a href="#一、SprinBoot2-x响应式编程" class="headerlink" title="一、SprinBoot2.x响应式编程"></a>一、SprinBoot2.x响应式编程</h3><ul><li>reactive响应式编程介绍</li><li>基础理解：<ul><li>依赖于事件，事件驱动(Event-driven)</li><li>一系列事件称为“流”</li><li>异步</li><li>非阻塞</li><li>观察者模式</li></ul></li><li>官网：<code>https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-webflux</code>    <ul><li>SpingBoot2底层是用spring5,开始支持响应式编程，Spring又是基于Reactor试下响应式。</li></ul></li><li>学习资料<ul><li>reactive-streams学习资料：<code>http://www.reactive-streams.org/</code></li><li>web-flux相关资料：<code>https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux</code></li></ul></li></ul><h3 id="二、webflux"><a href="#二、webflux" class="headerlink" title="二、webflux"></a>二、webflux</h3><ul><li><p>Spring WebFlux是Spring Framework 5.0中引入的新的反应式Web框架</p></li><li><p>Flux和Mono  User List<user></user></p><ul><li>简单业务而言：和其他普通对象差别不大，复杂请求业务，就可以提升性能</li><li>通俗理解：<ul><li>Mono 表示的是包含 0 或者 1 个元素的异步序列<ul><li>mono-&gt;单一对象 User     redis-&gt;用户ID-》唯一的用户Mono<user>  </user></li></ul></li><li>Flux 表示的是包含 0 到 N 个元素的异步序列<ul><li>flux-&gt;数组列表对象 List<user>   redis-&gt;男性用户-&gt;Flux<user></user></user></li></ul></li><li>Flux 和 Mono 之间可以进行转换</li></ul></li></ul></li><li><p>Spring WebFlux是Spring Framework 5.0中引入的新的响应式Web框架。与Spring MVC不同，它不需要Servlet API，是完全异步且无阻塞的，并通过<a href="https://projectreactor.io/" target="_blank" rel="noopener">Reactor项目</a>实现<a href="https://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a>规范。</p></li><li><p>Spring WebFlux有两种形式：功能性的和基于注释的。（官网）</p><ul><li>基于注释的模型非常类似于Spring MVC模型</li><li>功能变体“ WebFlux.fn”将路由配置与请求的实际处理分开</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一种</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{user}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{user}/customers"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">getUserCustomers</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{user}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第二种</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutingConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RouterFunction<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">monoRouterFunction</span><span class="token punctuation">(</span>UserHandler userHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/{user}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>getUser<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/{user}/customers"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>getUserCustomers<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/{user}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>deleteUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">getUserCustomers</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Spring WebFlux应用程序不严格依赖于Servlet API，因此它们不能作为war文件部署，也不能使用src/main/webapp目录</p></li><li><p>可以整合多个模板引擎    </p><ul><li>除了REST Web服务外，还可以使用Spring WebFlux提供动态HTML内容。</li><li>Spring WebFlux支持各种模板技术，包括Thymeleaf，FreeMarker</li></ul></li></ul><h3 id="三、SpringBoot2-X整合webflux"><a href="#三、SpringBoot2-X整合webflux" class="headerlink" title="三、SpringBoot2.X整合webflux"></a>三、SpringBoot2.X整合webflux</h3><ul><li><p>WebFlux中，请求和响应不再是WebMVC中的ServletRequest和ServletResponse，而是ServerRequest和ServerResponse</p></li><li><p>pom.xml加入相关依赖</p><ul><li>注意：同时添加<code>spring-boot-starter-web</code>和<code>spring-boot-starter-webflux</code>模块会导致Spring Boot自动配置Spring MVC，而不是WebFlux。所以要注释掉<code>spring-boot-start-web</code></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试Service</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"小A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"小B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"小C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"小D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"小E"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"小F"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"小G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 返回用户列表     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">userFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>User<span class="token operator">></span> values <span class="token operator">=</span> UserService<span class="token punctuation">.</span>dataMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Flux<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 根据id查找用户     * @param id 用户id     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">final</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span>dataMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 根据id删除用户     * @param id 用户id     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">final</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span>dataMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试Controller</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构造函数注入     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: Mono测试     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"hello ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 根据id查找用户     * @param id 用户id     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"find_by_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 根据id删除用户     * @param id 用户id     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">del</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @desc: 返回全部用户     * 延迟测试，以流的形式返回，查到一个返回一个     * @auth: LD     * @date: 2020/11/21     * @ver: 1.0     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user_flux"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span>  MediaType<span class="token punctuation">.</span>APPLICATION_STREAM_JSON_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">userFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">userFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、WebFlux客户端WebClient"><a href="#四、WebFlux客户端WebClient" class="headerlink" title="四、WebFlux客户端WebClient"></a>四、WebFlux客户端WebClient</h3><ul><li><p>反应式客户端</p></li><li><p>官方文档：<code>https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-webclient</code></p></li><li><p>测试类WebClientTest</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span>WebClient<span class="token punctuation">;</span><span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebClientTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> stringMono <span class="token operator">=</span> WebClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/v1/user/find_by_id?id=1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_STREAM_JSON<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> stringMono <span class="token operator">=</span> WebClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/v1/user/find_by_id?id={id}"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_STREAM_JSON<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> webflux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 响应式编程 </tag>
            
            <tag> webflux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合RocketMQ</title>
      <link href="2020/11/21/springboot2-x-zheng-he-rocketmq/"/>
      <url>2020/11/21/springboot2-x-zheng-he-rocketmq/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X整合RocketMQ</p><a id="more"></a><blockquote><h4 id="消息队列-RocketMQ4-x介绍"><a href="#消息队列-RocketMQ4-x介绍" class="headerlink" title="消息队列 RocketMQ4.x介绍"></a>消息队列 RocketMQ4.x介绍</h4></blockquote><ul><li>Apache RocketMQ作为阿里开源的一款高性能、高吞吐量的分布式消息中间件</li><li>特点<ul><li>在高压下1毫秒内响应延迟超过99.6％。</li><li>适合金融类业务，高可用性跟踪和审计功能。</li><li>支持发布订阅模型，和点对点</li><li>支持拉pull和推push两种消息模式</li><li>单一队列百万消息</li><li>支持单master节点，多master节点，多master多slave节点<br>…</li></ul></li><li>概念<ul><li>Producer:消息生产者</li><li>Producer Group:消息生产者组，发送同类消息的一个消息生产组</li><li>Consumer:消费者</li><li>Consumer Group:消费同个消息的多个实例</li><li>Tag:标签，子主题（二级分类）,用于区分同一个主题下的不同业务的消息</li><li>Topic:主题</li><li>Message：消息</li><li>Broker：MQ程序，接收生产的消息，提供给消费者消费的程序</li><li>Name Server：给生产和消费者提供路由信息，提供轻量级的服务发现和路由        </li></ul></li><li>官网地址：<code>http://rocketmq.apache.org/</code></li></ul><blockquote><h4 id="RocketMQ4-x快速部署"><a href="#RocketMQ4-x快速部署" class="headerlink" title="RocketMQ4.x快速部署"></a>RocketMQ4.x快速部署</h4></blockquote><ul><li><p>安装前提条件(推荐)</p><ul><li>64bit OS, Linux/Unix/Mac</li><li>64bit JDK 1.8+;</li></ul></li><li><p>快速开始：<code>http://rocketmq.apache.org/docs/quick-start/</code></p></li><li><p>下载安装包：<code>https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.2.0/rocketmq-all-4.2.0-bin-release.zip</code></p></li><li><p>解压压缩包 </p><ul><li>进入bin目录，启动namesrv<ul><li>nohup sh mqnamesrv &amp; </li></ul></li><li>查看日志 tail -f nohup.out<ul><li>结尾：The Name Server boot success. serializeType=JSON 表示启动成功</li></ul></li><li>启动broker   <ul><li>nohup sh mqbroker -n 127.0.0.1:9876 &amp;</li></ul></li><li>关闭nameserver broker执行的命令<ul><li>sh mqshutdown namesrv</li><li>sh mqshutdown broker</li></ul></li></ul></li></ul><blockquote><h4 id="RoekerMQ4-x可视化控制台"><a href="#RoekerMQ4-x可视化控制台" class="headerlink" title="RoekerMQ4.x可视化控制台"></a>RoekerMQ4.x可视化控制台</h4></blockquote><ul><li><p>下载：<code>https://github.com/apache/rocketmq-externals</code></p></li><li><p>编译打包：mvn clean package -Dmaven.test.skip=true</p><ul><li>修改application.properties，ip更改为RocketMQ部署的服务器ip<ul><li><code>rocketmq.config.namesrvAddr=127.0.0.1:9876</code></li></ul></li><li>出现以下报错，应修改pom.xml,注释掉<code>org.apache.maven.plugins</code>配置</li></ul><pre class="line-numbers language-log"><code class="language-log">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (validate) on project rocketmq-console-ng: Failed during checkstyle execution: There are 8 errors reported by Checkstyle 6.11.2 with style/rmq_checkstyle.xml ruleset. -> [Help 1][ERROR][ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR][ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml">            <span class="token comment" spellcheck="true">&lt;!-- 应注释掉，否则打包会报错--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-checkstyle-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>validate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>validate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configLocation</span><span class="token punctuation">></span></span>style/rmq_checkstyle.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configLocation</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>consoleOutput</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>consoleOutput</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>failsOnError</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>failsOnError</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>check<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>target目录下 通过java -jar的方式运行 <code>rocketmq-console-ng-2.0.0.jar</code></p></li><li><p>默认端口 8080</p></li><li><p>注意：</p><ul><li>在阿里云，腾讯云或者虚拟机，记得开放端口号和防火墙是否启动</li></ul></li></ul><blockquote><h4 id="Springboot2整合RocketMQ4-x"><a href="#Springboot2整合RocketMQ4-x" class="headerlink" title="Springboot2整合RocketMQ4.x"></a>Springboot2整合RocketMQ4.x</h4></blockquote><ul><li><p>启动RocketMQ</p><ul><li>~查看第二章</li></ul></li><li><p>pom.xml加入相关依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rocketmq.version</span><span class="token punctuation">></span></span>4.1.0-incubating<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rocketmq.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${rocketmq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${rocketmq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改application.properties</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 消费者的组名</span><span class="token attr-name">apache.rocketmq.consumer.PushConsumer</span><span class="token punctuation">=</span><span class="token attr-value">orderConsumer</span><span class="token comment" spellcheck="true"># 生产者的组名</span><span class="token attr-name">apache.rocketmq.producer.producerGroup</span><span class="token punctuation">=</span><span class="token attr-value">Producer</span><span class="token comment" spellcheck="true"># NameServer地址,RocketMQ 部署的服务器ip</span><span class="token attr-name">apache.rocketmq.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:9876</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发生产者MsgProducer</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgProducer</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * 生产者的组名     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${apache.rocketmq.producer.producerGroup}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String producerGroup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * NameServer 地址     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${apache.rocketmq.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token keyword">private</span>  DefaultMQProducer producer <span class="token punctuation">;</span>    <span class="token keyword">public</span> DefaultMQProducer <span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>producer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生产者的组名</span>        producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span>producerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定NameServer地址，多个地址以 ; 隔开</span>        <span class="token comment" spellcheck="true">//如 producer.setNamesrvAddr("192.168.100.141:9876;192.168.100.142:9876;192.168.100.149:9876"); </span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此处为解决多网卡问题</span>        producer<span class="token punctuation">.</span><span class="token function">setVipChannelEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * Producer对象在使用之前必须要调用start初始化，只能初始化一次             */</span>            producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// producer.shutdown();  一般在应用上下文，关闭的时候进行关闭，用上下文监听器</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发Controller</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MsgProducer msgProducer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：     * @param msg 消息     * @param tag 消息二级分类     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">order</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> RemotingException<span class="token punctuation">,</span> MQBrokerException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> UnsupportedEncodingException<span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 创建一个消息实例，包含 topic、tag 和 消息体                  */</span>       Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span>tag<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       SendResult result <span class="token operator">=</span> msgProducer<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送响应：MsgId:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，发送状态:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：     * @param msg 消息     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"comment"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">comment</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> RemotingException<span class="token punctuation">,</span> MQBrokerException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> UnsupportedEncodingException<span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 创建一个消息实例，包含 topic、tag 和 消息体，此处固定tag为add       */</span>       Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"commentTopic"</span><span class="token punctuation">,</span><span class="token string">"add"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//同步的方式，会有返回结果,发送的是普通消息</span>       SendResult result <span class="token operator">=</span> msgProducer<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送响应：MsgId:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，发送状态:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>测试</p><ul><li><p>postman 输入：<code>localhost:8080/api/v1/order?msg=测试生产者&amp;tag=order</code></p></li><li><p>控制台打印：<code>发送响应：MsgId:C0A82B103ED414DAD5DC6BB2B86C0002，发送状态:SEND_OK</code></p></li></ul></li><li><p>开发消费者MsgConsumer</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 消费者的组名     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${apache.rocketmq.consumer.PushConsumer}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String consumerGroup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * NameServer 地址     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${apache.rocketmq.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//消费者的组名</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定NameServer地址，多个地址以 ; 隔开</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置consumer所订阅的Topic和Tag</span>            <span class="token comment" spellcheck="true">//topic和controller中，创建消息实体时的topic对应</span>            <span class="token comment" spellcheck="true">//例如Message message = new Message("testTopic",tag, msg.getBytes(RemotingHelper.DEFAULT_CHARSET));</span>            <span class="token comment" spellcheck="true">//*代表全部的Tag，可以指定Tag,</span>            <span class="token comment" spellcheck="true">//例如consumer.subscribe("testTopic", "order");这样消费者就只能消费topic为testTopic,Tag为order的消息</span>            consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//CONSUME_FROM_LAST_OFFSET 默认策略，从该队列最尾开始消费，跳过历史消息</span>            <span class="token comment" spellcheck="true">//CONSUME_FROM_FIRST_OFFSET 从队列最开始开始消费，即历史消息（还储存在broker的）全部消费一遍</span>            consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//MessageListenerOrderly 这个是有序的</span>            <span class="token comment" spellcheck="true">//MessageListenerConcurrently 这个是无序的,并行的方式处理，效率高很多</span>            consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MessageListenerConcurrently<span class="token punctuation">)</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt messageExt <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//输出消息内容</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"messageExt: "</span> <span class="token operator">+</span> messageExt<span class="token punctuation">)</span><span class="token punctuation">;</span>                        String messageBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//输出消息内容</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费响应：msgId : "</span> <span class="token operator">+</span> messageExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",  msgBody : "</span> <span class="token operator">+</span> messageBody<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//稍后再试</span>                    <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>RECONSUME_LATER<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//消费成功</span>                <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试<ul><li>postman 输入：<code>localhost:8080/api/v1/order?msg=测试生产者&amp;tag=order</code></li><li>控制台打印：<ul><li><code>发送响应：MsgId:C0A82B103ED414DAD5DC6BB2B86C0002，发送状态:SEND_OK</code></li><li><code>消费响应：msgId : C0A82B103ED414DAD5DC6BB7BFC10005,  msgBody : 测试生产者</code></li></ul></li></ul></li></ul><blockquote><p>整合时可能会遇到的问题</p></blockquote><ul><li><p>多网卡问题</p><ul><li><p>错误信息：<code>org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;172.17.0.1:10911&gt; failed</code></p></li><li><p>解决方法：</p><ul><li><p>在生产者代码中，设置producer:  <code>producer.setVipChannelEnabled(false);</code></p></li><li><p>修改RocketMQ配置文件，/conf/broker.conf，将ip更改为部署RocketMQ的服务器的公网ip</p><ul><li>namesrvAddr = ip:9876        </li><li>brokerIP1 = ip</li></ul></li><li><p>然后重启mqnamesrv，记得先杀死进程</p></li><li><p>然后重启broker， 记得先杀死进程</p><ul><li>注意：启动命令（在bin目录下）更改为：<code>nohup sh mqbroker -n localhost:9876 -c ../conf/broker.conf &amp;</code></li></ul></li></ul></li></ul></li><li><p>DESC: service not available now, maybe disk full, CL:</p><ul><li><p>解决方法：</p><ul><li><p>修改启动脚本runbroker.sh，在里面增加一句话即可：<code>JAVA_OPT="${JAVA_OPT} -Drocketmq.broker.diskSpaceWarningLevelRatio=0.98"</code></p></li><li><p>（磁盘保护的百分比设置成98%，只有磁盘空间使用率达到98%时才拒绝接收producer消息） </p></li></ul><p>…</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合ActiveMQ</title>
      <link href="2020/11/21/springboot2-x-zheng-he-activemq/"/>
      <url>2020/11/21/springboot2-x-zheng-he-activemq/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X整合ActiveMQ</p><a id="more"></a><blockquote><h4 id="JMS的基础知识"><a href="#JMS的基础知识" class="headerlink" title="JMS的基础知识"></a>JMS的基础知识</h4></blockquote><ul><li><p>JMS: Java消息服务（Java Message Service),Java平台中关于面向消息中间件的接口</p></li><li><p>JMS是一种与厂商无关的 API，用来访问消息收发系统消息</p></li><li><p>使用场景：</p><ul><li>跨平台 </li><li>多语言 </li><li>多项目</li><li>解耦</li><li>分布式事务</li><li>流量控制</li><li>最终一致性</li><li>RPC调用<ul><li>上下游对接，数据源变动-&gt;通知下属</li></ul></li></ul></li><li><p>概念    </p><ul><li><p>JMS提供者：Apache ActiveMQ、RabbitMQ、Kafka、Notify、MetaQ、RocketMQ</p></li><li><p>JMS生产者(Message Producer)</p></li><li><p>JMS消费者(Message Consumer)</p></li><li><p>JMS消息</p></li><li><p>JMS队列</p></li><li><p>JMS主题</p></li><li><p>JMS消息通常有两种类型：点对点（Point-to-Point)、发布/订阅（Publish/Subscribe）</p></li></ul></li><li><p>编程模型</p><ul><li>MQ中需要用的一些类</li><li>ConnectionFactory ：连接工厂，JMS 用它创建连接</li><li>Connection ：JMS 客户端到JMS Provider 的连接</li><li>Session： 一个发送或接收消息的线程</li><li>Destination ：消息的目的地;消息发送给谁.</li><li>MessageConsumer / MessageProducer： 消息接收者，消费者</li></ul></li></ul><blockquote><h4 id="ActiveMQ5-x消息队列"><a href="#ActiveMQ5-x消息队列" class="headerlink" title="ActiveMQ5.x消息队列"></a>ActiveMQ5.x消息队列</h4></blockquote><ul><li><p>特点：</p><ul><li>支持来自Java，C，C ++，C＃，Ruby，Perl，Python，PHP的各种跨语言客户端和协议</li><li>支持许多高级功能，如消息组，虚拟目标，通配符和复合目标</li><li>完全支持JMS 1.1和J2EE 1.4，支持瞬态，持久，事务和XA消息</li><li>Spring支持，ActiveMQ可以轻松嵌入到Spring应用程序中，并使用Spring的XML配置机制进行配置</li><li>支持在流行的J2EE服务器（如TomEE，Geronimo，JBoss，GlassFish和WebLogic）中进行测试</li><li>使用JDBC和高性能日志支持非常快速的持久化<br>…</li></ul></li><li><p>下载地址：<code>http://activemq.apache.org/activemq-5153-release.html</code></p></li><li><p>快速开始：<code>http://activemq.apache.org/getting-started.html</code></p></li><li><p>如果我们是32位的机器，就双击win32目录下的activemq.bat,如果是64位机器，则双击win64目录下的activemq.bat</p></li><li><p>bin目录里面启动 选择对应的系统版本和位数，activeMQ start 启动</p></li><li><p>启动后访问路径<code>http://127.0.0.1:8161/</code></p></li><li><p>用户名和密码默认都是admin</p></li><li><p>官方案例集合：<code>https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</code>    </p></li><li><p>面板：    </p><ul><li>Name：队列名称。</li><li>Number Of Pending Messages：待处理消息的数量。都会被监听处理掉，所以不存在待处理，如果存在就说这里面哪里出故障了，需要排查</li><li>Number Of Consumers：当前连接的消费者数目</li><li>Messages Enqueued：进入队列的消息总个数，包括出队列的和待消费的，这个数量只增不减。</li><li>Messages Dequeued：已经消费的消息数量。</li></ul></li></ul><blockquote><h4 id="SpringBoot2-x整合ActiveMQ搭建步骤"><a href="#SpringBoot2-x整合ActiveMQ搭建步骤" class="headerlink" title="SpringBoot2.x整合ActiveMQ搭建步骤"></a>SpringBoot2.x整合ActiveMQ搭建步骤</h4></blockquote><ul><li>加入依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 整合消息队列ActiveMQ --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 如果配置线程池则加入 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改配置文件application.properties</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">     #整合jms测试，安装在别的机器，防火墙和端口号记得开放（此处端口默认61616，和访问端口8161要区分开）</span><span class="token attr-name">    spring.activemq.broker-url</span><span class="token punctuation">=</span><span class="token attr-value">tcp://127.0.0.1:61616</span><span class="token comment" spellcheck="true">    #集群配置(后续需要再配上)</span><span class="token comment" spellcheck="true">    #spring.activemq.broker-url=failover:(tcp://localhost:61616,tcp://localhost:61617)</span><span class="token attr-name">    spring.activemq.user</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">    spring.activemq.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token comment" spellcheck="true">    #下列配置要增加依赖</span><span class="token attr-name">    spring.activemq.pool.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">    spring.activemq.pool.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token comment" spellcheck="true">    #消息队列默认是点对点的，如果需要发布/订阅模式那么需要加上下面注解(如果同时需要点对点发布订阅这里也需注释掉)</span><span class="token comment" spellcheck="true">    # spring.jms.pub-sub-domain=true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动类加入<code>@EnableJms</code>开启支持jms，创建默认</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableJms</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XdclassApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>XdclassApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>点对点模式</p></blockquote><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableJms</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XdclassApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新建一个的Queue对象，交给sringboot管理，这个queue的名称叫"common.queue".</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"common.queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>XdclassApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>common.queue</code>对应消费者，<code>CommonConsumer</code>建在<code>jms</code>包中</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//名为"common.queue"消息队列的消费者，通过JmsListener进行监听有没有消息，有消息会立刻读取过来</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"common.queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveQueue</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonConsumer收到的报文为:"</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//名为"order.queue"消息队列的消费者，通过JmsListener进行监听有没有消息，有消息会立刻读取过来</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"order.queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveQueue</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OrderConsumer收到的报文为:"</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Service类</li></ul><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**    * 功能描述：消息生产    */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProducerService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 功能描述：指定消息队列，还有消息    </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> <span class="token keyword">final</span> String message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 功能描述：使用默认消息队列， 发送消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span> <span class="token keyword">final</span> String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ServiceImpl实现类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 功能描述：消息生产者实现类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个队列就是Springboot主类中bean的对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来发送消息到broker的对象,可以理解连接数据库的JDBC</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsTemplate<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送消息，destination是发送到的队列，message是待发送的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>                jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送消息，queue是发送到的队列，message是待发送的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>         jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>QueueController类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 功能描述：点对点消息队列控制层 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProducerService producerService<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里后面调用的是Springboot主类的quene队列</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">common</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        producerService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 这个队列是新建的一个名为order.queue的点对点消息队列</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">order</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        Destination destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"order.queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producerService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="发布-订阅者模式"><a href="#发布-订阅者模式" class="headerlink" title="发布/订阅者模式"></a>发布/订阅者模式</h4></blockquote><ul><li>appliaction.properties文件</li></ul><pre class="line-numbers language-java"><code class="language-java">#消息队列默认是点对点的，如果需要发布<span class="token operator">/</span>订阅模式那么需要加上下面注解<span class="token punctuation">(</span>如果同时需要点对点发布订阅这里也需注释掉<span class="token punctuation">)</span>spring<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>pub<span class="token operator">-</span>sub<span class="token operator">-</span>domain<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新建一个topic队列</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Topic <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span><span class="token string">"video.topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加多个消费者类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这里定义了三个消费者</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicSub</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive1="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive2="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive3</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive3="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Service类</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//功能描述：消息发布者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ServiceImpl实现类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//=======发布订阅相关代码=========</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Topic topic<span class="token punctuation">;</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Controller类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个队列是新建的一个名为video.topic的发布/订阅者模式消息队列</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> Object <span class="token function">topic</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>            producerService<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="如何让点对点和发布订阅同时有效"><a href="#如何让点对点和发布订阅同时有效" class="headerlink" title="如何让点对点和发布订阅同时有效"></a>如何让点对点和发布订阅同时有效</h4></blockquote><ul><li><p>可以理解为，当同时启动的时候，所产生的消费者默认都是Topic消费者，没有Queue消费者，所以它监听不到queue所待处理的消息。</p></li><li><p>当配置文件不加：spring.jms.pub-sub-domain=true 那么系统会默认支持quene（点对点模式），但一旦加上这段配置，系统又变成只支持发布订阅模式。</p></li><li><p>去掉配置文件中的</p></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#消息队列默认是点对点的，如果需要发布/订阅模式那么需要加上下面注解(如果同时需要点对点发布订阅这里也需注释掉)</span><span class="token comment" spellcheck="true">#spring.jms.pub-sub-domain=true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在发布订阅者的中消费者中指定独立的containerFactory<ul><li>因为去掉上面的配置，那么系统就默认是queue，所以@JmsListener如果不指定独立的containerFactory的话是只能消费queue消息</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive1="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive2="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"video.topic"</span><span class="token punctuation">,</span>containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive3</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"video.topic 消费者:receive3="</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要给topic定义独立的JmsListenerContainer</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//启动类中添加以下代码    </span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JmsListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">jmsListenerContainerTopic</span><span class="token punctuation">(</span>ConnectionFactory activeMQConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DefaultJmsListenerContainerFactory bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>activeMQConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ActiveMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合ElasticSearch</title>
      <link href="2020/11/20/springboot2-x-zheng-he-elasticsearch/"/>
      <url>2020/11/20/springboot2-x-zheng-he-elasticsearch/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X整合ElasticSearch</p><a id="more"></a><blockquote><h5 id="ElasticSearch主要特点"><a href="#ElasticSearch主要特点" class="headerlink" title="ElasticSearch主要特点"></a>ElasticSearch主要特点</h5></blockquote><ul><li>特点：全文检索，结构化检索，数据统计、分析，接近实时处理，分布式搜索(可部署数百台服务器)，处理PB级别的数据，搜索纠错，自动完成    </li><li>使用场景：日志搜索，数据聚合，数据监控，报表统计分析</li></ul><blockquote><h5 id="快速安装ElasticSeach"><a href="#快速安装ElasticSeach" class="headerlink" title="快速安装ElasticSeach"></a>快速安装ElasticSeach</h5></blockquote><ul><li><p>官网：<code>https://www.elastic.co/products/elasticsearch</code></p></li><li><p>linux</p><pre class="line-numbers language-shell"><code class="language-shell">wget  https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.8.tar.gztar -zxvf elasticsearch-5.6.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>外网访问配置：    </p><ul><li>config目录下面elasticsearch.yml</li><li>修改为 network.host: 0.0.0.0</li><li>打开 http.port:9200</li></ul></li><li><p>安装遇到的问题</p><pre class="line-numbers language-error"><code class="language-error">    1、问题一        Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c5330000, 986513408, 0) failed; error='Cannot allocate memory' (errno=12)        #        # There is insufficient memory for the Java Runtime Environment to continue.        # Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory.        # An error report file with more information is saved as:        # /usr/local/software/temp/elasticsearch-6.2.2/hs_err_pid1912.log    解决：内存不够，购买阿里云的机器可以动态增加内存    2、问题二        [root@iZwz95j86y235aroi85ht0Z bin]# ./elasticsearch        [2018-02-22T20:14:04,870][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]        org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:125) ~[elasticsearch-6.2.2.jar:6.2.2]        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:112) ~[elasticsearch-6.2.2.jar:6.2.2]        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.2.2.jar:6.2.2]        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.2.2.jar:6.2.2]    解决：用非root用户        添加用户：useradd -m 用户名          设置密码  passwd 用户名    3、问题三        ./elasticsearch        Exception in thread "main" java.nio.file.AccessDeniedException: /usr/local/software/temp/elasticsearch-6.2.2/config/jvm.options       解决：权限不够 chmod 777 -R 当前es目录    常见配置问题资料：https://www.jianshu.com/p/c5d6ec0f35e0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><h5 id="SprIngBoot2-x整合elasticSearch"><a href="#SprIngBoot2-x整合elasticSearch" class="headerlink" title="SprIngBoot2.x整合elasticSearch"></a>SprIngBoot2.x整合elasticSearch</h5></blockquote><ul><li><p>查询、搜索命令：<code>https://www.elastic.co/guide/en/elasticsearch/reference/5.6/_create_an_index.html</code></p></li><li><p>Spring Data Elasticsearch文档地址：<code>https://docs.spring.io/spring-data/elasticsearch/docs/3.0.6.RELEASE/reference/html/</code></p></li><li><p>版本说明：SpringBoot整合elasticsearch：<code>https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix</code></p></li><li><p>添加maven依赖</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建接口并继承ElasticSearchRepository<ul><li>注意点：             <ul><li>索引名称记得小写，类属性名称也要小写     </li></ul></li></ul></li><li>新建实体对象article<ul><li>加上类注解 @Document(indexName = “blog”, type = “article”)</li></ul></li><li>配置文件：</li></ul><pre class="line-numbers language-pro"><code class="language-pro">spring.data.elasticsearch.cluster-name=elasticsearch#可以配置多个，以逗号隔开spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300spring.data.elasticsearch.repositories.enabled=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试接口ArticleController</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ArticleRepository articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span>String title<span class="token punctuation">)</span><span class="token punctuation">{</span>        Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setPv</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"springboot整合elasticsearch，这个是新版本 2018年录制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span><span class="token string">"搜索框架整合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">search</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//搜索全部文档</span>        <span class="token comment" spellcheck="true">//QueryBuilder queryBuilderAll = QueryBuilders.matchAllQuery();</span>        <span class="token comment" spellcheck="true">//搜索关键词</span>        QueryBuilder queryBuilderByTitle <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Article<span class="token operator">></span> list <span class="token operator">=</span>  articleRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>queryBuilderByTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>QueryBuilder使用</p><ul><li><code>https://www.elastic.co/guide/en/elasticsearch/client/java-api/1.3/query-dsl-queries.html</code></li></ul></li><li><p>查看es数据</p><ul><li>查看索引信息：<code>http://localhost:9200/_cat/indices?v</code>        </li><li>查看某个索引库结构：<code>http://localhost:9200/blog</code></li><li>查看某个对象：<code>http://localhost:9200/blog/article/1</code></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合Logback</title>
      <link href="2020/11/20/springboot-zheng-he-logback/"/>
      <url>2020/11/20/springboot-zheng-he-logback/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X整合Logback</p><a id="more"></a><blockquote><h5 id="日志框架Logback"><a href="#日志框架Logback" class="headerlink" title="日志框架Logback"></a>日志框架Logback</h5></blockquote><ul><li><p>常用处理java的日志组件 slf4j,log4j,logback,common-logging 等</p></li><li><p>logback介绍：基于Log4j基础上大量改良，不能单独使用，推荐配合日志框架slf4j来使用</p><ul><li>logback当前分成三个模块：logback-core,logback-classic和logback-access;</li><li>logback-core是其它两个模块的基础模块</li></ul></li><li><p>Logback的核心对象</p><ul><li>Logger：日志记录器</li><li>Appender：指定日志输出的目的地，目的地可以是控制台，文件</li><li>Layout：日志布局 格式化日志信息的输出</li></ul></li><li><p>日志级别：DEBUG &lt; INFO &lt; WARN &lt; ERROR</p></li><li><p>log4j.properties</p></li></ul><pre class="line-numbers language-properties"><code class="language-properties">        <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>log4j示例<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>        <span class="token comment" spellcheck="true">         ### 设置###</span><span class="token attr-name">        log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">debug,stdout,D,E</span><span class="token comment" spellcheck="true">        ### 输出信息到控制抬 ###</span><span class="token attr-name">        log4j.appender.stdout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">        log4j.appender.stdout.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">        log4j.appender.stdout.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">        log4j.appender.stdout.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n</span><span class="token comment" spellcheck="true">        ### 输出DEBUG 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">        log4j.appender.D</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">        log4j.appender.D.File</span> <span class="token punctuation">=</span> <span class="token attr-value">D://logs/log.log</span><span class="token attr-name">        log4j.appender.D.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">        log4j.appender.D.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG </span><span class="token attr-name">        log4j.appender.D.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">        log4j.appender.D.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n</span><span class="token comment" spellcheck="true">        ### 输出ERROR 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">        log4j.appender.E</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">        log4j.appender.E.File</span> <span class="token punctuation">=</span><span class="token attr-value">E://logs/error.log </span><span class="token attr-name">        log4j.appender.E.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">        log4j.appender.E.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">ERROR </span><span class="token attr-name">        log4j.appender.E.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">        log4j.appender.E.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>log4j.properties转换为logback.xml的工具<ul><li>​    <a href="https://logback.qos.ch/translator/" target="_blank" rel="noopener">https://logback.qos.ch/translator/</a></li></ul></li></ul><blockquote><h5 id="SpringBoot2-x配置Logback"><a href="#SpringBoot2-x配置Logback" class="headerlink" title="SpringBoot2.x配置Logback"></a>SpringBoot2.x配置Logback</h5></blockquote><ul><li><p>官网：<a href="https://docs.spring.io/spring-boot/docs/2.4.1-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-logging-format" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.4.1-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-logging-format</a></p></li><li><p>xml各组件：<a href="https://logback.qos.ch/manual/index.html" target="_blank" rel="noopener">https://logback.qos.ch/manual/index.html</a></p></li><li><p>日志文件logback-spring.xml,官方推荐 -spring.xml结尾</p><ul><li>默认加载加载配置顺序 logback-spring.xml, logback-spring.groovy, logback.xml,  logback.groovy</li><li>root 节点要加在最后</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileInfoApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 滚动策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>app_log/log/app.info.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileErrorApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 设置滚动策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>app_log/log/app.err.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件，假设设置每个月滚动，            且&lt;maxHistory> 是1，则只保存最近1个月的文件，删除之前的旧文件 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxHistory</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileInfoApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileErrorApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Controller 开启日志</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Logback </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合redis</title>
      <link href="2020/11/20/springboot2-x-zheng-he-redis/"/>
      <url>2020/11/20/springboot2-x-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X整合redis</p><a id="more"></a><blockquote><h3 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h3></blockquote><ul><li>redis官网<code>https://redis.io/download</code></li></ul><blockquote><h3 id="源码编译安装Redis4-x"><a href="#源码编译安装Redis4-x" class="headerlink" title="源码编译安装Redis4.x"></a>源码编译安装Redis4.x</h3></blockquote><pre><code>1、快速安装  https://redis.io/download#installation        wget http://download.redis.io/releases/redis-4.0.9.tar.gz        tar xzf redis-4.0.9.tar.gz        cd redis-4.0.9        make        启动服务端：src/redis-server            通过指定配置文件启动                1)vim redis.conf =&gt; daemonize yes                 2)./redis-server /usr/local/redis-4.0.6/redis.conf        启动客户端：src/redis-cli2、默认是本地访问的，需要开放外网访问    1）打开redis.conf文件在NETWORK部分修改       注释掉bind 127.0.0.1可以使所有的ip访问redis       修改 protected-mode，值改为no3、linux配置开启自启动    1）启动脚本 redis_init_script 位于Redis的 /utils/ 目录下    2）mkdir /etc/redis    3）cp redis.conf /etc/redis/6379.conf    4）将启动脚本复制到/etc/init.d目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。        1）cp redis_init_script /etc/init.d/redisd    5）在启动脚本开头添加如下注释来修改运行级别         #!/bin/sh         # chkconfig: 2345 90 10     6）设置为开机自启动服务器         chkconfig redisd on        service redisd start 打开服务        service redisd stop 关闭服务</code></pre><blockquote><h3 id="SpringBoot2-x整合redis"><a href="#SpringBoot2-x整合redis" class="headerlink" title="SpringBoot2.x整合redis"></a>SpringBoot2.x整合redis</h3></blockquote><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">        #=========redis基础配置=========</span><span class="token attr-name">        spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">        spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">        spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6390</span><span class="token comment" spellcheck="true">        # 连接超时时间 单位 ms（毫秒）</span><span class="token attr-name">        spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">3000</span><span class="token comment" spellcheck="true">        #=========redis线程池设置=========</span><span class="token comment" spellcheck="true">        # 连接池中的最大空闲连接，默认值也是8。</span><span class="token attr-name">        spring.redis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true">        #连接池中的最小空闲连接，默认值也是0。</span><span class="token attr-name">        spring.redis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true">        # 如果赋值为-1，则表示不限制；pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span><span class="token attr-name">        spring.redis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true">        # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时</span><span class="token attr-name">        spring.redis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//注入模板</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> StirngRedisTemplate strTplRedis<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类型String，List,Hash,Set,ZSet</span>        <span class="token comment" spellcheck="true">//对应的方法分别是opsForValue()、opsForList()、opsForHash()、opsForSet()、opsForZSet()    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/redis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RdisTestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTpl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//jdbcTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisClient redis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"xddddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"save_user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userStr <span class="token operator">=</span> JsonUtils<span class="token punctuation">.</span><span class="token function">obj2String</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"base:user:11"</span><span class="token punctuation">,</span> userStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"find_user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String userStr <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"base:user:11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> JsonUtils<span class="token punctuation">.</span><span class="token function">string2Obj</span><span class="token punctuation">(</span>userStr<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTpl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：设置key-value到redis中     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTpl<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：通过key获取缓存里面的值     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTpl<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：设置某个key过期时间     *     * @param key     * @param time     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTpl<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：根据key 获取过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTpl<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTpl<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTpl<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//==============Map结构=====================</span>    <span class="token comment" spellcheck="true">//==============List结构=====================</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JsonUtils</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对象转字符串     *     * @param obj     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> String <span class="token function">obj2String</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">?</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> obj <span class="token operator">:</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 字符串转对象     *     * @param str     * @param clazz     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">string2Obj</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> str <span class="token operator">:</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义redis工具类<ul><li>RedisService</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 写入缓存     *     * @param key     * @param offset   位 8Bit=1Byte     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">setBit</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ValueOperations<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Object<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operations<span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 写入缓存     *     * @param key     * @param offset     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getBit</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ValueOperations<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Object<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">getBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 写入缓存     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">final</span> String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ValueOperations<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Object<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 写入缓存设置时效时间     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">final</span> String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> Long expireTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ValueOperations<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Object<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expireTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量删除对应的value     *     * @param keys     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">final</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除对应的value     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">final</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exists</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断缓存中是否有对应的value     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">final</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取缓存     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">final</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        ValueOperations<span class="token operator">&lt;</span>Serializable<span class="token punctuation">,</span> Object<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 哈希 添加     *     * @param key     * @param hashKey     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hmSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object hashKey<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hash <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 哈希获取数据     *     * @param key     * @param hashKey     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">hmGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object hashKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hash <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 列表添加     *     * @param k     * @param v     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lPush</span><span class="token punctuation">(</span>String k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 列表获取     *     * @param k     * @param l     * @param l1     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lRange</span><span class="token punctuation">(</span>String k<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">long</span> l1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 集合添加     *     * @param key     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 集合获取     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">setMembers</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合添加     *     * @param key     * @param value     * @param scoure     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zAdd</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">double</span> scoure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> scoure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合获取     *     * @param key     * @param scoure     * @param scoure1     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">rangeByScore</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">double</span> scoure<span class="token punctuation">,</span> <span class="token keyword">double</span> scoure1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zset<span class="token punctuation">.</span><span class="token function">rangeByScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> scoure<span class="token punctuation">,</span> scoure1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第一次加载的时候将数据加载到redis中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveDataToRedis</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> indexLong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> availableUsers <span class="token operator">=</span> <span class="token function">setBit</span><span class="token punctuation">(</span><span class="token string">"availableUsers"</span><span class="token punctuation">,</span> indexLong<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第一次加载的时候将数据加载到redis中</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getDataToRedis</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> indexLong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getBit</span><span class="token punctuation">(</span><span class="token string">"availableUsers"</span><span class="token punctuation">,</span> indexLong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合获取排名     *     * @param key 集合名称     * @param value 值     */</span>    <span class="token keyword">public</span> Long <span class="token function">zRank</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zset<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合获取排名     *     * @param key     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> <span class="token function">zRankWithScore</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span><span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> ret <span class="token operator">=</span> zset<span class="token punctuation">.</span><span class="token function">rangeWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合添加     *     * @param key     * @param value     */</span>    <span class="token keyword">public</span> Double <span class="token function">zSetScore</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zset<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合添加分数     *     * @param key     * @param value     * @param scoure     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementScore</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">double</span> scoure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zset<span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> scoure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合获取排名     *     * @param key     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> <span class="token function">reverseZRankWithScore</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span><span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> ret <span class="token operator">=</span> zset<span class="token punctuation">.</span><span class="token function">reverseRangeByScoreWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有序集合获取排名     *     * @param key     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> <span class="token function">reverseZRankWithRank</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> zset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>Object<span class="token operator">>></span> ret <span class="token operator">=</span> zset<span class="token punctuation">.</span><span class="token function">reverseRangeWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X文件上传下载</title>
      <link href="2020/11/20/springboot2-x-wen-jian-shang-chuan-xia-zai/"/>
      <url>2020/11/20/springboot2-x-wen-jian-shang-chuan-xia-zai/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot2.X文件上传下载</p><p>MultipartFile 对象的transferTo方法，用于文件保存（效率和操作比原先用FileOutStream方便和高效）</p><a id="more"></a><pre class="line-numbers language-Java"><code class="language-Java">//封装的JasonData工具类public class JsonData implements Serializable {    private static final long serialVersionUID = 1L;    /**     * 状态码,0表示成功，-1表示失败     */    private int code;    /**     * 结果     */    private Object data;    /**     * 错误描述     */    private String msg;    public int getCode() {        return code;    }    public String getMsg() {        return msg;    }    public void setMsg(String msg) {        this.msg = msg;    }    public void setCode(int code) {        this.code = code;    }    public Object getData() {        return data;    }    public void setData(Object data) {        this.data = data;    }    public JsonData(int code, Object data) {        super();        this.code = code;        this.data = data;    }    public JsonData(int code, String msg,Object data) {        super();        this.code = code;        this.msg = msg;        this.data = data;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> JsonData <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"head_img"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//file.isEmpty(); 判断图片是否为空</span>        <span class="token comment" spellcheck="true">//file.getSize(); 图片大小进行判断</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取文件名</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名为："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取文件的后缀名,比如图片的jpeg,png</span>        String suffixName <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的后缀名为："</span> <span class="token operator">+</span> suffixName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件上传后的路径</span>        fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffixName<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换后的名称:"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        File dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"fail to save "</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jar包方式运行web项目文件上传和访问</p></blockquote><ul><li><p>SpingBoot2.x使用 java -jar运行方式的图片上传和访问处理</p></li><li><p>文件大小配置，启动类里面配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> MultipartConfigElement <span class="token function">multipartConfigElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      MultipartConfigFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartConfigFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//单个文件最大  </span>    factory<span class="token punctuation">.</span><span class="token function">setMaxFileSize</span><span class="token punctuation">(</span><span class="token string">"10240KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//KB,MB  </span>    <span class="token comment" spellcheck="true">/// 设置总上传数据总大小  </span>    factory<span class="token punctuation">.</span><span class="token function">setMaxRequestSize</span><span class="token punctuation">(</span><span class="token string">"1024000KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createMultipartConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打包成jar包，需要增加maven依赖</p><ul><li>如果没加相关依赖，执行maven打包，运行后会报错:no main manifest attribute, in XXX.jar,</li><li>GUI：反编译工具，作用就是用于把class文件转换成java文件</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件上传和访问需要指定磁盘路径</p><ul><li>application.properties中增加下面配置</li><li>web.images-path=自定义路径</li><li>spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:/test/,file:${web.upload-path} </li></ul></li><li><p>文件服务器：fastdfs，阿里云oss，nginx搭建一个简单的文件服务器</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传下载 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X之Http协议</title>
      <link href="2020/11/20/springboot2-x-zhi-http-xie-yi/"/>
      <url>2020/11/20/springboot2-x-zhi-http-xie-yi/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot接口Http协议开发</p><a id="more"></a><blockquote><h4 id="SpringBoot2-xHTTP请求配置"><a href="#SpringBoot2-xHTTP请求配置" class="headerlink" title="SpringBoot2.xHTTP请求配置"></a>SpringBoot2.xHTTP请求配置</h4></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：测试restful协议，从路径中获取字段     * @param cityId     * @param userId     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/{city_id}/{user_id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"city_id"</span><span class="token punctuation">)</span> String cityId<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span> String userId <span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cityId"</span><span class="token punctuation">,</span> cityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：测试GetMapping     * @param from     * @param size     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/v1/page_user1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">pageUser</span><span class="token punctuation">(</span><span class="token keyword">int</span>  from<span class="token punctuation">,</span> <span class="token keyword">int</span> size <span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：默认值，是否必须的参数     * @param from     * @param size     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/v1/page_user2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">pageUserV2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span>  from<span class="token punctuation">,</span> <span class="token keyword">int</span> size <span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：bean对象传参     * 注意：1、注意需要指定http头为 content-type为application/json     *         2、使用body传输数据     * @param user     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/save_user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：测试获取http头信息     * @param accessToken     * @param id     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/get_header"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> String accessToken<span class="token punctuation">,</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/test_request"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">testRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述：测试PostMapping     * @param pwd     * @param id     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">login</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/put"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">put</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/del"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">del</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="json框架和注解的使用"><a href="#json框架和注解的使用" class="headerlink" title="json框架和注解的使用"></a>json框架和注解的使用</h4></blockquote><ul><li>常用框架 阿里 fastjson,谷歌gson等</li><li>JavaBean序列化为Json，<ul><li>性能：Jackson &gt; FastJson &gt; Gson &gt; Json-lib 同个结构</li><li>Jackson、FastJson、Gson类库各有优点，各有自己的专长</li><li>空间换时间，时间换空间</li></ul></li><li>jackson处理实体类<ul><li>指定字段不返回：@JsonIgnore</li><li>指定日期格式：@JsonFormat(pattern=”yyyy-MM-dd hh:mm:ss”,locale=”zh”,timezone=”GMT+8”)</li><li>空字段不返回：@JsonInclude(Include.NON_NUll)</li><li>指定别名：@JsonProperty</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">,</span>locale<span class="token operator">=</span><span class="token string">"zh"</span><span class="token punctuation">,</span>timezone<span class="token operator">=</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8新特性综合实例</title>
      <link href="2020/11/20/jdk8-xin-te-xing-zong-he-shi-li/"/>
      <url>2020/11/20/jdk8-xin-te-xing-zong-he-shi-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需求描述：电商订单数据处理 </p></blockquote><ul><li><p>统计出同时被两个人购买的商品列列表(交集)</p></li><li><p>统计出两个人购买商品的差集</p></li><li><p>统计出全部被购买商品的去重并集</p></li><li><p>统计两个人的分别购买订单的平均价格</p></li><li><p>统计两个人的分别购买订单的总价格</p><a id="more"></a><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> chapter5<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String tradeNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">VideoOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">VideoOrder</span><span class="token punctuation">(</span>String tradeNo<span class="token punctuation">,</span> String title<span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tradeNo <span class="token operator">=</span> tradeNo<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTradeNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tradeNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTradeNo</span><span class="token punctuation">(</span>String tradeNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tradeNo <span class="token operator">=</span> tradeNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            VideoOrder o1 <span class="token operator">=</span> <span class="token punctuation">(</span>VideoOrder<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> title<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"VideoOrder{"</span> <span class="token operator">+</span>                <span class="token string">"tradeNo='"</span> <span class="token operator">+</span> tradeNo <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span>                <span class="token string">", title='"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> videoOrders1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"20190242812"</span><span class="token punctuation">,</span> <span class="token string">"springboot教程"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"20194350812"</span><span class="token punctuation">,</span> <span class="token string">"微服务SpringCloud"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"20190814232"</span><span class="token punctuation">,</span> <span class="token string">"Redis教程"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"20190523812"</span><span class="token punctuation">,</span> <span class="token string">"网页开发教程"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"201932324"</span><span class="token punctuation">,</span> <span class="token string">"百万并发实战Netty"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> videoOrders2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"2019024285312"</span><span class="token punctuation">,</span> <span class="token string">"springboot教程"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"2019081453232"</span><span class="token punctuation">,</span> <span class="token string">"Redis教程"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"20190522338312"</span><span class="token punctuation">,</span> <span class="token string">"网页开发教程"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"2019435230812"</span><span class="token punctuation">,</span> <span class="token string">"Jmeter压力测试"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"2019323542411"</span><span class="token punctuation">,</span> <span class="token string">"Git+Jenkins持续集成"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">VideoOrder</span><span class="token punctuation">(</span><span class="token string">"2019323542424"</span><span class="token punctuation">,</span> <span class="token string">"Idea全套教程"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//交集</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> intersectionList <span class="token operator">=</span>                videoOrders1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>videoOrders2<span class="token operator">:</span><span class="token operator">:</span>contains<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                        Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交集="</span> <span class="token operator">+</span> intersectionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//差集</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> diffList1 <span class="token operator">=</span> videoOrders1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>videoOrder <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>videoOrders2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>videoOrder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差集1="</span><span class="token operator">+</span>diffList1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> diffList2 <span class="token operator">=</span> videoOrders2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>videoOrder <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>videoOrders1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>videoOrder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差集2="</span><span class="token operator">+</span>diffList2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//并集</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> allVideoOrder <span class="token operator">=</span> videoOrders1<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allVideoOrder<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>videoOrders2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并="</span><span class="token operator">+</span>allVideoOrder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>VideoOrder<span class="token operator">></span> allVideoOrderDistinct <span class="token operator">=</span> allVideoOrder<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去重并集="</span><span class="token operator">+</span>allVideoOrderDistinct<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算订单平均价格</span>        Double videoOrderAvg1 <span class="token operator">=</span> videoOrders1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单1平均价格="</span><span class="token operator">+</span>videoOrderAvg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Double videoOrderAvg2 <span class="token operator">=</span> videoOrders2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单2平均价格="</span><span class="token operator">+</span>videoOrderAvg2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算订单总价</span>        IntSummaryStatistics videoOrderTotal1 <span class="token operator">=</span> videoOrders1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单1总价格="</span><span class="token operator">+</span>videoOrderTotal1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IntSummaryStatistics videoOrderTotal2 <span class="token operator">=</span> videoOrders2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单2总价格="</span><span class="token operator">+</span>videoOrderTotal2<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer totalMoney1 <span class="token operator">=</span> videoOrders1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单1总价格="</span><span class="token operator">+</span>totalMoney1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer totalMoney2 <span class="token operator">=</span> videoOrders2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span>VideoOrder<span class="token operator">:</span><span class="token operator">:</span>getMoney<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单2总价格="</span><span class="token operator">+</span>totalMoney2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDK1.8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8收集器和集合统计</title>
      <link href="2020/11/20/jdk8-shou-ji-qi-he-ji-he-tong-ji/"/>
      <url>2020/11/20/jdk8-shou-ji-qi-he-ji-he-tong-ji/</url>
      
        <content type="html"><![CDATA[<p>JDK1.8收集器和集合统计</p><a id="more"></a><h3 id="一、collector收集器"><a href="#一、collector收集器" class="headerlink" title="一、collector收集器"></a>一、collector收集器</h3><ul><li><p>collect()方法的作用</p><ul><li><p>一个终端操作, 用于对流中的数据进行归集操作，collect方法接受的参数是一个Collector</p></li><li><p>有两个重载方法，在Stream接口里面</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重载方法一</span><span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">collect</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>R<span class="token operator">></span> supplier<span class="token punctuation">,</span> BiConsumer<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> accumulator<span class="token punctuation">,</span> BiConsumer<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">></span>combiner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重载方法二</span><span class="token operator">&lt;</span>R<span class="token punctuation">,</span> A<span class="token operator">></span> R <span class="token function">collect</span><span class="token punctuation">(</span>Collector<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> A<span class="token punctuation">,</span> R<span class="token operator">></span> collector<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Collector的作用</p><ul><li><p>收集器，也是一个接口, 它的工具类Collectors提供了很多工厂方法</p></li><li><p>工具类，提供了很多常见的收集器实现</p><ul><li><p>Collectors.toList()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Collector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CollectorImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">)</span>    ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> List<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">,</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    left<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> CH_ID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ArrayList::new，创建一个ArrayList作为累加器</li><li>List::add，对流中元素的操作就是直接添加到累加器中</li><li>reduce操作, 对子任务归集结果addAll，后一个子任务的结果直接全部添加到前一个子任务结果中</li><li>CH_ID 是一个unmodifiableSet集合</li></ul></li><li><p>Collectors.toMap()</p></li><li><p>Collectors.toSet()</p></li><li><p>Collectors.toCollection() ：用自定义的实现Collection的数据结构收集</p><ul><li>Collectors.toCollection(LinkedList::new)</li><li>Collectors.toCollection(CopyOnWriteArrayList::new)</li><li>Collectors.toCollection(TreeSet::new)</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toList</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>LinkedList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>CopyOnWriteArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toSet 去重</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>TreeSet<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toMap</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">88.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">85.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Double<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span>User<span class="token operator">:</span><span class="token operator">:</span>getFraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>User<span class="token operator">></span> userMap <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、Joining函数"><a href="#二、Joining函数" class="headerlink" title="二、Joining函数"></a>二、Joining函数</h3><ul><li><p>拼接函数 Collectors.joining</p></li><li><p>该方法可以将Stream得到一个字符串， joining函数接受三个参数，分别表示 元素之间的连接符、前缀和后缀。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Collector<span class="token operator">&lt;</span>CharSequence<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CollectorImpl</span><span class="token operator">&lt;</span>CharSequence<span class="token punctuation">,</span> StringBuilder<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>    StringBuilder<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> StringBuilder<span class="token operator">:</span><span class="token operator">:</span>append<span class="token punctuation">,</span>    <span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> r1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> r1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    StringBuilder<span class="token operator">:</span><span class="token operator">:</span>toString<span class="token punctuation">,</span> CH_NOID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//3种重载⽅方法</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> <span class="token string">"param2"</span><span class="token punctuation">,</span> <span class="token string">"param3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//aaabbbcccddd</span>        String result2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//aaa,bbb,ccc,ddd</span>        String result3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;aaa,bbb,ccc,ddd></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、partitioningBy分组"><a href="#三、partitioningBy分组" class="headerlink" title="三、partitioningBy分组"></a>三、partitioningBy分组</h3><ul><li><p>Collectors.partitioningBy 分组，返回Map集合，key是boolean类型</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Collector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">>>></span> <span class="token function">partitioningBy</span>    <span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">partitioningBy</span><span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//import java.util.stream.Collectors;</span>        Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> map1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//import static java.util.stream.Collectors.*; 导入静态方法</span>        Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> map2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"N"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出分数及格的学生集合</span>        Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> listMap <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">getFraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> listMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、group-by分组"><a href="#四、group-by分组" class="headerlink" title="四、group by分组"></a>四、group by分组</h3><ul><li><p>分组 Collectors.groupingBy()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span> Collector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">>>></span> <span class="token function">groupingBy</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token operator">></span> classifier<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">groupingBy</span><span class="token punctuation">(</span>classifier<span class="token punctuation">,</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"N"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出分数为100的学生集合</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> listMap <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getFraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> listMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分组统计</p><ul><li>聚合函数进行统计查询，分组后统计个数</li><li>Collectors.counting() 统计元素个数</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token punctuation">,</span> A<span class="token punctuation">,</span> D<span class="token operator">></span> Collector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> D<span class="token operator">>></span>    <span class="token function">groupingBy</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token operator">></span> classifier<span class="token punctuation">,</span>Collector<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> A<span class="token punctuation">,</span> D<span class="token operator">></span> downstream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">groupingBy</span><span class="token punctuation">(</span>classifier<span class="token punctuation">,</span> HashMap<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> downstream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计各分段的人数</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Long<span class="token operator">></span> map <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getFraction<span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分数："</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、summarizing集合统计"><a href="#五、summarizing集合统计" class="headerlink" title="五、summarizing集合统计"></a>五、summarizing集合统计</h3><ul><li>summarizing 统计相关</li><li>作用：可以一个方法把统计相关的基本上都完成</li><li>分类<ul><li>summarizingInt</li><li>summarizingLong</li><li>summarizingDouble</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span>    Collector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> LongSummaryStatistics<span class="token operator">></span> <span class="token function">summarizingLong</span><span class="token punctuation">(</span>ToLongFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CollectorImpl</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> LongSummaryStatistics<span class="token punctuation">,</span> LongSummaryStatistics<span class="token operator">></span><span class="token punctuation">(</span>                LongSummaryStatistics<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> r<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> l<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> CH_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计各分段的人数</span>        IntSummaryStatistics intSummaryStatistics <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getFraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值："</span> <span class="token operator">+</span> intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人数："</span> <span class="token operator">+</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值："</span> <span class="token operator">+</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值："</span> <span class="token operator">+</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span> <span class="token operator">+</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> 收集器和集合统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8集合框架进阶</title>
      <link href="2020/11/19/jdk8-ji-he-kuang-jia-jin-jie/"/>
      <url>2020/11/19/jdk8-ji-he-kuang-jia-jin-jie/</url>
      
        <content type="html"><![CDATA[<p>JDK1.8集合框架进阶</p><a id="more"></a><h3 id="一、并行流parallelStream"><a href="#一、并行流parallelStream" class="headerlink" title="一、并行流parallelStream"></a>一、并行流parallelStream</h3><ul><li><p>并行流</p><ul><li>集合做重复的操作，如果使用串行执行会相当耗时，因此一般会采用多线程加快，Java8的paralleStream用fork/join框架提供了并发执行能力</li><li>底层原理<ul><li>线程池（ForkJoinPool）维护一个线程队列</li><li>可以分割任务，将父任务拆分成子任务。</li></ul></li></ul></li><li><p>Stream和parallelStream</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//串行</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出有序：123456789 </span><span class="token comment" spellcheck="true">//并行</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出无序：658973421</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>paralleStream并不一定比Stream快</p><ul><li>数据量少的情况，可能串行会更快，ForkJoin会消耗性能</li></ul></li><li><p>部分情况会有线程安全问题，parallelStream使用的外部变量，比如集合一定要使用线程安全的集合，不然就会引发多线程安全问题</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List list1<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//线程不安全的</span>            <span class="token comment" spellcheck="true">//list1 = new ArrayList();</span>            <span class="token comment" spellcheck="true">//线程安全的 add 加锁</span>            list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list1<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ArrayList和CopyOnWriteArrayList</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ArrayList add</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//CopyOnWriteArrayList add</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、reduce操作"><a href="#二、reduce操作" class="headerlink" title="二、reduce操作"></a>二、reduce操作</h3><ul><li><p>聚合操作</p></li><li><p>根据一定规则将Stream中的元素进行计算后返回一个唯一的值</p></li><li><p>常用方法一</p><ul><li>accumulator 计算的累加器</li><li>实例：第一个元素相加和第二个元素相加，结果再和第三个元素相加，直到全部相加完成</li></ul><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">reduce</span><span class="token punctuation">(</span>BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> value <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>常用方法二</p><ul><li>identity ⽤用户提供⼀一个循环计算的初始值</li><li>accumulator 计算的累加器器</li><li>实例：100作为初始值，然后和第一个元素相加，结果在和第二个元素相加，直到全部相加完成</li></ul><pre class="line-numbers language-java"><code class="language-java">T <span class="token function">reduce</span><span class="token punctuation">(</span>T identity<span class="token punctuation">,</span> BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> value2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>常用方法三</p><ul><li>求最大值</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> value3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1645</span><span class="token punctuation">,</span> <span class="token number">234345</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">44434</span><span class="token punctuation">,</span> <span class="token number">564534</span><span class="token punctuation">,</span> <span class="token number">435</span><span class="token punctuation">,</span> <span class="token number">34343542</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> item1 <span class="token operator">></span> item2 <span class="token operator">?</span> item1 <span class="token operator">:</span> item2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、集合的foreach"><a href="#三、集合的foreach" class="headerlink" title="三、集合的foreach"></a>三、集合的foreach</h3><ul><li><p>集合的遍历方式</p><ul><li>for循环</li><li>迭代器Iterator</li><li>foreach</li></ul></li><li><p>注意</p><ul><li>不能修改包含外部的变量的值</li><li>不能用break或者return或者continue等关键词结束或者跳过循环</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//源码</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">90.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">70.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">95.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDK1.8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8集合框架</title>
      <link href="2020/11/18/jdk8-ji-he-kuang-jia/"/>
      <url>2020/11/18/jdk8-ji-he-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>JDK1.8集合框架</p><a id="more"></a><h3 id="一、流stream"><a href="#一、流stream" class="headerlink" title="一、流stream"></a>一、流stream</h3><ul><li><p>Stream 中文称为 “流”，通过将集合转换为这么一种叫做 “流”的元素队列，通过声明性方式，能够对集合中的每个元素进行一系列并行或串行的流水线操作</p></li><li><p>元素是特定类型的对象，所以元素集合看作一种流， 流在管道中传输， 且可以在管道的节点上进行处理， 比如 排序，聚合，过滤等操作</p></li><li><p>操作详情</p><ul><li>数据元素便是原始集合，如List、Set、Map等</li><li>生成流，可以是串行流stream() 或者并行流 parallelStream()</li><li>中间操作，可以是 排序，聚合，过滤，转换等</li><li>终端操作，很多流操作本身就会返回一个流，所以多个操作可以直接连接起来，最后统一进行收集</li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"S"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、流stream里的map和filter函数的使用"><a href="#二、流stream里的map和filter函数的使用" class="headerlink" title="二、流stream里的map和filter函数的使用"></a>二、流stream里的map和filter函数的使用</h3><ul><li><p>map函数</p><ul><li><p>将流中的每一个元素 T 映射为 R（类似类型转换）</p></li><li><p>类似遍历集合，对集合的每个对象做处理</p></li><li><p>场景：转换对象，如集合里面的DO对象转换为DTO对象</p></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"S"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"345"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"678"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> userDTOList <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDTOList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>filter函数</p><ul><li><p>用于通过设置的条件过滤出元素</p></li><li><p>场景：主要用于筛选过滤出符合条件的元素</p></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"springboot"</span><span class="token punctuation">,</span> <span class="token string">"springcloud"</span><span class="token punctuation">,</span>                <span class="token string">"redis"</span><span class="token punctuation">,</span> <span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token string">"netty"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"docker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> obj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span>                <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>综合实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Me"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//筛选出大于10岁小于30岁的用户</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> resultList <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span>                obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//user对象转换为 userDTO</span>        List<span class="token operator">&lt;</span>UserDTO<span class="token operator">></span> userDTOList <span class="token operator">=</span> resultList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span>                <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDTOList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、流stream里的limit和sorted函数的使用"><a href="#三、流stream里的limit和sorted函数的使用" class="headerlink" title="三、流stream里的limit和sorted函数的使用"></a>三、流stream里的limit和sorted函数的使用</h3><ul><li><p>sorted函数</p><ul><li><p>sorted() 对流进行自然排序, 其中的元素必须实现Comparable 接口</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//默认升序</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"springboot"</span><span class="token punctuation">,</span> <span class="token string">"springCloud"</span><span class="token punctuation">,</span>                <span class="token string">"redis"</span><span class="token punctuation">,</span> <span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token string">"netty"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"docker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList <span class="token operator">=</span>                list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>sorted(Comparator&lt;? super T&gt; comparator) 用来自定义排序规则，以及升降序</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//自定义排序规则</span>        <span class="token comment" spellcheck="true">//根据长度排序,默认升序</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据长度排序,降序</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据长度排序，降序，::方法引用的方式</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">,</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//根据年龄降序排序</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Me"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> resultList <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>limit函数</p><ul><li><p>截断流使其最多只包含指定数量的元素</p></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找出年龄最小的用户，升序排列，limit(1)</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Me"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> resultList <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">naturalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//limit截取</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"springboot"</span><span class="token punctuation">,</span> <span class="token string">"springCloud"</span><span class="token punctuation">,</span>                <span class="token string">"redis"</span><span class="token punctuation">,</span> <span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token string">"netty"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"docker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> resultList3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">,</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultList3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、流stream里的allMatch和anyMatch函数的使用"><a href="#四、流stream里的allMatch和anyMatch函数的使用" class="headerlink" title="四、流stream里的allMatch和anyMatch函数的使用"></a>四、流stream里的allMatch和anyMatch函数的使用</h3><ul><li><p>allMatch函数</p><ul><li>检查是否匹配所有元素，只有全部符合才返回true</li></ul></li><li><p>anyMatch函数</p><ul><li>检查是否至少匹配一个元素</li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找出年龄最小的用户，升序排列，limit(1)</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Me"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//全部满足返回true</span>        <span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其中一项满足条件就返回true</span>        <span class="token keyword">boolean</span> flag3 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag3<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"springboot"</span><span class="token punctuation">,</span> <span class="token string">"springCloud"</span><span class="token punctuation">,</span>                <span class="token string">"redis"</span><span class="token punctuation">,</span> <span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token string">"netty"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"docker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//全部满足返回true</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> obj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其中一项满足条件就返回true</span>        <span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> obj<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、流stream里的max和min函数的使用"><a href="#五、流stream里的max和min函数的使用" class="headerlink" title="五、流stream里的max和min函数的使用"></a>五、流stream里的max和min函数的使用</h3><ul><li><p>max和min函数</p></li><li><p>最大值和最小值</p></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LD"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Me"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出年龄最大的用户</span>        <span class="token comment" spellcheck="true">//1</span>        User user <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2</span>        Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> optionalUser <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出年龄最小的用户</span>        <span class="token comment" spellcheck="true">//1</span>        User user1 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2</span>        Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> optionalUser2 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalUser2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDK1.8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8方法引用与构造函数引用</title>
      <link href="2020/11/18/jdk8-fang-fa-yin-yong-yu-gou-zao-han-shu-yin-yong/"/>
      <url>2020/11/18/jdk8-fang-fa-yin-yong-yu-gou-zao-han-shu-yin-yong/</url>
      
        <content type="html"><![CDATA[<p>以前方法调用: 对象.方法名 或者 类名.方法名</p><p>jdk1.8提供了另外一种调用方式 ：双冒号::</p><a id="more"></a><ul><li><p>说明:方法引用是一种更简洁易懂的lambda表达式，操作符是双冒号::，用来直接访问类或者实例已经存在的方法或构造方法</p></li><li><p>通过方法引用，可以将方法的引用赋值给一个变量量</p></li><li><p>语法：左边是容器（可以是类名，实例名），中间是” :: “，右边是相应的方法名</p><ul><li>静态方法，则是ClassName::methodName。如 Object ::equals</li><li>实例方法，则是Instance::methodName</li><li>构造函数，则是 类名::new;</li><li>单个参数<ul><li>Function&lt;入参1, 返回类型&gt; func = 方法引用</li><li>应用 func.apply(入参);</li></ul></li><li>2个参数<ul><li>BiFunction&lt;入参1,入参2, 返回类型&gt; func = 方法引用</li><li>应用 func.apply(入参1,入参2);</li></ul></li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>BiFunction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用双冒号::, 引用构造静态函数</span>        <span class="token comment" spellcheck="true">//Integer.parseInt("1024");</span>        Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> function <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>parseInt<span class="token punctuation">;</span>        Integer value <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"1024"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用双冒号::，引用构造非静态函数</span>        String content <span class="token operator">=</span> <span class="token string">"测试引用构造非静态函数"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//content.substring(1);</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> function1 <span class="token operator">=</span> content<span class="token operator">:</span><span class="token operator">:</span>substring<span class="token punctuation">;</span>        String result <span class="token operator">=</span> function1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造函数引用，多个参数</span>        BiFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> User<span class="token operator">></span> biFunction <span class="token operator">=</span> User<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> biFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造函数引用，单参数</span>        Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> function2 <span class="token operator">=</span> User<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> function2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"名称2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//函数引用（字符串转换大写）</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">,</span> <span class="token string">"ldclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> function<span class="token punctuation">,</span> String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8函数式编程</title>
      <link href="2020/11/18/jdk8-han-shu-shi-bian-cheng/"/>
      <url>2020/11/18/jdk8-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>Lambda表达式必须先定义接口，创建相关方法之后才可使用，这样做十分不便，其实java8已经内置了许多接口, 例如下面四个功能型接口，所以一般很少会由用户去定义新的函数式接口    </p><a id="more"></a><ul><li>Java8的最大特性就是函数式接口，所有标注了@FunctionalInterface注解的接口都是函数式接口</li><li>Java8 内置的四⼤大核⼼心函数式接口<ul><li>Consumer<t> : 消费型接口：有入参，无返回值<ul><li>void accept(T t);</li></ul></t></li><li>Supplier<t> : 供给型接口：无入参，有返回值<ul><li>T get();</li></ul></t></li><li>Function&lt;T, R&gt; : 函数型接口：有入参，有返回值<ul><li>R apply(T t);</li></ul></li><li>Predicate<t> : 断言型接口：有入参，有返回值，返回值类型确定是boolean<ul><li>boolean test(T t);</li></ul></t></li></ul></li></ul><h3 id="一、函数式编程-Function"><a href="#一、函数式编程-Function" class="headerlink" title="一、函数式编程 Function"></a>一、函数式编程 Function</h3><ul><li><p>传入一个值经过函数的计算返回另一个值</p></li><li><p>T：入参类型，R：出参类型</p><ul><li><p>调用方法 R apply(T t)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*** Applies this function to the given argument.** @param t the function argument* @return the function result*/</span>R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>作用：将转换逻辑提取出来，解耦合</p></li><li><p>自定义Function</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionObj</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">apply</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> o<span class="token operator">+</span><span class="token string">"经过apply处理理拼接上了了"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用内置Function</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输出⼊入参的10倍</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> func <span class="token operator">=</span> p <span class="token operator">-</span><span class="token operator">></span> p <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、函数式编程-BiFunction"><a href="#二、函数式编程-BiFunction" class="headerlink" title="二、函数式编程 BiFunction"></a>二、函数式编程 BiFunction</h3><ul><li><p>Function只能接收一个参数，如果要传递两个参数,则用 BiFunction</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">operator</span><span class="token punctuation">(</span>Integer a<span class="token punctuation">,</span>Integer b<span class="token punctuation">,</span>BiFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> bf<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> bf<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、函数式编程-Consumer"><a href="#三、函数式编程-Consumer" class="headerlink" title="三、函数式编程 Consumer"></a>三、函数式编程 Consumer</h3><ul><li><p>Consumer 消费型接口：有入参，无返回值</p></li><li><p>将 T 作为输入，不返回任何内容</p><ul><li><p>调用方法：void accept(T t);</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>用途： 因为没有出参，常用于打印、发送短信等消费动作</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> obj<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">"888888"</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">"999999"</span><span class="token punctuation">,</span>obj<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span>Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer<span class="token punctuation">)</span><span class="token punctuation">{</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>典型应用</p><pre class="line-numbers language-java"><code class="language-java">         List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、函数式编程-Supplier"><a href="#四、函数式编程-Supplier" class="headerlink" title="四、函数式编程 Supplier"></a>四、函数式编程 Supplier</h3><ul><li><p>Supplier: 供给型接口：无入参，有返回值</p></li><li><p>T：出参类型；没有入参</p><ul><li><p>调用方法：T get();</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>用途： 泛型一定和方法的返回值类型是一种类型，如果需要获得一个数据,并且不需要传入参数,可以使用Supplier接口，例如 无参的工厂方法，即工厂设计模式创建对象，简单来说就是 提供者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Student <span class="token function">newStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Supplier<span class="token operator">&lt;</span>Student<span class="token operator">></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>         Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> student<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、函数式编程-Predicate"><a href="#五、函数式编程-Predicate" class="headerlink" title="五、函数式编程 Predicate"></a>五、函数式编程 Predicate</h3><ul><li><p>Predicate: 断言型接口：有入参，有返回值，返回值类型确定是boolean</p></li><li><p>T：入参类型；出参类型是Boolean</p><ul><li><p>调用方法：boolean test(T t);</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>用途： 接收一个参数，用于判断是否满足一定的条件，过滤数据</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"asadasd"</span><span class="token punctuation">,</span> <span class="token string">"vsaad"</span><span class="token punctuation">,</span> <span class="token string">"bwdasd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> results <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String str<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8之Lambda表达式</title>
      <link href="2020/11/18/jdk8-zhi-lambda-biao-da-shi/"/>
      <url>2020/11/18/jdk8-zhi-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p>JDK8之Lambda表达式</p><a id="more"></a><h3 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h3><ul><li><p>在JDK8之前，Java是不支持函数式编程的，所谓的函数编程，即可理解是将一个函数（也称为“行为”）作为一个参数进行传递， 面向对象编程是对数据的抽象（各种各样的POJO类），而函数式编程则是对行为的抽象（将行为作为一个参数进行传递）</p></li><li><p>创建线程</p><pre class="line-numbers language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//原</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Lambda</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>集合排序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"gggg"</span><span class="token punctuation">,</span> <span class="token string">"ccccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Lambda</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>lambda表达式使用场景(前提)：一个接口中只包含一个方法，则可以使用Lambda表达式，这样的接口称之为“函数接口” 语法： (params) -&gt; expression</p><pre><code>第一部分为括号内用逗号分隔的形式参数，参数是函数式接口里面方法的参数；第二部分为一个箭头符号：-&gt;；第三部分为方法体，可以是表达式和代码块参数列列表 ：    括号中参数列表的数据类型可以省略不写    括号中的参数只有一个，那么参数类型和()都可以省略不写方法体：如果{}中的代码只有一行，无论有返回值，可以省略{}，return，分号，要一起省略，其他则需要加上</code></pre></li><li><p>好处： Lambda 表达式的实现方式在本质是以匿名内部类的方式进行实现</p></li></ul><h3 id="二、自定义lambda接口编程"><a href="#二、自定义lambda接口编程" class="headerlink" title="二、自定义lambda接口编程"></a>二、自定义lambda接口编程</h3><ul><li><p>自定义lambda接口流程</p><ul><li>定义一个函数式接口 需要标注此接口 @FunctionalInterface，否则万一团队成员在接口上加了其他方法则容易出故障</li><li>编写一个方法，输入需要操做的数据和接口</li><li>在调用方法时传入数据 和 lambda 表达式，用来操作数据</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperFunction</span><span class="token operator">&lt;</span>R<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    R <span class="token function">operator</span><span class="token punctuation">(</span>T t1<span class="token punctuation">,</span> T t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">operator</span><span class="token punctuation">(</span>Integer x<span class="token punctuation">,</span> Integer y<span class="token punctuation">,</span> OperFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> of<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> of<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8新特性</title>
      <link href="2020/11/17/jdk8-xin-te-xing/"/>
      <url>2020/11/17/jdk8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<p>JDK1.8新特性</p><a id="more"></a><h3 id="一、JDK8之default关键字"><a href="#一、JDK8之default关键字" class="headerlink" title="一、JDK8之default关键字"></a>一、JDK8之default关键字</h3><ul><li><p>在jdk1.8以前，接口里只能有抽象方法，不能有任何方法的实现</p></li><li><p>jdk1.8引入了default关键字，使用default修饰的方法，可以在接口里定义具体的方法实现</p></li><li><p>实现类实现这个接口后，不用重写default修饰的方法就可以直接调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dog dog <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、JDK8之base64加解密API"><a href="#二、JDK8之base64加解密API" class="headerlink" title="二、JDK8之base64加解密API"></a>二、JDK8之base64加解密API</h3><ul><li><p>base64是最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法 ，基于64个字符A-Z,a-z，0-9，+，/的编码方式，是一种能将任意二进制数据用64种字节组合成字符串的方法，而这个二进制数据和字符串资料之间是可以互相转换的，在实际应用中，Base64除了能将二进制数据可视化之外，也常用来表示字串加密后的内容</p></li><li><p>早期base64</p><ul><li><p>使用JDK里sun.misc套件下的BASE64Encoder和BASE64Decoder这两个类</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BASE64Decoder base64Decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">"小滴课堂"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编码</span>        String encodedText <span class="token operator">=</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>base64Decoder<span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>缺点：编码和解码的效率比较差，公开信息说以后的版本会取消这个方法</p></li></ul></li><li><p>Apache Commons Codec有提供Base64的编码与解码 </p><ul><li>缺点：是需要引用ApacheCommons Codec包</li></ul></li><li><p>jdk1.8之base64</p><ul><li><p>Jdk1.8的java.util包中，新增了Base64的类</p></li><li><p>好处：不用引包，编解码销量远大于 sun.misc 和 Apache Commons Codec</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Base64<span class="token punctuation">.</span>Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Base64<span class="token punctuation">.</span>Decoder decoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">"小滴课堂"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编码</span>        String encodedText <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="三、JDK8之时间处理类"><a href="#三、JDK8之时间处理类" class="headerlink" title="三、JDK8之时间处理类"></a>三、JDK8之时间处理类</h3><ul><li><p>时间处理类：SimpleDateFormat,Calendar,Date等</p></li><li><p>旧版缺点： java.util.Date 是非线程安全的 API设计比较差，日期/时间对象比较，加减麻烦</p></li><li><p>JDK8新增API</p><ul><li><p>java.time</p></li><li><p>核心类</p><pre><code>LocalDate：不包含具体时间的日期。LocalTime：不含日期的时间。LocalDateTime：包含了日期及时间。</code></pre></li><li><p>LocalDate</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天日期:"</span><span class="token operator">+</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取年月日，周</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年："</span><span class="token operator">+</span>today<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月："</span><span class="token operator">+</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月（数字）:"</span><span class="token operator">+</span>today<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日："</span><span class="token operator">+</span>today<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周几："</span><span class="token operator">+</span>today<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDate changeDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更改后："</span><span class="token operator">+</span>changeDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//日期比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isBefore:"</span><span class="token operator">+</span>changeDate<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//常用API</span><span class="token comment" spellcheck="true">//getYear() int 获取当前日期的年份</span><span class="token comment" spellcheck="true">//getMonth() Month 获取当前日期的月份对象</span><span class="token comment" spellcheck="true">//getMonthValue() int 获取当前日期是第几月</span><span class="token comment" spellcheck="true">//getDayOfWeek() DayOfWeek 表示该对象表示的日期是星期几</span><span class="token comment" spellcheck="true">//getDayOfMonth() int 表示该对象表示的日期是这个月第几天</span><span class="token comment" spellcheck="true">//getDayOfYear() int 表示该对象表示的日期是今年第几天</span><span class="token comment" spellcheck="true">//withYear(int year) LocalDate 修改当前对象的年份</span><span class="token comment" spellcheck="true">//withMonth(int month) LocalDate 修改当前对象的月份</span><span class="token comment" spellcheck="true">//withDayOfMonth(int dayOfMonth) LocalDate 修改当前对象在当月的日期</span><span class="token comment" spellcheck="true">//plusYears(long yearsToAdd) LocalDate 当前对象增加指定的年份数</span><span class="token comment" spellcheck="true">//plusMonths(long monthsToAdd) LocalDate 当前对象增加指定的月份数</span><span class="token comment" spellcheck="true">//plusWeeks(long weeksToAdd) LocalDate 当前对象增加指定的周数</span><span class="token comment" spellcheck="true">//plusDays(long daysToAdd) LocalDate 当前对象增加指定的天数</span><span class="token comment" spellcheck="true">//minusYears(long yearsToSubtract) LocalDate 当前对象减去指定的年数</span><span class="token comment" spellcheck="true">//minusMonths(long monthsToSubtract) LocalDate 当前对象减去指定的月数</span><span class="token comment" spellcheck="true">//minusWeeks(long weeksToSubtract) LocalDate 当前对象减去指定的周数</span><span class="token comment" spellcheck="true">//minusDays(long daysToSubtract) LocalDate 当前对象减去指定的天数</span><span class="token comment" spellcheck="true">//compareTo(ChronoLocalDate other) int 比较当前对象和other对象在时间上的大小，返回值如果为正，则当前对象时间较晚，</span><span class="token comment" spellcheck="true">//isBefore(ChronoLocalDate other) boolean 比较当前对象日期是否在other对象日期之前</span><span class="token comment" spellcheck="true">//isAfter(ChronoLocalDate other) boolean 比较当前对象日期是否在other对象日期之后</span><span class="token comment" spellcheck="true">//isEqual(ChronoLocalDate other) boolean 比较两个日期对象是否相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>LocalTime</p><pre class="line-numbers language-java"><code class="language-java">       LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出16:14:29.474</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>LocalDateTime</p><pre class="line-numbers language-java"><code class="language-java">        LocalDateTime localDateTime <span class="token operator">=</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出2020-11-17T16:14:29.474</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>日期时间格式化</p><ul><li><p>JDK8之前：SimpleDateFormat来进行格式化，但SimpleDateFormat并不是线程安全的</p></li><li><p>JDK8之后：引入线程安全的日期与时间DateTimeFormatter</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出2020-11-17T16:14:29.474</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ldStr <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取指定的时间日期对象</p><pre class="line-numbers language-java"><code class="language-java">LocalDateTime ldt <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>计算日期时间差 java.time.Duration</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalDateTime today <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime changeDate <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>changeDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二个参数减第一个参数</span>        Duration duration <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span> today<span class="token punctuation">,</span>changeDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个时间差的天数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个时间差的小时数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个时间差的分钟数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个时间差的毫秒数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个时间差的纳秒数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、JDK8之Optional类"><a href="#四、JDK8之Optional类" class="headerlink" title="四、JDK8之Optional类"></a>四、JDK8之Optional类</h3><ul><li><p>主要解决空指针异常（NullPointerException）</p></li><li><p>本质是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p></li><li><p>创建Optional类</p><ul><li><p>of()类</p><ul><li><p>null值作为参数传递进去，会抛异常</p><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> null<span class="token punctuation">;</span>Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>ofNullable()</p><ul><li><p>如果对象即可能是 null 也可能是非 null，应该使用 ofNullable() 方法</p><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> opt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>访问 Optional 对象的值</p><ul><li><p>get() </p><ul><li><p>如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象一般使用get之前需要先验证是否有值，不然会报错</p><pre class="line-numbers language-java"><code class="language-java">           Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"optional不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student s <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"optional为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>兜底 orElse方法</p><ul><li><p>orElse()如果有值则返回该值，否则返回传递给它的参数值</p><pre class="line-numbers language-java"><code class="language-java">Student student1 <span class="token operator">=</span> null<span class="token punctuation">;</span>Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student result <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="五、内存空间"><a href="#五、内存空间" class="headerlink" title="五、内存空间"></a>五、内存空间</h3><blockquote><p>内存空间MetaSpace </p></blockquote><ul><li>JVM 种类有很多，比如 Oralce-Sun Hotspot, Oralce JRockit, IBM J9, Taobao JVM</li><li>JVM内存知识 在JDK8之前的HotSpot JVM，有个区域叫做“永久代(permanent generation)， 通过在命令行设置参数-XX:MaxPermSize来设定永久代最大可分配的内存空间<ul><li>如果JDK8里面设置了PermSize 和 MaxPermSize 会被忽略并给出警告</li></ul></li><li>作用：该块内存主要是被JVM用来存放 class 和 mate 信息的，当 class 被加载 loader 的时候就会被存储到该内存区中，如方法的编译信息及字节码、常量池和符号解析、类的层级信息，字段，名字等</li><li>java.lang.OutOfMemoryError: PermGen space<ul><li>原因是: 永久代空间不不够，类太多导致</li></ul></li><li>jdk8的修改 JDK8 HotSpot JVM 使用本地内存来存储类元数据信息，叫做元空间（Metaspace）</li><li>在默认情况下Metaspace的大小只与本地内存大小有关</li><li>常用的两个参数 <ul><li>-XX:MetaspaceSize=N 指Metaspace扩容时触发FullGC的初始化阈值</li><li>-XX:MaxMetaspaceSize=N 指用于限制Metaspace增长的上限，防止因为某些情况导致Metaspace无限的使用本地内存</li><li>不管两个参数如何设置，都会从20.8M开始，然后随着类加载越来越多不断扩容调整直到最大</li><li>查看大小 jstat -gc pid <ul><li>MC: current metaspace capacity 容量</li><li>MU: mateaspace utilization  已使用</li><li>单位是KB</li></ul></li></ul></li></ul><h3 id="六、try-with-resources"><a href="#六、try-with-resources" class="headerlink" title="六、try-with-resources"></a>六、try-with-resources</h3><ul><li><p>资源的关闭，在try( …)里声明的资源，会在try-catch代码块结束后自动关闭掉</p></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原关闭资源</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"F:/test.txt"</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String filepath<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filepath<span class="token operator">+</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新关闭资源</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"F:/test.txt"</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String filepath<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span> OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filepath<span class="token operator">+</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意：</p><ul><li>实现了AutoCloseable接口的类，在try()里声明该类实例的时候，try结束后自动调用的close方法，这个动作会早于finally里调用的方法</li><li>不管是否出现异常，try()里的实例都会被调用close方法</li><li>try里面可以声明多个自动关闭的对象，越早声明的对象，会越晚被close</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
            <tag> 时间处理类 </tag>
            
            <tag> Optional类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb常见面试题</title>
      <link href="2020/11/16/javaweb-chang-jian-mian-shi-ti/"/>
      <url>2020/11/16/javaweb-chang-jian-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p>JavaWeb常见面试题</p><a id="more"></a><h3 id="一、javaweb常见servlet面试题"><a href="#一、javaweb常见servlet面试题" class="headerlink" title="一、javaweb常见servlet面试题"></a>一、javaweb常见servlet面试题</h3><ul><li><p>说下servlet的生命周期</p><ul><li>实例化-&gt;使用构造方法创建对象</li><li>初始化-&gt;执行init方法：Servlet 的生命期中，仅执行一次 init() 方法，它是在服务器装入 Servlet 时执行的,即第一次访问这个Servlet才执行</li><li>服务-&gt;执行service方法，service() 方法是 Servlet 的核心。每当一个客户请求一个HttpServlet 对象，该对象的service() 方法就要被调用</li><li>销毁-&gt; 执行destroy方法,destroy() 方法仅执行一次，即在服务器停止且卸装 Servlet 时执行该方法</li></ul></li><li><p>Servlet API中forward()和redirect()的区别</p><ul><li>重定向会改变URL地址，请求转发不会改变URL地址</li><li>重定向不可以使用多个作用域的内容，请求转发可以</li><li>重定向可以用URL访问外部资源，请求转发只能跳转内部资源</li><li>重定向会触发多次请求；转发的话只在内部跳转</li></ul></li><li><p>说下Cookie和Session的区别和联系</p><ul><li>cookie数据保存在客户端，session数据保存在服务端</li><li>cookie不是很安全，容易泄露，不能直接明文存储信息</li><li>Cookie大小和数量存储有限制</li></ul></li><li><p>客户端存储除了Cookie，还有什么？</p><ul><li>localStroage</li><li>sessionStorage</li></ul></li></ul><h3 id="二、JDBC常见面试题"><a href="#二、JDBC常见面试题" class="headerlink" title="二、JDBC常见面试题"></a>二、JDBC常见面试题</h3><ul><li><p>说下JDBC连接数据库的开发步骤</p><ul><li>加载数据库连接驱动    </li><li>获取数据连接对象</li><li>获取语句对象<ul><li>会话对象有两种Statement和PreparedStatement </li></ul></li><li>执行语句</li><li>处理结果集</li><li>关闭资源   <ul><li>rs.close()、st.close()、conn.close()</li><li>注意关闭顺序以及处理异常</li></ul></li></ul></li><li><p>JDBC中的Statement 和PreparedStatement的区别</p><ul><li>PreparedStatement在执行之前会进行预编译</li><li>效率高于Statement,且能够有效防止SQL注入</li><li>PreparedStatement支持?占位符而不是直接拼接，提高可读性</li></ul></li><li><p>数据库连接池工作原理和优点</p><ul><li>先创建一定数量的连接对象存放在连接池</li><li>需要使用连接对象的时候，从连接池中请求一个空闲的连接</li><li>使用完毕之后，并不会把连接关闭，而是还给连接池</li><li>优点：<ul><li>系统响应速度加快</li><li>资源利用率高</li></ul></li></ul></li></ul><h3 id="三、http常见面试题"><a href="#三、http常见面试题" class="headerlink" title="三、http常见面试题"></a>三、http常见面试题</h3><ul><li><p>http请求 get和post的区别？</p><ul><li>get是用来从服务器上获取数据，而post是用来向服务器上传递数据</li><li>get是不安全的，因为在传输过程中，数据被放在请求的URL中,post是放到body里面，对小白用户不可见</li><li>get传输的数据量小，主要是由于受URL长度的限制；post可以传输大量的数据，一般上传文件只能用post</li></ul></li><li><p>浏览器输入一个地址，到页面展示中间经历了哪些处理</p><ul><li>浏览器输入url, 解析url地址是否合法</li><li>浏览器检查是否有缓存, 如果有直接显示。如果没有跳到第三步。</li><li>在发送http请求前，需要域名解析（DNS解析），解析获取对应过的ip地址。</li><li>浏览器向服务器发起tcp链接，完成tcp三次握手</li><li>握手成功后，浏览器向服务器发送http请求</li><li>服务器收到处理的请求，将数据返回至浏览器</li><li>浏览器收到http响应。</li><li>浏览器解析响应。如果响应可以缓存，则存入缓存</li><li>浏览器进行页面渲染</li></ul></li><li><p>你知道HTTP有哪些状态码吗,列举下 </p><ul><li>200：成功</li><li>302：重定向</li><li>404：请求失败，基本都是路径拼接错误</li><li>400：请求没有进入到后台服务里，比如http报文有问题</li><li>502：无效的响应（基本上就是Tomcat没启好或者挂了）</li></ul></li><li><p>你知道http和https的区别不，简单说下</p><ul><li>HTTPS = HTTP + SSL</li><li>https有ca证书，http一般没有</li><li>http是超文本传输协议，信息是明文传输。https则是具有安全性的ssl加密传输协议</li><li>http默认80端口，https默认443端口。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面技术bootstrap+jsp</title>
      <link href="2020/11/16/ye-mian-ji-zhu-bootstrap-jsp/"/>
      <url>2020/11/16/ye-mian-ji-zhu-bootstrap-jsp/</url>
      
        <content type="html"><![CDATA[<p>页面技术 bootstrap + jsp</p><a id="more"></a><ul><li><p>bootstrap 3.x地址：<a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></p></li><li><p>添加相关依赖js和css</p><ul><li>bootstrap.min.css</li><li>bootstrap.min.js</li><li>jquery.min.js</li></ul></li><li><p>页面基础</p><ul><li>加载head标签中</li></ul><pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;&lt;link rel="stylesheet" href="${pageContext.request.contextPath}/static/bootstrap.min.css"&gt;&lt;script src="${pageContext.request.contextPath}/static/bootstrap.min.js"&gt;&lt;/script&gt;&lt;script src="${pageContext.request.contextPath}/static/jquery.min.js"&gt;&lt;/script&gt;</code></pre></li><li><p>pom文件添加依赖</p><pre><code>&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;&lt;dependency&gt;     &lt;groupId&gt;taglibs&lt;/groupId&gt;     &lt;artifactId&gt;standard&lt;/artifactId&gt;     &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;    &lt;artifactId&gt;jstl&lt;/artifactId&gt;    &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre></li><li><p>jsp页面添加jstl表达式依赖包</p><pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</code></pre></li><li><p>修改web.xml版本</p><pre><code>&lt;web-app  version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://java.sun.com/xml/ns/j2eehttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL忘记密码</title>
      <link href="2020/11/16/mysql-wang-ji-mi-ma/"/>
      <url>2020/11/16/mysql-wang-ji-mi-ma/</url>
      
        <content type="html"><![CDATA[<p>mysql忘记密码</p><a id="more"></a><h3 id="一、windows"><a href="#一、windows" class="headerlink" title="一、windows"></a>一、windows</h3><ul><li><p>停止服务</p><ul><li>管理员启动cmd,输入 net stop mysql</li></ul></li><li><p>打开一个cmd窗口，切换到mysql的bin目录，运行命令</p><ul><li>mysqld –defaults-file=”E:\mysql-5.7.31\mysql-5.7.31-winx64\my.ini” –skip-grant-tables</li><li>该命令通过跳过权限安全检查，开启mysql服务，这样连接mysql时，可以不用输入用户密码。</li></ul></li><li><p>再打开一个cmd窗口</p><ul><li>连接mysql：mysql -uroot -p，出现Enter password: 直接回车，进入mysql</li></ul></li><li><p>切换到mysql数据库</p><ul><li>use mysql;</li><li>使用命令更改root密码：<ul><li>update user set password=password(“新密码”) where user=”root’;5.7之前版本用这个命令</li><li>update mysql.user set authentication_string=password(‘新密码’) where user=’root’; 这是5.7版本的命令</li></ul></li></ul></li><li><p>刷新权限</p><ul><li>flush privileges;</li></ul></li><li><p>退出</p><ul><li>quit</li></ul></li><li><p>启动服务</p><ul><li>关闭所有cmd窗口</li><li>管理员启动一个cmd</li><li>输入 net start mysql</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用PageDTO</title>
      <link href="2020/11/16/tong-yong-pagedto/"/>
      <url>2020/11/16/tong-yong-pagedto/</url>
      
        <content type="html"><![CDATA[<p>通用PageDTO开发</p><a id="more"></a><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>forum<span class="token punctuation">.</span>dto<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageDTO</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 当前页码     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 每页显示记录数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 总条数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalRecord<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 总页数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalPage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数据集合泛型     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PageDTO</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNumber<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> totalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNumber <span class="token operator">=</span> pageNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalRecord <span class="token operator">=</span> totalRecord<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算总页数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalRecord <span class="token operator">%</span> pageSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            totalPage <span class="token operator">=</span> totalRecord <span class="token operator">/</span> pageSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            totalPage <span class="token operator">=</span> totalRecord <span class="token operator">/</span> pageSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pageNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPageNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNumber <span class="token operator">=</span> pageNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pageSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTotalRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> totalRecord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTotalRecord</span><span class="token punctuation">(</span><span class="token keyword">int</span> totalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalRecord <span class="token operator">=</span> totalRecord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTotalPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> totalPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTotalPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> totalPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalPage <span class="token operator">=</span> totalPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"PageDTO{"</span> <span class="token operator">+</span>                <span class="token string">"pageNumber="</span> <span class="token operator">+</span> pageNumber <span class="token operator">+</span>                <span class="token string">", pageSize="</span> <span class="token operator">+</span> pageSize <span class="token operator">+</span>                <span class="token string">", totalRecord="</span> <span class="token operator">+</span> totalRecord <span class="token operator">+</span>                <span class="token string">", totalPage="</span> <span class="token operator">+</span> totalPage <span class="token operator">+</span>                <span class="token string">", list="</span> <span class="token operator">+</span> list <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 分页接口 </tag>
            
            <tag> PageDTO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装通用的BaseServlet</title>
      <link href="2020/11/16/feng-zhuang-tong-yong-de-baseservlet/"/>
      <url>2020/11/16/feng-zhuang-tong-yong-de-baseservlet/</url>
      
        <content type="html"><![CDATA[<p>封装通用的Servlet,当子类的Servlet被访问时，会调用service方法，这时如果子类没有重写，那么就会调用父类的service方法。这样子类就可以不必重写doGet，doPost</p><a id="more"></a><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>forum<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"BaseServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Description: 子类的Servlet被访问，会调用service方法，子类没有重写，那么就会调用父类的service方法     * @Date: 2020/11/15 16:11     * @param req     * @param resp     * @return: void     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求方法</span>        String method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获得当前被访问的对象的字节码对象，和字节码对象里指定的方法</span>                Method targetMethod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//执行方法</span>                targetMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库ER关系图设计</title>
      <link href="2020/11/15/shu-ju-ku-er-guan-xi-tu-she-ji/"/>
      <url>2020/11/15/shu-ju-ku-er-guan-xi-tu-she-ji/</url>
      
        <content type="html"><![CDATA[<p>实体关系图，是一种提供了实体，属性和联系的方法，用来描述现实世界的概念模型</p><a id="more"></a><ul><li><p>实体</p><ul><li>现实世界中的对象，可以具体到人，事，物，比如 学生、教师、商品、订单、主题、菜单等</li><li>ER图里面 用矩形表示，矩形框内写明实体名</li></ul></li><li><p>属性</p><ul><li>实体所具有的某一个特性称为属性，在E-R图中属性用来描述实体，比如 商品实体，有标题、价格、图片等属性</li><li>ER图里面用椭圆形或圆角矩形表示，并用无向边将其与相应的实体连接起来</li></ul></li><li><p>关系</p><ul><li>任何事物都不是孤立存在的，事物内部和事物之间都有联系的，实体之间的联系通常有3种类型：一对一联系，一对多联系，多对多联系；比如商品和订单的关系、班级和学生的关系、主题和评论的关系</li><li>ER图里用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来<ul><li>1对1关系在两个实体连线方向写1； 　　</li><li>1对多关系在1的一方写1，多的一方写N； 　　</li><li>多对多关系则是在两个实体连线方向各写N,M</li></ul></li></ul></li><li><p>示例</p><img src="/2020/11/15/shu-ju-ku-er-guan-xi-tu-she-ji/ER.png" title="ER图"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> ER图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作工具类和池化思想</title>
      <link href="2020/11/15/shu-ju-ku-cao-zuo-gong-ju-lei-he-chi-hua-si-xiang/"/>
      <url>2020/11/15/shu-ju-ku-cao-zuo-gong-ju-lei-he-chi-hua-si-xiang/</url>
      
        <content type="html"><![CDATA[<p>数据库操作工具类和池化思想</p><a id="more"></a><h3 id="一、数据库操作工具类"><a href="#一、数据库操作工具类" class="headerlink" title="一、数据库操作工具类"></a>一、数据库操作工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDBUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>CustomDBUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关闭数据库资源     *     * @param resultSet     * @param preparedStatement     * @param connection     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> PreparedStatement preparedStatement<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据库连接池"><a href="#二、数据库连接池" class="headerlink" title="二、数据库连接池"></a>二、数据库连接池</h3><ul><li>数据库连接池化思想<ul><li>为什么要用连接池<ul><li>数据库建立Connection比较耗时，频繁的创建和释放连接引起的大量性能开销</li><li>如果数据库连接得到重用，避免这些开销，也提高了系统稳定</li><li>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于池中备用，对于业务请求处理而言，直接利用现有可用连接，缩减了系统整体响应时间</li><li>统一的连接管理，避免数据库连接泄漏、超时占用等问题</li></ul></li><li>同类对比其他池化思想<ul><li>Java线程池</li><li>tomcat连接池</li><li>对象池（SpringIOC容器）</li></ul></li></ul></li></ul><h3 id="三、常用的DB工具类和数据库连接池"><a href="#三、常用的DB工具类和数据库连接池" class="headerlink" title="三、常用的DB工具类和数据库连接池"></a>三、常用的DB工具类和数据库连接池</h3><ul><li><p>数据库工具类 : Apache commens-dbutils</p><ul><li>Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装,能极大简化jdbc编码的工作量，同时也不会影响程序的性能</li><li>地址：<a href="https://commons.apache.org/proper/commons-dbutils/" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-dbutils/</a></li><li>导入<ul><li>可以添加到tomcat的lib包</li><li>可以添加到web-inf的lib包</li></ul></li></ul></li><li><p>数据库连接池：c3p0、druid、dbcp</p><ul><li>dbcp: 全称 DataBase connection pool，数据库连接池是 apache 上的一个Java连接池项目</li><li>地址：<a href="http://commons.apache.org/proper/commons-dbcp/" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-dbcp/</a></li></ul></li><li><p>Apache dbcp数据库连接池封装DataSourceUtils</p><ul><li><p>创建配置文件database.properties</p><pre><code>driverClassName = com.mysql.jdbc.Driverurl = jdbc:mysql://127.0.0.1:3306/xd_web?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falseusername = rootpassword = Root@123#连接池建立时创建的连接的数量initialSize=2           #连接池同一时间内最多能够分配的活动连接的数量maxActive=15            </code></pre></li><li><p>封装工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span>BasicDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceUtil</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource dataSource<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           InputStream inputStream <span class="token operator">=</span> DataSourceUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"database.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>           dataSource <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化DBPC失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、Apache-dbutils工具"><a href="#四、Apache-dbutils工具" class="headerlink" title="四、Apache dbutils工具"></a>四、Apache dbutils工具</h3><ul><li><p>QueryRunner</p><ul><li><p>查询执行器，提供对sql语句操作的API</p></li><li><p>update(String sql,Object…params) 可执行 增-INSERT、删-DELETE、改-UPDATE</p></li><li><p>query(String sql,ResultSetHandler rsh,Object…params) 可执行 查询-SELECT</p></li></ul></li></ul><ul><li><p>ResultSetHandler</p><ul><li><p>结果集处理类，执行处理一个结果集对象，将数据转变并处理为任何一种形式</p><ul><li>BeanHandler 结果集中的第一行数据封装到一个对应的JavaBean实例</li><li>BeanListHandler 结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里</li><li>MapHandler 结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值</li><li>MapListHandler 结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li>ScalarHandler 结果集中第一行数据指定列的值,常用来进行单值查询</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DataSourceUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>public class UserDao {    private QueryRunner queryRunner = new QueryRunner(DataSourceUtil.getDataSource());    /**     * 开启驼峰映射     */    private BeanProcessor bean = new GenerousBeanProcessor();    private RowProcessor processor = new BasicRowProcessor(bean);    /**     * 根据id查询用户 BeanHandler     *     * @param id     * @return     */    public User findById(int id) {        String sql = "select * from user where id = ?";        User user = null;        try {            user = queryRunner.query(sql, new BeanHandler&lt;&gt;(User.class, processor), id);        } catch (SQLException e) {            e.printStackTrace();        }        return user;    }    /**     * 查询全部用户 BeanListHandler     *     * @return     */    public List&lt;User&gt; list() {        String sql = "select * from user ";        List&lt;User&gt; users = null;        try {            users = queryRunner.query(sql, new BeanListHandler&lt;&gt;(User.class, processor));        } catch (SQLException e) {            e.printStackTrace();        }        return users;    }    /**     * 根据id查找用户 MapHandler     *     * @return     */    public Map&lt;String, Object&gt; findByIdWithMap(int id) {        String sql = "select * from user where id = ? ";        Map&lt;String, Object&gt; map = null;        try {            map = queryRunner.query(sql, new MapHandler(), id);        } catch (SQLException e) {            e.printStackTrace();        }        return map;    }    /**     * 查询全部用户 MapListHandler     *     * @return     */    public List&lt;Map&lt;String, Object&gt;&gt; listWithMap() {        String sql = "select * from user ";        List&lt;Map&lt;String, Object&gt;&gt; mapList = null;        try {            mapList = queryRunner.query(sql, new MapListHandler());        } catch (SQLException e) {            e.printStackTrace();        }        return mapList;    }    /**     * 查询总数 ScalarHandler     * @return     */    public int countUser(){        String sql = "select count(1) from user";        Long count = 0L;        try{            count = queryRunner.query(sql,new ScalarHandler&lt;&gt;());        }catch(Exception e){            e.printStackTrace();        }        return count.intValue();    }}```</code></pre><ul><li><p>QueryRunner新增记录update</p><ul><li><p>新增</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user (phone,pwd,sex,img,create_time,role,username,wechat)values(?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>                user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getWechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            row <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> row<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 删除     * @param id     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from user where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            row <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> row<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 数据库连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层目录架构和MVC模型</title>
      <link href="2020/11/14/san-ceng-mu-lu-jia-gou-he-mvc-mo-xing/"/>
      <url>2020/11/14/san-ceng-mu-lu-jia-gou-he-mvc-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>三层目录架构和MVC模型</p><a id="more"></a><h3 id="一、MVC模型"><a href="#一、MVC模型" class="headerlink" title="一、MVC模型"></a>一、MVC模型</h3><ul><li><p>Model 模型</p><ul><li>承载数据用的Bean，即java对象，比如实体类User/Order，或者Service、Dao层对象</li></ul></li><li><p>View 视图</p><ul><li>页面比如JSP，为用户提供使用界面，与用户直接进行交互</li></ul></li><li><p>Controller 控制器</p><ul><li>将用户请求转发给相应的 Model 进行处理，并根据 Model 的计算结果向用户提供相应响应，比如Servlet、Controller等</li></ul><img src="/2020/11/14/san-ceng-mu-lu-jia-gou-he-mvc-mo-xing/mvc.jpg" title="MVC"></li></ul><h3 id="二、三层架构"><a href="#二、三层架构" class="headerlink" title="二、三层架构"></a>二、三层架构</h3><ul><li><p>软件包划分：</p><ul><li>分别完成不同的功能，</li><li>降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。</li><li>上层对下层的调用，是通过接口实现的（多态）</li><li>下层对上层的真正服务提供者，是下层接口的实现类</li></ul></li><li><p>视图层 View也叫web层</p><ul><li>接收用户提交请求的代码</li></ul></li><li><p>服务层 Service</p><ul><li>系统的业务逻辑</li></ul></li><li><p>持久层 Dao (Data Access Object)</p><ul><li>操作数据库的代码</li></ul><img src="/2020/11/14/san-ceng-mu-lu-jia-gou-he-mvc-mo-xing/scjg.jpg" title="三层架构"></li></ul><h3 id="三、常用的src目录结构"><a href="#三、常用的src目录结构" class="headerlink" title="三、常用的src目录结构"></a>三、常用的src目录结构</h3><ul><li>常见的src目录结构<ul><li>controller 存放控制器</li><li>service 存放业务接口<ul><li>impl 存放业务接口实现类</li></ul></li><li>dao 存放数据访问接口<ul><li>impl 存放数据访问接口实现类</li></ul></li><li>domain 存放实体类</li><li>util 存放工具类</li><li>listener 存放监听器</li><li>filter 存放过滤器</li><li>config 存放配置</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python打包</title>
      <link href="2020/11/13/python-da-bao/"/>
      <url>2020/11/13/python-da-bao/</url>
      
        <content type="html"><![CDATA[<p>python打包</p><a id="more"></a><h3 id="一、打包windows可执行文件"><a href="#一、打包windows可执行文件" class="headerlink" title="一、打包windows可执行文件"></a>一、打包windows可执行文件</h3><ul><li><p>cmd进入项目所在文件夹</p></li><li><p>第一次打包安装pyinstaller库</p><ul><li><p>pip install pyinstaller</p><img src="/2020/11/13/python-da-bao/az.jpg" title="安装成功"></li></ul></li><li><p>提示成功后，运行打包脚本</p><ul><li>pyinstaller -F XXX.py</li></ul></li><li><p>出现successfully，打包成功</p> <img src="/2020/11/13/python-da-bao/db.jpg" title="打包成功"></li><li><p>在dist文件夹下出现一个XXX.exe文件</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python更换镜像源</title>
      <link href="2020/11/13/python-geng-huan-jing-xiang-yuan/"/>
      <url>2020/11/13/python-geng-huan-jing-xiang-yuan/</url>
      
        <content type="html"><![CDATA[<p>pip源更换到国内镜像</p><a id="more"></a><h3 id="一、临时更换"><a href="#一、临时更换" class="headerlink" title="一、临时更换"></a>一、临时更换</h3><p>控制台输入“pip install xxx” 时，更改为“pip install -i 地址 xxx”</p><p>几个常用镜像源：</p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p><p>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p><p>中国科学技术大学：<a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><h3 id="二、永久更换"><a href="#二、永久更换" class="headerlink" title="二、永久更换"></a>二、永久更换</h3><ul><li><p>在[C盘]–&gt;[用户]–&gt;[当前登录用户文件夹] 下新建pip文件夹</p></li><li><p>新建 pip.ini 文件</p></li><li><p>输入</p><pre><code>[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple/[install]trusted-host = https://pypi.tuna.tsinghua.edu.cn</code></pre></li><li><p>保存</p></li><li><p>控制台输入“pip install xxx”，即可</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库备份还原</title>
      <link href="2020/11/12/shu-ju-ku-bei-fen-huan-yuan/"/>
      <url>2020/11/12/shu-ju-ku-bei-fen-huan-yuan/</url>
      
        <content type="html"><![CDATA[<p>数据库备份与还原</p><a id="more"></a><h3 id="一、mysql"><a href="#一、mysql" class="headerlink" title="一、mysql"></a>一、mysql</h3><ul><li><p>备份    </p><ul><li><p>mysqldump -u 用户 -h host -p 密码 dbname table &gt; 路径</p></li><li><p>远程备份单库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump -u<用户名> -p<密码> -h<ip地址> 库名 | gzip >/路径/文件名.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程备份单库并保留建表语句</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump -u<用户名> -p<密码> -h<ip地址> --databases 库名 | gzip >/路径/文件名.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程备份单库单表</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump -u<用户名> -p<密码> -h<ip地址> 库名 表名 | gzip >/路径/文件名.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程备份多库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump -u<用户名> -p<密码> -h<ip地址> 库名1 库名2 | gzip >/路径/文件名.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程备份全库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump -u<用户名> -p<密码> -h<ip地址> --all-databases | gzip >/路径/文件名.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>还原</p><ul><li><p>远程恢复数据（数据文件里有建库语句）</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql -u<用户名> -p<密码> -h<ip地址> < 文件名.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程恢复数据（无建库语句）</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql -u<用户名> -p<密码> -h<ip地址> 库名 < 文件名.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="二、oracle"><a href="#二、oracle" class="headerlink" title="二、oracle"></a>二、oracle</h3><ul><li><p>登录oracle</p><ul><li>cmd 进入命令行<code>sqlplus 用户名/密码</code></li></ul></li><li><p>连接远程数据库 <code>sqlplus 用户名/密码@ip:port/orcl</code></p></li><li><p>创建表空间</p></li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">--创建表空间 名为：test，存放文件地址为 E:\app\jxd\oradata\orcl\ --表空间大小为 50M，超过了就自动增加 50M，最大 2G，create tablespace testdatafile 'E:\app\jxd\oradata\orcl\test.dbf'size 50Mautoextend on next 50m maxsize 2048mextent management local;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建临时表空间</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">--创建临时表空间 名为：test_temp，存放文件地址为 E:\app\jxd\oradata\orcl\--临时表空间大小为 32M，超过了就自动增加 32M，最大 1Gcreate temporary tablespace test_temptempfile'E:\app\jxd\oradata\orcl\test_temp.dbf'size 32mautoextend on next 32m maxsize 1024mextent management local;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除表空间</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">drop tablespace test including contents and datafiles;drop tablespace test_temp including contents and datafiles;DROP TABLESPACE TBS01 INCLUDING CONTENTS AND DATAFILESselect * from dba_data_files--(更改默认表空间)alter database default tablespace system;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建用户并授权</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">--创建了用户test 密码是 test--默认在表空间 test 和临时表空间 test_temp 里面create user test identified by test default tablespace test temporary tablespace test_temp;--将 connect,resource 角色权限授权给 testgrant connect,resource to test;--将 dba 角色权限授权给 testgrant dba to test;--撤销权限--收回权限revoke dba on 数据库名 from test revoke dba from testrevoke connect,resouce from test--数据库特权 说明--DBA 数据库创建者/所有者。能够授予数据库中的其他对象上的特权。--Resource 能够连接到数据库并创建其他对象。--Connect 能够连接到数据库执行查询。--如果用户被锁住了，就用此语句解开alter user test account unlock;--//修改用户密码：alter user test identified by test;--//删除用户：--//执行该语句请小心，会级联删除该用户下所有对象。drop user test cascade; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意：</p><ul><li>exp和imp是客户端工具程序，它们既可以在客户端使用，也可以在服务端使用</li><li>expdp和impdp是服务端的工具程序，他们只能在oracle服务端使用，不能在客户端使用</li><li>imp只适用于exp导出的文件，不适用于expdp导出文件；impdp只适用于expdp导出的文件，而不适用于exp导出文件。</li><li>对于10g以上的服务器，使用exp通常不能导出0行数据的空表，而此时必须使用expdp导出。</li></ul></li><li><p>exp导出</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">exp test/test@orcl owner=test file=d:\test.dmp log=d:\test.log#将数据库TEST完全导出,用户名test 密码test 导出到D:\test.dmp中exp test/test@orcl file=d:\test.dmp full=y#将数据库中test用户与test用户的表导出exp test/test@orcl file=d:\test.dmp owner=(test,test)#将数据库中的表table1 、table2导出exp test/test@orcl file=d:\test.dmp tables=(table1,table2) #将数据库中的表table1中的字段filed1以"00"打头的数据导出exp test/test@orcl file=d:\test.dmp tables=(table1) query=\" where filed1 like '00%'\"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>问题一</strong>：</p><pre class="line-numbers language-shell"><code class="language-shell">  已导出 ZHS16GBK 字符集和 AL16UTF16 NCHAR 字符集    . 正在导出 pre-schema 过程对象和操作    . 正在导出用户 JXUNICOM 的外部函数库名    . 导出 PUBLIC 类型同义词    . 正在导出专用类型同义词    . 正在导出用户 JXUNICOM 的对象类型定义    即将导出 JXUNICOM 的对象…    . 正在导出数据库链接    . 正在导出序号    . 正在导出簇定义    . 即将导出 JXUNICOM 的表通过常规路径…    EXP-00008: 遇到 ORACLE 错误 904    ORA-00904: "POLTYP": invalid identifier    EXP-00000: 导出终止失败    发生EXP-00008: 遇到 ORACLE 错误 904 的导出报错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本地使用的exp导出工具的版本与数据库服务器端exp版本不一致导致</li><li>由于Oracle的imp/exp组件的操作原则–向下兼容，且有一些规则：<ul><li>规则1:低版本的exp/imp可以连接到高版本（或同版本）的数据库服务器，但高版本的exp/imp不能连接到低版本的数据库服务器；</li><li>规则2:高版本exp出的dmp文件，低版本无法imp（无法识别dmp文件）；低版本exp出的dmp文件，高版本可以imp（向下兼容）；</li><li>规则3:从Oracle 低版本Export的数据可以Import到Oracle高版本中，但限于Oracle的相邻版本，如从Oracle 10 到 Oracle 11.对于两个不相邻版本间进行转换，如从Oracle 9 到 Oracle 11,则应先将数据输入到中间版本-Oracle 10,再从中间数据库转入更高版本Oracle 11.</li></ul></li></ul></li><li><p>imp导入</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#说明：当前用户名 /密码@ 数据库名 fromuser=当初导出时的用户 touser= 导入的新用户 file=d: \test.dmp#如果有的表已经存在，然后它就报错，对该表就不进行导入。在后面加上 ignore=y 就可以了。imp test/test@orcl tablespaces=test fromuser=dtxy touser=test file=F:\test.DMP log=F:\test.log#将d:\test.dmp中的表table1 导入imp test/test@orcl file=d:\test.dmp tables=(table1) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>问题一</strong>：<code>ORACLE 这些对象由 XXXX 导出, 而不是当前用户</code><ul><li>导出dmp文件的用户和导入的用户不一致</li><li>去掉 fromuser= 和 touser= 加上 full=y ignore=y即可</li></ul></li><li><strong>问题二</strong>：<code>IMP-00013: 只有 DBA 才能导入由其他 DBA 导出的文件</code><ul><li>导出数据的用户拥有DBA权限，而导入的用户没有这个权限</li><li><code>sqlplus 用户名/密码</code> ==&gt; <code>grant dba  to username；（username是用户名）</code></li></ul></li><li>impdp导入<ul><li>注意：impdp导入的dmp文件必须是expdb导出的</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#创建一个目录变量create directory testcs as 'F:\testcs';#将该目录的可读写权限赋值给该用户grant read,write on directory testcs to test;#导入dmp文件 impdp test/test directory=testcs dumpfile=test1.dmp full=y table_exists_action=replaceimpdp test/test dumpfile=test1.dmp directory=testcs remap_tablespace=test:test;impdp test/test@orcl directory=testcs dumpfile=test1.DMP REMAP_SCHEMA=test:test remap_tablespace=test:test,test_temp:test_temp#注：#1、此处directory使用了系统自带的，如果需要自定义，请使用 create directory命令创建;#2、remap_tablespace多个表空间转换用逗号隔开。#完成以上步骤，通过plsql利用newuser登录数据库，可以查看到newuser下的所有导入的表已转入newtablespace表空间了。#（这里用到的用户名为刚创建的用户，目录不能直接用目录路径，必须得用目录的变量名，然后将该dmp文件放到该目录下，此处所填文件名需要带上文件后缀）#导出dmp文件expdp test/test@orcl directory=testcs dumpfile=test1.DMP logfile=test1.log schemas=test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 备份还原 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置数据源</title>
      <link href="2020/11/12/springboot-pei-zhi-shu-ju-yuan/"/>
      <url>2020/11/12/springboot-pei-zhi-shu-ju-yuan/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot配置数据源</p><a id="more"></a><h3 id="1-默认数据源"><a href="#1-默认数据源" class="headerlink" title="1.默认数据源"></a>1.默认数据源</h3><ul><li><p>数据源类型</p><p>Springboot默认支持4种数据源类型，定义在 org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration 中，分别是：</p><ul><li>org.apache.tomcat.jdbc.pool.DataSource</li><li>com.zaxxer.hikari.HikariDataSource</li><li>org.apache.commons.dbcp.BasicDataSource</li><li>org.apache.commons.dbcp2.BasicDataSource</li></ul><p>对于这4种数据源，当 classpath 下有相应的类存在时，Springboot 会通过自动配置为其生成DataSource Bean，DataSource Bean默认只会生成一个，四种数据源类型的生效先后顺序如下：Tomcat–&gt; Hikari –&gt; Dbcp –&gt; Dbcp2 。</p></li><li><p>添加依赖配置</p><ul><li><p>在Springboot 使用JDBC可直接添加官方提供的 spring-boot-start-jdbc 或者 spring-boot-start-data-jpa 依赖。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加MySQL依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加JDBC依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在核心配置application.properties或者application.yml文件中添加数据源相关配置。 </p><pre class="line-numbers language-xml"><code class="language-xml"># application.properties文件中添加如下配置：spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.username=rootspring.datasource.password=123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"># application.yml文件中添加如下配置：spring:  datasource:    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8    driverClassName: com.mysql.jdbc.Driver    username: root    password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换默认数据源</p><ul><li><p>方式一</p><ul><li>Springboot默认支持的4种数据源Maven依赖如下：</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 添加Tomcat-JDBC依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加HikariCP依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加DBCP依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加DBCP2依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们引入spring-boot-start-jdbc依赖时，其实里面就包含了 Tomcat-JDBC 的依赖，如果想要切换为其他的数据源类型，需要先将Tomcat-JDBC 依赖排除，再添加上需要的数据源的依赖，以使用HikariCP数据源为例，依赖配置如下。</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 添加JDBC依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 排除Tomcat-JDBC依赖 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加HikariCP依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二</p><ul><li><p>通过在核心配置中通过添加spring.datasource.type = [数据源类型] 来指定数据源的类型；</p><pre class="line-numbers language-xml"><code class="language-xml">spring.datasource.type=com.zaxxer.hikari.HikariDataSource# spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource# spring.datasource.type=org.apache.commons.dbcp.BasicDataSource# spring.datasource.type=org.apache.commons.dbcp2.BasicDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="2-第三方数据源"><a href="#2-第三方数据源" class="headerlink" title="2.第三方数据源"></a>2.第三方数据源</h3><ul><li><p>使用其他第三方的数据源，例如：Druid、c3p0等。</p></li><li><p>添加依赖与配置</p><ul><li><p>在pom文件中引入第三方数据源依赖。 </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加MySQL依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加JDBC依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加Druid依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>核心配置文件中的添加数据源相关配置与使用默认数据源时的配置相同</p></li></ul></li><li><p>定义数据源</p><ul><li><p>使用注解@Bean 创建一个DataSource Bean并将其纳入到Spring容器中进行管理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Environment env<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSource2Config</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户名</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 密码</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库报错</title>
      <link href="2020/11/10/shu-ju-ku-bao-cuo/"/>
      <url>2020/11/10/shu-ju-ku-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>数据库报错信息</p><a id="more"></a><h3 id="1-ERROR-1030-Got-error-168-from-storage-engine"><a href="#1-ERROR-1030-Got-error-168-from-storage-engine" class="headerlink" title="1. ERROR 1030 :Got error 168 from storage engine"></a>1. ERROR 1030 :Got error 168 from storage engine</h3><ul><li>在操作数据库过程中报错，sql不能执行。报错信息为ERROR 1030 :Got error 168 from storage engine。该问题属于机器的磁盘空间不足引起的</li><li>解决方法<ul><li>可以通过 df -h 查看磁盘空间的使用情况，然后清理磁盘</li><li>需要知道哪个文件夹占用的比较大，通过 du 命令</li><li>du -sh * 查看信息，删除无用的大文件。 </li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven3.X配置</title>
      <link href="2020/11/07/maven3-x-pei-zhi/"/>
      <url>2020/11/07/maven3-x-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Maven3.X配置</p><a id="more"></a><h3 id="一、Maven"><a href="#一、Maven" class="headerlink" title="一、Maven"></a>一、Maven</h3><ul><li><p>Apache组织开源的项目,一个软件项目管理和综合工具，基于项目对象模型（POM）的概念</p></li><li><p>windows环境变量配置</p><ul><li>~</li></ul></li><li><p>mac/linux环境变量配置</p><ul><li><p>vim ~/.bash_profile</p><pre><code>export MAVEN_HOME=/Users/xdclass/Documents/software/apache-maven-3.6.3export PATH=$PATH:$MAVEN_HOME/bin</code></pre></li></ul></li></ul><h3 id="二、Maven的仓库和生命周期"><a href="#二、Maven的仓库和生命周期" class="headerlink" title="二、Maven的仓库和生命周期"></a>二、Maven的仓库和生命周期</h3><ul><li><p>Maven仓库</p><ul><li><p>本地仓库： 默认用户目录下/.m2/repository/</p></li><li><p>远程仓库</p><ul><li><p>中央仓库</p><ul><li><p>如果下载很慢，可以改仓库地址，为阿里云</p><ul><li><p>淘宝Maven私服地址</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-net-cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven China Mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-net-cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven China Mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>推荐先使用官方的</p></li></ul></li><li><p>私服</p></li></ul></li></ul></li><li><p>添加依赖包后</p><ul><li>Maven检查 pom.xml文件</li><li>确定哪些依赖下载</li><li>第一步：Maven 将从本地资源库获得 Maven 的本地资源库依赖资源</li><li>第二步：如果没有找到，然后把它会从默认的 Maven 中央存储库</li></ul></li><li><p>Maven生命周期</p><ul><li>对所有的构建过程进行抽象和统一，包括项目清理、初始化、编译、测试、打包、验证和部署等几乎全部步骤</li><li>三个标准生命周期<ul><li>clean 清理项目</li><li>build 构建处理项目<ul><li>验证 validate-&gt;编译 compile-&gt;测试 Test-&gt;包装package-&gt;检查verify-&gt;安装 install-&gt;部署 deploy</li></ul></li><li>site 项目文档创建处理</li></ul></li></ul></li></ul><h3 id="三、Maven核心配置文件pom-xml"><a href="#三、Maven核心配置文件pom-xml" class="headerlink" title="三、Maven核心配置文件pom.xml"></a>三、Maven核心配置文件pom.xml</h3><ul><li><p>pom.xml文件 全称：Project Object Model，项目对象模型 ，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖等</p></li><li><p>一个基础的pom文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 模型版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--公司或者组织的唯一标志，一般是网站名称反过来写--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.xdclass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>web-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 项目版本号 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 项目打包形式，常见的是 war、jar--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--项目名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>xd_video<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--项目描述--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--依赖版本号--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.49<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-logging.version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-logging.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javax.servlet.version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javax.servlet.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-logging.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${javax.servlet.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、maven创建java项目目录结构和常用指令"><a href="#四、maven创建java项目目录结构和常用指令" class="headerlink" title="四、maven创建java项目目录结构和常用指令"></a>四、maven创建java项目目录结构和常用指令</h3><ul><li><p>src</p><ul><li>main<ul><li>java - java文件</li><li>resources - 资源库</li><li>webapp<ul><li>WEB-INF<ul><li>index.jsp</li></ul></li><li>css、js、html等静态文件</li></ul></li></ul></li><li>test<ul><li>java - java测试文件</li><li>resource - 测试资源库</li></ul></li></ul></li><li><p>target ：存放项目构建后的文件和目录。比如jar包、war包、编译的class文件等</p></li><li><p>maven常用命令</p><ul><li><p>mvn clean 清理项目</p></li><li><p>mvn install 安装项目到本地仓库</p><ul><li><p>打war包时，如果项目中缺少WEB-INF/web.xml文件，则报错</p><pre><code> Error assembling WAR: webxml attribute is required (or pre-existing WEB-INF/web.xml if executing in update mode)</code></pre></li></ul></li><li><p>mvn package 打包项目</p></li><li><p>mvn dependency:tree 线上maven依赖树</p></li><li><p>install和package的区别</p><ul><li>maven package只是把包打在自己的项目下</li><li>maven install会把包打在maven本地仓库下，可以给依赖它的其他项目调用</li></ul></li></ul></li><li><p>maven常用参数</p><ul><li>-D 指定参数，-Dmaven.test.skip=true 跳过单元测试<ul><li>mvn install -Dmaven.test.skip=true</li></ul></li><li>-p 指定profile配置，用于区分环境</li></ul></li><li><p>web项目命令</p><ul><li>mvn tomcat:run 启动tomcat</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb数据库链接</title>
      <link href="2020/11/07/javaweb-shu-ju-ku-lian-jie/"/>
      <url>2020/11/07/javaweb-shu-ju-ku-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>JavaWeb数据库连接</p><a id="more"></a><h3 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a>一、JDBC</h3><ul><li><p>什么是JDBC</p><ul><li>全称 Java DataBase Connectivity, 是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口</li><li>提供了一种接口基准，可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序</li><li>应用程序代码一般不能直接访问数据库，需要通过相应的数据库驱动程序才行，</li><li>数据库驱动：数据库厂商的JDBC接口实现</li></ul></li><li><p>JDBC连接MySQL相关概念</p><ul><li>数据库驱动：不同数据库开发商(比如oracle mysql等)为了某一种开发语言能够实现统一的数据库调用而开发的一个程序, 作用相当于一个翻译人员, 将某个语言（比如java）中对数据库的调用通过这个翻译成各个种类的数据库 自己的数据库语言</li><li>Connection连接：特定数据库的连接（会话），在连接上下文中执行sql语句并返回结果</li><li>Statement 语句: 创建执行SQL语句的statement, 有好几种实现类，用于执行对应的sql</li><li>ResultSet结果集：SQL查询返回的结果信息</li></ul></li><li><p>使用Java连接Mysql的步骤</p><ul><li>加载JDBC驱动程序</li><li>建立数据库连接Connection</li><li>创建执行SQL的语句Statement</li><li>处理执行结果ResultSet</li><li>释放连接资源<ul><li>resultSet.close();</li><li>statement.close();</li><li>connection.close();</li></ul></li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//加载JDBC驱动程序</span>         Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//建立数据库连接Connection</span>        String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"xdclass.net"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//协议:子协议://ip:端口/数据库名称?参数1=值1&amp;参数2=值2</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/xd_web?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建执行SQL的语句Statement</span>        Statement statement  <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//处理执行结果ResultSet</span>        ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名称 name="</span><span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  联系方式 wechat="</span><span class="token operator">+</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"wechat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放连接资源</span>        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、SQL注入攻击和Statement预编译语句"><a href="#二、SQL注入攻击和Statement预编译语句" class="headerlink" title="二、SQL注入攻击和Statement预编译语句"></a>二、SQL注入攻击和Statement预编译语句</h3><ul><li><p>什么是SQL注入攻击</p><ul><li>可以执行恶意SQL语句，将任意SQL代码插入数据库查询，使用SQL注入来添加，修改和删除数据库中的记录</li></ul></li><li><p>PrepareStatement</p><ul><li><p>字面可译为预声明，内部包含一个预编译的sql语句，参数采用占位符 ? 进行填充</p></li><li><p>为什么可以防注入</p><ul><li>第一次操作数据库之前，SQL语句已经被数据库分析和编译，对应的执行计划也会缓存下来，之后数据库就会以参数化的形式进行查询</li><li>传入的值始终都是会作为一个值，而不是sql指令</li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">        String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from user where username = ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>好处：维护性好、提高sql效率、增加安全性</li></ul><h3 id="三、JDBC控制Mysql事务"><a href="#三、JDBC控制Mysql事务" class="headerlink" title="三、JDBC控制Mysql事务"></a>三、JDBC控制Mysql事务</h3><ul><li><p>mysql表必须是InnoDB</p></li><li><p>事务：</p><ul><li>一个最小的不可再分的工作单元，通常一个事务对应一个完整的业务</li><li>例如银行账户转账业务，该业务就是一个最小的工作单元</li></ul></li><li><p>四大特性</p><ul><li>原子性(A)：事务是最小单位，不可再分</li><li>一致性(C)：事务要求所有的DML语句操作的时候，必须保证同时成功或者同时失败</li><li>隔离性(I)：事务A和事务B之间具有隔离性</li><li>持久性(D)：是事务的保证，事务终结的标志(内存的数据持久到硬盘文件中)</li></ul></li><li><p>事务的一些术语</p><ul><li>开启事务：Start Transaction</li><li>事务结束：End Transaction</li><li>提交事务：Commit Transaction</li><li>回滚事务：Rollback Transaction</li></ul></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载JDBC驱动程序</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立数据库连接Connection</span>        String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String pwd <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//协议:子协议://ip:端口/数据库名称?参数1=值1&amp;参数2=值2</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/xd_web?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//JDBC默认事务是自动提交的，false不会自动提交</span>        connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>            PreparedStatement preparedStatement1 <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"insert into user (username,pwd) values (?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PreparedStatement preparedStatement2 <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"insert into user (username,pwd) values (?,?)"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            preparedStatement1<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ld2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement1<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement2<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ld3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement2<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模拟异常</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            preparedStatement2<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//事务回滚</span>            connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//事务提交</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb文件上传下载</title>
      <link href="2020/11/07/javaweb-wen-jian-shang-chuan-xia-zai/"/>
      <url>2020/11/07/javaweb-wen-jian-shang-chuan-xia-zai/</url>
      
        <content type="html"><![CDATA[<p>JavaWeb 文件上传下载原理</p><a id="more"></a><h3 id="一、文件上传"><a href="#一、文件上传" class="headerlink" title="一、文件上传"></a>一、文件上传</h3><ul><li><p>javaweb文件上传</p><ul><li>Web应用系统开发中，文件上传和下载功能是非常常用的功能，浏览器在上传的过程中是将文件以流的形式提交到服务器端的</li></ul></li><li><p>实例</p><ul><li><p>前端</p><ul><li>表单提交方法必须是post</li><li>必须设置表单的enctype=”multipart/form-data</li></ul></li><li><p>后台</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/fileUpload"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MultipartConfig</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置编码格式为UTF-8</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        Part part <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//表单定义的文件标签名</span>        <span class="token comment" spellcheck="true">//String originalName = part.getName();</span>        <span class="token comment" spellcheck="true">//System.out.println("formName："+originalName);</span>        <span class="token comment" spellcheck="true">//获取上传的文件名称</span>        String header <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>        String realFileName <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"filename="</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取真实的文件内容</span>        InputStream inputStream <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//WEB-INF 目录外界无法直接访问，文件机密的话，存储到</span>        <span class="token comment" spellcheck="true">//String dir  = this.getServletContext().getRealPath("WEB-INF/file");</span>        String dir <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File dirFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果目录不存在则创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dirFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//文件流拷贝</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>realFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片访问</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/file/"</span><span class="token operator">+</span>realFileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注意点：</p><ul><li>考虑上传文件存储的目录</li><li>防止文件重名覆盖，防止一个目录下面出现太多文件，限制上传文件的最大值，上传的文件判断后缀名是否合法</li></ul></li></ul><h3 id="二、文件下载"><a href="#二、文件下载" class="headerlink" title="二、文件下载"></a>二、文件下载</h3><ul><li><p>javaweb文件下载</p><ul><li>只需通过超链接即可实现，就是通过超链接，在连接地址里写上文件的路径，浏览器会自动打开该文件</li><li>普通的文本，图片等浏览器能直接显示内容的浏览器都能直接打开并显示</li><li>如果是浏览器无法打开的文件，比如exe等浏览器就会提示你下载改文件或者使用当前系统自带的工具打开该文件</li></ul></li><li><p>客户端发送请求给服务端告诉服务端需要下载的文件，服务端读取该文件转换为输入流，在通过outputstream响应给客户端，需要设置response的头信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDownloadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端传递需要下载的文件名</span>        String file <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件在我们项目中的路径,发布到tomcat的实际路径</span>        String path <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/file/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String filePath <span class="token operator">=</span> path <span class="token operator">+</span> file<span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指明响应的配置信息，包含附件</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果文件名不包含中文可以不设置该项</span>        <span class="token comment" spellcheck="true">//如果包含中文名，则需要设置编码，否则文件名下载后中文字符会乱码</span>        <span class="token comment" spellcheck="true">//getBytes指定了编码的方式，ISO-8859-1指定了解码（读取）的方式,想要转换编码，就是先编码，再解码</span>        <span class="token comment" spellcheck="true">//resp.setHeader("Content-Disposition","attachment; filename="+new String(file.getBytes("gb2312"),"ISO-8859-1"));</span>        ServletOutputStream out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> 文件上传下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 文件上传下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Listener监听器</title>
      <link href="2020/11/07/listener-jian-ting-qi/"/>
      <url>2020/11/07/listener-jian-ting-qi/</url>
      
        <content type="html"><![CDATA[<p>JavaWeb Servlet Listener监听器</p><ul><li>监听器是一个实现了特定接口的普通Java类，用于监听其他对象的创建和销毁，监听其他对象的方法执行和属性改变；</li></ul><a id="more"></a><h3 id="一、Listener监听器"><a href="#一、Listener监听器" class="headerlink" title="一、Listener监听器"></a>一、Listener监听器</h3><ul><li>javaweb里面的监听器：<ul><li>作用：监听域对象的创建和销毁,比如request/session/context</li><li>分类：<ul><li>ServletContextLitener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul></li></ul></li><li>监听器的实现步骤： <ul><li>创建一个普通的Java类 </li><li>让该类实现监听器的接口 </li><li>在该类中实现监听器接口的所有方法 </li><li>旧版的在web.xml文件中通过标签来配置监听器，新版使用 @WebListener</li></ul></li></ul><h3 id="二、ServletContextLitener"><a href="#二、ServletContextLitener" class="headerlink" title="二、ServletContextLitener"></a>二、ServletContextLitener</h3><ul><li><p>使用场景：加载全局配置，初始化项目信息</p></li><li><p>实例</p><ul><li><p>web.xml配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>https://xdclass.net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>topic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>学习加载全局配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>监听器开发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ContextListener contextInitialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext servletContext <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ContextListener contextDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="三、HttpSessionListener"><a href="#三、HttpSessionListener" class="headerlink" title="三、HttpSessionListener"></a>三、HttpSessionListener</h3><ul><li><p>统计网站在线人数，当前服务器的负载情况等</p></li><li><p>实例</p><ul><li><p>ContextLisener配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取上下文对象</span>ServletContext sc <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>HttpSessionListener开发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SessionListener sessionCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext servletContext  <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取在线人数</span>        Integer onlineNum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新增1</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">,</span><span class="token operator">++</span>onlineNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SessionListener sessionDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext servletContext  <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取在线人数</span>        Integer onlineNum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//减少1</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">,</span><span class="token operator">--</span>onlineNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、ServletRequestListener"><a href="#四、ServletRequestListener" class="headerlink" title="四、ServletRequestListener"></a>四、ServletRequestListener</h3><ul><li><p>统计网站请求量</p></li><li><p>实例</p><ul><li><p>ContextLisener配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取上下文对象</span>ServletContext sc <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"totalVisit"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RequestListener开发</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SessionListener sessionCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext servletContext  <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer totalVisit <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"onlineNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"历史总访问次数"</span><span class="token operator">+</span>totalVisit<span class="token punctuation">)</span><span class="token punctuation">;</span>        totalVisit<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新增1</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"totalVisit"</span><span class="token punctuation">,</span>totalVisit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SessionListener sessionDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Listener </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter过滤器</title>
      <link href="2020/11/07/filter-guo-lu-qi/"/>
      <url>2020/11/07/filter-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<p>Servlet Filter过滤器</p><ul><li>动态地拦截请求和响应，变换或使用包含在请求或响应中的信息</li><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><a id="more"></a><h3 id="一、过滤器Filter"><a href="#一、过滤器Filter" class="headerlink" title="一、过滤器Filter"></a>一、过滤器Filter</h3><ul><li><p>Filter的生命周期</p><ul><li>init(FilterConfig filterConfig) //只容器初始化的时候调用一次，即应用启动的时候加载一次</li><li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 只要命中过滤规则就触发，可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法， 即是否让目标资源执行</li><li>destroy() //只容器销毁的时候调用一次，即应用停止的时候调用一次</li></ul></li><li><p>元注解 @WebFilter</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//该Filter是否支持异步操作模式</span>asyncSupported      <span class="token comment" spellcheck="true">//指定Filter对那种dispatcher模式进行过滤 该属性支持 Async,Error Forward,include,request  </span>dispatcherType  <span class="token comment" spellcheck="true">//Filter 显示的名称</span>displayName    <span class="token comment" spellcheck="true">//Filter的名称</span>filterName    <span class="token comment" spellcheck="true">//Filter的配置参数</span>initParams    <span class="token comment" spellcheck="true">//过滤的Servlet可以指定多个,表示对这几个特定的的servlet 进行过滤</span>servletNames    <span class="token comment" spellcheck="true">//指定 Filter拦截的 URL，和上面的servletNames配置一样，用*可以表示通配符，但是不能字母后加*，应该按照模块划分，比如/user/*</span>urlPatterns<span class="token operator">/</span>value <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、过滤器Filter配置"><a href="#二、过滤器Filter配置" class="headerlink" title="二、过滤器Filter配置"></a>二、过滤器Filter配置</h3><ul><li>FilterConfig类：<ul><li>过滤器配置类，可以通过这个获取过滤器基本信息</li></ul></li><li>initParams：<ul><li>初始化参数</li></ul></li><li>urlPatterns:<ul><li>拦截路径</li></ul></li><li>dispatcherTypes 参数<ul><li>指定Filter对那种dispatcher模式进行过滤，不符合的则不进行过滤<ul><li>REQUEST：默认值，浏览器直接请求的资源会被过滤器拦截</li><li>FORWARD：转发访问资源会被过滤器拦截</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>initParams <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"encoding"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"loginPage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dispatcherTypes <span class="token operator">=</span> <span class="token punctuation">{</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">,</span>DispatcherType<span class="token punctuation">.</span>FORWARD<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、实例LoginFilter"><a href="#三、实例LoginFilter" class="headerlink" title="三、实例LoginFilter"></a>三、实例LoginFilter</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jxd<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebInitParam<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">"loginFilter"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/user/*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>initParams <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"encoding"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"loginPage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FilterConfig filterConfig<span class="token punctuation">;</span>    <span class="token keyword">private</span> String encoding<span class="token punctuation">;</span>    <span class="token keyword">private</span> String loginPage<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomFilter init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filterConfig <span class="token operator">=</span> filterConfig<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginPage <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomFilter doFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>        HttpServletResponse httpServletResponse <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>response<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断Session中是否有用户信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            httpServletRequest<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpServletRequest<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>loginPage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//让请求继续往下走</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomFilter destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Filter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话跟踪技术Cookie和session</title>
      <link href="2020/11/07/hui-hua-gen-zong-ji-zhu-cookie-he-session/"/>
      <url>2020/11/07/hui-hua-gen-zong-ji-zhu-cookie-he-session/</url>
      
        <content type="html"><![CDATA[<p>会话跟踪技术Cookie和session</p><a id="more"></a><h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1.Cookie"></a>1.Cookie</h3><ul><li><p>介绍</p><ul><li>浏览器发送request请求到服务器，服务器除了返回请求的response之外，还给请求分配一个唯一标识ID和response一并返回给浏览器</li><li>服务器在本地创建一个map结构，专门以key-value存储这个ID标识和浏览器的关系</li><li>当浏览器的第一次请求后已经分配一个ID，当第二次访问时会自动带上这个标识ID，服务会获取这个标识ID去map里面找上一次request的信息状态且做对应的更新操作 服务端生成这个全局的唯一标识，传递给客户端用于标记这次请求就是cookie； 服务器创建的那个map结构就是session。</li><li>cookies由服务端生成，用于标记客户端的唯一标识，在每次网络请求中，都会被传送。</li><li>session服务端自己维护的一个map数据结构，记录key-Object上下文内容状态</li><li>核心：它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。 浏览器查看多个站点的cookie</li></ul></li><li><p>属性</p><ul><li>Name : 名称</li><li>Value : 值</li><li>Domain：表示当前cookie所属于哪个域或子域下面</li><li>Expires/Max-age：表示了cookie的有效期，是一个时间，过了这个时间，该cookie就失效了</li><li>Path：表示cookie的所属路径。</li><li>size: 大小，多数浏览器都是4000多个字节</li><li>http-only: 表示这个cookie不能被客户端使用js读取到，是不公开的cookie<ul><li>(chrome调试器的console中输入document.cookie将得不到标记为HttpOnly的字段)</li></ul></li><li>Secure: 标记为 Secure 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端,<ul><li>从 Chrome 52 和 Firefox 52 开始，不安全的站点（http:）无法使用Cookie的 Secure 标记</li></ul></li><li>SameSite(特有的，可以忽略)</li></ul></li><li><p>缺陷</p><ul><li>cookie会被附加在每个HTTP请求中，增加了流量。</li><li>在HTTP请求中的cookie是明文传递的，所以安全性成问题，除非用HTTPS</li><li>Cookie的大小有限制，对于复杂的存储需求来说不满足</li></ul></li><li><p>浏览器允许每个域名所包含的cookie数量？</p><ul><li>多数浏览器允许最多是50个，部分浏览器是30或者20；</li><li>满后会有多种剔除策略，比如LRU,权重等</li></ul></li><li><p>现在常用</p><ul><li>localStorage、SessionStorage等</li></ul></li><li><p>获取Cookie</p><pre class="line-numbers language-java"><code class="language-java">  Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            cookie<span class="token punctuation">.</span><span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成Cookie</p><pre class="line-numbers language-java"><code class="language-java">        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span><span class="token string">"sasasadsadwxwqw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//过期时间</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-Session"><a href="#2-Session" class="headerlink" title="2.Session"></a>2.Session</h3><ul><li><p>介绍</p><ul><li>背景：HTTP协议作是无状态协议，无状态指每次request请求之前是相互独立的，当前请求并不会记录它的上一次请求信息。</li><li>存在这样的问题，既然无状态，那完成一套完整的业务逻辑，需要发送多次请求，那么怎么标识这些请求都是同个浏览器操作呢？</li><li>cookie和session都是为了弥补http协议的无状态特性，对server端来说无法知道两次http请求是否来自同一个用户，利用cookie和session就可以让server端知道多次http请求是否来自同一用户</li></ul></li></ul><ul><li><p>生成和使用流程（和Cookie知识点一样，两者互相配合）</p><ul><li>浏览器第一次发送request请求到服务器，服务器除了返回请求的response之外，还给请求分配一个唯一标识sessionId和response一并返回给浏览器</li><li>服务器在本地创建一个map结构，专门以key-value存储这个sessionId和浏览器的关系</li><li>当浏览器的第一次请求后已经分配一个sessionId，当第二次访问时会自动带上这个标识sessionId</li><li>服务器通过查找这个sessionId就知道用户状态了，并更新sessionId的最后访问时间。</li><li>注意： Session是有时限性的：比如如果30分钟内某个session都没有被更新，服务器就会删除这个它。</li></ul></li><li><p>总结：</p><ul><li>服务端生成这个全局的唯一标识，传递给客户端用于标记这次请求就是cookie；</li><li>服务器创建的那个map结构就是session。</li><li>cookies由服务端生成，用于标记客户端的唯一标识，在每次网络请求中，都会被传送。</li><li>session服务端自己维护的一个map数据结构，记录key-Object上下文内容状态</li><li>总言之cookie是保存在客户端，session是存在服务器，session依赖于cookie</li><li>cookie里面存储的就是JSESSIONID</li></ul></li><li><p>使用场景：记录用户的登录状态、权限等</p></li><li><p>session的现状</p><ul><li>session是存储在服务端的内存中，在javaweb里面叫HttpSession也是一个作用域</li><li>PageContext(页面)-&gt;ServletRequest(请求)-&gt;【HttpSession】(会话)-&gt;ServletContext(一个应用)</li><li>是可以存储很多key-value的，作用域比较广，所以也不能存储过多内容，因为内存是有限制的</li></ul></li><li><p>注销session(退出登录使用)</p><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置过期时间 web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Cookile </category>
          
          <category> session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转发-重定向和EL表达式</title>
      <link href="2020/11/07/zhuan-fa-chong-ding-xiang-he-el-biao-da-shi/"/>
      <url>2020/11/07/zhuan-fa-chong-ding-xiang-he-el-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p>转发-重定向和EL表达式</p><a id="more"></a><h3 id="1-请求转发RequestDispatcher"><a href="#1-请求转发RequestDispatcher" class="headerlink" title="1.请求转发RequestDispatcher"></a>1.请求转发RequestDispatcher</h3><ul><li><p>请求转发</p><pre><code>request.getRequestDispatcher(URL地址).forward(request, response)</code></pre><ul><li><p>客户端发送请求，Servlet做出业务逻辑处理。</p></li><li><p>Servlet调用forword()方法，服务器Servlet把目标资源返回给客户端浏览器</p></li><li><p>可以访问WEB-INF下的文件,WEB-INF的文件一般是需要一定的权限才可以访问</p><pre><code>req.getRequestDispatcher("/WEB-INF/admin.jsp").forward(req,resp);</code></pre></li><li><p>注意点：在浏览器地址栏中不会显示转发后的地址，属于服务器内部转发，整个过程处于同一个请求当中，所以转发中数据的存取可以用request作用域</p><pre><code>//存储java对象到request作用域，转发后一样可以获取到值，具体怎么获取？JSP或者EL表达式request.setAttribute("name","jack");</code></pre></li></ul></li></ul><h3 id="2-EL表达式"><a href="#2-EL表达式" class="headerlink" title="2.EL表达式"></a>2.EL表达式</h3><ul><li><p>格式</p><pre><code>${}${对象.属性}</code></pre></li><li><p>查找范围</p><ul><li><p>当EL表达式中的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找，如果找到不再继续找下去，但是假如全部的范围都没有找到时，就回传””</p></li><li><p>可以用范围作为前缀表示属于哪个范围的变量，例如：${pageScope.userinfo}表示访问page范围中的userinfo变量</p><pre><code>【jsp中】【EL表达式中】Page    pageScopeRequest requestScopeSession sessionScopeApplication applicationScope</code></pre><pre><code>  jsp:&lt;%=(String)request.getAttribute("name")%&gt;  等价于  el:${name}</code></pre></li></ul></li></ul><h3 id="3-请求重定向sendRedirect"><a href="#3-请求重定向sendRedirect" class="headerlink" title="3.请求重定向sendRedirect"></a>3.请求重定向sendRedirect</h3><ul><li><p>定义</p><ul><li>客户端发送请求，Servlet做出业务逻辑处理</li><li>Servlet调用response.sendRedirect(“xxx.jsp”)方法，把要访问的目标资源作为response响应信息发给客户端浏览器</li><li>客户端浏览器重新访问服务器资源xx.jsp，服务器再次对客户端浏览器做出响应</li><li>请求重定向，不能访问WEB-INF下的文件，浏览器上的窗口地址会改变，可以用于跳转第三方地址或者应用里面的其他Servelt、jsp等</li></ul></li><li><p>注意点</p><ul><li><p>重定向是取不到request中的存储的数据,如果当前servlet是重定向，浏览器可以看到两个请求</p><ul><li>案例测试：在reqeust中设置值，然后在请求转发到页面，使用EL表达式取值</li></ul></li><li><p>调用sendRedirect()方法，会在响应中设置Location响应报头，这个过程对于用户来说是透明的，浏览器会自动完成新的访问</p></li><li><p>重定向路径问题：如果没有加 http 开头，则认为是当前应用里面的servlet重定向，默认加上应用上下文；如果有加http则会使用配置的全路径进行跳转</p></li><li><p>如果请求转发可以满足需要时，尽量使用请求转发，而不是重定向，效率性能更好</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求-响应</title>
      <link href="2020/11/07/http-qing-qiu-xiang-ying/"/>
      <url>2020/11/07/http-qing-qiu-xiang-ying/</url>
      
        <content type="html"><![CDATA[<p>HTTP请求-响应</p><a id="more"></a><h3 id="1-HttpServletRequest"><a href="#1-HttpServletRequest" class="headerlink" title="1.HttpServletRequest"></a>1.HttpServletRequest</h3><ul><li><p>API</p><pre><code>//客户端请求信息System.out.println("应用上下文路径getContextPath="+request.getContextPath()) ;System.out.println("客户端发出请求时的完整URL getRequestURL="+request.getRequestURL()) ;System.out.println("请求行中的资源名部分 getRequestURI="+request.getRequestURI()) ;System.out.println("请求行中的参数部分 getQueryString="+request.getQueryString()) ;System.out.println("发出请求的客户机的IP地址 getRemoteAddr="+request.getRemoteAddr()) ;System.out.println("客户机发请求使用的网络端口号 getRemotePort="+request.getRemotePort()) ;//获取请求头System.out.println("获取请求头 getHeader(Accept)="+request.getHeader("Accept")) ;//获取请求参数System.out.println("客户端请求参数 getParameter="+request.getParameter("userName"));String[] sport = request.getParameterValues("sport");System.out.println("客户端请求参数列表,多个值 getParameterValues="+sport.toString());Map&lt;String,String[]&gt; map = request.getParameterMap();System.out.println("客户端请求参数封装成的map类型 getParameterMap="+map.toString());//存储到request作用域 request.setAttribute("name","jack");</code></pre></li><li><p>关于乱码问题</p><pre><code>//POST方式遇到中文乱码，如果客户端是以UTF-8字符编码，需要服务器以UTF-8的编码接收数据，req.setCharacterEncoding("UTF-8");//对于以get方式传输的中文数据乱码需要另外一种方式，默认的还是使用ISO8859-1这个字符编码来接收数据//办法：对接收到的原始数据的字节数组，然后通过字节数组以指定的编码构建字符串，解决乱码问题String name = request.getParameter("name");//接收数据name =new String(name.getBytes("ISO8859-1"), "UTF-8")</code></pre><ul><li>乱码问题解决的核心：通过字节数组以指定的编码构建字符串，这里指定的编码是根据客户端那边提交数据时使用的字符编码来定</li></ul></li></ul><h3 id="2-HttpServletResponse响应对象"><a href="#2-HttpServletResponse响应对象" class="headerlink" title="2.HttpServletResponse响应对象"></a>2.HttpServletResponse响应对象</h3><ul><li><p>代表服务器的响应，封装了向客户端发送数据、发送响应头，发送响应状态码的方法</p></li><li><p>常见API</p><pre><code>//设置有多个值的http响应头,参数name表示响应头名称,参数value表示响应头的值,//比如：response.addHeader("name", "java");response.addHeader("name", "spring");addHeader(String name,String value) //设置只有一个值的http响应头,参数name表示响应头名称,参数value表示响应头的值setHeader(String name,String value) //设置http状态码response.setStatus(200);</code></pre></li><li><p>getOutputStream()：</p><ul><li><p>创建的字节输出流对象，可以按字节形式输出响应正文，直接输出字节数组中的二进制数据,更多用于下载输出文件流</p><pre><code>//设置编码格式为UTF-8response.setCharacterEncoding("UTF-8");//通过设置响应头控制浏览器以UTF-8的编码显示数据，如果不加这句话，那么浏览器显示的将是乱码 response.setHeader("Content-Type","text/html;charset=utf-8");String data = "小滴课堂java高级工程师成长系列";//获取OutputStream输出流OutputStream outputStream = response.getOutputStream();//将字符转换成字节数组，指定以UTF-8编码进行转换byte[] dataByteArr = data.getBytes("UTF-8");//使用OutputStream流向客户端输出字节数组outputStream.write(dataByteArr);</code></pre></li></ul></li><li><p>getWriter()：</p><ul><li><p>创建的字符输出流对象，可以按字符形式输出响应正文，只能输出输出字符文本内容，和上面的互斥</p><pre><code>//设置编码格式为UTF-8response.setCharacterEncoding("UTF-8");//通过设置响应头控制浏览器以UTF-8的编码显示数据，如果不加这句话，那么浏览器显示的将是乱码response.setHeader("content-type", "text/html;charset=UTF-8");String data = "小滴课堂java高级工程师成长系列";//获取PrintWriter输出流PrintWriter out = response.getWriter();//使用PrintWriter流向客户端输出字符out.write(data);</code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServletContext和JSP</title>
      <link href="2020/11/07/servletcontext-he-jsp/"/>
      <url>2020/11/07/servletcontext-he-jsp/</url>
      
        <content type="html"><![CDATA[<p>javaweb开发核心之应用上下文和JSP</p><a id="more"></a><h3 id="1-作用域对象"><a href="#1-作用域对象" class="headerlink" title="1.作用域对象"></a>1.作用域对象</h3><ul><li>就是对象的生命周期，在javaweb开发里面有多个不同生命周期的对象</li><li>PageContext，ServletRequest，HttpSession，ServletContext；</li><li>对象里面包含属性和对应的数据，所以不同作用域对象使用场景会不同</li></ul><h3 id="2-ServletContext"><a href="#2-ServletContext" class="headerlink" title="2.ServletContext"></a>2.ServletContext</h3><ul><li><p>它代表了servlet环境的上下文，相当于一个全局存储空间</p></li><li><p>同一个WEB应用程序中，所有的Servlet和JSP都可以共享同一个区域，是最大的作用域对象</p></li><li><p>四大作用域对象-用于存取数据:</p><ul><li>PageContext(页面)-&gt;ServletRequest(请求)-&gt;HttpSession(会话)-&gt;【ServletContext】(应用)</li></ul></li><li><p>生命周期：在WEB服务器启动时创建，服务器关闭时销毁</p><img src="/2020/11/07/servletcontext-he-jsp/ServletContext.png" title="ServletContext"></li></ul><h3 id="3-加载应用默认参数"><a href="#3-加载应用默认参数" class="headerlink" title="3.加载应用默认参数"></a>3.加载应用默认参数</h3><ul><li><p>web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>ldcalss.club<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>LD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-获取应用参数"><a href="#4-获取应用参数" class="headerlink" title="4.获取应用参数"></a>4.获取应用参数</h3><ul><li><p>api</p><pre class="line-numbers language-java"><code class="language-java">ServletContext servletContext <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String url <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-存储全局数据"><a href="#5-存储全局数据" class="headerlink" title="5.存储全局数据"></a>5.存储全局数据</h3><ul><li><p>只要是同个应用，都可以共享这些数据，类似map结构</p><pre class="line-numbers language-java"><code class="language-java">servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"appInfo"</span><span class="token punctuation">,</span><span class="token string">"xdclass.net info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String appInfo <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"appInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestServlet appInfo="</span><span class="token operator">+</span>appInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-JSP"><a href="#6-JSP" class="headerlink" title="6.JSP"></a>6.JSP</h3><ul><li><p>全称Java Server Pages，是一种动态网页开发技术；</p><ul><li>使用JSP标签在HTML网页中插入Java相关代码，标签通常以&lt;%开头 以%&gt;结束</li><li>JSP本身就是一种Servlet, JSP在第一次被访问的时候会被编译为HttpJspPage类,是HttpServlet的一个子类</li><li>为什么用这个：和原生Servle 相比JSP可以很方便的编写HTML网页而不用去大量的用println语句输出html代码</li><li>通俗来说：jsp就是在html里面写java代码，servlet就是在java里面写html代码</li></ul></li><li><p>需要添加包：jsp-api.jar</p></li><li><p>JSP内置了9个对象：</p><pre class="line-numbers language-java"><code class="language-java">request  HttpServletRequest类的实例response HttpServletResponse类的实例out PrintWriter类的实例，用于把结果输出至网页上session HttpSession类的实例application ServletContext类的实例，与应用上下文有关config  ServletConfig类的实例pageContext PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问page    Java类中的<span class="token keyword">this</span>关键字Exception   Exception类的对象，代表发生错误的JSP页面中对应的异常对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Jsp脚本程序</p><pre class="line-numbers language-jsp"><code class="language-jsp"><% 代码片段 %><%out.println("IP address is " + request.getRemoteAddr());%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Jsp表达式的语法格式</p><ul><li><p>不能用分号结束</p><pre><code>&lt;%= 表达式 %&gt;&lt;%=request.getRequestURL()%&gt;</code></pre></li></ul></li><li><p>中文编码问题</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> ServletContext </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet4.0</title>
      <link href="2020/11/06/servlet4.0/"/>
      <url>2020/11/06/servlet4.0/</url>
      
        <content type="html"><![CDATA[<p>Servlet4.0 讲解</p><a id="more"></a><h3 id="1-Tomcat目录讲解"><a href="#1-Tomcat目录讲解" class="headerlink" title="1.Tomcat目录讲解"></a>1.Tomcat目录讲解</h3><ul><li><p>bin</p><pre><code>启动和关闭tomcat脚本startup.sh/startup.batshutdown.sh/shutdown.bat</code></pre></li><li><p>conf</p><pre><code>存放配置文件server.xml: 配置整个服务器信息 比如修改端口号，添加虚拟主机</code></pre></li><li><p>lib</p><pre><code>存放Tomcat运行需要的第三方包，这个目录中的jar所有项目都可以共享如果需要添加Tomcat都依赖的jar文件，可以把它放到这个目录中</code></pre></li><li><p>log</p><pre><code>运行的相关日志文件,Tomcat启动和关闭的信息，如果启动Tomcat时有错误catalina.out 运行日志文件，即标准输出和标准出错，也包含tomcat运行自己输出的日志以及应用里向console输出的日志</code></pre></li><li><p>webapps</p><pre><code>Tomcat的主要Web发布目录，存放web项目，其中每个文件夹都是一个项目其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目</code></pre></li><li><p>temp</p><ul><li>存放tomcat运行时的临时性数据</li></ul></li><li><p>work</p><ul><li>编译后产生的class文件</li></ul></li><li><p>其他忽略</p></li></ul><h3 id="2-IDEA-配置-Tomcat"><a href="#2-IDEA-配置-Tomcat" class="headerlink" title="2.IDEA 配置 Tomcat"></a>2.IDEA 配置 Tomcat</h3><ul><li>~</li></ul><h3 id="3-Servlet4-0"><a href="#3-Servlet4-0" class="headerlink" title="3.Servlet4.0"></a>3.Servlet4.0</h3><ul><li><p>JavaServlet的简称，用Java编写的运行在Web服务器或应用服务器上的程序,具有独立于平台和协议的特性, 主要功能在于交互式地浏览和生成动态Web内容</p></li><li><p>接收用户通过浏览器传来的表单数据，或者读取数据库信息返回给浏览器查看，创建动态网页</p></li><li><p>package javax.servlet</p></li><li><p>有两个常见的子类：HttpServlet、GenericServlet</p></li><li><p>创建Servlet程序</p><ul><li><p>需要添加包：servlet-api.jar</p></li><li><p>创建Class，继承HttpServlet</p></li><li><p>重写doGet/doPost方法，返回HTML内容</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置响应内容</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter printWriter <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"测试 servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置web.xml</p><pre class="line-numbers language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.jxd.web.UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/userServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动tomcat，进行访问</p></li></ul></li></ul><h3 id="4-doGet-doPost"><a href="#4-doGet-doPost" class="headerlink" title="4.doGet/doPost"></a>4.doGet/doPost</h3><ul><li>doGet方法：<ul><li>http用get方式提交的请求，普通的查询就会进入到此方法</li></ul></li><li>doPost方法：<ul><li>http用post方式提交的请求就会进入到此方法</li></ul></li><li>doHead、doDelete等，一样的都是根据http提交Method来区分</li><li>Servlet访问URL使用路径映射（注意：一定要加 / 开头）<ul><li>url-pattern：以”/’开头,可以用 /xxx/yy 来区分模块，* 是通配符</li></ul></li></ul><h3 id="5-Servlet生命周期"><a href="#5-Servlet生命周期" class="headerlink" title="5.Servlet生命周期"></a>5.Servlet生命周期</h3><ul><li><p>Servlet 接口里面有5个方法，其中三个生命周期方法和两个普通方法</p><ul><li>实例化-&gt;使用构造方法创建对象</li><li>初始化-&gt;执行init方法：Servlet 的生命期中，仅执行一次 init() 方法，它是在服务器装入 Servlet 时执行的,即第一次访问这个Servlet才执行</li><li>服务-&gt;执行service方法，service() 方法是 Servlet 的核心。每当一个客户请求一个HttpServlet 对象，该对象的service() 方法就要被调用</li><li>销毁-&gt; 执行destroy方法,destroy() 方法仅执行一次，即在服务器停止且卸装 Servlet 时执行该方法</li></ul></li><li><p>HttpServlet里面实现了service方法，里面会根据不同的http method调用不同的方法，所以我们自定义servlet只要重写对应的doXXX方法即可</p></li></ul><h3 id="6-Servlet-注解"><a href="#6-Servlet-注解" class="headerlink" title="6.Servlet 注解"></a>6.Servlet 注解</h3><ul><li><p>Servlet3.0之后版本新增</p></li><li><p>代替web.xml 配置</p><pre><code>@WebServlet</code></pre></li><li><p>配置</p><pre><code>//servlet名称，若不指定，则为Servlet的完整类名String name() default "";//路径映射,配置多个，需要/开头 String[] value() default {};//路径映射,支持配置多个，需要/开头  String[] urlPatterns() default {}; //标记容器是否在启动应用时就加载Servlet，默认或数值为负数时表示第一次请求Servlet时再加载；0或正数表示启动应用就加载  int loadOnStartup() default -1; //配置初始参数  WebInitParam[] initParams() default {};//是否支持异步操作模式 boolean asyncSupported() default false;</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP基础协议和解析</title>
      <link href="2020/11/06/http-ji-chu-xie-yi-he-jie-xi/"/>
      <url>2020/11/06/http-ji-chu-xie-yi-he-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>HTTP基础协议和解析</p><a id="more"></a><h3 id="1-超文本传输协议"><a href="#1-超文本传输协议" class="headerlink" title="1.超文本传输协议"></a>1.超文本传输协议</h3><ul><li><p>HyperText Transfer Protocol</p></li><li><p>协议</p><ul><li><p>协议是⼀种约定，规定好⼀种信息的格式，如果发送⽅按照这种请求格式发送信息，那么接 收端就要按照这样的格式解析数据，这就是协议</p></li><li><p>json协议</p><pre><code>{    "name":"jack",    "age"：16}</code></pre></li><li><p>xml协议</p><pre><code>&lt;user&gt;    &lt;name&gt; jack &lt;/name&gt;    &lt;age&gt; 18 &lt;/age&gt;&lt;/user&gt;</code></pre></li><li><p>http超文本传输协议</p></li></ul></li><li><p>http协议</p><ul><li>即超⽂本传送协议(Hypertext Transfer Protocol )，是Web联⽹的基础，也是⼿机PC联⽹常⽤的协议之⼀，HTTP协议是建⽴在TCP协议之上的⼀种应⽤</li><li>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，从建⽴连接到关闭连接的过程称为“⼀次连接”</li><li>HTTP请求-HTTP响应</li><li>响应码：<ul><li>1xx:信息</li><li>2xx:成功 200 OK，请求正常</li><li>3xx:重定向</li><li>4xx:客户端错误 404 Not Found 服务器⽆法找到被请求的⻚⾯</li><li>5xx:服务器错误 503 Service Unavailable，服务器挂了或者不 可⽤</li></ul></li><li>和https的关系<ul><li>Hyper Text Transfer Protocol over SecureSocket Layer</li><li>主要由两部分组成：HTTP + SSL / TLS</li><li>比 HTTP 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性,增加破解成本</li><li>缺点：相同网络环境下，HTTPS 协议会使页面的加载时间延长近 50%，增加额外的计算资源消耗，增加 10%到 20%的耗电等；不过利大于弊，所以Https是趋势，相关资源损耗也在持续下降</li><li>如果做软件压测：直接压测内网ip，通过压测公网域名，不管是http还是https，都会带来额外的损耗导致结果不准确</li></ul></li></ul></li></ul><h3 id="2-HTTP消息体"><a href="#2-HTTP消息体" class="headerlink" title="2.HTTP消息体"></a>2.HTTP消息体</h3><ul><li><p>Http请求消息结构</p><ul><li>请求行<ul><li>请求方法</li><li>URL地址</li><li>协议名</li></ul></li><li>请求头<ul><li>报文头包含若干个属性 格式为“属性名:属性值”，</li><li>服务端据此获取客户端的基本信息</li></ul></li><li>请求体<ul><li>请求的参数，可以是json对象，也可以是前端表单生成的key=value&amp;key=value的字符串</li></ul></li></ul></li><li><p>Http响应消息结构</p><ul><li>响应行<ul><li>报文协议及版本、状态码</li></ul></li><li>响应头<ul><li>报文头包含若干个属性 格式为“属性名:属性值”</li></ul></li><li>响应正文<ul><li>响应报文体，我们需要的内容，多种形式比如html、json、图片、视频文件等</li></ul></li></ul></li></ul><h3 id="3-HTTP请求方法"><a href="#3-HTTP请求方法" class="headerlink" title="3.HTTP请求方法"></a>3.HTTP请求方法</h3><ul><li>http1.0定义了三种：<ul><li>GET: 向服务器获取资源，比如常见的查询请求</li><li>POST: 向服务器提交数据而发送的请求</li><li>Head: 和get类似，返回的响应中没有具体的内容，用于获取报头</li></ul></li><li>http1.1定义了六种<ul><li>PUT：一般是用于更新请求，比如更新个人信息、商品信息全量更新</li><li>PATCH：PUT 方法的补充,更新指定资源的部分数据</li><li>DELETE：用于删除指定的资源</li><li>OPTIONS: 获取服务器支持的HTTP请求方法,服务器性能、跨域检查等</li><li>CONNECT: 方法的作用就是把服务器作为跳板，让服务器代替用户去访问其它网页，之后把数据原原本本的返回给用户，网页开发基本不用这个方法，如果是http代理就会使用这个，让服务器代理用户去访问其他网页，类似中介</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li></ul></li></ul><h3 id="4-HTTP响应码"><a href="#4-HTTP响应码" class="headerlink" title="4.HTTP响应码"></a>4.HTTP响应码</h3><ul><li><p>浏览器向服务器请求时，服务端响应的消息头里面有状态码，表示请求结果的状态</p></li><li><p>分类</p><ul><li><p>1XX: 收到请求，需要请求者继续执行操作，比较少用</p></li><li><p>2XX: 请求成功，常用的 200</p></li><li><p>3XX: 重定向，浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取；</p><ul><li>好处：网站改版、域名迁移等，多个域名指向同个主站导流</li><li>必须记住： 301：永久性跳转，比如域名过期，换个域名 302：临时性跳转</li></ul></li><li><p>4XX: 客服端出错，请求包含语法错误或者无法完成请求</p><ul><li>必须记住： 400: 请求出错，比如语法协议 403: 没权限访问 404: 找不到这个路径对应的接口或者文件 405: 不允许此方法进行提交，Method not allowed，比如接口一定要POST方式，而你是用了GET</li></ul></li><li><p>5XX: 服务端出错，服务器在处理请求的过程中发生了错误</p><ul><li>必须记住： 500: 服务器内部报错了，完成不了这次请求 503: 服务器宕机</li></ul></li></ul></li></ul><h3 id="5-HTTP请求头"><a href="#5-HTTP请求头" class="headerlink" title="5.HTTP请求头"></a>5.HTTP请求头</h3><ul><li><p>http请求分为三部分：请求行，请求头， 请求体</p></li><li><p>请求头</p><ul><li>报文头包含若干个属性 格式为“属性名:属性值”，</li><li>服务端据此获取客户端的基本信</li></ul></li><li><p>常见的请求头</p><ul><li>Accept： 览器支持的 MIME 媒体类型, 比如 text/html,application/json,image/webp,<em>/</em> 等</li><li>Accept-Encoding: 浏览器发给服务器,声明浏览器支持的编码类型，gzip, deflate</li><li>Accept-Language: 客户端接受的语言格式,比如 zh-CN</li><li>Connection: keep-alive , 开启HTTP持久连接</li><li>Host：服务器的域名</li><li>Origin：告诉服务器请求从哪里发起的，仅包括协议和域名 CORS跨域请求中可以看到response有对应的header，Access-Control-Allow-Origin</li><li>Referer：告诉服务器请求的原始资源的URI，其用于所有类型的请求，并且包括：协议+域名+查询参数； 很多抢购服务会用这个做限制，必须通过某个入来进来才有效</li><li>User-Agent: 服务器通过这个请求头判断用户的软件的应用类型、操作系统、软件开发商以及版本号、浏览器内核信息等； 风控系统、反作弊系统、反爬虫系统等基本会采集这类信息做参考</li><li>Cookie: 表示服务端给客户端传的http请求状态,也是多个key=value形式组合，比如登录后的令牌等</li><li>Content-Type： HTTP请求提交的内容类型，一般只有post提交时才需要设置，比如文件上传，表单提交等</li></ul></li></ul><h3 id="6-HTTP响应头"><a href="#6-HTTP响应头" class="headerlink" title="6.HTTP响应头"></a>6.HTTP响应头</h3><ul><li>响应头<ul><li>报文头包含若干个属性 格式为“属性名:属性值”</li></ul></li><li>常见的响应头<ul><li>Allow: 服务器支持哪些请求方法</li><li>Content-Length: 响应体的字节长度</li><li>Content-Type: 响应体的MIME类型</li><li>Content-Encoding: 设置数据使用的编码类型</li><li>Date: 设置消息发送的日期和时间</li><li>Expires: 设置响应体的过期时间,一个GMT时间，表示该缓存的有效时间</li><li>cache-control: Expires的作用一致，都是指明当前资源的有效期, 控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据,优先级高于Expires,控制粒度更细，如max-age=240，即4分钟</li><li>Location：表示客户应当到哪里去获取资源，一般同时设置状态代码为3xx</li><li>Server: 服务器名称</li><li>Transfer-Encoding：chunked 表示输出的内容长度不能确定，静态网页一般没，基本出现在动态网页里面</li><li>Access-Control-Allow-Origin: 定哪些站点可以参与跨站资源共享</li></ul></li></ul><h3 id="7-Http常见请求-响应头content-type内容类型"><a href="#7-Http常见请求-响应头content-type内容类型" class="headerlink" title="7. Http常见请求/响应头content-type内容类型"></a>7. Http常见请求/响应头content-type内容类型</h3><ul><li>Content-type: 用来指定不同格式的请求响应信息，俗称 MIME媒体类型</li><li>常见的取值<ul><li>text/html ：HTML格式 text/plain ：纯文本格式 </li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式 image/jpeg ：jpg图片格式 image/png：png图片格式</li><li>application/json：JSON数据格式 application/pdf ：pdf格式 application/octet-stream ：二进制流数据，一般是文件下载</li><li>application/x-www-form-urlencoded：form表单默认的提交数据的格式，会编码成key=value格式</li><li>multipart/form-data： 表单中需要上传文件的文件格式类型</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/11/05/javascript/"/>
      <url>2020/11/05/javascript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript重点知识</p><a id="more"></a><h3 id="1-js-文件引入"><a href="#1-js-文件引入" class="headerlink" title="1.js 文件引入"></a>1.js 文件引入</h3><ul><li>通过script 标签的src 属性引入js文件</li><li>注意<ul><li>不要同时使用内部引用和外部引用</li><li>script标签可以不写type，但是写了必须写对</li></ul></li></ul><h3 id="2-js变量类型"><a href="#2-js变量类型" class="headerlink" title="2.js变量类型"></a>2.js变量类型</h3><ul><li>原始类型（基本类型、简单类型）<ul><li>保存在栈内存</li><li>Boolean</li><li>Null</li><li>Undefined<ul><li>声明了变量，但是没赋值</li></ul></li><li>Number<ul><li>超过一定范文，会丢失精度</li></ul></li><li>String</li><li>Symbol</li><li>BigInt</li></ul></li><li>引用类型（复杂类型）<ul><li>栈内存中保存指针，堆内存中保存值</li><li>Object</li></ul></li></ul><h3 id="3-js声明"><a href="#3-js声明" class="headerlink" title="3.js声明"></a>3.js声明</h3><ul><li>声明规范<ul><li>必须是以字母、下划线 ( _ ) 或者美元符号 ( $ ) 开头</li><li>变量量是对大小写敏感的</li><li>关键字和保留字不能用</li></ul></li><li>建议<ul><li>定一个语义化变量名</li><li>小驼峰命名变量 </li><li>建议不要用拼音</li></ul></li></ul><h3 id="4-js变量运算"><a href="#4-js变量运算" class="headerlink" title="4.js变量运算"></a>4.js变量运算</h3><ul><li><p>同类型的运算</p><ul><li>直接值进行运算</li></ul></li><li><p>不同类型的运算</p><ul><li>类型转换，值进行运算</li></ul><pre><code>var a =2,b=3；//同类型运算var c = a + b = 5；//类型转换，js是弱类型//a =&gt; 转换成布尔值true =&gt; 取反!a = false；//a =&gt; '2' =&gt;与b拼接 （+有字符串拼接的功能）var d = '3'；var e = a + b = '23'；</code></pre></li><li><p>运算符</p><pre><code>//算数运算符+-*/%：取余+=-=//关系运算符&gt;&lt;==：判断相等时，数据类型不同，会进行转换===：判断相等时，数据类型不同，不进行转换，只判断值是不是相等//自增自减++ ： 写在变量后，会等运算结束的时候才进行自增操作；写在变量前，先进行自增操作再进行运算-- ： 写在变量后，会等运算结束的时候才进行自减操作；写在变量前，先进行自减操作再进行运算//真假运算&amp;&amp; 与 ： 当判断变量为真时进行下一个判断，为假时停止，直接返回|| 或 ： 当判断变量为真时停止，直接输出，否则进行下一个判断！非//三元运算符//条件为true时，执行表达式1，否则执行表达式2条件 ? 表达式1 : 表达式2</code></pre></li><li><p>6个假变量</p><pre><code>// 6个假变量（转换成false的变量）1. false (布尔型)2. null (用于定义空的或者不存在的引用)3. undefined (未定义值)4. 0 (数字类型)5. "" '' (空字符串) (字符型)6. NaN(not a Number)   :parseInt() 数字类型转换失败时，输出NaN</code></pre></li></ul><h3 id="5-js-switch"><a href="#5-js-switch" class="headerlink" title="5.js switch"></a>5.js switch</h3><ul><li>内部严格按照=== 的规则，一定要值和类型相等才行。</li><li>不要忘记加break</li></ul><h3 id="6-js-函数"><a href="#6-js-函数" class="headerlink" title="6.js 函数"></a>6.js 函数</h3><ul><li><p>形参</p><ul><li>声明函数时定义的参数</li></ul></li><li><p>实参</p></li><li><p>调用函数时传的参数</p></li><li><p>形参和实参是一一对应的</p><ul><li><p>数量可以不对应</p></li><li><p>函数可以设置默认参数</p><pre><code>function(a,b=2){    return a+b;}</code></pre></li><li><p>定义形参的时候需要语义化</p></li><li><p>实参可以是字面量也可以是变量</p></li></ul></li></ul><h3 id="7-js-函数声明方法"><a href="#7-js-函数声明方法" class="headerlink" title="7.js 函数声明方法"></a>7.js 函数声明方法</h3><ul><li><p>函数表达式</p><pre><code>function name(参数) {// 执行语句}var a = function name(参数) {// 执行语句}var a = function(参数){//执行语句}</code></pre></li></ul><h3 id="8-js隐藏参数arguments"><a href="#8-js隐藏参数arguments" class="headerlink" title="8.js隐藏参数arguments"></a>8.js隐藏参数arguments</h3><ul><li>arguments<ul><li>用来取实参的</li><li>传入的实参都能在函数体里通过arguments类数组取到</li><li>具有数组的特点<ul><li>通过索引取参</li><li>有长度</li></ul></li></ul></li></ul><h3 id="9-js-递归"><a href="#9-js-递归" class="headerlink" title="9.js 递归"></a>9.js 递归</h3><ul><li>函数自己调用自己<ul><li>要有终止递归的条件,不然就变成死循环了</li></ul></li></ul><h3 id="10-js-立即执行函数"><a href="#10-js-立即执行函数" class="headerlink" title="10.js 立即执行函数"></a>10.js 立即执行函数</h3><ul><li><p>IIFE：immediately-invoked function expression</p></li><li><p>特点：</p><ul><li><p>自动执行</p></li><li><p>执行完销毁</p><pre><code>(function() {})();// w3c建议(function() {}());</code></pre></li></ul></li><li><p>以() [] 开头的语句，前面的语句必须加分号，否则会解析错误</p></li><li><p>函数声明变成表达式的方式</p><pre><code>!function() {}()</code></pre></li></ul><h3 id="11-js-闭包"><a href="#11-js-闭包" class="headerlink" title="11.js 闭包"></a>11.js 闭包</h3><ul><li><p>全局变量能够通过闭包实现局部（私有）</p><ul><li>只有 通过调用函数才能改变变量</li></ul></li><li><p>闭包是指有权访问另一个函数作用域中的变量的函数</p></li><li><p>产生闭包</p><ul><li>是通过调用函数时返回其内部的函数</li></ul></li><li><p>作用</p><ul><li>实现外界访问函数体内部的变量</li></ul></li></ul><h3 id="12-js-对象"><a href="#12-js-对象" class="headerlink" title="12.js 对象"></a>12.js 对象</h3><ul><li><p>除了原始类型都是对象</p><ul><li>typeof判断原始类型</li></ul></li><li><p>对象</p><ul><li>在对象里的函数叫方法(methods)</li><li>对象的属性名是字符串，属性的值可以是任意类型的</li><li>JSON对象，属性名要用双引号包住</li></ul></li><li><p>操作</p><pre><code>var person = {    name: "张三",    age: 18,    job: "teacher",    eat: function () {        console.log(this.age)    }}//增person.sex = "男";console.log(person);//删delete person.sexconsole.log(person);//查//1console.log(person.name);//2for(var key in person){    console.log(person[key])}//改person.age = 20;console.log(person);</code></pre></li><li><p>对象中的方法通过this,获取自身对象的属性和方法</p><pre><code>var person = {    name: "张三",    age: 18,    job: "teacher",    eat: function () {        console.log(this.age)    },    say:function(){     this.eat();     console.log(this.name);    }}person.say();</code></pre></li><li><p>创建对象</p><pre><code>//对象字面量var obj = {    name: "张三",    say: function () {        console.log("my name is"+this.name)    }}//Objectvar obj2 = new Object({    name: "张三",    say: function () {        console.log("my name is"+this.name)    }})//构造函数function Person(name) {    this.name = name;    this.say =function () {        console.log("my name is"+this.name)      }  }  var obj3 = new Person('张三');</code></pre><ul><li><p>构造函数</p><ul><li><p>固定参数</p><pre><code>function Car1(name,price,size){    this.name = name;    this.price = price;    this.size = size;}var obj1 = new Car1('奔驰','30W','small');console.log(obj1);</code></pre></li><li><p>不固定参数</p><pre><code>function Car2(obj){    this.name = obj.name;    this.price = obj.price;    this.size = obj.size}var obj2 = new Car2({    size:'large',    price:'50W',    name:'宝马'})console.log(obj2);</code></pre></li></ul></li><li><p>new的作用</p><pre><code>//new 把对象返回function Car(obj){    this.name = obj.name;    this.price = obj.price;    this.size = obj.size}//没有newvar obj1 = Car({    size:'large',    price:'50W',    name:'宝马'})//newvar obj2 = new Car({    size:'large',    price:'50W',    name:'宝马'})console.log(obj1); //undefinedconsole.log(obj2); //Car对象</code></pre></li></ul></li></ul><h3 id="13-js-原型"><a href="#13-js-原型" class="headerlink" title="13.js 原型"></a>13.js 原型</h3><ul><li><p>prototype</p><ul><li>给我们构造函数实例化出来的对象设置公共的属性或者方法</li><li>构造函数的内部属性，会覆盖掉原型上的属性</li><li>选择<ul><li>方法写在原型上</li><li>需要配置的属性写在构造函数</li></ul></li><li>只有构造函数才能对原型上的属性进行改动</li><li>原型就是构造函数的属性</li></ul><pre><code>函数才有prototype属性，对象有__proto__属性js里万物皆对象，所以一直访问__proto__属性就会产生一条链条，就是原型链链条的尽头是null</code></pre></li></ul><h3 id="14-js-插件化"><a href="#14-js-插件化" class="headerlink" title="14.js 插件化"></a>14.js 插件化</h3><ul><li>步骤<ul><li>写一个立即执行函数</li><li>将构造函数写在立即执行函数里</li><li>将公共方法写在原型上</li><li>将构造函数挂载到window上</li></ul></li></ul><h3 id="15-js-数组"><a href="#15-js-数组" class="headerlink" title="15.js 数组"></a>15.js 数组</h3><ul><li><p>方法</p><ul><li><p>增</p><pre><code>pust 在数组后插入一条数据unshift 在数组的第一位插入一条数据</code></pre></li><li><p>删</p><pre><code>pop 删除数组最后一个元素shift 删除数组第一个元素</code></pre></li><li><p>splice</p><ul><li><p>用于删除、插入或替换元素</p></li><li><p>函数返回值是被删除的元素</p></li><li><p>会改变原数组</p><pre><code>//第一个参数是控制从哪个位置开始删除或者替换（看有无第三个参数）//第二个参数控制删除的数量//第三个参数将删除了的元素替换掉，可用逗号隔开list.splice(2,2,'hello','Nick')</code></pre></li></ul></li><li><p>join</p><ul><li><p>将数组类型的数据转换成字符串</p></li><li><p>和toString的区别</p><ul><li><p>可以自定义元素之间用什么隔开</p><pre><code>console.log(list.join('*'))// 1*2*hello*Nick*true*5*6</code></pre></li></ul></li></ul></li></ul></li></ul><ul><li><p>concat</p><ul><li>数组之间的合并</li><li>不会改变原数组</li><li>可以多参数</li></ul></li><li><p>split </p><ul><li>转换成数组</li></ul><pre><code>var str = 'nick,jack,张三,李四';var arr = str.split(',');console.log(arr)</code></pre></li><li><p>indexof</p><ul><li>查找元素的索引</li></ul><pre><code>arr.splice(arr.indexOf("jack"),1);console.log(arr);</code></pre></li></ul><h3 id="16-js-类型判断"><a href="#16-js-类型判断" class="headerlink" title="16.js 类型判断"></a>16.js 类型判断</h3><ul><li>原始数据类型<ul><li>typeof 能直接返回原始数据类型的数据类型，以小写字符串的方式返回</li><li>使用typeof判断引用数据类型的时候，会直接返回原型链上最后的一个对象</li></ul></li><li>引用数据类型<ul><li>instanceof  判断是不是由这个构造函数创建出的对象实例，返回的值是布尔类型</li><li>实质上是判断在原型链上存不存在这个构造函数，若存在则返回true</li></ul></li></ul><h3 id="17-js-JSON"><a href="#17-js-JSON" class="headerlink" title="17.js JSON"></a>17.js JSON</h3><ul><li>用来做数据交换的一种语言</li><li>语法格式<ul><li>属性名必须是双引号括起来的字符串</li><li>最后一个属性后不能有逗号</li></ul></li><li>作用<ul><li>传输数据</li></ul></li><li>序列化和反序列化<ul><li>对象序列化后可以在网络上传输，或者保存在硬盘中</li><li>JSON.stringify()</li><li>JSON.parse()</li></ul></li></ul><h3 id="18-js-ajax"><a href="#18-js-ajax" class="headerlink" title="18.js ajax"></a>18.js ajax</h3><ul><li><p>原理</p><ul><li>通过XmlHttpRequest对象向服务器发异步请求，从服务器获得数据</li><li>通过js来操作DOM而更新页面</li><li>支持异步请求</li><li>也就是js可以及时向服务器提出请求和处理响应，而不阻塞用户，达到无刷新的效果</li></ul></li><li><p>注意</p></li><li><p>js是单线程的，会阻塞代码运行，所以引入XmlHttpRequest请求处理异步数据</p></li><li><p>原生ajax</p><pre><code>//创建ajax对象var xhrif (window.XMLHttpRequest) {    xhr = new XMLHttpRequest();} else {    xhr = new ActiveXObject("Microsoft.XMLHTTP");}//设置请求地址及方式//第一个参数是用于指定请求的方式，一般大写//第二个参数是请求的URL//第三个参数表示是否异步发送请求的布尔值，默认是truexhr.open("GET/POST", "https://xxxx", false);//发送请求(可选参数，null)xhr.send();/*on readystate change事件readyState属性：请求状态0 （初始化）还没有调用open()方法1 （载入）已调用send()方法，正在发送请求2 （载入完成）send()方法完成，已收到全部响应内容3 （解析）正在解析响应内容4 （完成）响应内容解析完成，可以在客户端调用了*/xhr.onreadystatechange = function () {    if (xhr.readyState === 4) {        //容错处理理        if (xhr.status === 200) {            alert(xhr.responseText);        } else {            alert('出错了，Err:' + xhr.status);        }    }}</code></pre></li></ul><h3 id="19-js-DOM"><a href="#19-js-DOM" class="headerlink" title="19.js DOM"></a>19.js DOM</h3><ul><li><p>文档对象模型</p></li><li><p>定义了访问和操作HTML文档的方法</p></li><li><p>DOM树</p><ul><li>浏览器将结构化的文档以“树“的结构存储在浏览器内存里</li><li>每个HTML元素被定义为节点</li><li>节点有自己的属性（名称/类型/内容…）</li><li>有自己的层级关系（parent,child,sibling)</li></ul></li><li><p>查找元素</p><pre><code>document.getElementById(id) 通过元素id查找document.getElementsByTagName(name) 通过标签名查找document.getElementsByClassName(name) 通过类名查找document.querySelector(selector) 通过CSS选择器选择元素，无法选择伪类</code></pre></li><li><p>改变元素内容</p><pre><code>element.innerHTML = xxx 改变元素的innerHTMLelement.attribute = xxx 改变元素的属性值element.setAttribute(attribute,value) 改变元素的属性值element.style.property = new style 改变元素的样式</code></pre></li><li><p>添加和删除元素</p><pre><code>document.createElement(element)  //创建HTML元素document.removeChild(element) //删除HTML元素document.appendChild(element) //添加HTML元素document.replaceChild(element) //替换HTML元素document.write(text) //可写入HTML</code></pre></li></ul><h3 id="20-js-事件"><a href="#20-js-事件" class="headerlink" title="20.js 事件"></a>20.js 事件</h3><ul><li><p>常见事件</p><pre><code>onchange //html元素已被改变onclick //点击元素onmouseover //鼠标移动到元素上onmouseout //鼠标移开元素onkeydown // 按下键盘onload //页面完成加载</code></pre></li><li><p>事件监听器</p><ul><li>addEventListener  给DOM对象添加事件处理程序</li><li>removeEventListener 删除给DOM对象的事件处理程序</li></ul></li><li><p>onXXX和addEventListener的区别</p><ul><li>onXXX会被覆盖</li><li>addEventListene可以同时注册多个，根据注册顺序，先后执行</li></ul></li><li><p>事件机制</p><ul><li><p>冒泡</p><ul><li>先触发子元素的事件，再触发父元素的事件</li></ul></li><li><p>捕获</p><ul><li>先触发父元素的事件，再触发子元素的事件</li></ul></li><li><p>标准浏览器：addEventListener (“click”,function,”true/false”)方法，若第三个参数为true，则采用事件捕获，若为false,则采用事件冒泡</p></li><li><p>取消冒泡或者捕获</p><pre><code>event.stopPropagation();//阻止元素行为 例如a链接的跳转event.preventDefault();</code></pre></li></ul></li><li><p>事件代理</p><ul><li>事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件</li></ul></li></ul><h3 id="21-js-定时器"><a href="#21-js-定时器" class="headerlink" title="21.js 定时器"></a>21.js 定时器</h3><ul><li><p>延迟执行</p><pre><code>var id = setTimeout(function,毫秒)</code></pre><ul><li><p>停止</p><pre><code>clearTimeout(id); //参数是由setTimeout()返回的id</code></pre></li></ul></li><li><p>定时执行</p><pre><code>var id = setInterval(function, 毫秒)</code></pre><ul><li><p>停止</p><pre><code>setInterval(id);//参数是由setInterval返回的id</code></pre></li></ul></li></ul><h3 id="22-浏览器对象模型BOM"><a href="#22-浏览器对象模型BOM" class="headerlink" title="22.浏览器对象模型BOM"></a>22.浏览器对象模型BOM</h3><ul><li><p>Browser Object Model</p></li><li><p>内置对象</p><ul><li><p>window</p></li><li><p>screen</p><ul><li>获取屏幕宽度</li></ul></li><li><p>location</p><pre><code>location.reload();location.href = 'https://www.baidu.com';//输出地址栏路径localtion.href</code></pre></li><li><p>history</p></li></ul></li><li><p>弹出框</p><ul><li>警告框 alert</li><li>确认框 confirm</li><li>提示框 prompt</li></ul></li></ul><h3 id="23-cookie"><a href="#23-cookie" class="headerlink" title="23. cookie"></a>23. cookie</h3><ul><li><p>读取创建cookie</p><pre><code>// 通过Document对象document.cookie="username=Nick; expires=Thu, 18Dec 2043 12:00:00 GMT";setCookie('username', 'Nick')</code></pre></li><li><p>删除cookie</p><pre><code>// 设置过期时间document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";</code></pre></li><li><p>设置cookie函数</p><pre><code>function setCookie(cname, cvalue) {    var d = new Date();    d.setTime(d.getTime() +        (exdays * 24 * 60 * 60 * 1000));    var expires = "expires=" + d.toGMTString();    document.cookie = cname + "=" + cvalue + expires;}function getCookie(cname) {    var name = cname + "=";    var ca = document.cookie.split(';'); // 将字符串以;分割数组    for (var i = 0; i &lt; ca.length; i++) {        var c = ca[i].trim(); // 把多余空格和回车删掉        if (c.indexOf(name) == 0) {            return            c.substring(name.length, c.length);        }    }    return "";}</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT鉴权</title>
      <link href="2020/11/04/jwt-jian-quan/"/>
      <url>2020/11/04/jwt-jian-quan/</url>
      
        <content type="html"><![CDATA[<p>JWT用户登录权限校验</p><a id="more"></a><h3 id="1-登录检验讲解"><a href="#1-登录检验讲解" class="headerlink" title="1.登录检验讲解"></a>1.登录检验讲解</h3><ul><li>单机tomcat应用登录检验<ul><li>sesssion保存在浏览器和应用服务器会话之间</li><li>用户登录成功，服务端会保证一个session，给客户端一个sessionId</li><li>客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId</li></ul></li><li>分布式应用中session共享<ul><li>真实的应用不可能单节点部署，所以就有个多节点登录session共享的问题需要解决<ul><li>tomcat支持session共享，但是有广播风暴；用户量大的时候，占用资源就严重</li><li>使用redis存储token:<ul><li>服务端使用UUID生成随机64位或者128位token，放入redis中，然后返回给客户端并存储在cookie中</li><li>用户每次访问都携带此token，服务端去redis中校验是否有此用户即可</li></ul></li><li>通过加密算法生成token校验:JWT</li></ul></li></ul></li></ul><h3 id="2-JWT-json-wen-token-讲解"><a href="#2-JWT-json-wen-token-讲解" class="headerlink" title="2.JWT(json wen token)讲解"></a>2.JWT(json wen token)讲解</h3><ul><li><p>JWT 是一个开放标准，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。</p></li><li><p>JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名</p><ul><li>简单来说，就是通过一定规范来生成token，然后可以通过解密算法逆向解密token，这样就可以获取用户信息</li><li>优点：<ul><li>生产的token可以包含基本信息，比如id、用户昵称、头像等信息，避免再次查库</li><li>存储在客户端，不占用服务端的内存资源</li></ul></li><li>缺点：<ul><li>token是经过base64编码，所以可以解码，因此token加密前的对象不应该包含敏感信息<ul><li>用户权限，密码等</li></ul></li></ul></li></ul></li><li><p>JWT格式组成 头部、负载、签名</p><ul><li>header+payload+signature<ul><li>头部：主要是描述签名算法</li><li>负载：主要描述是加密对象的信息，如用户的id等，也可以加些规范里面的东西，如iss签发者，exp 过期时间，sub 面向的用户</li><li>签名：主要是把前面两部分进行加密，防止别人拿到token进行base解密后篡改token</li></ul></li></ul></li><li><p>jwt客户端存储</p></li><li><p>可以存储在cookie，localstorage(本地存储)和sessionStorage(会话存储)里面</p></li><li><p>JWT封装通用方法</p><ul><li><p>加入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- JWT相关 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JWT工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *发行者     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SUBJECT <span class="token operator">=</span> <span class="token string">"xdclass"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 过期时间 ：一周     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 秘钥     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String APPSECRET <span class="token operator">=</span> <span class="token string">"xd666"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Description: 生成jwt     * @Date: 2020/9/21 11:36     * @param user     * @return: java.lang.String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">geneJsonWebToken</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null <span class="token operator">||</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null        <span class="token operator">||</span>user<span class="token punctuation">.</span><span class="token function">getHeadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String token <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>SUBJECT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getHeadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>EXPIRE<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span>APPSECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Description: 校验token     * @Date: 2020/9/21 11:39     * @param token     * @return: io.jsonwebtoken.Claims     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">checkJwt</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APPSECRET<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> claims<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2020/10/30/springboot/"/>
      <url>2020/10/30/springboot/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot基础</p><a id="more"></a><h3 id="1-淘宝maven私服地址"><a href="#1-淘宝maven私服地址" class="headerlink" title="1.淘宝maven私服地址"></a>1.淘宝maven私服地址</h3><pre><code>&lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;maven-net-cn&lt;/id&gt;            &lt;name&gt;Maven China Mirror&lt;/name&gt;            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;                        &lt;releases&gt;                &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/releases&gt;            &lt;snapshots&gt;                &lt;enabled&gt;false&lt;/enabled&gt;            &lt;/snapshots&gt;        &lt;/repository&gt;    &lt;/repositories&gt;    &lt;pluginRepositories&gt;        &lt;pluginRepository&gt;            &lt;id&gt;maven-net-cn&lt;/id&gt;            &lt;name&gt;Maven China Mirror&lt;/name&gt;            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;                        &lt;releases&gt;                &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/releases&gt;            &lt;snapshots&gt;                &lt;enabled&gt;false&lt;/enabled&gt;            &lt;/snapshots&gt;        &lt;/pluginRepository&gt;    &lt;/pluginRepositories&gt;</code></pre><h3 id="2、多环境配置"><a href="#2、多环境配置" class="headerlink" title="2、多环境配置"></a>2、多环境配置</h3><ul><li><p>四种环境：开发dev、测试test、预生产pre、生产pro</p></li><li><p>配置</p><ul><li>spring boot允许通过命名约定按照一定的格式(application-{profile}.properties)来定义多个配置文件</li><li>例如，在resources中创建application-dev.properties、application-test.properties、application-pro.properties，在application.properties中输入<code>spring.profiles.active=dev</code>，指定读取哪个配置文件。</li></ul></li></ul><h3 id="3、打包上传"><a href="#3、打包上传" class="headerlink" title="3、打包上传"></a>3、打包上传</h3><ul><li><p>去除相关生产环境没用的jar</p></li><li><p>本地maven打包成jar包 </p><ul><li>mvn clean package  -Dmaven.test.skip=true 跳过测试</li></ul></li><li><p>服务器安装jdk，上传Jar包</p></li><li><p>启动jar包</p><ul><li>java -jar xxxx.jar</li><li>守护进程、系统服务、shell脚本    <ul><li>nohup java -jar xxxx.jar &amp;</li></ul></li></ul></li><li><p>liunx 查看端口被哪个应用占用 lsof -i:port</p></li><li><p>打包指定配置文件</p><ul><li>使用maven的profiles</li><li>使用springboot的profile=active</li></ul></li><li><p>注意：</p><ul><li>阿里云防火墙是否开启，可以选择关闭，关闭是不安全的，可以选择开放端口</li><li>阿里云的安全访问组，开启对应的端口，如果应用是以80端口启动，则默认可以访问</li></ul></li><li><p>本地提交生产代码-&gt;gitlab仓库-&gt;Jenkins自动化构建-&gt;运维或者开发人员发布</p></li></ul><h3 id="4、热部署"><a href="#4、热部署" class="headerlink" title="4、热部署"></a>4、热部署</h3><ul><li>pom.xml添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--必须添加这个配置--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意</p><ul><li>eclipse添加依赖即可</li><li>IDEA还需要配置</li></ul></li><li><p>IDEA配置</p><ul><li>修改setting</li><li>使用快捷键打开，选择Registry<ul><li>默认快捷键：<ul><li>window快捷键 Shift+Ctrl+Alt+/    </li><li>mac快捷键 Shift+Command+Alt+/</li></ul></li></ul></li></ul></li></ul><img src="/2020/10/30/springboot/rbs.jpg" title="热部署"><img src="/2020/10/30/springboot/regis.jpg" title="热部署"><img src="/2020/10/30/springboot/com.jpg" title="热部署"><ul><li>重启IDEA</li></ul><h3 id="5、配置文件"><a href="#5、配置文件" class="headerlink" title="5、配置文件"></a>5、配置文件</h3><ul><li>常见配置文件格式<ul><li>xml、properties、json、yaml</li></ul></li><li>Springboot里面常用xx.yml<ul><li>YAML（Yet Another Markup Language）</li><li>写 YAML 要比写 XML 快得多(无需关注标签或引号) 使用空格 Space 缩进表示分层，不同层次之间的缩进可以使用不同的空格数目</li><li>注意：key后面的冒号，后面一定要跟一个空格,树状结构</li></ul></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">jetty</span><span class="token punctuation">:</span>    <span class="token key atrule">accesslog</span><span class="token punctuation">:</span>      <span class="token key atrule">append</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">1212</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Springboot里面常用 xx.properties<ul><li>Key=Value格式</li><li>语法简单，不容易出错</li></ul></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span><span class="token comment" spellcheck="true">#静态资源访问路径</span><span class="token attr-name">spring.resources.static-locations</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:/templates/</span><span class="token comment" spellcheck="true">#session失效时间，30m表示30分钟</span><span class="token attr-name">server.servlet.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value">30m</span><span class="token comment" spellcheck="true"># Maximum number of connections that the server accepts and processes at any given time.</span><span class="token attr-name">server.tomcat.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token comment" spellcheck="true"># Maximum size of the HTTP post content.</span><span class="token attr-name">server.tomcat.max-http-post-size</span><span class="token punctuation">=</span><span class="token attr-value">2MB</span><span class="token attr-name">server.tomcat.max-http-form-post-size</span><span class="token punctuation">=</span><span class="token attr-value">2MB</span><span class="token comment" spellcheck="true"># Maximum amount of worker threads</span><span class="token attr-name">server.tomcat.max-threads</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>官方文档：<code>https://docs.spring.io/spring-boot/docs/2.4.0/reference/htmlsingle/#core-properties</code></li></ul><h3 id="6、配置文件映射属性和实体类"><a href="#6、配置文件映射属性和实体类" class="headerlink" title="6、配置文件映射属性和实体类"></a>6、配置文件映射属性和实体类</h3><ul><li><p>配置文件加载</p><ul><li>方式一<ul><li>Controller上面配置 @PropertySource({“classpath:resource.properties”})</li><li>增加属性 @Value(“${test.name}”) private String name;</li></ul></li><li>方式二<ul><li>实体类配置文件<ul><li>添加 @Component 注解；</li><li>使用 @PropertySource 注解指定配置文件位置；</li><li>使用 @ConfigurationProperties 注解，设置相关属性；（制定模块，可忽略）</li><li>必须 通过注入IOC对象Resource 进来 ，才能在类中使用获取的配置文件值。<br>@Autowired private ServerSettings serverSettings;</li></ul></li></ul></li></ul></li><li><p>测试pay.properties</p></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#微信支付</span><span class="token attr-name">wxpay.appid</span><span class="token punctuation">=</span><span class="token attr-value">a56219556165</span><span class="token comment" spellcheck="true">#支付秘钥</span><span class="token attr-name">wxpay.sercret</span><span class="token punctuation">=</span><span class="token attr-value">asdasdskcssa</span><span class="token comment" spellcheck="true">#微信支付商户号</span><span class="token attr-name">wxpay.mechid</span><span class="token punctuation">=</span><span class="token attr-value">5635656</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试testController.java</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"classpath:pay.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wxpay.appid}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String payAppid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wxpay.sercret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String paySecret<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注入wxConfig  方式二     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WXConfig wxConfig<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 方式一     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test_config"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">,</span>payAppid<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">,</span>paySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *    方式二     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test_config_class"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">testConfigClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">,</span>wxConfig<span class="token punctuation">.</span><span class="token function">getPayAppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">,</span> wxConfig<span class="token punctuation">.</span><span class="token function">getPaySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mechid"</span><span class="token punctuation">,</span>wxConfig<span class="token punctuation">.</span><span class="token function">getPayMechId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试WXConfig.java</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:pay.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WXConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wxpay.appid}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String payAppid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wxpay.sercret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String paySecret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${wxpay.mechid}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String payMechId<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPayAppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> payAppid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPayAppid</span><span class="token punctuation">(</span>String payAppid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>payAppid <span class="token operator">=</span> payAppid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPaySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> paySecret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPaySecret</span><span class="token punctuation">(</span>String paySecret<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>paySecret <span class="token operator">=</span> paySecret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPayMechId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> payMechId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPayMechId</span><span class="token punctuation">(</span>String payMechId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>payMechId <span class="token operator">=</span> payMechId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限框架Shiro</title>
      <link href="2020/10/29/quan-xian-kuang-jia-shiro/"/>
      <url>2020/10/29/quan-xian-kuang-jia-shiro/</url>
      
        <content type="html"><![CDATA[<p>权限框架Shiro</p><a id="more"></a><h3 id="1-权限框架ACL-RBAC"><a href="#1-权限框架ACL-RBAC" class="headerlink" title="1.权限框架ACL/RBAC"></a>1.权限框架ACL/RBAC</h3><ul><li><p>ACL</p><ul><li>Access Control List 访问控制列表</li><li>用户直接和权限挂钩</li><li>实例：文件系统权限设计</li></ul></li><li><p>RBAC: </p><ul><li><p>Role Based Access Control</p></li><li><p>基于角色的访问控制系统。权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限</p></li><li><p>实例：Apache Shiro、spring Security</p><ul><li><p>spring Security</p><pre><code>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</code></pre><ul><li>Spring Security 的前身是 Acegi Security ，是 Spring 项目组中用来提供安全认证服务的框架</li></ul></li><li><p>Apache Shiro</p><pre><code>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</code></pre><ul><li>Shiro是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能</li></ul></li><li><p>优缺点</p><ul><li>Shiro 功能强大、 简单、灵活， 不跟任何的框架或者容器绑定，可以独立运行</li><li>Spring Security 对Spring 体系支持比较好，脱离Spring体系则很难开发</li><li>SpringSecutiry 支持Oauth鉴权，Shiro需要自己实现</li></ul></li></ul></li></ul></li></ul><h3 id="2-Apache-Shiro基础概念知识"><a href="#2-Apache-Shiro基础概念知识" class="headerlink" title="2.Apache Shiro基础概念知识"></a>2.Apache Shiro基础概念知识</h3><ul><li><p>四大核心模块</p><ul><li>身份认证，授权，会话管理和加密</li><li>身份认证<ul><li>Authentication，身份证认证，一般就是登录</li></ul></li><li>授权<ul><li>Authorization，给用户分配角色或者访问某些资源的权限</li></ul></li><li>会话管理<ul><li>Session Management, 用户的会话管理员，多数情况下是web session</li></ul></li><li>加密<ul><li>Cryptography, 数据加解密，比如密码加解密等</li></ul></li><li><img src="/2020/10/29/quan-xian-kuang-jia-shiro/ShiroFeatures.png" title="Shiro架构图"></li></ul></li><li><p>常见概念</p><ul><li>Subject<ul><li>我们把用户或者程序称为主体（如用户，第三方服务，cron作业），主体去访问系统或者资源</li></ul></li><li>SecurityManager<ul><li>安全管理器，Subject的认证和授权都要在安全管理器下进行</li></ul></li><li>Authenticator<ul><li>认证器，主要负责Subject的认证</li></ul></li><li>Realm<ul><li>数据域，Shiro和安全数据的连接器，好比jdbc连接数据库； 通过realm获取认证授权相关信息</li></ul></li><li>Authorizer<ul><li>授权器，主要负责Subject的授权, 控制subject拥有的角色或者权限</li></ul></li><li>Cryptography<ul><li>加解密，Shiro的包含易于使用和理解的数据加解密方法，简化了很多复杂的api</li></ul></li><li>Cache Manager<ul><li>缓存管理器，比如认证或授权信息，通过缓存进行管理，提高性能</li></ul></li></ul></li></ul><h3 id="3-SpringBoot2-x整合Shiro"><a href="#3-SpringBoot2-x整合Shiro" class="headerlink" title="3.SpringBoot2.x整合Shiro"></a>3.SpringBoot2.x整合Shiro</h3><ul><li><p>阿里巴巴数据源相关jar包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>整合Shiro相关jar包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-Shiro认证和授权"><a href="#4-Shiro认证和授权" class="headerlink" title="4.Shiro认证和授权"></a>4.Shiro认证和授权</h3><ul><li><p>认证    </p><ul><li><img src="/2020/10/29/quan-xian-kuang-jia-shiro/Shiro认证.png" title="Shiro认证"></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> SimpleAccountRealm accountRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAccountRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DefaultSecurityManager defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化数据源</span>        accountRealm<span class="token punctuation">.</span><span class="token function">addAccount</span><span class="token punctuation">(</span><span class="token string">"ldclass"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountRealm<span class="token punctuation">.</span><span class="token function">addAccount</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建环境</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>accountRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将securityManager 设置到当前运行环境中</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前操作主体，application user</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>授权</p><ul><li><img src="/2020/10/29/quan-xian-kuang-jia-shiro/Shiro授权.png" title="Shiro授权"></li><li><p>常用API</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//是否有对应的角色</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取subject名</span>subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查是否有对应的角色，无返回值，直接在SecurityManager里面进行判断</span>subject<span class="token punctuation">.</span><span class="token function">checkRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查是否有对应的角色</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//退出登录</span>subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">private</span> SimpleAccountRealm accountRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAccountRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DefaultSecurityManager defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化数据源</span>        accountRealm<span class="token punctuation">.</span><span class="token function">addAccount</span><span class="token punctuation">(</span><span class="token string">"ldclass"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountRealm<span class="token punctuation">.</span><span class="token function">addAccount</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建环境</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>accountRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将securityManager 设置到当前运行环境中</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前操作主体，application user</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"ldclass"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否有对应角色</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有对应角色:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取subject名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPrincipal:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//检查是否有对应的角色，无返回值</span>        subject<span class="token punctuation">.</span><span class="token function">checkRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//退出登录</span>        subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//推出后认证结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logout后认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-Shiro-Realm"><a href="#5-Shiro-Realm" class="headerlink" title="5.Shiro Realm"></a>5.Shiro Realm</h3><ul><li><p>realm作用：Shiro 从 Realm 获取安全数据</p></li><li><p>两个概念</p><ul><li>principal : 主体的标识，可以有多个，但是需要具有唯一性，常见的有用户名，手机号，邮箱等</li><li>credential：凭证, 一般就是密码</li><li>所以一般我们说 principal + credential 就账号 + 密码</li></ul></li><li><p>内置IniRealm –&gt;shiro.ini</p><pre><code># 格式 name=password,role1,role2,..roleN[users]jack = 456, userldclass = 123, root,admin# 格式 role=permission1,permission2...permissionN 也可以用通配符# 下面配置user的权限为所有video:find,video:buy，如果需要配置video全部操作crud 则 user = video:*[roles]user = video:find,video:buyadmin = *</code></pre><pre class="line-numbers language-java"><code class="language-java">     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建SecurityManager工厂，通过配置文件ini创建</span>        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将securityManager 设置到当前运行环境中</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前操作主体，application user</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"ldclass"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有video:find权限："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"video:find"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内置 JdbcRealm </p><ul><li>方式一 –&gt; jdbcrealm.ini</li></ul><pre><code>#声明Realm，指定realm类型jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm#配置数据源#dataSource=com.mchange.v2.c3p0.ComboPooledDataSourcedataSource=com.alibaba.druid.pool.DruidDataSource# mysql-connector-java 5 用的驱动url是com.mysql.jdbc.Driver，mysql-connector-java6以后用的是com.mysql.cj.jdbc.DriverdataSource.driverClassName=com.mysql.cj.jdbc.Driver#避免安全警告dataSource.url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/ldclass_shiro?characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=falsedataSource.username=rootdataSource.password=Root@123#指定数据源jdbcRealm.dataSource=$dataSource#开启查找权限, 默认是falsejdbcRealm.permissionsLookupEnabled=true#指定SecurityManager的Realms实现，设置realms，可以有多个，用逗号隔开securityManager.realms=$jdbcRealm</code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建SecurityManager工厂，通过配置文件ini创建</span>        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcrealm.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将securityManager 设置到当前运行环境中</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前操作主体，application user</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有video:find权限："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"video:find"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式二</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DruidDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://xxx.xxx.xxx.xxx:3306/ldclass_shiro?characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"Root@123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JdbcRealm jdbcRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcRealm<span class="token punctuation">.</span><span class="token function">setPermissionsLookupEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcRealm<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>jdbcRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将securityManager 设置到当前运行环境中</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前操作主体，application user</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有video:find权限："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"video:find"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义Realm</p><ul><li><p>步骤：</p><ul><li>创建一个类 ，继承AuthorizingRealm</li><li>重写授权方法 doGetAuthorizationInfo</li><li>重写认证方法 doGetAuthenticationInfo</li></ul></li><li><p>方法：</p><ul><li>当用户登陆的时候会调用 doGetAuthenticationInfo</li><li>进行权限校验的时候会调用: doGetAuthorizationInfo</li></ul></li><li><p>对象</p><ul><li><p>UsernamePasswordToken ： 对应就是 shiro的token中有Principal和Credential</p><pre><code>UsernamePasswordToken-》HostAuthenticationToken-》AuthenticationToken</code></pre></li><li><p>SimpleAuthorizationInfo：代表用户角色权限信息</p></li><li><p>SimpleAuthenticationInfo ：代表该用户的认证信息</p></li></ul></li><li><p>实例</p><ul><li>自定义Realm 并重写doGetAuthorizationInfo/doGetAuthenticationInfo</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 授权     * @param principals     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"授权 doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>principals<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从数据库获取权限</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token function">getPermissionsByNameFromDB</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从数据库获取角色</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> roles <span class="token operator">=</span> <span class="token function">getRolesByNameFromDB</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 登录认证     * @param token     * @return     * @throws AuthenticationException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证 doGetAuthenticationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从token中获取身份信息，token代表用户输入的信息</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从数据库获取密码</span>        String pwd <span class="token operator">=</span> <span class="token function">getPwdByUserNameFromDB</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pwd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SimpleAuthenticationInfo simpleAuthenticationInfo <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthenticationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用自定义的Realm</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> CustomRealm customRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DefaultSecurityManager defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建环境</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>customRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前操作的主题</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入账号密码</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否认证成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证结果:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取主体标识属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getPrincipal:"</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否有对应的角色</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有对应的角色："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否有对应的权限</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有对应的权限："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"video:add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="6-Shiro内置过滤器"><a href="#6-Shiro内置过滤器" class="headerlink" title="6.Shiro内置过滤器"></a>6.Shiro内置过滤器</h3><ul><li>核心过滤器类：DefaultFilter, 配置哪个路径对应哪个拦截器进行处理</li><li>authc：org.apache.shiro.web.filter.authc.FormAuthenticationFilter<ul><li>需要认证登录才能访问</li></ul></li><li>user：org.apache.shiro.web.filter.authc.UserFilter<ul><li>用户拦截器，表示必须存在用户。</li></ul></li><li>anon：org.apache.shiro.web.filter.authc.AnonymousFilter<ul><li>匿名拦截器，不需要登录即可访问的资源，匿名用户或游客，一般用于过滤静态资源。</li></ul></li><li>roles：org.apache.shiro.web.filter.authz.RolesAuthorizationFilter<ul><li>角色授权拦截器，验证用户是或否拥有角色。</li><li>参数可写多个，表示某些角色才能通过，多个参数时写 roles[“admin,user”]，当有多个参数时必须每个参数都通过才算通过</li></ul></li><li>perms：org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter<ul><li>权限授权拦截器，验证用户是否拥有权限</li><li>参数可写多个，表示需要某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算可以</li></ul></li><li>authcBasic：org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter<ul><li>httpBasic 身份验证拦截器。</li></ul></li><li>logout：org.apache.shiro.web.filter.authc.LogoutFilter<ul><li>退出拦截器，执行后会直接跳转到shiroFilterFactoryBean.setLoginUrl(); 设置的 url</li></ul></li><li>port：org.apache.shiro.web.filter.authz.PortFilter<ul><li>端口拦截器, 可通过的端口。</li></ul></li><li>ssl：org.apache.shiro.web.filter.authz.SslFilter<ul><li>ssl拦截器，只有请求协议是https才能通过。</li></ul></li></ul><h3 id="7-Shiro-Filter配置"><a href="#7-Shiro-Filter配置" class="headerlink" title="7.Shiro Filter配置"></a>7.Shiro Filter配置</h3><ul><li><p>路径通配符支持 ?、<em>、*</em></p><ul><li>通配符匹配不包括目录分隔符“/”</li></ul></li><li><ul><li>可以匹配所有，不加 * 可以进行前缀匹配，但多个冒号就需要多个 * 来匹配</li></ul></li><li><p>URL权限采取第一次匹配优先的方式</p><pre><code>? : 匹配一个字符，如 /user? , 匹配 /userX，但不匹配/user/;* : 匹配零个或多个字符串，如 /add* ,匹配 /addXXXX，但不匹配 /add/xxx** : 匹配路径中的零个或多个路径，如 /user/** 将匹配 /user/xxx 或 /user/xxx/yyy</code></pre></li><li><p>性能问题：通配符比字符串匹配会复杂点，所以性能也会稍弱，推荐是使用字符串匹配方式</p></li></ul><h3 id="8-Shiro数据加解密"><a href="#8-Shiro数据加解密" class="headerlink" title="8.Shiro数据加解密"></a>8.Shiro数据加解密</h3><ul><li><p>散列算法</p><ul><li>一般叫hash，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数，适合存储密码，比如MD5</li></ul></li><li><p>salt(盐)</p></li><li><p>如果直接通过散列函数得到加密数据，容易被对应解密网站暴力破解，一般会在应用程序里面加特殊的自动进行处理，比如用户id，例子：加密数据 = MD5(明文密码+用户id), 破解难度会更大，也可以使用多重散列，比如多次md5</p></li><li><p>Shiro的CredentialsMatcher</p><ul><li><p>验证密码是否正确</p></li><li><p>源码</p><pre><code>AuthenticatingRealm -&gt; assertCredentialsMatch()</code></pre><pre class="line-numbers language-java"><code class="language-java">一般会自定义验证规则<span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> HashedCredentialsMatcher <span class="token function">hashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashedCredentialsMatcher hashedCredentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//散列算法，使用MD5算法;</span>    hashedCredentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"md5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//散列的次数，比如散列两次，相当于 md5(md5("xxx"));</span>    hashedCredentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hashedCredentialsMatcher<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="9-Shiro权限控制注解和编程方式"><a href="#9-Shiro权限控制注解和编程方式" class="headerlink" title="9.Shiro权限控制注解和编程方式"></a>9.Shiro权限控制注解和编程方式</h3><ul><li><p>配置文件方式</p><ul><li>使用ShiroConfig</li></ul></li><li><p>注解方式</p><pre><code>//常用@RequiresRoles(value={"admin", "editor"}, logical= Logical.AND)需要角色 admin 和 editor两个角色 AND表示两个同时成立 OR是或的意思@RequiresPermissions (value={"user:add", "user:del"}, logical= Logical.OR)需要权限 user:add 或 user:del权限其中一个，OR是或的意思。</code></pre></li></ul><p>  @RequiresAuthentication<br>  已经授过权，调用Subject.isAuthenticated()返回true<br>  @RequiresUser<br>  身份验证或者通过记 住我登录的</p><pre><code>- 编程方式  ```java  Subject subject = SecurityUtils.getSubject();  //基于角色判断  if(subject.hasRole(“admin”)) {      //有角色，有权限  } else {      //无角色，无权限  }  //或者权限判断  if(subject.isPermitted("/user/add")){      //有权限  }else{      //无权限  }</code></pre><ul><li><p>常见API</p><pre><code>subject.hasRole("xxx");subject.isPermitted("xxx");subject.isPermittedAll("xxxxx","yyyy");subject.checkRole("xxx"); // 无返回值，可以认为内部使用断言的方式</code></pre></li></ul><h3 id="10-Shiro缓存"><a href="#10-Shiro缓存" class="headerlink" title="10.Shiro缓存"></a>10.Shiro缓存</h3><ul><li>shiro中提供了对认证信息和授权信息的缓存<ul><li>默认是关闭认证信息缓存的，对于授权信息的缓存shiro默认开启的</li></ul></li><li>AuthenticatingRealm 及 AuthorizingRealm 分别提供了对AuthenticationInfo 和 AuthorizationInfo 信息的缓存</li></ul><h3 id="11-Shiro-Session"><a href="#11-Shiro-Session" class="headerlink" title="11.Shiro Session"></a>11.Shiro Session</h3><ul><li><p>用户和程序直接的链接，程序可以根据session识别到哪个用户，和javaweb中的session类似</p></li><li><p>会话管理器 SessionManager</p><ul><li><p>会话管理器管理所有subject的所有操作，是shiro的核心组件</p></li><li><p>核心方法：</p><pre><code>//开启一个sessionSession start(SessionContext context);//指定Key获取sessionSession getSession(SessionKey key)</code></pre></li><li><p>shiro中的会话管理器有多个实现</p></li></ul></li><li><p>会话存储/持久化 SessionDao</p><ul><li><p>SessionDAO AbstractSessionDAO CachingSessionDAO EnterpriseCacheSessionDAOMemorySessionDAO</p></li><li><p>核心方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建</span>Serializable <span class="token function">create</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>Session <span class="token function">readSession</span><span class="token punctuation">(</span>Serializable sessionId<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownSessionException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除，会话过期时会调用</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取活跃的session</span>Collection<span class="token operator">&lt;</span>Session<span class="token operator">></span> <span class="token function">getActiveSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>会话存储有多个实现</p></li></ul></li></ul><h3 id="12-Shiro实例"><a href="#12-Shiro实例" class="headerlink" title="12.Shiro实例"></a>12.Shiro实例</h3><ul><li><p>基于RBAC权限控制的Mysql数据库设计</p></li><li><p>用户-角色-权限 及关联表</p></li><li><p>ShiroFilterFactoryBean配置</p><ul><li><p>拦截器路径配置</p><ul><li><p>坑一：部分路径无法拦截，时有时无，是因为filterChainDefinitionMap 使用的是无序的HashMap，应该使用LinkedHashMap</p><pre><code>Map&lt;String,String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;();</code></pre></li><li><p>坑二：过滤链是顺序执行的，从上而下，一般将/**放到最下边</p><pre><code>filterChainDefinitionMap.put("/**","authc");</code></pre></li><li><p>如果不是前后端分离的项目，则不必设置SessionManager</p><pre><code>securityManager.setSessionManager(sessionManager());</code></pre></li><li><p>设置realm，推荐放在SecurityManager方法最后，不然会出现不生效的情况</p><pre><code>securityManager.setRealm(customRealm());</code></pre></li></ul></li></ul></li></ul><h3 id="13-Redis整合CacheManager"><a href="#13-Redis整合CacheManager" class="headerlink" title="13.Redis整合CacheManager"></a>13.Redis整合CacheManager</h3><ul><li><p>加依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- shiro+redis缓存插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.crazycake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在securityManager中使用自定义的cacheManager</span>securityManager<span class="token punctuation">.</span><span class="token function">setCacheManager</span><span class="token punctuation">(</span><span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 配置redisManager*/</span><span class="token keyword">public</span> RedisManager <span class="token function">getRedisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RedisManager redisManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisManager<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisManager<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisManager<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 配置具体cache实现类* @return*/</span><span class="token keyword">public</span> RedisCacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RedisCacheManager redisCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisCacheManager<span class="token punctuation">.</span><span class="token function">setRedisManager</span><span class="token punctuation">(</span><span class="token function">getRedisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置过期时间，单位是秒，例如20s,</span>    redisCacheManager<span class="token punctuation">.</span><span class="token function">setExpire</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisCacheManager<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>出现报错，需要修改缓存的唯一ID</p><pre><code>Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [org.crazycake.shiro.exception.PrincipalInstanceException: class java.lang.String must has getter for field: authCacheKey or idWe need a field to identify this Cache Object in Redis. So you need to defined an id field which you can get unique id to identify this principal. For example, if you use UserInfo as Principal class, the id field maybe userId, userName, email, etc. For example, getUserId(), getUserName(), getEmail(), etc.Default value is authCacheKey or id, that means your principal object has a method called "getAuthCacheKey()" or "getId()"] with root cause</code></pre></li></ul><h3 id="14-Redis整合SessionManager"><a href="#14-Redis整合SessionManager" class="headerlink" title="14.Redis整合SessionManager"></a>14.Redis整合SessionManager</h3><ul><li><p>session持久化</p><ul><li>重启应用，用户无感知，可以继续以原先的状态继续访问</li></ul></li><li><p>配置</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 自定义session持久化     * @return redisSessionDAO     */</span>    <span class="token keyword">public</span> RedisSessionDAO <span class="token function">redisSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisSessionDAO redisSessionDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisSessionDAO<span class="token punctuation">.</span><span class="token function">setRedisManager</span><span class="token punctuation">(</span><span class="token function">getRedisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisSessionDAO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在customSessionManager中配置session持久化</p><pre><code>customSessionManager.setSessionDAO(redisSessionDAO());</code></pre></li></ul></li><li><p>注意</p><ul><li>DO对象需要实现序列化接口 Serializable</li></ul></li><li><p>常用bean</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 管理shiro一些bean的生命周期 即bean初始化 与销毁     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LifecycleBeanPostProcessor <span class="token function">lifecycleBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 加入注解的使用，不加入这个AOP注解不生效(shiro的注解 例如 @RequiresGuest)     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="token function">authorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">AuthorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorizationAttributeSourceAdvisor<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorizationAttributeSourceAdvisor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 用来扫描上下文寻找所有的Advistor(通知器), 将符合条件的Advisor应用到切入点的Bean中，需要在LifecycleBeanPostProcessor创建后才可以创建     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">"lifecycleBeanPostProcessor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="token function">getDefaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator<span class="token operator">=</span><span class="token keyword">new</span>                <span class="token class-name">DefaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultAdvisorAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setUsePrefix</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultAdvisorAutoProxyCreator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="15-应用的鉴权方式"><a href="#15-应用的鉴权方式" class="headerlink" title="15.应用的鉴权方式"></a>15.应用的鉴权方式</h3><ul><li>分布式session</li><li>UUID</li><li>JWT</li><li>Oauth2.0</li></ul><h3 id="16-自定义SessionId"><a href="#16-自定义SessionId" class="headerlink" title="16.自定义SessionId"></a>16.自定义SessionId</h3><ul><li><p>Shiro 默认的sessionid生成 类名 SessionIdGenerator</p></li><li><p>创建一个类，实现 SessionIdGenerator 接口的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSessionIdGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">SessionIdGenerator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Serializable <span class="token function">generateId</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据业务自定义</span>        <span class="token keyword">return</span> <span class="token string">"class"</span><span class="token operator">+</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在redisSessionDao中配置sessionId生成器</p><pre><code>//设置sessionid生成器redisSessionDAO.setSessionIdGenerator(new CustomSessionIdGenerator());</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限框架 </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用sql</title>
      <link href="2020/10/27/chang-yong-sql/"/>
      <url>2020/10/27/chang-yong-sql/</url>
      
        <content type="html"><![CDATA[<p>​    oracle、mysql常用sql</p><a id="more"></a><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><ul><li><p>计算上个月份</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>add_months<span class="token punctuation">(</span>trunc<span class="token punctuation">(</span>sysdate<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否包含数字</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tableName <span class="token keyword">where</span> regexp_like<span class="token punctuation">(</span>columnName<span class="token punctuation">,</span><span class="token string">'^[0-9]+[0-9]$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否包含中文字符</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tableName <span class="token keyword">WHERE</span> ASCIISTR<span class="token punctuation">(</span>columnName<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">'%\%'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断某列值是否为0，若为0返回1，否则返回字段值</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> decode<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>以某个或某些字段分组，并且把其余一个或多个字段组合成一个字段，以逗号隔开</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 分组字段<span class="token punctuation">,</span>wmsys<span class="token punctuation">.</span>wm_concat<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token operator">||</span>字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li><p>mysql数据库查看被锁状态以及解锁</p><ul><li><p>查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">OPEN</span> <span class="token keyword">TABLES</span> <span class="token keyword">where</span> In_use <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> PROCESSLIST查看数据库中表的状态，是否被锁；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">kill</span> id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目上传github</title>
      <link href="2020/10/22/ben-di-xiang-mu-shang-chuan-github/"/>
      <url>2020/10/22/ben-di-xiang-mu-shang-chuan-github/</url>
      
        <content type="html"><![CDATA[<p>本地项目上传github    </p><a id="more"></a><h3 id="一、上传项目"><a href="#一、上传项目" class="headerlink" title="一、上传项目"></a>一、上传项目</h3><ol><li>打开Github网站，登录：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li><li>点击头像—Your profile,进入仓库</li><li>新建仓库：New—输入Repository name —Create repository</li><li>仓库创建成功</li><li>通过https上传<ol><li>在本地项目文件夹中，右键点击“Git Bash Here”，打开Git命令行</li><li>按照github新建仓库上的文档提示(…or create a new repository on the command line)，提交项目：</li></ol></li></ol><pre><code>git initgit add *git commit -m "first commit"git branch -M maingit remote add origin https://github.com/15806679020/test.gitgit push -u origin main</code></pre><h3 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h3><ul><li>解除本地与远程库的关系<ul><li>find . -name “.git” | xargs rm -Rf</li><li>手动删除.git文件夹</li></ul></li></ul><h3 id="三、报错信息"><a href="#三、报错信息" class="headerlink" title="三、报错信息"></a>三、报错信息</h3><ul><li>fatal: remote origin already exists.<ul><li>远程来源已经存在<ul><li>首先，输入git remote -v  查看本地库已经关联的<code>origin</code>的远程库</li><li>解决办法如下：<ul><li>git remote rm origin(删除关联的origin的远程库)</li><li>再输入 git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:(github名)/(git项目名).git 就不会报错了！</li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐破解</title>
      <link href="2020/10/21/wang-yi-yun-yin-le-po-jie/"/>
      <url>2020/10/21/wang-yi-yun-yin-le-po-jie/</url>
      
        <content type="html"><![CDATA[<p>网易云vip音乐畅享</p><a id="more"></a><h3 id="一、docker快速搭建"><a href="#一、docker快速搭建" class="headerlink" title="一、docker快速搭建"></a>一、docker快速搭建</h3><p>搜索镜像</p><pre><code>docker search unblockneteasemusic</code></pre><p>下载镜像</p><pre><code>docker pull nondanee/unblockneteasemusic</code></pre><p>启动镜像</p><pre><code>docker run -itd -p 65534:8080 nondanee/unblockneteasemusic:latest</code></pre><ul><li>65534: 宿主机端口</li><li>8080:容器端口</li></ul><p>配置安全组</p><ul><li>云服务器需要配置安全组</li></ul><p>网易云自定义代理</p><ul><li><p>【设置】–&gt;【工具】–&gt;【自定义代理】</p></li><li><p>输入服务器IP，端口（65534）</p></li></ul><p>搞定！！！</p><ul><li>测试–&gt;【该代理可用】</li><li>确定–&gt;重启</li></ul><h3 id="二、本地搭建"><a href="#二、本地搭建" class="headerlink" title="二、本地搭建"></a>二、本地搭建</h3><ol><li>下载UnblockNeteaseMusic<ul><li>github地址：<a href="https://github.com/15806679020/UnblockNeteaseMusic-master.git" target="_blank" rel="noopener">https://github.com/15806679020/UnblockNeteaseMusic-master.git</a></li><li>下载完zip解压，自定义文件夹存放，例如：F:\UnblockNeteaseMusic-master</li></ul></li><li>安装nodejs<ul><li>~</li></ul></li><li>设置nodejs环境变量<ul><li>~</li></ul></li><li>获取网易云音乐IP<ul><li>打开cmd,输入ping music.163.com</li><li>记录ip地址</li></ul></li><li>使用PowerShell启动第一步下载的UnblockNeteaseMusic<ul><li>按Win+x键，选择Windows PowerShell(管理员)，输入：<ul><li>clear;</li><li>cd 步骤1的文件路径</li><li>node app.js -p 65535 -f 步骤4的ip</li></ul></li><li>启动</li><li>成功以后Windows PowerShell(管理员)的视图界面先不能关闭</li></ul></li><li>网易云音乐设置代理<ul><li>打开网易云客户端，设置—工具—自定义代理，服务器填入127.0.0.1，端口设为刚刚设置的端口，即65535</li></ul></li><li>将启动UnblockNeteaseMusic设置为开机自启<ul><li>创建.bat文件，文件内容如下：<ul><li>@echo off</li><li>cd 步骤1的文件路径</li><li>node app.js -p 65535 -f 步骤4的ip</li></ul></li><li>设置开机运行<ul><li>右击“我的电脑”—“管理”，找到“任务计划程序”—“创建基本任务”<ul><li>任务名称随意</li><li>开始时间为“计算机启动时”或“用户登录时”</li><li>选择“启动程序”</li><li>“程序或脚本”处，点击浏览选择 .bat 文件，</li><li>“起始于(可选)”填入.bat文件的路径。</li></ul></li><li>建立完成后，找到该任务，打开属性</li><li>选择【不管用户是否登录都要运行】<ul><li>勾选【不存储密码(P)。该任务将只有访问本地计算机资源的权限】</li></ul></li></ul></li></ul></li><li>确认，重启电脑，打开网易云音乐，畅听所有音乐。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> 网易云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="2020/10/18/javase/"/>
      <url>2020/10/18/javase/</url>
      
        <content type="html"><![CDATA[<p>Java基础 JavaSE</p><a id="more"></a><h3 id="1-Java版本介绍"><a href="#1-Java版本介绍" class="headerlink" title="1.Java版本介绍"></a>1.Java版本介绍</h3><ul><li>JavaSE，即Java标准版（以前简写J2SE）Java技术核心和基础，是J2ME和J2EE编程的基础</li><li>JavaEE，即Java企业版（以前简写J2EE）java技术中应用应用最广泛的部分，</li><li>JavaME，即Java微型版（以前简写J2ME）,主要用于移动设备</li></ul><h3 id="2-JVM、JRE、JDK关系"><a href="#2-JVM、JRE、JDK关系" class="headerlink" title="2.JVM、JRE、JDK关系"></a>2.JVM、JRE、JDK关系</h3><ul><li><p>JVM</p><ul><li>Java Virtual Machine Java 虚拟机，简单看成一个操作系统，java程序会首先被编译为.class的字节码，根据字节码指令进⾏行识别并调用上层操作系</li></ul></li><li><p>JRE</p><ul><li>Java Runtime Environment java 运行时环境, 是整个 Java 程序运行的核心</li></ul></li><li><p>JDK</p><ul><li>Java Development Kit 是我们的开发工具包，它集成了 JRE, 是整个 Java 开发的核心</li></ul></li><li><p>总结</p><ul><li>JRE = 基本类库 + JVM，没有JRE，java程序无法运⾏</li><li>JDK = JRE+JVM+开发工具包</li><li>Java核心优势:⼀次编译，到处运行，能够跨平台运行的核心在于 JVM</li></ul></li></ul><h3 id="3-Java语言特点"><a href="#3-Java语言特点" class="headerlink" title="3.Java语言特点"></a>3.Java语言特点</h3><ul><li><p>类：就是模板，用来定义一类对象的方法和属性（类名首字母大写）</p><pre><code>class Student{}class Person{}</code></pre></li><li><p>对象：类的实例化</p><pre><code>Student student = new Student();Cat cat = new Cat();</code></pre></li><li><p>方法：类的行为属性</p><pre><code>class Student{    //定义一个吃饭的方法    public void eat(){    }    //定义一个睡觉的方法    public void sleep(){    }}</code></pre></li><li><p>变量/参数/属性 </p><ul><li>面向过程的时候，一般叫做变量</li><li>面向对象编程，一般叫做属性</li></ul><pre><code>class Student{    //定义一个年龄属性    private int age;    //定义一个名称属性    private String name;    public void set(int age){        this.age = age;    }    //定义一个吃饭的方法    public void eat(){    }    //定义一个睡觉的方法    public void sleep(){    }}</code></pre></li></ul><h3 id="4-Java环境变量配置"><a href="#4-Java环境变量配置" class="headerlink" title="4.Java环境变量配置"></a>4.Java环境变量配置</h3><ul><li><p>win10怎么配置环境变量</p><ul><li>右键 此电脑 -&gt;（属性） -&gt;（高级系统设置） -&gt;（环境变量）</li></ul></li><li><p>新建三个变量</p><ul><li>JAVA_HOME：变量值是JDK安装路径</li><li>PATH：%JAVA_HOME%\bin</li><li>CLASSPATH：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li></ul></li></ul><h3 id="5-常见的java自带的包"><a href="#5-常见的java自带的包" class="headerlink" title="5.常见的java自带的包"></a>5.常见的java自带的包</h3><ul><li>java.lang 基础类包，默认自动导入的包，里面有Obect, String, StringBuffer, System等包，应⽤用最广</li><li>java.util 常见的工具类包</li><li>java.io 提供系统的输入输出</li><li>java.net 提供网络操作相关的类</li></ul><h3 id="6-Java常见关键字"><a href="#6-Java常见关键字" class="headerlink" title="6.Java常见关键字"></a>6.Java常见关键字</h3><ul><li>boolean、byte、char、double、enum、float、int、long、short、void</li><li>private、protected、public、default</li><li>abstract、extends、class、interface、return、static、super</li><li>assert、break、case、try、catch、const、continue、do、else、final、finally、</li><li>for、goto、if、implements、import</li><li>instanceof、native、new、package</li><li>switch、synchronized 、this、throw、throws</li><li>transient、volatile、while</li></ul><h3 id="7-Java修饰符"><a href="#7-Java修饰符" class="headerlink" title="7.Java修饰符"></a>7.Java修饰符</h3><ul><li><p>外部类修饰符： public或者为默认</p></li><li><p>方法、属性修饰符：private、default、protected、public</p><ul><li>public - 公开对外部可见</li><li>protected - 对包和所有子类可见</li><li>private - 仅对类内部可见</li></ul></li><li><p>方法级别</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">不同包中的子类</th><th align="center">不同包中的非子类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">protected</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">defaut</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center">private</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table></li><li><p>属性或者成员变量，都用private修饰，不用其他的，这个是java开发的约束</p></li></ul><h3 id="8-Java数据类型"><a href="#8-Java数据类型" class="headerlink" title="8.Java数据类型"></a>8.Java数据类型</h3><ul><li>八种基本数据类型<ul><li>byte<ul><li>8位</li><li>最大127，最小-128</li><li>节省空间，占用int类型的四分之一</li><li>默认 0</li></ul></li><li>short<ul><li>16位</li><li>最小-32768，最大32767</li><li>int类型的二分之一</li><li>默认是0</li></ul></li><li>int<ul><li>32位</li><li>最小 -2147483648，最大 2147483647</li><li>整数默认是int类型</li><li>默认是0</li></ul></li><li>long<ul><li>64位</li><li>最小 -9223372036854774808，最大 9223372036854774807</li><li>默认是 0L,</li></ul></li><li>float 浮点<ul><li>单精度32位</li><li>默认0.0f</li></ul></li><li>double<ul><li>双精度 64位</li><li>浮点数默认位double类型</li><li>默认是0.0</li></ul></li><li>boolean<ul><li>1位</li><li>true或者false</li><li>默认是false</li></ul></li><li>char<ul><li>16位的 unicode字符，即两个字节表示一个字符</li><li>最小是 \u0000 即0，做大 \ufff 即65535</li><li>例子 char demo = ‘A’</li></ul></li><li>类型转换 double &gt; float &gt; long &gt; int &gt; short &gt; byte<br>小转换到大，可以直接转换，而从大到小，需要强制转，会有精度丢失</li></ul></li><li>引用数据类型<ul><li>String ：字符串对象，是引用数据类型</li></ul></li></ul><h3 id="9-Java内存空间堆栈"><a href="#9-Java内存空间堆栈" class="headerlink" title="9.Java内存空间堆栈"></a>9.Java内存空间堆栈</h3><ul><li><p>java在内存中堆（Heap）、栈（stack）两款存储空间</p></li><li><p>数据类型在内存中使⽤用介绍</p><ul><li>基本的变量量类型只有一块存储空间(分配在stack中),<ul><li>传递的时候直接是值传递，</li><li>对数据进行操作，不影响原先的值</li></ul></li><li>引用类型有两块存储空间(一块在stack中,一块在heap中)<ul><li>一个对象在内存中会请求一块空间来保存数据，访问对象的时候不会直接是访问对象在<br>内存中的数据，而是通过引用去访问</li></ul></li><li>不同的引⽤用可以指向同一个对象，一个对象可以有多个引用</li></ul></li></ul><h3 id="10-Java变量类型"><a href="#10-Java变量类型" class="headerlink" title="10.Java变量类型"></a>10.Java变量类型</h3><ul><li>类变量(静态变量)：<ul><li>使用static声明的变量，可以直接使用类名.变量名访问</li><li>一个类不管创建了多少个对象，类只拥有类变量的一份拷贝，数值默认值是0，布尔型默认值是false，引用类型默认值是null</li><li>生命周期<ul><li>在第一次被访问时创建，在程序结束时销毁</li></ul></li><li>声明为public类型：public static final</li><li>存储在方法区，和堆栈不一样的一个空间</li></ul></li><li>实例变量（属性）<ul><li>需要使用对象.变量名才可以访问</li><li>对象被实例化之后，实例变量的值就跟着确定，可以是赋值，也可以是默认值</li><li>生命周期<ul><li>在对象创建的时候创建，在对象被销毁的时候销毁</li></ul></li><li>访问修饰符可以修饰实例变量，一般是私有的，private修饰，然后通过方法来进行查看或者修改</li></ul></li><li>局部变量<ul><li>方法中的变量</li><li>声明在方法、构造方法、语句块、形式参数等</li><li>生命周期<ul><li>当它们执行完成后，变量将会被销毁</li></ul></li><li>访问修饰符不能用于局部变量</li><li>局部变量没有初始值，必须初始化后才可以被使用</li></ul></li></ul><h3 id="11-Java基础运算符"><a href="#11-Java基础运算符" class="headerlink" title="11.Java基础运算符"></a>11.Java基础运算符</h3><ul><li><p>算数运算符</p><pre><code>加法 +减法 -乘法 *除法 /取余 %</code></pre><pre><code>自增 ++a++ 就是 a=a+1自减 --a-- 就是 a=a-1</code></pre><ul><li>注意<ul><li>自增（++）自减（–）运算符是一种特殊的算术运算符</li><li>自增（++）自减（—）在变量左右有不同的意义</li><li>在变量左边则先自增减操作，再进行表达式运算</li><li>在变量右边则先进行表达式运算，再进行自增减操作</li><li>自增和自减运算符只能用于操作变量，不能直接用于操作数值或常量</li></ul></li></ul></li><li><p>关系运算符</p><ul><li><p>用于数值的比较，不能是字符串等其他非数值</p><pre><code>等号 ==不等 !=大于 &gt;大于或等于 &gt;=小于 &lt;小于或等于 &lt;=</code></pre></li><li><p>字符串 equals</p></li></ul></li><li><p>逻辑运算符</p><ul><li>逻辑与 &amp;&amp;<ul><li>仅当两个操作数都为真，条件才为真</li><li>有短路作用（第一个条件为false,则不会执行第二个）</li></ul></li><li>逻辑或 ||<ul><li>任何两个操作数任何一个为真，条件为真</li><li>有短路作用（第一个条件为true，则不会执行第二个）</li></ul></li><li>逻辑非 ！<ul><li>反转操作数，如果条件为true，则逻辑非运算符将得到false</li></ul></li></ul></li><li><p>赋值运算符</p><pre><code>赋值 =加和赋值 + =减和赋值 - =乘和赋值 * =除和赋值 / =</code></pre></li><li><p>三目运算符</p><pre><code>格式条件 ? 成功 : 否则</code></pre></li><li><p>移动运算符</p><ul><li>~</li></ul></li><li><p>运算符优先级</p><ul><li>和数学运算一样，可以加括号控制优先级<ul><li>乘除取余 * / %</li><li>加减 + -</li><li>关系运算&gt;, &gt;=, &lt;,&lt;=</li><li>相等 ==、!=</li><li>逻辑与 &amp;&amp;</li><li>逻辑或 ||</li><li>三目运算 ? :</li><li>赋值 =</li></ul></li></ul></li></ul><h3 id="12-Java循环语句"><a href="#12-Java循环语句" class="headerlink" title="12.Java循环语句"></a>12.Java循环语句</h3><ul><li>while和do while的区别<ul><li>while的话一定需要满足条件才会执行</li><li>do while的话，会先执行一次循环内容，再判断是否继续执行</li></ul></li></ul><h3 id="13-Java条件语句"><a href="#13-Java条件语句" class="headerlink" title="13.Java条件语句"></a>13.Java条件语句</h3><ul><li><p>case语句不必须包含break语句, 没有break语句，程序会执行下一条case语句，直到出现break语<br>句为止</p></li><li><p>只是简单的选择语句 if else即可，复杂或者条件超过4个，则用switch语句</p></li></ul><h3 id="14-Java-static静态代码块和静态方法"><a href="#14-Java-static静态代码块和静态方法" class="headerlink" title="14.Java static静态代码块和静态方法"></a>14.Java static静态代码块和静态方法</h3><ul><li><p>static</p><ul><li>static 修饰的方法或变量，优先于对象执行，所以内存有会现有 static修饰的内容，后有对象的内容</li><li>可以用来修饰类的成员方法、类的成员变量，还可以编写static静态代码块</li><li>修饰变量就是类变量，修饰方法就是类方法</li><li>总结: 类变量或者类方法，可以直接通过类名.方法名或者变量名进行调用，不用经过对象</li></ul></li><li><p>static变量也称作静态变量</p><ul><li>和非静态变量的区别是，静态变量被所有的对象所共享，在内存中只有一份，它当且仅当在<br>类初次加载时会被初始化。非静态变量是对象所拥有的，在创建对象的时候被初始化，存在<br>多个副本，各个对象拥有的副本互不影响</li><li>static成员变量的初始化顺序按照定义的顺序进行初始化</li></ul></li><li><p>static方法也称作静态方法</p><ul><li>不依赖于任何对象就可以进行访问，类名.方法名</li><li>不能访问类的非静态成员变量和非静态成员方法</li><li>注意事项：<ul><li>静态方法不能直接访问非静态变量</li><li>静态方法当中不能使用this</li><li>核心：一个类里面 static修饰的不能访问非static修饰的成员或者方法，而非static修饰的可以访问static修饰的成员或者方法</li></ul></li></ul></li><li><p>静态代码块</p><ul><li>加载类的时候，静态代码块会被执行一次，且只能执行一次</li><li>静态内容优先于非静态内容，所以静态代码比构造方法先执行</li><li>使用场景：用来一次性对静态成员变量进行赋值，或者类资源初始化等操作</li></ul><pre><code>public class 类名{    static {    //静态代码块    }}</code></pre></li></ul><h3 id="15-Java面向对象编程OOP"><a href="#15-Java面向对象编程OOP" class="headerlink" title="15.Java面向对象编程OOP"></a>15.Java面向对象编程OOP</h3><ul><li><p>构造函数</p><ul><li>Java会自动为每个类提供一个默认构造函数</li><li>如果自己定义了构造函数，就不再使用默认构造函数，如果没有显示的写出默认构造函数，则会消失</li><li>注意点：如果构造函数之间互相调用，务必写在方法第一行</li></ul></li><li><p>封装</p><ul><li>封装把对象的所有组成部分组合在一起，封装定义程序如何引用对象的数据，封装实际上使用方法将类的数据隐藏起来，控制用户对类的修改和访问数据的程度。 适当的封装可以让代码更容易理解和维护，也加强了代码的安全性</li></ul></li><li><p>overload（重载，过载）</p><ul><li>在一个类里面，方法名字相同，而参数不同，和返回类型无关</li></ul></li><li><p>override（重写，覆盖）</p><ul><li>子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变<ul><li>返回值类型，方法名，参数类型以及个数</li></ul></li><li>子类能够根据需要实现父类的方法</li></ul></li><li><p>this关键字</p><ul><li>当一个对象创建后，JVM会给这个对象分配一个引用自身的指针，这个指针的名字就是 this</li><li>只能用于非静态方法体内，静态方法和代码块不能出现this，因为静态方法存在时，对象不一定存在。</li><li>this就是指向当前对象本身</li><li>使用场景<ul><li>this(参数类型1 参数名，…) 表示当前类对应的构造函数</li><li>方法形参和对象的属性重名，用this来区分</li></ul></li></ul></li><li><p>继承</p><ul><li><p>概念</p><ul><li>子类继承父类的特征和行为，使得子类对象具有父类的方法和属性</li><li>父类也叫基类，具有公共的方法和属性</li><li>java中的继承，减少重复代码</li></ul></li><li><p>格式</p><ul><li><p>extends关键字</p><pre><code>class ⽗父类名称{}class ⼦子类名称 extends ⽗父类名称{}</code></pre></li></ul></li></ul></li></ul><ul><li><p>特点</p><ul><li>子类拥有父类的非private的属性和方法</li><li>子类可以用自己的方式实现父类的方法 override(重写，覆盖)</li><li>实现了代码的复用</li><li>重写从父类那里继承来的方法的，当调用方法时候会优先调用子类的方法（默认就近原则）</li></ul></li><li><p>注意</p><ul><li>不支持多继承，支持多重继承，多重继承提高了耦合性，组合优于继承</li><li>所有的类都是继承于 java.lang.Object</li><li>final关键字<ul><li>修饰的类，则这个类不可以被继承</li><li>修饰方法，则这个方法不允许被重写</li></ul></li></ul></li></ul><ul><li><p>super关键字</p><ul><li>概念<ul><li>引用变量，用于引用父类对象</li><li>父类和子类都具有相同的命名方法，要调用父类方法时使用</li><li>父类和子类都具有相同的命名属性，要调用父类中的属性时使用</li><li>super也是父类的构造函数，格式 super(参数)<ul><li>注意点 调用super() 必须是类构造函数中的第一条语句，否则编译不通过</li></ul></li></ul></li><li>注意<ul><li>每个子类构造方法的第一条语句，都是隐含地调用super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错</li><li>this()和super()都指的是对象，均不可以在static环境中使用<ul><li>包括：static变量,static方法，static语句块。</li></ul></li></ul></li><li>构造函数 super和this<ul><li>this 和super在构造函数中只能有一个，且都必须是构造函数当中的第一行</li><li>当父类的构造函数是无参构造函数时，在子类的构造函数中，不用显式super()去调用父类的构造函数,</li><li>当父类的构造函数是有参构造函数时，如果子类的构造函数中不写super()进行调用父类的构造函数，编译器会报错</li></ul></li><li>java继承后类的初始化顺序<ul><li>问题：静态代码块、非静态代码、父类/子类无参构造方法、父类/子类的一般方法</li></ul></li></ul></li><li><p>抽象</p><ul><li><p>概念</p><ul><li><p>当父类的某些方法不确定时，可以用abstract关键字来修饰该方法，即抽象方法，用abstract来修饰该类，即抽象类</p></li><li><p>抽象类将事物的共性的东西提取出来，由子类继承去实现，代码易扩展，易维护</p></li><li><p>java中的抽象类和抽象方法</p><pre><code>//抽象类abstract class 类名{}//抽象方法，不能有方法主体abstract 返回类型 方法名();</code></pre></li></ul></li><li><p>特点</p><ul><li>抽象类<ul><li>抽象类不能被实例化，因为抽象类中方法未具体化，这是一种不完整的类，所以不能直接实例化，编译无法通过</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>一个抽象类中可以没有抽象方法，这样做的目的是为了此类不能被实例化。</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，否则子类也是抽象类，需要用abstract声明</li><li>抽象类不能使用final关键字修饰，因为final修饰的类是无法被继承</li></ul></li><li>抽象方法<ul><li>抽象类中的抽象方法只是生命，不包含方法体</li><li>抽象方法不能用private修饰，因为抽象方法必须被子类实现，而private权限对于子类时不能访问的</li><li>一个类继承了一个抽象类，需要全部重写抽象类中的抽象方法，如果不全部重写，则这个子类也必须是抽象类</li></ul></li><li>构造方法，类方法（即static修饰的方法）不能声明为抽象方法</li></ul></li></ul></li><li><p>接口</p><ul><li><p>概念</p><ul><li><p>抽象方法的集合，接口通常以interface声明</p></li><li><p>语法</p><pre><code>interface 名称 [extends 其他的接口名] {// 声明变量// 抽象方法int getMoney();}</code></pre></li></ul></li><li><p>特点</p><ul><li>接口的方法都是抽象方法，默认都是 public abstract，其他修饰符都会报错</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <ul><li>public static final</li></ul></li><li>类描述对象的属性和方法，而接口则包含类要实现的方法</li><li>接口无法被实例化，需要被实现才行</li><li>一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类</li></ul></li><li><p>接口和类的区别</p><ul><li>接口没有构造函数</li><li>接口里可以有静态方法和方法体</li><li>接口中所有的方法必须是抽象方法（JDK8之后就不是）</li><li>接口不是被类继承了，而是要被类实现</li><li>接口支持多继承, 类不支持多个类继承</li></ul></li><li><p>接口的实现</p><ul><li><p>implements</p></li><li><p>当类实现接口的时候，类要实现接口中所有的方法，不然类必须声明为抽象的类，使用implements关键字实现所有接口</p><pre><code>class 类名 implements 接口名称[, 其他接口名称, 其他接口名称]{//要实现的方法}</code></pre></li></ul></li><li><p>注意</p><ul><li>一个类只能继承一个类，但是能实现多个接口</li><li>接口能继承另一个接口，接口的继承使用extends关键字，和类继承一样</li></ul></li><li><p>JDK8新特性</p><ul><li>interface中可以有static方法，但必须有方法实现体，该方法只属于该接口，接口名直接调用该方法</li><li>接口中新增default关键字修饰的方法，default方法只能定义在接口中，可以在子类或子接口中被重写<ul><li>default定义的方法必须有方法体</li></ul></li><li>父接口的default方法如果在子接口或子类被重写，那么子接口实现对象、子类对象，调用该方法，以重写为准</li><li>本类、接口如果没有重写父类（即接口）的default方法，则在调用default方法时，使用父类定义的default方法逻辑</li></ul></li></ul></li><li><p>InstanceOf 关键词</p><ul><li><p>概念</p><ul><li>是Java的一个二元操作符（运算符）,也是Java的保留关键字</li></ul></li><li><p>作用</p><ul><li><p>判断一个类是否实现了某个接口，或者判断一个实例对象是否属于一个类</p></li><li><p>语法</p><pre><code>//如果该object 是该class的一个实例，那么返回true。如果该object 不是该class的⼀个实例例，或者object是null，则返回falseboolean result = object instanceof class参数：　　result ：boolean类型。　　object ：必选项。任意对象表达式。　　class：必选项。任意已定义的对象类。</code></pre></li><li><p>对象类型强制转换前的判断</p><pre><code>Person p = new Student();//判断对象p是否为Student类的实例例if(p instanceof Student){//向下转型Student s = (Student)p;}</code></pre></li></ul></li></ul></li><li><p>方法重写和重载</p><ul><li>方法重写 overriede<ul><li>子类对父类的允许访问的方法的实现过程进行重新编写</li><li>注意点<ul><li>返回值和形参都不能改变</li><li>父类的成员方法只能被它的子类重写</li><li>final 和 static的方法不能被重写</li><li>构造方法不能被重写</li><li>访问权限不能比父类中被重写的方法的访问权限更低</li></ul></li></ul></li><li>方法重载 overload<ul><li>一个类里面，方法名字相同但参数不同，返回类型可以相同也可以不同</li><li>比如构造函数重载</li></ul></li><li>override是在不同类之间的行为，overload是在同一个类中的行为</li></ul></li><li><p>多态</p><ul><li>同一个行为具有多个不同表现形式或形态的能力</li><li>常见的方式<ul><li>继承方法重写</li><li>同类方法重载</li><li>抽象方法</li><li>接口</li></ul></li></ul></li></ul><h3 id="16-Java异常Exception"><a href="#16-Java异常Exception" class="headerlink" title="16.Java异常Exception"></a>16.Java异常Exception</h3><ul><li><p>Java.lang软件包中有一个java.lang.Throwable类，这个类是java中所有错误和异常的超类，Throwable类有两个子类，Error与 Exception</p></li><li><p>两⼤大类</p><ul><li><p>可查异常（编译器要求必须处置的异常）：RuntimeException及其子类以外，其他的Exception类及其子类, 如 IOException和ClassNotFoundException</p><pre><code>ClassNoFoundException 应⽤用程序试图加载类，找不到对应的类IllegalAccessException 拒绝访问一个类的时候NoSuchFieldExcetion 请求的变量不存在NoSuchMethodException 方法不存在</code></pre></li><li><p>不可查异常(编译器不要求强制处置的异常): 包括运行时异常（RuntimeException与其子类）和错误（Error），如ArrayIndexOutOfBoundsException</p><pre><code>ArrayIndexOutOfBoundsException 数组索引越界ClassCastException 强制失败抛出异常NullPointerException 需要对象的地方使用 null 时，抛出该异常NumberFormatException 将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常</code></pre></li><li><p>Throwable类核心方法</p><ul><li>public String getMessage() 异常的详细信息</li><li>public Throwable getCause() 异常原因</li><li>public void printStackTrace() 打印错误的堆栈信息，即错误输出流，可以看到错误原因和所在位置</li><li>public StackTraceElement [] getStackTrace() 堆栈层次的数组，下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底</li></ul></li></ul></li><li><p>try-catch-finally或try-finally</p></li><li><p>throws</p></li><li><p>当抛出一个被检查的异常，我们必须使用try-catch块来处理它，或者在方法声明中使用throws子句继续往外抛</p></li><li><p>自定义异常</p><ul><li>异常都是继承自Exception类，所以我们要自定义的异常也需要继承这个基类。</li></ul></li></ul><h3 id="17-Java数据结构"><a href="#17-Java数据结构" class="headerlink" title="17.Java数据结构"></a>17.Java数据结构</h3><ul><li>定义<ul><li>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型</li><li>简述：数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系</li></ul></li><li>分类<ul><li>线性结构：各个结点具有线性关系，有且仅有⼀一个开始结点和⼀一个终端结点<ul><li>栈、队列和串</li></ul></li><li>非线性结构：各个结点之间具有多个对应关系，一个结点可能有多个直接前趋结点和多个直接后继结点<ul><li>广义表、树结构和图结构</li></ul></li></ul></li><li>常见数据结构<ul><li>栈Stack<ul><li>限制在表的一端进行插入和删除运算的线性表，通常称插入、删除的这一端为栈顶<br>(Top)，另一端为栈底(Bottom)</li><li>先进后出</li></ul></li><li>队列Queue<ul><li>限制在表的一端进⾏行行插⼊入，而在另一端进行删除。允许删除的一端称为队头(front)，允<br>许插入的一端称为队尾(rear)</li><li>先进先出</li></ul></li><li>数据Array<ul><li>最基本的数据结构, 它是将具有相同类型的若干变量有序地组织在一起的集合</li><li>根据下标进行操作</li></ul></li><li>链表Linked List<ul><li>数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点,每个数据结点包括数据域和指针域两部分。其中指针域保存了数据结构中下一个元素存放的地址</li></ul></li></ul></li></ul><h3 id="18-Java散列表-HashTable"><a href="#18-Java散列表-HashTable" class="headerlink" title="18.Java散列表 HashTable"></a>18.Java散列表 HashTable</h3><ul><li><p>定义</p><ul><li>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度</li><li>散列函数 能使对一个数据序列的访问过程更加迅速有效，通过散列函数，数据元素将被更快地定位</li><li>链式哈希表<ul><li>是由一组链表构成，每个链表都可以看做是一个“桶”，我们将所有的元素通过散列的方式放到具体的不同的桶中</li><li>插入元素时，首先将其键传入一个哈希函数，函数通过散列的方式告知元素属于哪个“桶”，然后在相应的链表插入元素。</li><li>查找或删除元素时，用相同的方式先找到元素的“桶”，然后遍历相应的链表，直到发现我们想要的元素</li></ul></li></ul></li><li><p>注意</p><ul><li>哈希扩容</li><li>哈希冲突碰撞</li></ul></li></ul><h3 id="19-Java-Collection集合框架"><a href="#19-Java-Collection集合框架" class="headerlink" title="19.Java Collection集合框架"></a>19.Java Collection集合框架</h3><ul><li><p>Collection接口有两个主要的子类List和Set，Map不是Collection的子类，因为其本身就是一个顶层接口</p></li><li><p>List：有序、重复的集合</p><ul><li>ArrayList<ul><li>基于数组实现，是一个动态的数组队列，但它和Java中的数组又不一样，它的容量可以自动增长</li><li>可以存储任意多的对象，但是只能存储对象，不能存储原生数据类型例例如int</li></ul></li><li>LinkedList<ul><li>基于的数据结构是链表，一个双向链表，链表数据结构的特点是每个元素分配的空间不必连续</li><li>插入和删除元素时速度非常快，但访问元素的速度较慢</li></ul></li><li>区别<ul><li>两个都是List的接口，两个都是非线程安全的</li><li>ArrayList是基于动态数组的数据结构，而LinkedList是基于链表的数据结构</li><li>对于随机访问get和set（查询操作），ArrayList要优于LinkedList，因为LinkedList要移动指针</li><li>对于增删操作（add和remove），LinkedList优于ArrayList</li></ul></li><li>api<ul><li>remove<ul><li>根据索引删除时，返回被删除的元素</li><li>根据元素删除时，返回boolean</li></ul></li></ul></li></ul></li><li><p>Set：无序、不可重复</p><ul><li><p>Set不保存重复的元素，存储一组唯一，无序的对象。</p></li><li><p>允许包含值为null的元素，但最多只能有⼀一个null元素</p></li><li><p>HashSet</p><ul><li>HashSet类按照哈希算法来存取集合中的对象，存取速度比较快</li><li>对应的Map是HashMap，是基于Hash的快速元素插入，元素无顺序。</li></ul></li><li><p>TreeSet</p><ul><li>TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序</li></ul></li><li><p>api</p><pre><code>//创建对象,HashSet和TreeSet api一样Set&lt;Integer&gt; set = new HashSet&lt;&gt;();//往容器里面添加对象set.add("xxx");//清空元素set.clear();//返回⼤大⼩小set.size();//根据对象删除元素set.remove("xxx");//是否为空set.isEmpty();</code></pre></li><li><p>区别</p><ul><li>两个都是List的接口，两个都是非线程安全的</li><li>HashSet不能保证元素的排列顺序，TreeSet是SortedSet接口的唯一实现类，可以确保集合元素处于排序状态</li><li>HashSet底层用的是哈希表，TreeSet采用的数据结构是红黑树（红黑树是一种特定类型的二叉树）</li><li>HashSet中元素可以是null，但只能有一个，TreeSet不允许放入null</li><li>一般使用HashSet，如果需要排序的功能时，才使用TreeSet（性能原因）</li></ul></li></ul></li><li><p>Map：键值对存储</p><ul><li><p>HashMap</p><ul><li>一个散列桶（数组和链表），它存储的内容是键值对(key-value)映射</li><li>是基于hashing的原理，使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当put()方法传递键和值时，会先对键调用hashCode()方法，计算并返回的hashCode是用于找到Map数组的bucket位置来储存Entry对象的，是非线程安全的，所以HashMap操作速度很快</li></ul></li><li><p>TreeMap</p><ul><li>在数据的存储过程中，能够自动对数据进行排序，实现了SotredMap接口，它是有序的集合</li><li>TreeMap使用的存储结构是平衡二叉树，也称为红黑树</li><li>默认排序规则：按照key的字典顺序来排序（升序），也可以自定义排序规则，要实现Comparator接口</li></ul></li><li><p>api</p><pre><code>//往map里面放key - value;map.put("key","value");//根据key获取valuemap.get("key");//判断是否包含某个keymap.containsKey("key");//获取所有value集合map.values();//返回所有key的集合map.keySet()//返回map的元素数量map.size();//清空容器map.clear();//判断map是否为空map.isEmpty();//返回一个Set集合，集合的类型为Map.Entry , 是Map声明的一个内部接口，接口为泛型，定义为Entry&lt;K,V&gt;，//它表示Map中的一个实体(一个key-value对),主要有getKey(),getValue方法Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</code></pre></li><li><p>区别</p><ul><li>HashMap和TreeMap应该怎么选择<ul><li>HashMap可实现快速存储和检索，但缺点是包含的元素是无序的，适用于在Map中插入、删除和定位元素.</li><li>TreeMap能便捷的实现对其内部元素的各种排序，但其一般性能比HashMap差,适用于按自然顺序或自定义顺序遍历键(key)</li></ul></li><li>jdk1.7和jdk1.8中HashMap的主要区别<ul><li>底层实现由之前的 “数组+链表” 改为 “数组+链表+红黑树”<ul><li>当链表节点较少时仍然是以链表存在，当链表节点较多时，默认是大于8时会转为红黑树</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="20-Java遍历之迭代器-Iterator"><a href="#20-Java遍历之迭代器-Iterator" class="headerlink" title="20.Java遍历之迭代器(Iterator)"></a>20.Java遍历之迭代器(Iterator)</h3><ul><li><p>Iterator是java中的一个接口，核心作用就是用来遍历容器的元素</p></li><li><p>三个核心方法</p><ul><li><p>boolean hashNext()</p><ul><li>用于判断iterator内是否有下个元素，如果有则返回true，没有则false</li></ul></li><li><p>Obejct next()</p><ul><li>返回iterator的下一个元素，同时指针也会向后移动1位</li></ul></li><li><p>void remove()</p><ul><li><p>删除指针的上一个元素（容易出问题，删除元素不建议使用容器自己的方法）</p></li><li><p>只有当next执行完后，才能调⽤用remove函数</p></li><li><p>如要删除第一个元素，不能直接调用 remove(),要先next一下()，否则调用remove方法是会抛出异常</p><pre><code>ConcurrentModificationException 并发修改异常</code></pre></li></ul></li></ul></li></ul><h3 id="21-Java-Collections工具类"><a href="#21-Java-Collections工具类" class="headerlink" title="21.Java Collections工具类"></a>21.Java Collections工具类</h3><ul><li><p>排序 sort(List list)</p><ul><li>按自然排序的升序排序</li><li>sort(List list, Comparator c) 自定义排序规则，由Comparator控制排序逻辑</li></ul></li><li><p>随机排序 shuffle(List list)</p></li><li><p>获取最大元素 max(Collection coll) 默认比较，不适合对象比较</p></li><li><p>获取最大元素 max(Collection coll, Comparator comparator)</p></li><li><p>获取最小元素 min(Collection coll)</p></li><li><p>创建不可变集合unmodifiablleXXX()</p><pre><code>//只读List集合unmodifiableList//只读Set集合unmodifiableSet//只读Map集合unmodifiableMap</code></pre></li></ul><h3 id="22-Java排序接口Comparable"><a href="#22-Java排序接口Comparable" class="headerlink" title="22.Java排序接口Comparable"></a>22.Java排序接口Comparable</h3><ul><li><p>定义</p><pre><code>public interface Comparable&lt;T&gt; {    public int compareTo(T o);}</code></pre><ul><li>是一个接口，定制排序规则</li><li>对实现它的每个类的对象进行整体排序，里面 compareTo 方法是实现排序的具体方法</li><li>比如TreeSet、SortedSet、Collections.sort() 方法调用进行排序</li><li>String、Integer等类默认实现了这个接口</li></ul></li><li><p>集合中的元素也叫对象</p></li><li><p>compareTo方法</p><ul><li>用于比较次对象和指定对象的顺序，o为要比较的对象</li><li>返回int类型<ul><li>大于0, 表示this大于传进来的对象o ,则往后排，即升序</li><li>等于0，表示this等于传进来的对象o</li><li>小于0，表示this小于传进来的对象o</li></ul></li></ul></li></ul><h3 id="23-Java-Object工具类"><a href="#23-Java-Object工具类" class="headerlink" title="23.Java Object工具类"></a>23.Java Object工具类</h3><ul><li><p>equals</p><ul><li><p>用于字符串和包装对象的比较，先比较内存地址，再比较值</p><pre><code>//判断地址是否一样//非空判断和class类型判断//强转//对象里面的字段一一匹配        @Override        public boolean equals(Object obj) {            //判断地址是否一样            if(this == obj){                return true;            }            //非空判断和class类型判断            if(obj ==null || getClass() != obj.getClass()){                return false;            }            //强转            User user = (User)obj;            //对象里面的字段一一匹配            return age == user.age &amp;&amp; name.equals(user.name);        }</code></pre></li></ul></li><li><p>deepEquals</p><ul><li>数组的比较，先比较内存地址，再比较值，如String/char/byte/int数组， 或者包装类型Integer等数组</li></ul></li><li><p>hashCode</p><ul><li>返回对象的hashCode，若传入的为null，返回0</li></ul></li><li><p>hash</p><ul><li><p>传入可变参数的所有值的hashCode的总和，底层调用Arrays.hashCode（可变参数只能在最后一个参数里加）</p><pre><code>public static int hash(Object... values) {    return Arrays.hashCode(values);}</code></pre></li></ul></li></ul><ul><li>问题：当向集合中插入对象时，如何判别在集合中是否已经存在该对象，比如Set确保存储对象的唯一，并判断是不是同个对象呢？<ul><li>依据hashCode和equals进行判断，所以Set存储的对象必须重写equals和hashCode这两个方法</li><li>判断两个对象是否一样，首先判断插入obj的hashcode值是否存在，hashcode值不存在则直接插入集合，值存在则还需判断equals方法判断对象是否相等</li></ul></li></ul><h3 id="24-Java-路径"><a href="#24-Java-路径" class="headerlink" title="24.Java 路径"></a>24.Java 路径</h3><ul><li><p>相对路径</p><ul><li>相对某个基准目录或者文件的路径， ./ 表示当前路径; ../ 表示上级目录</li></ul></li><li><p>绝对路径</p><ul><li>存储在硬盘上的真正路径</li></ul></li><li><p>window路径分割符</p><ul><li><p>\ 表示windows系统文件目录分割符</p></li><li><p>如果是Java代码在window下写某个文件的话需要下面的方式</p><pre><code>D:\\soft\\xdclass.txt</code></pre></li></ul></li><li><p>Linux和Mac路径分割符</p><ul><li><p>/ 表示 Linux或者Mac的路径分隔符</p></li><li><p>如果是Java代码在Linux或者Mac下写某个文件的话需要下面的方式</p><pre><code>/usr/soft/xdcalss.net</code></pre></li></ul></li></ul><h3 id="25-Java-File类"><a href="#25-Java-File类" class="headerlink" title="25.Java File类"></a>25.Java File类</h3><ul><li><p>File类的包名是java.io，也实现了Serializable, Comparable两大接口以便于其对象可序列化和比较</p></li><li><p>File.separator 目录分隔符，在不同的系统下不一样, windows和 mac /Linux</p></li><li><p>API</p><pre><code>         String dir = "X:\\XXX\\XXX\\XXX\\";        String name = "xxx.xxx";        File file = new File(dir, name);        //File file = new File(dir);        //文件的查询和判断        System.out.println(File.separator);        System.out.println("基本路径 getPath()= " + file.getPath());        System.out.println("文件名 getName()= " + file.getName());        System.out.println("绝对路径 getAbsolutePath = " + file.getAbsolutePath());        System.out.println("父路径名 getParent() = " + file.getParent());        System.out.println("是否是绝对路径 isAbsolute() = " + file.isAbsolute());        System.out.println("是否是一个目录 isDirectory() = " + file.isDirectory());        System.out.println("是否是一个文件 isFile() = " + file.isFile());        System.out.println("文件或目录是否存在 exists() = " + file.exists());        System.out.println("目录中的文件和目录的名称所组成字符串数组 list() ");        String[] arr = file.list();        if(arr == null){            return;        }        for (String temp : arr) {            System.out.println(temp);        }        //创建指定的目录        File mkdirFile = new File(dir + "\\xxxx");        mkdirFile.mkdir();        //创建多个层级的目录        File mkdirsFile = new File(dir + "\\xxx\\xxx\\xxx");        mkdirsFile.mkdirs();        //创建一个新的文件        File newFile = new File(dir + "\\newFile.txt");        try {            newFile.createNewFile();        } catch (IOException e) {            e.printStackTrace();        }        //删除文件(当前文件必须是最终的文件才可以删除，如果是文件夹，里面含有文件，需要先删除里面的文件才能删除当前文件夹)        newFile.delete();</code></pre></li></ul><h3 id="26-Java-Input、Output-Stream流"><a href="#26-Java-Input、Output-Stream流" class="headerlink" title="26.Java Input、Output Stream流"></a>26.Java Input、Output Stream流</h3><ul><li><p>IO: Input / Ouput 即输入输出</p></li><li><p>处理数据类型分类</p><ul><li><p>字符流：处理字符相关，如处理文本数据（如txt文件), Reader/Writer</p></li><li><p>字节流: 处理字节相关，如声音或者图片等二进制，InputStream/OutputStream</p></li><li><p>区别</p><ul><li>字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节</li><li>字节流可以处理几乎所有文件，字符流只能处理字符类型的数据</li></ul></li><li><p>Reader</p></li><li><p>Writer</p></li><li><p>InputStream</p><pre><code>int read()讲解：从输入流中读取单个字节,返回0到255范围内的int字节值,字节数据可直接转换为int类型, 如果已经到达流末尾而没有可用的字节，则返回－1int read(byte[] buf)讲解：从输入流中读取一定数量的字节，并将其存储在缓冲区数组buf中, 返回实际读取的字节数，如果已经到达流末尾而没有可用的字节，则返回－1long skip(long n)讲解：从输入流中跳过并丢弃 n 个字节的数据。int available()讲解：返回这个流中有多少个字节数，可以把buf数组长度定为这个void close() throws IOException讲解：关闭输入流并释放与该流关联的系统资源</code></pre><ul><li><p>FileInputStream</p><ul><li><p>文件字节输入流, 对文件数据以字节的形式进行读取操作</p><pre><code>//传入文件所在地址public FileInputStream(String name) throws FileNotFoundException//传入文件对象public FileInputStream(File file) throws FileNotFoundException</code></pre></li></ul></li><li><p>ByteArrayInputStream 字节数组输入流</p></li><li><p>ObjectInputStream 对象输入流</p></li><li><p>操作的中文内容多则推荐GBK：</p><ul><li>GBK中英文也是两个字节,用GBK节省了空间,</li><li>UTF-8 编码的中文使用了三个字节</li></ul></li><li><p>如果是英文内容多则推荐UFT-8:</p><ul><li>因为UFT-8里面英文只占一个字节</li><li>UTF-8编码的中文使用了三个字节</li></ul></li></ul></li><li><p>OutputStream</p><pre><code>void write(int b)讲解：将指定的字节写入输出流void write(byte[] b)throws IOException讲解：将b.length个字节的byte数组写入当前输出流void flush() throws IOException讲解：write是写到缓冲区中，可以认为是内存中,当缓冲区满时系统会自动将缓冲区的内容写入文件，但是一般还有一部分有可能会留在内存这个缓冲区中, 所以需要调用flush空缓冲区数据。void close() throws IOException讲解：关闭输入流并释放与该流关联的系统资源</code></pre><ul><li><p>FileOutputStream</p><ul><li><p>文件字节输出流, 对文件数据以字节的形式进行输出的操作</p><pre><code>//传入输出的文件地址public FileOutputStream(String name)//传入目标输出的文件对象public FileOutputStream(File file)//传入目标输出的文件对象, 是否可以追加内容public FileOutputStream(File file, boolean append)</code></pre></li></ul></li><li><p>ByteArrayOutputStream</p></li><li><p>ObjectOutputStream</p></li></ul></li></ul></li></ul><h3 id="27-Java-缓冲Buffer输入输出流"><a href="#27-Java-缓冲Buffer输入输出流" class="headerlink" title="27.Java 缓冲Buffer输入输出流"></a>27.Java 缓冲Buffer输入输出流</h3><ul><li><p>BufferInputStream</p><ul><li><p>BufferedInputStream 通过预先读入一整段原始输入流数据至缓冲区中，而外界对BufferedInputStream的读取操作实际上是在缓冲区上进行，如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。</p></li><li><p>好处：避免了大量的磁盘IO，原始的InputStream类实现的read是即时读取的，每一次读取都会是一次磁盘IO操作（哪怕只读取了1个字节的数据），如果数据量巨大，这样的磁盘消耗非常可怕。</p></li><li><p>缓冲区的实现: 读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次磁盘IO，载入一段数据填充缓冲，下一次读取一般情况就直接可以从缓冲区读取，减少了磁盘IO。</p></li><li><p>默认缓冲区大小是8k, int DEFAULT_BUFFER_SIZE = 8192;</p></li><li><p>常见构造函数</p><pre><code>//对输入流进行包装，里面默认的缓冲区是8kpublic BufferedInputStream(InputStream in);//对输入流进行包装,指定创建具有指定缓冲区大小的public BufferedInputStream(InputStream in,int size);</code></pre></li><li><p>常用的两个方法</p><pre><code>/从输入流中读取一个字节public int read();//从字节输入流中给定偏移量处开始将各字节读取到指定的 byte 数组中。public int read(byte[] buf,int off,int len);//关闭释放资源，关闭的时候这个流即可，InputStream会在里面被关闭void close();</code></pre></li></ul></li><li><p>BufferOutputStream</p><ul><li><p>常见构造函数</p><pre><code>//对输出流进行包装,里面默认的缓冲区是8kpublic BufferedOutputStream(OutputStream out);//对输出流进行包装,指定创建具有指定缓冲区大小的public BufferedOutputStream(OutputStream out,int size);</code></pre></li><li><p>常用的三个方法</p><pre><code>//向输出流中输出一个字节public void write(int b);//将指定 byte 数组中从偏移量 off 开始的 len 个字节写入缓冲的输出流。public void write(byte[] buf,int off,int len);//刷新此缓冲的输出流，强制使所有缓冲的输出字节被写出到底层输出流中。public void flush();//关闭释放资源，关闭的时候这个流即可，OutputStream会在里面被关闭void close();</code></pre></li><li><p>BufferedOutputStream在close()时会自动flush</p></li><li><p>BufferedOutputStream在不调用close()的情况下，缓冲区不满，又需要把缓冲区的内容写入到文件或通过网络发送到别的机器时，才需要调用flush</p></li></ul></li><li><p>流的关闭顺序</p><ul><li>后开先关, 如果A依赖B，先关闭B</li></ul></li><li><p>拷贝目录下的所有文件</p><pre><code> public static void main(String[] args) {        String dir = "XXXX";        File file  = new File(dir+"\\img1");        File [] files = file.listFiles();        for(File from : files){            String fileName = from.getName();            copy(from.getAbsolutePath(),dir+"\\img2\\"+fileName);        }    }    public static void copy(String from,String to){        System.out.println(from + "|"+ to);        try{            File targetDir = new File(new File(to).getParent());            if(!targetDir.exists()){                targetDir.mkdirs();            }            FileInputStream fis =new FileInputStream(from);            BufferedInputStream bis = new BufferedInputStream(fis);            FileOutputStream fos = new FileOutputStream(to);            BufferedOutputStream bos = new BufferedOutputStream(fos);            int size;            byte [] buf = new byte[1024];            while ((size = bis.read(buf))!=-1){                bos.write(buf,0,size);            }            bis.close();            bos.close();        }catch(Exception e){            e.printStackTrace();        }    }</code></pre></li></ul><h3 id="28-Java-Reader-Writer讲解"><a href="#28-Java-Reader-Writer讲解" class="headerlink" title="28.Java Reader/Writer讲解"></a>28.Java Reader/Writer讲解</h3><ul><li><p>Reader</p><ul><li><p>API</p><pre><code>int read()讲解：一个字符一个字符的读,只能用来操作文本(不能写图片 音频 视频)int read(char cbuf[])讲解：从输入字符流中读取一定数量的字符，并将其存储在缓冲区数组cbuf中, 返回实际读取的字符数，如果已经到达流末尾而没有可用的字节，则返回－1void close() throws IOException讲解：关闭输入流并释放与该流关联的系统资源</code></pre></li><li><p>常见子类</p><ul><li><p>FileReader</p><ul><li><p>用来读取字符文件的实现类</p><pre><code>public FileReader(String fileName) throws FileNotFoundException {    super(new FileInputStream(fileName));}public FileReader(File file) throws FileNotFoundException {    super(new FileInputStream(file));}</code></pre></li></ul></li><li><p>StringReader</p></li></ul></li></ul></li><li><p>Writer</p><ul><li><p>API</p><pre><code>public void write(int c) throws IOException讲解：直接将int型数据作为参数的话，是不会写入数字的，而是现将数字按照ascll码表转换为相应的字符，然后写入public void write(String str) throws IOException讲解：要想实现数字和中文的写入，必须要用String为参数的Writepublic abstract void write(char cbuf[], int off, int len) throws IOException;讲解：将cbuf字符数组的一部分写入到流中，但能不能写len个字符取决于cbuf中是否有那么多void flush() throws IOException讲解：write是写到缓冲区中，可以认为是内存中,当缓冲区满时系统会自动将缓冲区的内容写入文件，但是一般还有一部分有可能会留在内存这个缓冲区中, 所以需要调用flush空缓冲区数据。对比BufferWriter需要实时查表，效率低，其实缓冲区IO的各个都有，只不过很小被忽略,OutputStream都有flush方法，看子类是否有重写void close() throws IOException解：关闭输入流并释放与该流关联的系统资源</code></pre></li><li><p>常见子类</p><ul><li><p>FileWriter</p><ul><li><p>用来写出字符文件的实现类</p><pre><code>public FileWriter(String fileName) throws IOException讲解：如果文件不存在，这会自动创建。如果文件存在，则会覆盖public FileWriter(File file) throws IOException讲解：如果文件不存在，这会自动创建。如果文件存在，则会覆盖public FileWriter(String fileName, boolean append) throws IOException讲解：加入true参数，会实现对文件的续写，使用false则会实现对文件的覆盖public FileWriter(File file, boolean append) throws IOException讲解：加入true参数，会实现对文件的续写，使用false则会实现对文件的覆盖</code></pre></li></ul></li></ul></li></ul></li></ul><pre><code>- StringWriter</code></pre><h3 id="29-Java-BufferedReader-BufferedWriter讲解"><a href="#29-Java-BufferedReader-BufferedWriter讲解" class="headerlink" title="29.Java BufferedReader/BufferedWriter讲解"></a>29.Java BufferedReader/BufferedWriter讲解</h3><ul><li><p>采用包装设计模式</p></li><li><p>BufferedReader</p><ul><li><p>简介：当BufferedReader在读取文本文件时，会先尽量从文件中读入字符数据并放满缓冲区，而之后若使用read()方法，会先从缓冲区中进行读取。如果缓冲区数据不足，才会再从文件中读取</p></li><li><p>构造函数</p><pre><code>BufferedReader(Reader in)BufferedReader(Reader in, int sz)讲解：创建一个使用指定大小输入缓冲区的缓冲字符输入流。</code></pre></li><li><p>API</p><pre><code>boolean ready()讲解：判断此流是否已准备好被读取，依赖其他流，所以一般需要做判断int read()讲解：读取单个字符int read(char[] cbuf, int off, int len)讲解：读取一部分字符到数组里面，从数组下标off处放置length长度的字符String readLine()讲解:读取一整行文本行，返回一整行字符串，如果读到行尾了就返回null,注意返回的一行字符中不包含换行符void close()讲解：关闭流释放资源</code></pre></li></ul></li></ul><ul><li><p>BufferedWriter</p><ul><li><p>简介：写入的数据并不会先输出到目的地，而是先存储至缓冲区中。如果缓冲区中的数据满了，才会一次对目的地进行写出</p></li><li><p>构造函数</p><pre><code>BufferedWriter(Writer out)BufferedWriter(Writer out, int sz)</code></pre></li><li><p>API</p><pre><code>void write(int c)讲解：写入一个字符void write(char[] cbuf, int off, int len)讲解：写入字符数组的一部分，通过off和len控制。void write(String s, int off, int len)讲解：写入字符数组的一部分，通过off和len控制。void newLine()讲解：写入一个换行符void close()讲解：关闭输入流并释放与该流关联的系统资源void flush()讲解：write是写到缓冲区中，可以认为是内存中,当缓冲区满时系统会自动将缓冲区的内容写入文件，但是一般还有一部分有可能会留在内存这个缓冲区中, 所以需要调用flush空缓冲区数据。</code></pre></li></ul></li></ul><h3 id="30-Java-InputStreamReader-OutputStreamWriter讲解"><a href="#30-Java-InputStreamReader-OutputStreamWriter讲解" class="headerlink" title="30. Java InputStreamReader/OutputStreamWriter讲解"></a>30. Java InputStreamReader/OutputStreamWriter讲解</h3><ul><li><p>InputStreamReader(继承Reader)</p><ul><li><p>简介: 将字节流转换为字符流, 字节流通向字符流的桥梁,如果不指定字符集编码，则解码过程将使用平台默认的字符编码，如：UTF-8</p><ul><li>文本文件存储是A编码，然后如果以B编码进行读取则会乱码</li></ul></li><li><p>构造函数</p><pre><code>//使用系统默认编码集public InputStreamReader(InputStream in)//指定编码集创建对象public InputStreamReader(InputStream in, String charsetName)</code></pre></li><li><p>API</p><pre><code>int read()讲解：读取单个字符int read(char[] cbuf, int off, int len)讲解：读取一部分字符到数组里面，从数组下标off处放置length长度的字符int read(char []cbuf)讲解：将读取到的字符存到数组中，返回读取的字符数void close()讲解：关闭流释放资源</code></pre></li></ul></li><li><p>OutputStreamWriter</p><ul><li><p>简介：将字符流转换为字节流(看源码解释), 字符流通向字节流的桥梁,如果不指定字符集编码，则编码过程将使用平台默认的字符编码，如：GBK</p></li><li><p>构造函数</p><pre><code>//使用系统默认编码集public OutputStreamWriter(OutputStream out)//指定编码集创建对象public OutputStreamWriter(OutputStream out, String charsetName)</code></pre></li></ul></li><li><p>API</p><pre><code>void write(int c)讲解：写入一个字符void write(char[] cbuf, int off, int len)讲解：写入字符数组的一部分，通过off和len控制。void write(String s, int off, int len)讲解：写入字符数组的一部分，通过off和len控制。void newLine()讲解：写入一个换行符void close()讲解：关闭输入流并释放与该流关联的系统资源void flush()讲解：write是写到缓冲区中，可以认为是内存中,当缓冲区满时系统会自动将缓冲区的内容写入文件，但是一般还有一部分有可能会留在内存这个缓冲区中, 所以需要调用flush空缓冲区数据。</code></pre></li></ul><h3 id="31-Java-IO异常处理"><a href="#31-Java-IO异常处理" class="headerlink" title="31.Java IO异常处理"></a>31.Java IO异常处理</h3><ul><li><p>try-with-resource</p><ul><li>需要关闭的资源只要实现了java.lang.AutoCloseable，就可以自动被关闭</li><li>try()里面可以定义多个资源，它们的关闭顺序是最后在try()定义的资源先关闭。</li></ul></li><li><p>实例</p><pre><code>public static void test5() {        try (FileInputStream fis = new FileInputStream("F:\\测试.txt");             BufferedInputStream bis = new BufferedInputStream(fis);             FileOutputStream fos = new FileOutputStream("F:\\copy1.txt");             BufferedOutputStream bos = new BufferedOutputStream(fos);        ) {            int size;            byte[] buf = new byte[1024];            while ((size = bis.read(buf)) != -1) {                bos.write(buf, 0, size);            }        } catch (Exception e) {            e.printStackTrace();        }    }</code></pre></li></ul><h3 id="32-Java-日期处理Date"><a href="#32-Java-日期处理Date" class="headerlink" title="32.Java 日期处理Date"></a>32.Java 日期处理Date</h3><ul><li><p>构造函数</p><pre><code>//当前时间（常用）Date()==&gt; Date date = new Date()//从1970年1月1日起的毫秒数作为参数Date(long millisec)</code></pre></li><li><p>常见方法</p><pre><code>//返回自1970/01/01 00：00：00 GMT 以来此Date对象表示的毫秒数long getTime()//调用此方法的Date对象在指定日期之后返回true,否则返回falseboolean after(Date date)//调用此方法的Date对象在指定日期之前返回true,否则返回falseboolean before(Date date)</code></pre></li><li><p>时间日期处理类</p><ul><li><p>包所在位置java.time</p></li><li><p>核心类</p><pre><code>LocalDate：不包含具体时间的日期。LocalTime：不含日期的时间。LocalDateTime：包含了日期及时间。</code></pre></li><li><p>LocalDate常用API</p><pre><code>LocalDate today = LocalDate.now();System.out.println("今天日期：" + today);//获取年，月，日，周几System.out.println("现在是哪年:"+today.getYear());System.out.println("现在是哪月:"+today.getMonth());System.out.println("现在是哪月(数字):"+today.getMonthValue());System.out.println("现在是几号:"+today.getDayOfMonth());System.out.println("现在是周几:"+today.getDayOfWeek());//加减年份, 加后返回的对象才是修改后的， 旧的依旧是旧的LocalDate changeDate = today.plusYears(1);System.out.println("加后是哪年:"+changeDate.getYear());System.out.println("旧的是哪年:"+today.getYear());//日期比较System.out.println("isAfter: "+changeDate.isAfter(today));//getYear() int 获取当前日期的年份//getMonth() Month 获取当前日期的月份对象//getMonthValue() int 获取当前日期是第几月//getDayOfWeek() DayOfWeek 表示该对象表示的日期是星期几//getDayOfMonth() int 表示该对象表示的日期是这个月第几天//getDayOfYear() int 表示该对象表示的日期是今年第几天//withYear(int year) LocalDate 修改当前对象的年份//withMonth(int month) LocalDate 修改当前对象的月份//withDayOfMonth(int dayOfMonth) LocalDate 修改当前对象在当月的日期//plusYears(long yearsToAdd) LocalDate 当前对象增加指定的年份数//plusMonths(long monthsToAdd) LocalDate 当前对象增加指定的月份数//plusWeeks(long weeksToAdd) LocalDate 当前对象增加指定的周数//plusDays(long daysToAdd) LocalDate 当前对象增加指定的天数//minusYears(long yearsToSubtract) LocalDate 当前对象减去指定的年数//minusMonths(long monthsToSubtract) LocalDate 当前对象减去注定的月数//minusWeeks(long weeksToSubtract) LocalDate 当前对象减去指定的周数//minusDays(long daysToSubtract) LocalDate 当前对象减去指定的天数//compareTo(ChronoLocalDate other) int 比较当前对象和other对象在时间上的大小，返回值如果为正，则当前对象时间较晚，//isBefore(ChronoLocalDate other) boolean 比较当前对象日期是否在other对象日期之前//isAfter(ChronoLocalDate other) boolean 比较当前对象日期是否在other对象日期之后//isEqual(ChronoLocalDate other) boolean 比较两个日期对象是否相等</code></pre></li></ul></li><li><p>日期格式化</p><ul><li><p>常用的占位符</p><pre><code>y　　四位数年年份M　　月d　　日h　　时 在上午或下午 (1~12)H　　时 在一天中 (0~23)m　　分s　　秒S　　毫秒</code></pre></li><li><p>日期格式化DateTimeFormatter</p><pre><code>LocalDateTime ldt = LocalDateTime.now();DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");String ldtStr = dtf.format(ldt);</code></pre></li><li><p>计算时间差</p><pre><code>LocalDateTime today = LocalDateTime.now();//自定义时间LocalDateTime changeDate = LocalDateTime.of(2020,10,1,10,40,30);//第二个参数减第一个参数Duration duration = Duration.between( today,changeDate);//两个时间差的天数System.out.println(duration.toDays());//两个时间差的小时数System.out.println(duration.toHours());//两个时间差的分钟数System.out.println(duration.toMinutes());//两个时间差的毫秒数System.out.println(duration.toMillis());//两个时间差的纳秒数System.out.println(duration.toNanos());</code></pre></li></ul></li></ul><h3 id="33-Java-常见class类"><a href="#33-Java-常见class类" class="headerlink" title="33.Java 常见class类"></a>33.Java 常见class类</h3><ul><li><p>Object类位于java.lang包中，java.lang包含着Java最基础和核心的类，在编译时会自动导入</p></li><li><p>常见方法</p><pre><code>public final native Class&lt;?&gt; getClass()讲解：获取对象的运行时class对象，class对象就是描述对象所属类的对象, 类的对象可以获取这个类的基本信息，如名、包、字段、方法等（用于反射会比较多）public native int hashCode()讲解：获取对象的散列值，集合框架中应用，比如HashMappublic boolean equals(Object obj)讲解：比较两个对象，如果这两个对象引用指向的是同一个对象，那么返回true，否则返回falsepublic String toString()讲解：用于返回一个可代表对象的字符串，默认返回格式如下：对象的class名称 +@ + hashCode的十六进制字符串</code></pre></li><li><p>native 方法 ，本地方法，具体是用C（C++）在DLL中实现的，然后通过JNI调用</p></li><li><p>JNI: Java平台和本地C（C++）代码进行互操作的API，称为Java Native Interface (Java本地接口)</p></li></ul><h3 id="34-Java-Math类"><a href="#34-Java-Math类" class="headerlink" title="34.Java Math类"></a>34.Java Math类</h3><ul><li><p>常见API</p><pre><code>//计算平方根System.out.println(Math.sqrt(16));//计算立方根System.out.println(Math.cbrt(8));//两个数的最大/小值，支持int, long, float,doubleSystem.out.println(Math.max(2.9,4.5));System.out.println(Math.min(2.9,4.5));//ceil向上取整，向更大的值方向靠拢System.out.println(Math.ceil(19.7));System.out.println(Math.ceil(-20.1));//floor向下取整，向更小的值方向靠拢System.out.println(Math.floor(19.7));System.out.println(Math.floor(-20.1));//随机数System.out.println(Math.random()); //小于1大于等于0的double类型的数//产生1到10的随机数，int方法进行转换它会去掉小数点后面的数字即只获取整数部分,不是四舍五入int random=(int)(Math.random()*10+1);System.out.println(random);</code></pre></li></ul><h3 id="35-Java-String讲解"><a href="#35-Java-String讲解" class="headerlink" title="35.Java String讲解"></a>35.Java String讲解</h3><ul><li><p>字符串比较内容是否相等</p><ul><li>== 是比较地址</li><li>内容是否相等需要用 equals()方法比较</li></ul></li><li><p>常见API</p><pre><code>String str = "ldclass.club";String str2 = new String("ldclass.club");//获取字符串长度System.out.println(str.length());//通过下标获取字符System.out.println(str.charAt(5));//字符串比较System.out.println(str.equals(str2));System.out.println(str == str2);//字符串比较忽略大小写System.out.println(str.equalsIgnoreCase(str2));//查找字符出现的位置System.out.println(str.indexOf("."));//字符串截取System.out.println(str.substring(str.indexOf(".")));System.out.println(str.substring(0,3));//字符串拆分String [] arr = str.split("\\.");//字符串替换str.replace(".",",");System.out.println(str);//字符串大小写转换str.toUpperCase();str.toLowerCase();//字符串去空格str.trim();</code></pre></li><li><p>其他类型和字符串互相转换</p><pre><code>boolean bool = Boolean.getBoolean("false"); //字符串类型转换为布尔类型int integer = Integer.parseInt("20"); //字符串类型转换为整形long LongInt = Long.parseLong("1024"); //字符串类型转换为长整形float f = Float.parseFloat("1.521"); //字符串类型转换为单精度浮点型double d = Double.parseDouble("1.52123");//字符串类型转换为双精度浮点型</code></pre></li></ul><h3 id="36-Java-System类"><a href="#36-Java-System类" class="headerlink" title="36.Java System类"></a>36.Java System类</h3><ul><li><p>常用API</p><pre><code>//输入输出包含三个成员变量，分别是in，out，errSystem.out //常用调试System.in //用于数据读取，少用System.err //用在错误输出，少用//获取系统当前毫秒值System.currentTimeMillis()//获取系统环境的属性System.getProperties()//根据指定key获取系统属性System.getProperty(key)</code></pre></li></ul><h3 id="37-Java-包装数据类型"><a href="#37-Java-包装数据类型" class="headerlink" title="37.Java 包装数据类型"></a>37.Java 包装数据类型</h3><ul><li><p>集合框架里面需要存储对象，不能存储基本数据类型，所以需要存储包装类型</p></li><li><p>Java里面的包装数据类型</p><pre><code>基本类型　   包装器器类型boolean      Booleanchar         Characterint         Integerbyte         Byteshort         Shortlong         Longfloat         Floatdouble         Double</code></pre></li><li><p>互相转换</p><pre><code>//int&lt;==&gt;Integerint i1 = 0;Integer integer1 = new Integer(i);Integer integer2 = new Integer(0);int i2 = integer2.intValue();//boolean&lt;==&gt;BooleanBoolean booleanObj1 = new Boolean(false);boolean baseBool1 = booleanObj1.booleanValue();boolean baseBool2 = false;Boolean booleanObj2 = new Boolean(baseBool2);</code></pre></li><li><p>基本数据类型和包装数据类型区别</p><ul><li>基本数据类型不用new, 包装类型需要使用new关键字来在堆中分配存储空间</li><li>存储方式及位置不同，基本类型是直接将变量值存储在栈中，包装类型是将对象放在堆中，然后通过引用来使用</li><li>初始值不同，基本类型的初始值如int为0，boolean为false，包装类型的初始值为null</li></ul></li></ul><h3 id="38-Java-enum枚举"><a href="#38-Java-enum枚举" class="headerlink" title="38.Java enum枚举"></a>38.Java enum枚举</h3><ul><li><p>enum</p><pre><code>   //枚举类型，使用关键字enum    enum DayEnum {        MONDAY, TUESDAY, WEDNESDAY,        THURSDAY, FRIDAY, SATURDAY, SUNDAY    }    enum SexEnum {        BOY,GIRL    }</code></pre></li><li><p>常见API</p><pre><code>//返回此枚举常量的名称name()//该方法获取的是枚举变量在枚举类中声明的顺序，下标从0开始（它在枚举声明中的位置，其中初始常量序数为零,如果枚举的位置发生变化，对应的值也会变化）ordinal()//和name方法一样toString()</code></pre></li><li><p>默认生成的values方法与valueOf方法 </p><ul><li>通过字符串获取对应的枚举值 valueOf()</li><li>获取枚举类中的所有变量，并作为数组返回 values()</li></ul></li></ul><h3 id="39-网络请求http基础知识讲解"><a href="#39-网络请求http基础知识讲解" class="headerlink" title="39.网络请求http基础知识讲解"></a>39.网络请求http基础知识讲解</h3><ul><li><p>网络由下往上分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p><ul><li><p>IP协议对应于网络层</p></li><li><p>TCP协议对应于传输层</p></li><li><p>HTTP协议对应于应用层， 还有FTP、TELNET等</p><pre><code>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输HTTP是应用层协议，主要解决如何包装使用数据，由请求和响应构成</code></pre></li></ul></li><li><p>HTTP协议 </p><ul><li>HTTP协议即超文本传送协议(Hypertext Transfer Protocol )，是Web联网的基础，也是手机PC联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，从建立连接到关闭连接的过程称为“一次连接”</li><li>HTTP请求</li><li>HTTP响应</li><li>响应码： <ul><li>1xx:信息 </li><li>2xx:成功 <ul><li>200 OK，请求正常 </li></ul></li><li>3xx:重定向 </li><li>4xx:客户端错误 <ul><li>404 Not Found服务器无法找到被请求的页面 </li></ul></li><li>5xx:服务器错误<ul><li>503 Service Unavailable，服务器挂了或者不可用</li></ul></li></ul></li></ul></li><li><p>统一资源定位符URL</p><pre><code>标准格式: 协议://服务器IP:端口/路径1/路径N ? key1=value1 &amp; key2=value2协议：不同的协议有不同的解析方式服务器ip: 网络中存在无数的主机,要访问的哪一台, 通过公网ip区分端口: 一台主机上运行着很多的进程，为了区分不同进程，一个端口对应一个进程，http默认的端口是80路径: 资源N多种，为了更进一步区分资源所在的路径（后端接口，一般称为 “接口路径”，“接口”）</code></pre></li><li><p>URL和URLConnection</p><ul><li><p>URL类 java.net包中定义了URL类</p></li><li><p>构造函数</p><pre><code>public URL(String spec)</code></pre></li><li><p>API</p><pre><code>//(1)public static void main(String[] args) throws IOException {        URL url = new URL("http://xxx.xxx.xxx.xxx:xxxx/xxx/xxx/xxx?xxx=xxx&amp;xxx=xxx");        System.out.println("getHost= "+ url.getHost());        System.out.println("getProtocol= "+ url.getProtocol());        System.out.println("getPort= "+ url.getPort());        System.out.println("getPath= "+ url.getPath());        System.out.println("getQuery= "+ url.getQuery());        //getPath和getQuery的组合        System.out.println("getFile= "+ url.getFile());        //获取对应的连接对象        HttpURLConnection httpURLConnection = (HttpURLConnection)url.openConnection();}</code></pre></li><li><p>HttpURLConnection</p><ul><li><p>java.net包中提供了访问HTTP协议的类，继承自URLConnection</p></li><li><p>API</p><pre><code>//设置请求方式 setRequestMethod();//获取服务器的响应代码 int getResponseCode()//返回URL的输入流，用于读取资源 public InputStream getInputStream()</code></pre><pre><code>//接上(1)//(2)HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();//获取响应码int responseCode = httpURLConnection.getResponseCode();if (200 &lt;= responseCode &amp;&amp; responseCode &lt;= 299) {    try (InputStream inputStream = httpURLConnection.getInputStream();        BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {            StringBuilder response = new StringBuilder();            String currentLine;            while ((currentLine = in.readLine()) != null) {                response.append(currentLine);            }             System.out.println(response.toString());            } catch (Exception e) {                e.printStackTrace();            }          }</code></pre></li></ul></li></ul></li></ul><h3 id="40-Java-Json讲解"><a href="#40-Java-Json讲解" class="headerlink" title="40.Java Json讲解"></a>40.Java Json讲解</h3><ul><li><p>格式 key value 键值对： </p><ul><li>花括号保存对象 {“key”:”value”}</li><li>方括号保存数组[{“key”:”value”},{“key”:”value”}]</li></ul></li><li><p>值类型</p><ul><li>数字（整数或浮点数） </li><li>字符串（在双引号中） </li><li>逻辑值（true 或 false） </li><li>数组（在方括号中） </li><li>对象（在花括号中） </li><li>null</li></ul></li><li><p>json字符串</p><ul><li>json对象被序列化为字符串，就叫json字符串，和对象可以互相转换</li></ul></li><li><p>常见JSON库</p><ul><li><p>Gson Google开源</p><pre><code>//接上(2)String jsonStr = response.toString();//json字符串串转成对象Gson gson=new Gson();Map&lt;String,Object&gt; objectMap = gson.fromJson(jsonStr,Map.class);Object codeObj = objectMap.get("code");System.out.println(codeObj);</code></pre></li><li><p>FastJson 阿里巴巴开源</p></li><li><p>Jackson、Json-lib等</p></li></ul></li></ul><h3 id="41-System-in-和-Scanner实时获取用户输入"><a href="#41-System-in-和-Scanner实时获取用户输入" class="headerlink" title="41.System.in 和 Scanner实时获取用户输入"></a>41.System.in 和 Scanner实时获取用户输入</h3><ul><li><p>Scanner类</p><ul><li>位于java.util包下，可以通过 Scanner 类来获取用户的输入</li></ul></li><li><p>API</p><pre><code>//获取输入的字符串，以回车换行符为结束标识public String nextLine()//获取输入的整数public int nextInt()//还有nextShort, nextFloat, nextDouble</code></pre></li><li><p>实例</p><pre><code>//构造函数传入输入流public Scanner(InputStream source)//传入键盘输入流Scanner s = new Scanner(System.in);  public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        while (true) {            System.out.println("请输入 : ");            String input = scanner.nextLine();            //如果输入的是886，则结束对话            if (input.equalsIgnoreCase("886")) {                System.out.println("欢迎下次使用,拜拜");                break;            } else {                System.out.println("您输入的是 : " + input);            }        }        scanner.close();    }</code></pre></li></ul><h3 id="42-Java项目打包"><a href="#42-Java项目打包" class="headerlink" title="42.Java项目打包"></a>42.Java项目打包</h3><ul><li>File –&gt; Project Structure –&gt; artifacts -&gt; + –&gt; jar -&gt; from modules with…–&gt; 选主类和第一个单向按钮–&gt;确定后 会生成MANIFEST.MF文件</li><li>菜单栏 build-&gt;build artifacts -&gt; build</li><li>java -jar xxx.jar 启动</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="2020/10/15/hexo-chang-yong-ming-ling/"/>
      <url>2020/10/15/hexo-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>Hexo命令</p><a id="more"></a><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><pre><code>hexo new "postName"       #新建文章hexo new page "pageName"  #新建页面hexo clean                   #清空资源hexo generate             #生成资源hexo server --port==8000  #开启访问（默认端口4000，`ctrl + c` 关闭），查看帮助（hexo server -help）hexo deploy               #部署到GitHub/Gitee</code></pre><h3 id="2-简写"><a href="#2-简写" class="headerlink" title="2.简写"></a>2.简写</h3><pre><code>hexo n         ==   hexo newhexo g         ==   hexo generatehexo s -p 8000 ==   hexo server --port=8000hexo d         ==   hexo deploy</code></pre><h3 id="3-常用复合命令"><a href="#3-常用复合命令" class="headerlink" title="3.常用复合命令"></a>3.常用复合命令</h3><pre><code>hexo deploy -ghexo server -g</code></pre><h3 id="4-文章加密"><a href="#4-文章加密" class="headerlink" title="4.文章加密"></a>4.文章加密</h3><pre><code>password: #密码abstract: #列表页显示信息message:  #密码框提示新信息</code></pre><h3 id="5-引入图片"><a href="#5-引入图片" class="headerlink" title="5.引入图片"></a>5.引入图片</h3><pre><code>{% asset_img 图片.jpg/png 图片描述 %}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
