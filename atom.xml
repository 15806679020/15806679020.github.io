<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌生的小窝</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ldclass.club/"/>
  <updated>2021-05-27T07:10:11.686Z</updated>
  <id>http://www.ldclass.club/</id>
  
  <author>
    <name>Dong Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx虚拟目录alias和root目录</title>
    <link href="http://www.ldclass.club/2021/05/27/nginx-xu-ni-mu-lu-alias-he-root-mu-lu/"/>
    <id>http://www.ldclass.club/2021/05/27/nginx-xu-ni-mu-lu-alias-he-root-mu-lu/</id>
    <published>2021-05-27T14:59:42.000Z</published>
    <updated>2021-05-27T07:10:11.686Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的：</p><ul><li>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；</li><li>root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；</li><li>使用alias标签的目录块中不能使用rewrite的break；另外，alias指定的目录后面必须要加上”/“符号！！</li><li>alias虚拟目录配置中，location匹配的path目录如果后面不带”/“，那么访问的url地址中这个path目录后面加不加”/“不影响访问，访问时它会自动加上”/“；但是如果location匹配的path目录后面加上”/“，那么访问的url地址中这个path目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！</li><li>root目录配置中，location匹配的path目录后面带不带”/“，都不会影响访问。</li></ul></li><li><p>示例</p></li></ul><pre class="line-numbers language-nginx"><code class="language-nginx">        <span class="token keyword">location</span>  <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#location匹配访问的path目录名与项目路径一致时，可以使用alias 也可以使用root</span>        <span class="token keyword">location</span> <span class="token operator">/</span>build <span class="token punctuation">{</span>            <span class="token keyword">alias</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#/usr/local/excalidraw下必须有build目录</span>        <span class="token keyword">location</span> <span class="token operator">/</span>build<span class="token punctuation">{</span>            <span class="token keyword">root</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#location匹配访问的path目录名与项目路径不一致时，不能直接更改为root</span>        <span class="token keyword">location</span> <span class="token operator">/</span>excalidraw <span class="token punctuation">{</span>            <span class="token keyword">alias</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>excalidraw<span class="token operator">/</span>build<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所以，一般情况下，在nginx配置中的良好习惯是：<ul><li>在location /中配置root目录；</li><li>在location /path中配置alias虚拟目录。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
      <category term="Alias" scheme="http://www.ldclass.club/categories/Nginx/Alias/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
      <category term="Alias" scheme="http://www.ldclass.club/tags/Alias/"/>
    
  </entry>
  
  <entry>
    <title>windows使用nvm管理node版本</title>
    <link href="http://www.ldclass.club/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/"/>
    <id>http://www.ldclass.club/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/</id>
    <published>2021-05-27T13:59:56.000Z</published>
    <updated>2021-05-27T07:32:32.348Z</updated>
    
    <content type="html"><![CDATA[<ul><li>需要在同一台机器上安装多个版本的Node，使用<code>nvm</code>来做Node版本的管理。</li></ul><blockquote><p>安装前需要先将之前安装的Node版本完全删除</p></blockquote><ul><li><p>Windows设置 –&gt; 应用–&gt; 找到Node–&gt;点击卸载</p></li><li><p>重启电脑（或者从任务管理器中杀死所有Node相关的进程）</p></li><li><p>寻找以下文件夹并删除他们。根据您安装的版本，这些文件可能存在也可能不存在：</p><ul><li>C:\Program Files (x86)\Nodejs</li><li>C:\Program Files\Nodejs</li><li>C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）</li><li>C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）</li></ul></li><li><p>检查%PATH%环境变量，确保没有引用Nodejs和npm的存在</p></li><li><p>重启（重启大法解决90%问题）</p></li></ul><blockquote><p>下载安装</p></blockquote><ul><li>链接：<code>https://github.com/coreybutler/nvm-windows/releases</code></li><li>可下载以下版本：<ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul></li><li>双击解压后的文件<code>nvm-setup.exe</code></li><li>选择nvm安装路径<ul><li>在选择文件夹的时候，需要注意，文件夹名不要出现 <code>中文</code> 和 <code>空格</code></li></ul></li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/1.png" title="选择nvm安装路径"><ul><li>选择nodejs安装路径</li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/2.png" title="选择nodejs安装路径"><ul><li>检查是否安装成功<ul><li>打开cmd，输入<code>nvm</code>，安装成功则会如下图所示，它会显示出当前nvm版本以及nvm的命令：</li></ul></li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/3.png" title="检查是否安装成功"><blockquote><p>环境变量</p></blockquote><ul><li>安装好之后，环境变量会自动设置好</li></ul><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/4.png" title="环境变量"><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/5.png" title="环境变量"><blockquote><p>使用</p></blockquote><ul><li>nvm list 命令 - 显示版本列表</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm list // 显示已安装的版本（同 nvm list installed）nvm list installed // 显示已安装的版本nvm list available // 显示所有可以下载的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>nvm install 命令 - 安装指定版本nodejs<ul><li>在运行<code>nvm install</code> 的时候，有可能会出现无权限安装的问题，如果遇到此问题，请 <code>以管理员身份运行</code> cmd。</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm install 14.5.0 // 安装14.5.0版本nodenvm install latest // 安装最新版本node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>nvm uninstall 命令 - 卸载指定版本 node</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm uninstall 14.5.0 // 卸载14.5.0版本node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>nvm use 命令 // 使用指定版本Node</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm use 14.5.0 // 使用14.5.0版本node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能遇到的问题</p></blockquote><ul><li><p>错误一：无法安装npm</p><img src="/2021/05/27/windows-shi-yong-nvm-guan-li-node-ban-ben/6.png" title="错误一"><ul><li><p>可行的解决方法：</p><ul><li>使用nvm-windows高版本时需要单独另外安装npm，nvm只是用来管理node版本的，没有管理npm功能</li><li>为 nvm 设置淘宝镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nvm uninstall 14.5.0nvm npm_mirror https://npm.taobao.org/mirrors/npm/nvm install 14.5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;需要在同一台机器上安装多个版本的Node，使用&lt;code&gt;nvm&lt;/code&gt;来做Node版本的管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;安装前需要先将之前安装的Node版本完全删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
      <category term="Node" scheme="http://www.ldclass.club/categories/Node/"/>
    
      <category term="nvm" scheme="http://www.ldclass.club/categories/Node/nvm/"/>
    
    
      <category term="Node" scheme="http://www.ldclass.club/tags/Node/"/>
    
      <category term="nvm" scheme="http://www.ldclass.club/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>linux安装nodejs</title>
    <link href="http://www.ldclass.club/2021/05/27/linux-an-zhuang-nodejs/"/>
    <id>http://www.ldclass.club/2021/05/27/linux-an-zhuang-nodejs/</id>
    <published>2021-05-27T11:51:13.000Z</published>
    <updated>2021-05-27T04:15:33.825Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
      <category term="nodejs" scheme="http://www.ldclass.club/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://www.ldclass.club/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>linux安装yarn</title>
    <link href="http://www.ldclass.club/2021/05/27/linux-an-zhuang-yarn/"/>
    <id>http://www.ldclass.club/2021/05/27/linux-an-zhuang-yarn/</id>
    <published>2021-05-27T11:50:51.000Z</published>
    <updated>2021-05-27T04:15:16.328Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
      <category term="yarn" scheme="http://www.ldclass.club/categories/yarn/"/>
    
    
      <category term="yarn" scheme="http://www.ldclass.club/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>iframe标签开启麦克风和摄像权限</title>
    <link href="http://www.ldclass.club/2021/05/23/ifame-biao-qian-kai-qi-mai-ke-feng-he-she-xiang-quan-xian/"/>
    <id>http://www.ldclass.club/2021/05/23/ifame-biao-qian-kai-qi-mai-ke-feng-he-she-xiang-quan-xian/</id>
    <published>2021-05-22T22:47:14.000Z</published>
    <updated>2021-05-22T16:31:15.512Z</updated>
    
    <content type="html"><![CDATA[<ul><li>直接通过html<ul><li>使用iframe进行嵌入调用：可以调取麦克风和摄像头</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">&lt;iframe id="refFrame" allow="microphone;camera;midi;encrypted-media;" src = "https://XXXX"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在vue框架中<ul><li>在vue模板中，直接嵌入iframe去调用也是不行的；</li><li>在vue中嵌入iframe去调取摄像头和麦克风，iframe的allow的属性必须得通过js的方式添加进去</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">&lt;iframe id="refFrame"  src = "https://XXXX"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调取摄像头和麦克风</span>    <span class="token keyword">var</span> iframeElment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>refFrame    <span class="token keyword">if</span> <span class="token punctuation">(</span>iframeElment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iframeElment<span class="token punctuation">.</span>allow <span class="token operator">=</span> <span class="token string">'microphone;camera;midi;encrypted-media;'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;直接通过html&lt;ul&gt;
&lt;li&gt;使用iframe进行嵌入调用：可以调取麦克风和摄像头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-html&quot;&gt;&lt;code class=&quot;language-ht
      
    
    </summary>
    
      <category term="Html" scheme="http://www.ldclass.club/categories/Html/"/>
    
      <category term="iframe" scheme="http://www.ldclass.club/categories/Html/iframe/"/>
    
    
      <category term="Html" scheme="http://www.ldclass.club/tags/Html/"/>
    
      <category term="iframe" scheme="http://www.ldclass.club/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>hexo+阿里云+域名部署个人微博</title>
    <link href="http://www.ldclass.club/2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/"/>
    <id>http://www.ldclass.club/2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/</id>
    <published>2021-05-19T16:23:57.000Z</published>
    <updated>2021-05-19T08:54:34.336Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3></li><li><h4 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h4><ul><li>为了使本地可以跟远程的github建立联系，需要在本地配置SSH密钥，这样就可以在本地直接提交代码到GitHub上或者远端git仓库。</li><li>如果你是第一次配置SSH，则配置一下git的username 和 email</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ git config --global user.name "你要设置的名字"$ git config --global user.email "你要设置的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>生成SSH密钥：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ ssh-keygen -t rsa -C "你刚刚设置的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果不需要设置密码的话，连续三次回车即可。在这之后会得到两个文件： id_rsa 和 id_rsa.pub，找到id_rsa.pub文件，复制其内容。</li></ul></li><li><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3></li><li><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><ul><li><p>安装git：<code>yum install git</code></p></li><li><p>创建git账户：<code>adduser git</code></p></li><li><p>添加git账户权限：<code>chmod 740 /etc/sudoers</code></p></li><li><p>编辑sudoers：<code>vim /etc/sudoers</code></p><ul><li>在<code>root ALL=(ALL) ALL</code> 下面添加<code>git    ALL=(ALL)   ALL</code></li></ul></li><li><p>改回权限：<code>chmod 400 /etc/sudoers</code></p></li><li><p>设置git账户密码：<code>passwd git</code></p></li><li><p>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p><pre class="line-numbers language-shell"><code class="language-shell">su gitmkdir ~/.sshvim ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>按”i”进入编辑模式，将本地生成的id_rsa.pub文件中的公钥复制到authorized_keys中，按”esc”，然后按”:wq”，保存退出。</li></ul></li><li><p>接着，输入一下命令，赋予权限</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 600 /home/git/.ssh/authorized_keyschmod 700 /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后输入你之前配置的git密码，无报错就说明好了。</p><p>打开终端，输入以下命令，其中SERVER填写自己的云主机ip，执行输入yes后不用密码说明配置成功了。</p><pre class="line-numbers language-shell"><code class="language-shell">ssh -v git@SERVER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h4 id="创建仓库目录及相关配置"><a href="#创建仓库目录及相关配置" class="headerlink" title="创建仓库目录及相关配置"></a>创建仓库目录及相关配置</h4><ul><li><p>创建目录</p><ul><li>在var目录下创建repo作为Git仓库目录，返回服务端命令行切换到root账户，然后输入：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir /var/repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋予权限</p><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repochmod -R 755 /var/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建hexo目录作为网站根目录，并赋予权限：</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir /var/hexochown -R git:git /var/hexochmod -R 755 /var/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个空白的git仓库</p><pre class="line-numbers language-shell"><code class="language-shell">cd /var/repogit init --bare hexo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建一个新的 Git 钩子，用于自动部署</p><ul><li>在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim /var/repo/hexo.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>进入编辑模式，然后将下面那两行代码粘贴进去，保存退出。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashgit --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改权限</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repo/hexo.git/hooks/post-receivechmod +x /var/repo/hexo.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Git仓库搭建完毕</p></li></ul></li><li><h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><ul><li>具体步骤查看本微博中Ngnix篇</li></ul></li><li><h4 id="修改Hexo配置"><a href="#修改Hexo配置" class="headerlink" title="修改Hexo配置"></a>修改Hexo配置</h4><ul><li>进入本地电脑hexo博客的根目录，编辑<strong>站点配置文件 _config.yml</strong>，找到deploy，修改成以下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">deploy:  type: git  #repo改为repo: git@你的域名:/var/repo/hexo.git  repo: git@example.com:/var/repo/hexo.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后在本地电脑hexo博客的根目录，打开终端，输入以下命令部署</li></ul><pre class="line-numbers language-shell"><code class="language-shell">hexo cleanhexo dhexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>可能出现问题，导致部署到git失败。</p></li><li><p>问题一：权限</p><img src="/2021/05/20/hexo-a-li-yun-yu-ming-bu-shu-ge-ren-wei-bo/1.png" title="git发布失败"><ul><li>解决：在服务器终端输入以下命令即可</li></ul><pre class="line-numbers language-shell"><code class="language-shell">chown -R git:git /var/repo/chown -R git:git /var/hexo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后再<code>hexo d -g</code>部署，用域名访问即可看到部署成功了。</li></ul></li><li><p>问题二：秘钥</p><ul><li><p>在使用git提交代码时出现 fatal: Could not read from remote repository 这个错误</p></li><li><p>解决：</p><ul><li>首先，将本地生成的 id_rsa以及id_rsa.pub这两个文件删除掉</li><li>然后，使用命令 ssh-keygen -t rsa -C “邮箱地址”重新生成密钥</li><li>最后，重新将id_rsa.pub文件里的内容复制到服务器的authorized_keys中</li></ul></li></ul></li><li><p>问题三</p><ul><li><p>Git提交时提示‘The file will have its original line endings in your working directory’</p></li><li><p>解决：</p><ul><li>Gitshell中输入如下命令解决：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">git config --global core.autocrlf false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;本地部署&quot;&gt;&lt;a href=&quot;#本地部署&quot; class=&quot;headerlink&quot; title=&quot;本地部署&quot;&gt;&lt;/a&gt;本地部署&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;配置SSH密钥&quot;&gt;&lt;a href=&quot;#配置SSH密钥&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Hexo" scheme="http://www.ldclass.club/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.ldclass.club/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux调试常用命令</title>
    <link href="http://www.ldclass.club/2021/05/18/linux-diao-shi-chang-yong-ming-ling/"/>
    <id>http://www.ldclass.club/2021/05/18/linux-diao-shi-chang-yong-ming-ling/</id>
    <published>2021-05-18T13:45:45.000Z</published>
    <updated>2021-05-18T10:32:35.532Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Linux 查看端口占用情况</p><ul><li><code>lsof</code>：lsof -i 需要 root 用户的权限来执行</li></ul><pre class="line-numbers language-shell"><code class="language-shell">lsof -i:端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># lsof -i:8000COMMAND   PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAMEnodejs  26993 root   10u  IPv4 37999514      0t0  TCP *:8000 (LISTEN)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>netstat</code>：netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">netstat -tunlp | grep 端口号-t (tcp) 仅显示tcp相关选项-u (udp)仅显示udp相关选项-n 拒绝显示别名，能显示数字的全部转化为数字-l 仅列出在Listen(监听)的服务状态-p 显示建立相关链接的程序名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># netstat -tunlp | grep 8000tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      26993/nodejs   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更多命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">netstat -ntlp   //查看当前所有tcp端口netstat -ntulp | grep 80   //查看所有80端口使用情况netstat -ntulp | grep 3306   //查看所有3306端口使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>netstat无法显示PID或进程名<ul><li>解决：使用root执行</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name   tcp        0      0 172.23.154.139:56000    0.0.0.0:*               LISTEN      131/sshd            tcp        0      0 172.23.154.139:36000    0.0.0.0:*               LISTEN      125/sshd            tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      32547/mysqld        tcp        0      0 0.0.0.0:41069           0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:31101           0.0.0.0:*               LISTEN      -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>linux 读写权限</p><ul><li>设置文件夹的读写权限:<ul><li>读取权限 r = 4 </li><li>写入权限 w = 2 </li><li>执行权限 x = 1 </li><li>sudo chmod -R 777 /data</li></ul></li><li>权限码描述<ul><li>sudo chmod 600 ××× （只有所有者有读和写的权限）</li><li>sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</li><li>sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）</li><li>sudo chmod 666 ××× （每个人都有读和写的权限）</li><li>sudo chmod 777 ××× （每个人都有读和写以及执行的权限）</li></ul></li><li>-R表示包含设置所有子目录</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linux 查看端口占用情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsof&lt;/code&gt;：lsof -i 需要 root 用户的权限来执行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code
      
    
    </summary>
    
      <category term="linux" scheme="http://www.ldclass.club/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.ldclass.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux安装mysql</title>
    <link href="http://www.ldclass.club/2021/05/18/linux-an-zhuang-mysql/"/>
    <id>http://www.ldclass.club/2021/05/18/linux-an-zhuang-mysql/</id>
    <published>2021-05-18T11:33:44.000Z</published>
    <updated>2021-05-18T09:41:46.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>卸载历史版本</p></blockquote><ul><li>查询系统是否已安装mysql，如果已安装则卸载，并删除mysql相关目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">rpm -qa mysql*find / -name mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>解压</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd /opt/tar -zvxf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装</p></blockquote><ul><li>如果目录下磁盘空间较小，可以将数据目录放在其他位置，在初始化参数中数据文件目录以及/etc/my.cnf 文件中写清</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mv mysql-5.7.28-linux-glibc2.12-x86_64 /usr/local/mysqlcd /usr/local/mysql/mkdir datagroupadd mysqluseradd -r -g mysql mysqlchown -R mysql:mysql /usr/local/mysql/cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqldln -s /usr/local/mysql/bin/mysql /usr/bin/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化</p></blockquote><ul><li>删除系统默认的配置文件，复制配置信息到/etc/my.cnf 中</li></ul><pre class="line-numbers language-shell"><code class="language-shell">rm -rf /etc/my.cnf /etc/my.cnf.d /usr/my.cnf /usr/my-new.cnftouch /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置信息如下（二选其一）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/usr/local/mysql/mysql.socksql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESport=13306# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0#skip-grant-tables[mysqld_safe]#log-error=/var/log/mariadb/mariadb.log#pid-file=/var/run/mariadb/mariadb.pid# include all files from the config directory[client]socket=/usr/local/mysql/mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/usr/local/mysql/mysql.socksql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# 访问端口port = 13306# 允许连接的客户端IP。临时只允许通过本地访问数据库,禁止外部连接.删除或注释掉bindaddress即可放开访问权限# bind-address = 127.0.0.1# 开启事件功能event_scheduler=ON# ------开始 慢SQL日志相关配置----------------# 开启慢SQL记录slow_query_log = 1# 记录执行时间超过3秒的SQL语句long_query_time = 5# 指定慢SQL记录输出日志文件slow_query_log_file = slow.log# 是否记录未走索引的SQL语句log_queries_not_using_indexes = 0log_throttle_queries_not_using_indexes = 500# 日志内容过期时间expire_logs_days = 30# 过滤最小检索行数min_examined_row_limit = 100binlog-rows-query-log-events = 1log-bin-trust-function-creators = 1log_timestamps=systemlog_slow_admin_statements = 1log_slow_slave_statements = 1# ------结束 慢SQL日志相关配置----------------# 避免timestamp格式数据无法导入问题explicit_defaults_for_timestamp = ON# Disabling symbolic-links is recommended to prevent assorted securityriskssymbolic-links=0[client]socket=/usr/local/mysql/mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化mysql数据库</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd bin/./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>启动mysql服务</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd ../support-files/./mysql.server start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>配置</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -p输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>进入mysql交互操作界面</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--修改密码</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'Root@123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--开启远程访问</span>mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> <span class="token keyword">user</span><span class="token punctuation">.</span>Host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">User</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--刷新权限</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>防火墙开放，测试连接</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --state    #查看状态firwall-cmd --permanent --add-port=13306/tcp #开放13306端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;卸载历史版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查询系统是否已安装mysql，如果已安装则卸载，并删除mysql相关目录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/categories/MYSQL/linux/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx.conf常用配置</title>
    <link href="http://www.ldclass.club/2021/05/18/nginx-conf-chang-yong-pei-zhi/"/>
    <id>http://www.ldclass.club/2021/05/18/nginx-conf-chang-yong-pei-zhi/</id>
    <published>2021-05-18T11:32:24.000Z</published>
    <updated>2021-05-18T08:21:47.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>https</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {    #    listen       80;    #    server_name  192.168.8.104;#        location /test/file {#            # 服务默认启动目录 #           alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    server {        listen       9998 ssl;        server_name  localhost;        ssl_certificate      server.crt;        ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            #静态资源路径            root   html/webim;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>http</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {        #listen       80;        #server_name  192.168.8.104;        #location /test/file {            # 服务默认启动目录     #       alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    server {        listen            8081;        server_name        localhost;        location /{            root html\static;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        location /api/{            proxy_pass http://localhost:5000/;            proxy_set_header Host $http_host;            proxy_set_header X-Real_IP $remote_addr;            proxy_set_header REMOTE-HOST $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            add_header Access-Control-Allow-Origin *;            add_header Access-Control-Allow-Methods "DELETE,POST,GET,OPTIONS";            add_header Access-Control-Allow-Headers "Origin,Authorization,Accept";            add_header Access-Control-Allow-Credentials true;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       9998 ssl;   #     server_name  localhost;  #      ssl_certificate      server.crt; #       ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;#        ssl_session_timeout  5m;        #ssl_ciphers  HIGH:!aNULL:!MD5;        #ssl_prefer_server_ciphers  on;        #location / {            #静态资源路径          #  root   html/webim;         #   index  index.html index.htm;        #    chunked_transfer_encoding on;        #    add_header Cache-Control no-cache;        #    try_files $uri $uri/ /index.html;     #   }    #    error_page 500 502 503 504 /50x.html;    #    location = /50x.html {    #        root html;    #    }    #}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;https&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;
#user  nobody;
worker_process
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署tomcat后，页面刷新404</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/</id>
    <published>2021-05-08T14:07:53.000Z</published>
    <updated>2021-05-08T06:10:30.466Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>将 npm run bulid 打包好的 dist文件放到 webapps 目录下<ul><li>访问路径：<code>http://ip:端口/dist</code></li><li>能访问成功，但可能刷新 404</li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>在上传到tomcat 项目的根目录下  创建WEB-INF/web.xml </li><li>在web.xml写入</li></ul><pre class="line-numbers language-xml"><code class="language-xml">在这里插入代码片  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaeehttp://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span> <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Router for Tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将 npm run bulid 打包好的 dist文件放到 webapps 目录下&lt;ul&gt;
&lt;li&gt;访问路径：
      
    
    </summary>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/vue/Tomcat/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>vue使用elementUI组件库在tomcat服务器部署后图标不显示</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/</id>
    <published>2021-05-08T14:00:06.000Z</published>
    <updated>2021-05-08T06:08:07.398Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>vue使用elementUI组件库在tomcat服务器部署后图标不能正常显示</li></ul></li><li><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>通过查看 /build/webpack.base.conf.js 文件可以发现，woff 或 ttf 这些字体会经由 url-loader 处理后在 static/fonts 目录下生成相应的文件。</li><li>也就是说实际应该通过 /static/fonts/** 路径来获取字体图标，而实际我们通过调试窗口发现，却是请求 /static/css/static/fonts/**，自然报错误。 <ul><li><code>GET https://localhost:8443/static/css/static/fonts/element-icons.535877f.woff net::ERR_ABORTED 404</code></li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>打开build/utils.js文件，加上 publicPath: ‘../../‘，如下所示：</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        use<span class="token punctuation">:</span> loaders<span class="token punctuation">,</span>        fallback<span class="token punctuation">:</span> <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span><span class="token string">"../../"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新build，重新部署之后，可以正常显示</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;vue使用elementUI组件库在tomcat服务器部署后图标不能正常显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/Tomcat/vue/"/>
    
      <category term="element" scheme="http://www.ldclass.club/categories/Tomcat/vue/element/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="element" scheme="http://www.ldclass.club/tags/element/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat生成证书配置https</title>
    <link href="http://www.ldclass.club/2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/"/>
    <id>http://www.ldclass.club/2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/</id>
    <published>2021-05-08T11:56:33.000Z</published>
    <updated>2021-05-08T05:37:10.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>tomcat之https配置（生成证书）</p></blockquote><ul><li><h4 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h4><ul><li><p>管理员打开cmd窗口，输入</p><p><code>keytool -genkey -alias tomcat -keyalg RSA -keystore D:\ssl\tomcat.keystore -validity 36500</code></p><p>keytool 是jdk中的工具。</p><p><code>D:\ssl\tomcat.keystore</code> 是证书文件保存位置</p><p><code>tomcat.keystore</code>是证书文件名称</p><p><code>-validity 36500</code> 是证书有效期，36500表示100年，默认值是90天。</p></li><li><p>输入密钥库口令</p><ul><li>输入密钥库密码：此处需要输入大于6个字符的字符串，例如123456</li></ul></li><li><p>输入两次通过后，弹出一些问题</p><ul><li><p>“您的名字与姓氏是什么？” 这是必填项，并且必须是TOMCAT部署主机的域名或者IP [如：baidu.com 或者 127.0.0.1]，就是你将来要在浏览器中输入的访问地址;</p><p>其他得问题可填可不填，最后对照信息正确则输入y，不正确打算重来则输入n。</p></li></ul></li><li><p>输入密钥口令</p><p>密钥库口令，这里我理解的是tomcat的主密码，会在tomcat配置文件中使用，建议输入与keystore的密码一致，设置其它密码也可以生成完成，可在指定目录下找到证书文件。</p></li></ul></li><li><h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><ul><li><p>修改server.xml</p><ul><li>打开tomcat目录下conf/server.xml文件，修改如下</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8999<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>               <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span>                <span class="token attr-name">compression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span>                              <span class="token attr-name">compressionMinSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span>                <span class="token attr-name">maxPostSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>                <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token punctuation">/></span></span>               <span class="token comment" spellcheck="true">&lt;!-- A "Connector" using the shared thread pool--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>        <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span>        <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span>        <span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span>        <span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">sslProtocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TLS<span class="token punctuation">"</span></span>        <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/ssl/tomcat.keystore<span class="token punctuation">"</span></span>        <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改web.xml</p><ul><li>打开conf/web.xml，在最后增加以下代码：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login-config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-method</span><span class="token punctuation">></span></span>CLIENT-CERT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>realm-name</span><span class="token punctuation">></span></span>Client Cert Users-only Area<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>realm-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span><span class="token punctuation">></span></span>SSL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-data-constraint</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transport-guarantee</span><span class="token punctuation">></span></span>CONFIDENTIAL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transport-guarantee</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-data-constraint</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>至此tomcat配置完成，启动tomcat即可使用ssl，在浏览器输入localhost:8080</p><ul><li>Tomcat配置完成后，使用Https访问，Chrome会提示安全警告，点击“高级”，继续访问即可，之后再https下使用ip地址访问是没有问题的。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;tomcat之https配置（生成证书）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;生成ssl证书&quot;&gt;&lt;a href=&quot;#生成ssl证书&quot; class=&quot;headerlink&quot; title=&quot;生成ssl证书&quot;&gt;&lt;/a&gt;生
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="https" scheme="http://www.ldclass.club/categories/Tomcat/https/"/>
    
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
      <category term="https" scheme="http://www.ldclass.club/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>nginx生成证书</title>
    <link href="http://www.ldclass.club/2021/05/08/nginx-sheng-cheng-zheng-shu/"/>
    <id>http://www.ldclass.club/2021/05/08/nginx-sheng-cheng-zheng-shu/</id>
    <published>2021-05-08T11:56:15.000Z</published>
    <updated>2021-05-27T06:00:26.678Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="OpenSSl安装配置"><a href="#OpenSSl安装配置" class="headerlink" title="OpenSSl安装配置"></a>OpenSSl安装配置</h4><ul><li>下载链接：<code>https://slproweb.com/products/Win32OpenSSL.html</code></li><li>安装OpenSSL，右键以管理员身份运行，选择安装路径，安装路径不要带中文。</li><li>OpenSSl环境变量配置<ul><li>变量名：OPENSSL_HOME</li><li>变量值：F:\tool\OpenSSL-Win64</li></ul></li><li>配置PATH<ul><li>在最后添加%OPENSSL_HOME%\bin</li></ul></li></ul></li><li><h4 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h4><ul><li>打开nginx安装目录，进入F:\nginux\nginx-1.17.1\conf，在地址栏输入cmd，按回车，打开命令行窗口</li><li>执行命令：openssl genrsa -des3 -out server.key，需要你设置一个密码</li><li>执创建csr证书，命令：openssl req -new -key server.key -out server.csr，照实填写即可（此处如果报错需先执行：set OPENSSL_CONF=F:\tool\OpenSSL-Win64\bin\openssl.cfg 设置配置文件路径）</li><li>拷贝目录下生成的server.key并重命名为server.key.org</li><li>去除密码，命令：openssl rsa -in server.key.org -out server.key</li><li>生成证书文件server.crt，命令：openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt （-days 365为证书生效时间，可以设长点）</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;OpenSSl安装配置&quot;&gt;&lt;a href=&quot;#OpenSSl安装配置&quot; class=&quot;headerlink&quot; title=&quot;OpenSSl安装配置&quot;&gt;&lt;/a&gt;OpenSSl安装配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下载链接：&lt;code&gt;https://
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
      <category term="https" scheme="http://www.ldclass.club/categories/Nginx/https/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
      <category term="https" scheme="http://www.ldclass.club/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>tomcat部署vue项目</title>
    <link href="http://www.ldclass.club/2021/05/08/tomcat-bu-shu-vue-xiang-mu/"/>
    <id>http://www.ldclass.club/2021/05/08/tomcat-bu-shu-vue-xiang-mu/</id>
    <published>2021-05-08T11:35:58.000Z</published>
    <updated>2021-05-08T05:39:44.933Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>修改vue项目下config/index.js，注意dev和build都要改assetsPublicPath的配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改路由配置src/router/index.js，增加配置base: ‘/xxx/‘，也可为空。如果这里不配置，会导致部署的项目首页访问一片空白，但不报错，且引入的文件有正常加载</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如打包文件存放在Tomcat/webapps/xxxx下，那么base就这么写，如果放到ROOT下，则base:'/'</span>  base<span class="token punctuation">:</span> <span class="token string">'/xxx/'</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行npm run build，将打包生成的dist目录下的所有东西粘贴到Tomcat/webapps/xxxx路径下，xxxx是自定义的项目名</p></li><li><p>启动tomcat，在tomcat下的bin目录中双击startup.bat文件，或者打开命令行去访问startup.bat，</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改vue项目下config/index.js，注意dev和build都要改assetsPublicPath的配置&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;mo
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/Tomcat/vue/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>vue自动触发标签点击事件</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/</id>
    <published>2021-05-08T10:16:26.000Z</published>
    <updated>2021-05-08T02:22:58.858Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题：页面加载时，触发某个元素的点击事件</p></li><li><p>解决思路</p><ul><li><code>directives</code></li><li><code>v-trigger</code><ul><li>directives 在生命周期内用</li></ul></li></ul><pre class="line-numbers language-vue"><code class="language-vue">export default {    data() {        return {             };    },    directives:{        'local-test':function(el,binding,vnode){            /** el可以获取当前dom节点，并且进行编译，也可以操作事件 **/            /** binding指的是一个对象，一般不用 **/            /** vnode 是 Vue 编译生成的虚拟节点 **/            //el.style.border="1px solid red";  //操作style所有样式            //console.log(el.value);  //获取v-model的值            //console.log(el.dataset.name) //data-name绑定的值，需要el.dataset来获取            //console.log(vnode.context.$route); //获取当前路由信息            trigger:{             inserted(el,binging){             console.log(el)             el.click()             // $(el).trigger('click')            }        }    },    components:{    },    filters:{    },    watch:{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题：页面加载时，触发某个元素的点击事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;directives&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-trigger&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;directiv
      
    
    </summary>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/vue/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署Nginx后，页面刷新404</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/</id>
    <published>2021-05-07T16:20:59.000Z</published>
    <updated>2021-05-07T08:23:34.188Z</updated>
    
    <content type="html"><![CDATA[<p>问题：</p><p>​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。</p><p>原因：</p><p>​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。</p><p>解决：</p><p>   在Nginx配置文件nginx.conf中的location节点加入如下配置。(index.html根据实际页面配置）</p><pre class="line-numbers language-shell"><code class="language-shell">try_files $uri $uri/ /index.html;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。&lt;/p&gt;
&lt;p&gt;解决：&lt;/
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Oracle账户解锁</title>
    <link href="http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/"/>
    <id>http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/</id>
    <published>2021-03-24T15:45:34.000Z</published>
    <updated>2021-03-24T08:03:03.124Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Oracle账户被锁：the account is locked</p><ul><li>比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。</li><li>在Oracle中，连续十次尝试登录不成功，那么此账户将会被锁定</li><li>安装结束，弹出如下界面时，未正确选择“口令管理”，将scott用户解锁，并设置密码</li></ul></li><li><p><strong>解决方案步骤1：</strong></p><ul><li>Win+R打开命令行输入：sqlplus</li><li>使用system或sys账户登录，口令即安装Oracle时输入的管理口令。</li></ul></li><li><p><strong>解决方案步骤2：</strong></p><ul><li>使用命令解锁用户。命令为：alter user scott account unlock;</li></ul></li><li><p><strong>解决方案步骤3:</strong></p><ul><li>重置用户密码。命令为：alter user username identified by password;其中username为用户名（如：scott），password为新密码。</li></ul></li><li><p><strong>解决方案步骤4:</strong></p><ul><li>打开命令窗口，输入“sqlplus”命令，输入要登陆的用户名密码，查询数据库。</li></ul></li><li><p>scott用户解锁已完成</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Oracle账户被锁：the account is locked&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。&lt;/li&gt;
&lt;li&gt;在Oracle中，连续十次尝试登录不成功
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>mysql的sql_mode设置</title>
    <link href="http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/"/>
    <id>http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/</id>
    <published>2021-03-03T15:40:39.000Z</published>
    <updated>2021-03-03T10:07:07.427Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查询sql_mode</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select @@GLOBAL.sql_mode或select @@SESSION.sql_mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置sql_mode<ul><li>通过命令设置</li><li>在配置文件中设置<ul><li>在/etc/my.cnf的[mysqld]下设置</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SET GLOBAL sql_mode = 'modes...';或SET SESSION sql_mode = 'modes...';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sql_mode常用值</li></ul><pre class="line-numbers language-shell"><code class="language-shell">ONLY_FULL_GROUP_BY对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中NO_AUTO_VALUE_ON_ZERO该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。STRICT_TRANS_TABLES在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制NO_ZERO_IN_DATE在严格模式下，不允许日期和月份为零NO_ZERO_DATE设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告ERROR_FOR_DIVISION_BY_ZERO在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULLNO_AUTO_CREATE_USER禁止GRANT创建密码为空的用户NO_ENGINE_SUBSTITUTION如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常PIPES_AS_CONCAT将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似ANSI_QUOTES启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符ORACLE的sql_mode设置等同：PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER.如果使用mysql，为了继续保留大家使用oracle的习惯，可以对mysql的sql_mode设置如下：在my.cnf添加如下配置[mysqld]sql_mode='ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;查询sql_mode&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;select @@GLOBAL.sql_mode
或
select @@SES
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/categories/MYSQL/sql-Mode/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/tags/sql-Mode/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成websocket</title>
    <link href="http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/"/>
    <id>http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/</id>
    <published>2021-02-20T14:47:21.000Z</published>
    <updated>2021-03-03T04:47:49.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息"><a href="#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息" class="headerlink" title="一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息"></a>一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息</h3><ul><li><p>STOMP协议介绍</p><ul><li>STOMP，Streaming Text Orientated Message Protocol，是流文本定向消息协议，是一种为MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。</li><li>它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理(Broker)进行交互，类似于OpenWire(一种二进制协议)。</li><li>由于其设计简单，很容易开发客户端，因此在多种语言和多种平台上得到广泛应用。其中最流行的STOMP消息代理是Apache ActiveMQ。</li></ul></li><li><p>STOMP协议工作于TCP协议之上，使用了下列命令：</p><ul><li>SEND 发送</li><li>SUBSCRIBE 订阅</li><li>UNSUBSCRIBE 退订</li><li>BEGIN 开始</li><li>COMMIT 提交</li><li>ABORT 取消</li><li>ACK 确认</li><li>DISCONNECT 断开</li></ul></li><li><p>SpringBoot使用STOMP消息</p><ul><li>添加pom文件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建<code>WebSocketStompConfig</code><ul><li>java方式配置websocket stomp使用注解@EnableWebSocketMessageBroker，实现WebSocketMessageBrokerConfigurer</li><li>@EnableWebSocketMessageBroker注解。这表明这个配置类不仅配置了WebSocket，还配置了基于代理的STOMP消息。它重载了registerStompEndpoints()方法，将“/webServer”注册为STOMP端点。这个路径与之前发送和接收消息的目的地路径有所不同。这是一个端点，客户端在订阅或发布消息到目的地路径前，要连接该端点。将其目的地前缀设置为“/topic”和“/user”。这样的话，Spring就能知道所有目的地前缀为“/topic”或“/user”的消息都会发送到STOMP代理中。根据你所选择的STOMP代理不同，目的地的可选前缀也会有所限制。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">/** * 注解开启STOMP协议来传输基于代理的消息，此时控制器支持使用@MessageMapping */</span><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册STOMP端点，发布或者订阅消息的时候需要连接此端点     * SpringBoot2.4.0版本之前 使用setAllowedOrigins *表示允许跨域     * SpringBoot2.4.0版本之后 使用setAllowedOriginPatterns *表示允许跨域     * withSockJS  表示开始SockJS支持     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span>StompEndpointRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//广播</span>        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/webServer"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置消息代理,哪种路径的消息会进行代理处理     * enableSimpleBroker 服务端推送给客户端的路径前缀     * /topic 代表发布广播，即群发     * /user 代表点对点，即发指定用户     * setApplicationDestinationPrefixes 客户端给服务器端发送消息或订阅主题的一个前缀     * 例如客户端发送消息的目的地为/app/sendTest，则对应控制层@MessageMapping(“/sendTest”)     * 客户端订阅主题的目的地为/app/subscribeTest，则对应控制层@SubscribeMapping(“/subscribeTest”)     * setPathMatcher 可以以“.”来分割路径     * setUserDestinationPrefix 点对点使用的订阅前缀（客户端订阅路径上会体现出来），不设置的话，默认也是/user/     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span>MessageBrokerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span><span class="token string">"/topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setUserDestinationPrefix</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//registry.setPathMatcher(new AntPathMatcher("."));</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置发送与接收的消息参数，可以指定消息字节大小，缓存大小，发送超时时间     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span>WebSocketTransportRegistration registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输入消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输出消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientOutboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法的参数类型     * @param argumentResolvers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法返回值类型     * @param returnValueHandlers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addReturnValueHandlers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> returnValueHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加自定义的消息转换器     * spring 提供多种默认的消息转换器     * 返回false,不会添加消息转换器     * 返回true，会添加默认的消息转换器     * 当然也可以把自己写的消息转换器添加到转换链中     * @param messageConverters     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageConverter<span class="token operator">></span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息实体类</p><ul><li>任意对象都可以</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MessageParam{"</span> <span class="token operator">+</span>                <span class="token string">"content='"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageResult</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JSON 转换 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JsonUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把Java对象转换成json字符串     *     * @param object 待转化为JSON字符串的Java对象     * @return json串 or null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">parseObjToJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            string <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Json字符串信息转换成对应的Java对象     *     * @param json json字符串对象     * @param c    对应的类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseJsonToObj</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 日期工具类 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 格式化 LocalDateTime     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime localDateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ldStr <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>ldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ldStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 全局工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获得指定数目的UUID     *     * @param number int 需要获得的UUID数量     * @return String[] UUID数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> retArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得一个UUID     *     * @return String UUID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉“-”符号</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>webSocket控制层</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动推送模板     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> SimpMessagingTemplate template<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 广播推送     * @MessageMapping 接收客户端消息     * @SendTo 会将接收到的消息发送到指定的路径目的地，所有订阅该路径的用户都能收到，属于广播。     * result会被广播到”/topic/messages”这个订阅路径中，只要客户端订阅了这条路径，不管是哪个用户，都会接收到消息     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 精准推送，点对点订阅     * @MessageMapping接收客户端消息     * @SendToUser 会将消息路由到发送者对应的目的地。默认该注解前缀为/user。     * 如：用户订阅/user/topic/messages ，在@SendToUser('/topic/messages')查找目的地时，     * 会将目的地的转化为/user/{name}/topic/messages, 该操作是认为用户登录并且授权认证，使用name作为目的地标识。     * 发给消息来源的那个用户。（就是谁请求给谁，不会发给所有用户，区分就是依照name来区分的)。     * 此外该注解还有个broadcast属性，表明是否广播。就是当有同一个用户登录多个session时，是否都能收到。取值true/false.     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 点对点订阅     * 客户端订阅“/app/hello3”,服务器直接返回消息     * @return     */</span>    <span class="token annotation punctuation">@SubscribeMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"客户端订阅了/app/hello3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动精准推送，根据标识 “content” 向订阅了 /user/{{content}}/messages 路径的客户端推送消息     * content可以设置为用户标识     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 服务端发送消息给:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动广播推送，向所有订阅了“/messages”路径的客户端发送消息     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">" 上线了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>websocket测试页</p><ul><li>引入<code>jquery.js、sockjs.js、stomp.js</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket测试页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>断开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversationDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>发送消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send_message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>返回消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back_message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stompClient <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setConnected</span><span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'conversationDiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> connected <span class="token operator">?</span> <span class="token string">'visible'</span> <span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#response'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer"</span>    <span class="token comment" spellcheck="true">// http://localhost:8081/webServer</span>    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8081/webServer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>    stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/topic/messages”，对应@SendTo("/topic/messages")</span>        <span class="token comment" spellcheck="true">//或对应template.convertAndSend("/topic/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/user/topic/messages”</span>        <span class="token comment" spellcheck="true">//对应@SendToUser("/topic/messages")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应@SubscribeMapping("/hello3")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/app/hello3'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端订阅“/user/'+$('#username').val()+'/messages”,</span>        <span class="token comment" spellcheck="true">// 对应template.convertAndSendToUser("username", "/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 断开连接</span><span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span>    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"/app/hello5"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>content<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收返回的消息</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#back_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、Vue中使用webSocket"><a href="#二、Vue中使用webSocket" class="headerlink" title="二、Vue中使用webSocket"></a>二、Vue中使用webSocket</h3><ul><li>安装sockjs-client 和 stompjs</li></ul><pre class="line-numbers language-console"><code class="language-console">npm install sockjs-clientnpm install stompjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在vue项目中引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> SockJS <span class="token keyword">from</span> <span class="token string">'sockjs-client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Stomp <span class="token keyword">from</span> <span class="token string">'stompjs'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义一个全局变量，存放开启的webSocket实例</li></ul><pre class="line-numbers language-js"><code class="language-js">stompClient<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开启webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接webSocket 使用socket.js</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取用户的userId</span>      <span class="token keyword">let</span> userId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loginInfo<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer" `${this.$api}/webServer`</span>      <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/webServer`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// setConnected(true);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅消息路径  </span>        <span class="token comment" spellcheck="true">// join</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/join'</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// startMatch</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/startMatch'</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关闭webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">   <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 断开连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// setConnected(false);</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot;&gt;&lt;a href=&quot;#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot; class=&quot;headerlink&quot; title=&quot;一、SpringBoot中建
      
    
    </summary>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/categories/WebSocket/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mysql5.7</title>
    <link href="http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/"/>
    <id>http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/</id>
    <published>2021-01-31T22:24:20.000Z</published>
    <updated>2021-03-03T07:46:39.910Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker查找mysql5.7镜像<ul><li><code>docker search mysql5.7</code></li></ul></li><li>拉取MySQL镜像(:5.7 表示5.7版本)<ul><li><code>docker pull mysql:5.7</code></li></ul></li><li>创建挂载目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /home/app/mysql/confmkdir -p /home/app/mysql/datamkdir -p /home/app/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建my.cnf</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /home/app/mysql/conf/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在my.cnf中写入</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA## The MySQL  Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[mysqld]pid-file        = /var/run/mysqld/mysqld.pidsocket          = /var/run/mysqld/mysqld.sockdatadir         = /var/lib/mysqlsecure-file-priv= NULL# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# Custom config should go here!includedir /etc/mysql/conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行MySQL容器</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker run --restart=always -d --privileged=true -v /home/app/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /home/app/mysql/logs:/logs -v /home/app/mysql/data/mysql:/var/lib/mysql  -p 13306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=Root@123 mysql:5.7#参数说明run　run 是运行一个容器-d　 表示后台运行--restart=always 表示随docker重启-p　　表示容器内部端口和服务器端口映射关联--privileged=true　设置MySQL的root用户权限, 否则外部不能使用root用户登陆-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码--name mysql　　　　 设值容器名称为mysqlmysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器--character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci 设值数据库默认编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>新建MySQL用户</p><ul><li>先进入容器<code>docker exec -it mysql8 bash</code></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/1.png" title="进入容器"><ul><li>登录root用户：<code>mysql -uroot -p</code>，输入密码</li><li>新建用户<ul><li><code>CREATE USER 'username'@'host' IDENTIFIED BY 'password';</code><ul><li>username：你将创建的用户名</li><li>localhost：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li><li>实例<code>CREATE USER 'test'@'localhost' IDENTIFIED BY 'Test@123';</code></li></ul></li><li>更改host，设置可远程连接<ul><li><code>use mysql</code></li><li><code>update user set host='%' where user='username';</code></li></ul></li></ul></li><li>授权<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host'</code><ul><li>privileges：用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所有的权限则使用<code>ALL</code></li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li><li>实例<code>GRANT ALL ON *.* TO 'test'@'localhost';</code></li></ul></li><li>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;</code></li></ul></li></ul></li><li>设置与更改用户密码<ul><li>用于mysql5.7：<code>SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');</code><ul><li>更改当前登录用户密码：<code>SET PASSWORD = PASSWORD("newpassword");</code></li></ul></li><li>用于mysql8：<code>ALTER USER 'username'@'host' IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY 'newpassword';</code></li></ul></li><li>撤销用户权限<ul><li><code>REVOKE privilege ON databasename.tablename FROM 'username'@'host';</code></li><li>实例：<code>REVOKE ALL ON *.* FROM 'test'@'localhost';</code></li></ul></li><li>删除用户<ul><li><code>DROP USER 'username'@'host';</code></li><li>实例：<code>DROP USER 'test'@'localhost';</code></li></ul></li></ul></li><li><p>DBeaver连接测试</p></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/2.png" title="DBeaver测试链接"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;docker查找mysql5.7镜像&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search mysql5.7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拉取MySQL镜像(:5.7 表示5.7版本)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker pu
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.ldclass.club/categories/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/Docker/MYSQL/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
</feed>
