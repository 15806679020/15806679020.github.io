<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌生的小窝</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ldclass.club/"/>
  <updated>2021-05-08T02:22:58.858Z</updated>
  <id>http://www.ldclass.club/</id>
  
  <author>
    <name>Dong Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue自动触发标签点击事件</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/</id>
    <published>2021-05-08T10:16:26.000Z</published>
    <updated>2021-05-08T02:22:58.858Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题：页面加载时，触发某个元素的点击事件</p></li><li><p>解决思路</p><ul><li><code>directives</code></li><li><code>v-trigger</code><ul><li>directives 在生命周期内用</li></ul></li></ul><pre class="line-numbers language-vue"><code class="language-vue">export default {    data() {        return {             };    },    directives:{        'local-test':function(el,binding,vnode){            /** el可以获取当前dom节点，并且进行编译，也可以操作事件 **/            /** binding指的是一个对象，一般不用 **/            /** vnode 是 Vue 编译生成的虚拟节点 **/            //el.style.border="1px solid red";  //操作style所有样式            //console.log(el.value);  //获取v-model的值            //console.log(el.dataset.name) //data-name绑定的值，需要el.dataset来获取            //console.log(vnode.context.$route); //获取当前路由信息            trigger:{             inserted(el,binging){             console.log(el)             el.click()             // $(el).trigger('click')            }        }    },    components:{    },    filters:{    },    watch:{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题：页面加载时，触发某个元素的点击事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;directives&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-trigger&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;directiv
      
    
    </summary>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/vue/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署Nginx后，页面刷新404</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/</id>
    <published>2021-05-07T16:20:59.000Z</published>
    <updated>2021-05-07T08:23:34.188Z</updated>
    
    <content type="html"><![CDATA[<p>问题：</p><p>​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。</p><p>原因：</p><p>​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。</p><p>解决：</p><p>   在Nginx配置文件nginx.conf中的location节点加入如下配置。(index.html根据实际页面配置）</p><pre class="line-numbers language-shell"><code class="language-shell">try_files $uri $uri/ /index.html;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。&lt;/p&gt;
&lt;p&gt;解决：&lt;/
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Oracle账户解锁</title>
    <link href="http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/"/>
    <id>http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/</id>
    <published>2021-03-24T15:45:34.000Z</published>
    <updated>2021-03-24T08:03:03.124Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Oracle账户被锁：the account is locked</p><ul><li>比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。</li><li>在Oracle中，连续十次尝试登录不成功，那么此账户将会被锁定</li><li>安装结束，弹出如下界面时，未正确选择“口令管理”，将scott用户解锁，并设置密码</li></ul></li><li><p><strong>解决方案步骤1：</strong></p><ul><li>Win+R打开命令行输入：sqlplus</li><li>使用system或sys账户登录，口令即安装Oracle时输入的管理口令。</li></ul></li><li><p><strong>解决方案步骤2：</strong></p><ul><li>使用命令解锁用户。命令为：alter user scott account unlock;</li></ul></li><li><p><strong>解决方案步骤3:</strong></p><ul><li>重置用户密码。命令为：alter user username identified by password;其中username为用户名（如：scott），password为新密码。</li></ul></li><li><p><strong>解决方案步骤4:</strong></p><ul><li>打开命令窗口，输入“sqlplus”命令，输入要登陆的用户名密码，查询数据库。</li></ul></li><li><p>scott用户解锁已完成</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Oracle账户被锁：the account is locked&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。&lt;/li&gt;
&lt;li&gt;在Oracle中，连续十次尝试登录不成功
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>mysql的sql_mode设置</title>
    <link href="http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/"/>
    <id>http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/</id>
    <published>2021-03-03T15:40:39.000Z</published>
    <updated>2021-03-03T10:07:07.427Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查询sql_mode</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select @@GLOBAL.sql_mode或select @@SESSION.sql_mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置sql_mode<ul><li>通过命令设置</li><li>在配置文件中设置<ul><li>在/etc/my.cnf的[mysqld]下设置</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SET GLOBAL sql_mode = 'modes...';或SET SESSION sql_mode = 'modes...';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sql_mode常用值</li></ul><pre class="line-numbers language-shell"><code class="language-shell">ONLY_FULL_GROUP_BY对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中NO_AUTO_VALUE_ON_ZERO该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。STRICT_TRANS_TABLES在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制NO_ZERO_IN_DATE在严格模式下，不允许日期和月份为零NO_ZERO_DATE设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告ERROR_FOR_DIVISION_BY_ZERO在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULLNO_AUTO_CREATE_USER禁止GRANT创建密码为空的用户NO_ENGINE_SUBSTITUTION如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常PIPES_AS_CONCAT将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似ANSI_QUOTES启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符ORACLE的sql_mode设置等同：PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER.如果使用mysql，为了继续保留大家使用oracle的习惯，可以对mysql的sql_mode设置如下：在my.cnf添加如下配置[mysqld]sql_mode='ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;查询sql_mode&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;select @@GLOBAL.sql_mode
或
select @@SES
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/categories/MYSQL/sql-Mode/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/tags/sql-Mode/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成websocket</title>
    <link href="http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/"/>
    <id>http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/</id>
    <published>2021-02-20T14:47:21.000Z</published>
    <updated>2021-03-03T04:47:49.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息"><a href="#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息" class="headerlink" title="一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息"></a>一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息</h3><ul><li><p>STOMP协议介绍</p><ul><li>STOMP，Streaming Text Orientated Message Protocol，是流文本定向消息协议，是一种为MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。</li><li>它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理(Broker)进行交互，类似于OpenWire(一种二进制协议)。</li><li>由于其设计简单，很容易开发客户端，因此在多种语言和多种平台上得到广泛应用。其中最流行的STOMP消息代理是Apache ActiveMQ。</li></ul></li><li><p>STOMP协议工作于TCP协议之上，使用了下列命令：</p><ul><li>SEND 发送</li><li>SUBSCRIBE 订阅</li><li>UNSUBSCRIBE 退订</li><li>BEGIN 开始</li><li>COMMIT 提交</li><li>ABORT 取消</li><li>ACK 确认</li><li>DISCONNECT 断开</li></ul></li><li><p>SpringBoot使用STOMP消息</p><ul><li>添加pom文件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建<code>WebSocketStompConfig</code><ul><li>java方式配置websocket stomp使用注解@EnableWebSocketMessageBroker，实现WebSocketMessageBrokerConfigurer</li><li>@EnableWebSocketMessageBroker注解。这表明这个配置类不仅配置了WebSocket，还配置了基于代理的STOMP消息。它重载了registerStompEndpoints()方法，将“/webServer”注册为STOMP端点。这个路径与之前发送和接收消息的目的地路径有所不同。这是一个端点，客户端在订阅或发布消息到目的地路径前，要连接该端点。将其目的地前缀设置为“/topic”和“/user”。这样的话，Spring就能知道所有目的地前缀为“/topic”或“/user”的消息都会发送到STOMP代理中。根据你所选择的STOMP代理不同，目的地的可选前缀也会有所限制。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">/** * 注解开启STOMP协议来传输基于代理的消息，此时控制器支持使用@MessageMapping */</span><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册STOMP端点，发布或者订阅消息的时候需要连接此端点     * SpringBoot2.4.0版本之前 使用setAllowedOrigins *表示允许跨域     * SpringBoot2.4.0版本之后 使用setAllowedOriginPatterns *表示允许跨域     * withSockJS  表示开始SockJS支持     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span>StompEndpointRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//广播</span>        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/webServer"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置消息代理,哪种路径的消息会进行代理处理     * enableSimpleBroker 服务端推送给客户端的路径前缀     * /topic 代表发布广播，即群发     * /user 代表点对点，即发指定用户     * setApplicationDestinationPrefixes 客户端给服务器端发送消息或订阅主题的一个前缀     * 例如客户端发送消息的目的地为/app/sendTest，则对应控制层@MessageMapping(“/sendTest”)     * 客户端订阅主题的目的地为/app/subscribeTest，则对应控制层@SubscribeMapping(“/subscribeTest”)     * setPathMatcher 可以以“.”来分割路径     * setUserDestinationPrefix 点对点使用的订阅前缀（客户端订阅路径上会体现出来），不设置的话，默认也是/user/     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span>MessageBrokerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span><span class="token string">"/topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setUserDestinationPrefix</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//registry.setPathMatcher(new AntPathMatcher("."));</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置发送与接收的消息参数，可以指定消息字节大小，缓存大小，发送超时时间     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span>WebSocketTransportRegistration registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输入消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输出消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientOutboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法的参数类型     * @param argumentResolvers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法返回值类型     * @param returnValueHandlers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addReturnValueHandlers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> returnValueHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加自定义的消息转换器     * spring 提供多种默认的消息转换器     * 返回false,不会添加消息转换器     * 返回true，会添加默认的消息转换器     * 当然也可以把自己写的消息转换器添加到转换链中     * @param messageConverters     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageConverter<span class="token operator">></span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息实体类</p><ul><li>任意对象都可以</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MessageParam{"</span> <span class="token operator">+</span>                <span class="token string">"content='"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageResult</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JSON 转换 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JsonUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把Java对象转换成json字符串     *     * @param object 待转化为JSON字符串的Java对象     * @return json串 or null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">parseObjToJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            string <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Json字符串信息转换成对应的Java对象     *     * @param json json字符串对象     * @param c    对应的类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseJsonToObj</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 日期工具类 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 格式化 LocalDateTime     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime localDateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ldStr <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>ldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ldStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 全局工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获得指定数目的UUID     *     * @param number int 需要获得的UUID数量     * @return String[] UUID数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> retArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得一个UUID     *     * @return String UUID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉“-”符号</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>webSocket控制层</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动推送模板     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> SimpMessagingTemplate template<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 广播推送     * @MessageMapping 接收客户端消息     * @SendTo 会将接收到的消息发送到指定的路径目的地，所有订阅该路径的用户都能收到，属于广播。     * result会被广播到”/topic/messages”这个订阅路径中，只要客户端订阅了这条路径，不管是哪个用户，都会接收到消息     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 精准推送，点对点订阅     * @MessageMapping接收客户端消息     * @SendToUser 会将消息路由到发送者对应的目的地。默认该注解前缀为/user。     * 如：用户订阅/user/topic/messages ，在@SendToUser('/topic/messages')查找目的地时，     * 会将目的地的转化为/user/{name}/topic/messages, 该操作是认为用户登录并且授权认证，使用name作为目的地标识。     * 发给消息来源的那个用户。（就是谁请求给谁，不会发给所有用户，区分就是依照name来区分的)。     * 此外该注解还有个broadcast属性，表明是否广播。就是当有同一个用户登录多个session时，是否都能收到。取值true/false.     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 点对点订阅     * 客户端订阅“/app/hello3”,服务器直接返回消息     * @return     */</span>    <span class="token annotation punctuation">@SubscribeMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"客户端订阅了/app/hello3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动精准推送，根据标识 “content” 向订阅了 /user/{{content}}/messages 路径的客户端推送消息     * content可以设置为用户标识     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 服务端发送消息给:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动广播推送，向所有订阅了“/messages”路径的客户端发送消息     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">" 上线了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>websocket测试页</p><ul><li>引入<code>jquery.js、sockjs.js、stomp.js</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket测试页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>断开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversationDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>发送消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send_message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>返回消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back_message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stompClient <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setConnected</span><span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'conversationDiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> connected <span class="token operator">?</span> <span class="token string">'visible'</span> <span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#response'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer"</span>    <span class="token comment" spellcheck="true">// http://localhost:8081/webServer</span>    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8081/webServer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>    stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/topic/messages”，对应@SendTo("/topic/messages")</span>        <span class="token comment" spellcheck="true">//或对应template.convertAndSend("/topic/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/user/topic/messages”</span>        <span class="token comment" spellcheck="true">//对应@SendToUser("/topic/messages")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应@SubscribeMapping("/hello3")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/app/hello3'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端订阅“/user/'+$('#username').val()+'/messages”,</span>        <span class="token comment" spellcheck="true">// 对应template.convertAndSendToUser("username", "/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 断开连接</span><span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span>    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"/app/hello5"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>content<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收返回的消息</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#back_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、Vue中使用webSocket"><a href="#二、Vue中使用webSocket" class="headerlink" title="二、Vue中使用webSocket"></a>二、Vue中使用webSocket</h3><ul><li>安装sockjs-client 和 stompjs</li></ul><pre class="line-numbers language-console"><code class="language-console">npm install sockjs-clientnpm install stompjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在vue项目中引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> SockJS <span class="token keyword">from</span> <span class="token string">'sockjs-client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Stomp <span class="token keyword">from</span> <span class="token string">'stompjs'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义一个全局变量，存放开启的webSocket实例</li></ul><pre class="line-numbers language-js"><code class="language-js">stompClient<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开启webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接webSocket 使用socket.js</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取用户的userId</span>      <span class="token keyword">let</span> userId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loginInfo<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer" `${this.$api}/webServer`</span>      <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/webServer`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// setConnected(true);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅消息路径  </span>        <span class="token comment" spellcheck="true">// join</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/join'</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// startMatch</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/startMatch'</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关闭webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">   <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 断开连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// setConnected(false);</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot;&gt;&lt;a href=&quot;#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot; class=&quot;headerlink&quot; title=&quot;一、SpringBoot中建
      
    
    </summary>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/categories/WebSocket/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mysql5.7</title>
    <link href="http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/"/>
    <id>http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/</id>
    <published>2021-01-31T22:24:20.000Z</published>
    <updated>2021-03-03T07:46:39.910Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker查找mysql5.7镜像<ul><li><code>docker search mysql5.7</code></li></ul></li><li>拉取MySQL镜像(:5.7 表示5.7版本)<ul><li><code>docker pull mysql:5.7</code></li></ul></li><li>创建挂载目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /home/app/mysql/confmkdir -p /home/app/mysql/datamkdir -p /home/app/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建my.cnf</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /home/app/mysql/conf/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在my.cnf中写入</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA## The MySQL  Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[mysqld]pid-file        = /var/run/mysqld/mysqld.pidsocket          = /var/run/mysqld/mysqld.sockdatadir         = /var/lib/mysqlsecure-file-priv= NULL# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# Custom config should go here!includedir /etc/mysql/conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行MySQL容器</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker run --restart=always -d --privileged=true -v /home/app/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /home/app/mysql/logs:/logs -v /home/app/mysql/data/mysql:/var/lib/mysql  -p 13306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=Root@123 mysql:5.7#参数说明run　run 是运行一个容器-d　 表示后台运行--restart=always 表示随docker重启-p　　表示容器内部端口和服务器端口映射关联--privileged=true　设置MySQL的root用户权限, 否则外部不能使用root用户登陆-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码--name mysql　　　　 设值容器名称为mysqlmysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器--character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci 设值数据库默认编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>新建MySQL用户</p><ul><li>先进入容器<code>docker exec -it mysql8 bash</code></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/1.png" title="进入容器"><ul><li>登录root用户：<code>mysql -uroot -p</code>，输入密码</li><li>新建用户<ul><li><code>CREATE USER 'username'@'host' IDENTIFIED BY 'password';</code><ul><li>username：你将创建的用户名</li><li>localhost：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li><li>实例<code>CREATE USER 'test'@'localhost' IDENTIFIED BY 'Test@123';</code></li></ul></li><li>更改host，设置可远程连接<ul><li><code>use mysql</code></li><li><code>update user set host='%' where user='username';</code></li></ul></li></ul></li><li>授权<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host'</code><ul><li>privileges：用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所有的权限则使用<code>ALL</code></li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li><li>实例<code>GRANT ALL ON *.* TO 'test'@'localhost';</code></li></ul></li><li>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;</code></li></ul></li></ul></li><li>设置与更改用户密码<ul><li>用于mysql5.7：<code>SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');</code><ul><li>更改当前登录用户密码：<code>SET PASSWORD = PASSWORD("newpassword");</code></li></ul></li><li>用于mysql8：<code>ALTER USER 'username'@'host' IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY 'newpassword';</code></li></ul></li><li>撤销用户权限<ul><li><code>REVOKE privilege ON databasename.tablename FROM 'username'@'host';</code></li><li>实例：<code>REVOKE ALL ON *.* FROM 'test'@'localhost';</code></li></ul></li><li>删除用户<ul><li><code>DROP USER 'username'@'host';</code></li><li>实例：<code>DROP USER 'test'@'localhost';</code></li></ul></li></ul></li><li><p>DBeaver连接测试</p></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/2.png" title="DBeaver测试链接"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;docker查找mysql5.7镜像&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search mysql5.7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拉取MySQL镜像(:5.7 表示5.7版本)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker pu
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.ldclass.club/categories/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/Docker/MYSQL/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装oracle11g</title>
    <link href="http://www.ldclass.club/2021/02/01/docker-an-zhuang-oracle11g/"/>
    <id>http://www.ldclass.club/2021/02/01/docker-an-zhuang-oracle11g/</id>
    <published>2021-01-31T18:45:16.000Z</published>
    <updated>2021-01-31T14:21:48.211Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>安装Docker</p><p>安装环境：Centos 7.5</p><ul><li>安装wget命令 </li><li>下载阿里云docker社区版 yum源<ul><li><code>cd /etc/yum.repos.d/</code></li><li><code>wget http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li></ul></li><li>查看docker安装包：<code>yum list | grep docker</code></li><li>安装Docker Ce 社区版本：<code>yum install -y docker-ce.x86_64</code></li><li>设置开机启动：<code>systemctl enable docker</code></li><li>更新xfsprogs：<code>yum -y update xfsprogs</code></li><li>启动docker：<code>systemctl start docker</code></li><li>查看版本：<code>docker version</code></li><li>查看详细信息：<code>docker info</code></li></ul></li><li><p>配置阿里云镜像加速</p><ul><li>阿里云镜像加速器配置地址：<code>https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</code></li><li>配置步骤：<code>vi /etc/docker/daemon.json</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">{"registry-mirrors": ["https://5xok66d4.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>重启：<code>systemctl daemon-reload &amp;&amp; systemctl restart docker</code></li></ul></li><li><p>常用命令</p><ul><li>查看镜像<code>docker images</code></li><li>搜索镜像<code>docker search xxxx</code></li><li>下载xxx镜像：<code>docker pull xxxx</code></li><li>本地镜像的删除：<code>docker rmi xxxx</code></li><li>创建并启动容器：<code>docker run -itd --name=自定义名 xxx:版本号</code></li><li>查看本地所有的容器：docker ps -a</li><li>查看本地正在运行的容器：docker ps</li><li>停止容器：<code>docker stop CONTAINER_ID / CONTAINER_NAME</code></li><li>一次性停止所有容器：<code>docker stop $(docker ps -a -q)</code></li><li>启动容器：<code>docker start CONTAINER_ID / CONTAINER_NAME</code></li><li>重启容器：<code>docker restart CONTAINER_ID / CONTAINER_NAME</code></li><li>删除容器：<code>docker rm CONTAINER_ID / CONTAINER_NAME</code></li><li>强制删除容器：<code>docker rmi -f CONTAINER_ID / CONTAINER_NAME</code></li><li>查看容器详细信息：<code>docker inspect CONTAINER_ID / CONTAINER_NAME</code></li><li>进入容器：<code>docker exec -it CONTAINER_ID /bin/bash</code></li></ul></li><li><p>Docker安装oracle_11g</p><ul><li>搜索oracle_11g镜像<ul><li><code>docker search oracle_11g</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/1.png" title="搜索oracle_11g镜像"><ul><li><p>下载oracle_11g镜像</p><ul><li><p><code>docker pull iatebes/oracle_11g</code> </p><p>或</p></li><li><p><code>docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></p></li><li><p>其余镜像可以自己测试</p></li></ul></li><li><p>查看镜像</p><ul><li><code>docker images</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/2.png" title="查看镜像"><ul><li><p>防火墙设置</p><ul><li>如果选择的是<code>iatebes/oracle_11g</code>镜像，必须先关闭firewall防火墙，并开启iptables防火墙，否则启动容器报以下错误提示：<ul><li>开启iptables防火墙后，需要重启docker</li><li>参考链接<code>https://blog.csdn.net/u013948858/article/details/83115388</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/3.png" title="错误提示"><ul><li>如果选择的是<code>registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code>镜像，可以关闭防护墙，或者给防火墙开放设置的数据库访问端口<ul><li>firewall开放端口<ul><li><code>firewall-cmd --zone=public --add-port=11521/tcp --permanent</code></li><li><code>firewall-cmd --reload</code></li><li><code>firewall-cmd --list-all</code></li></ul></li></ul></li></ul></li><li><p>创建容器并启动</p><ul><li><code>docker run --restart=always -p 11521:1521 --name oracle_11g -d registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></li><li><code>--restart=always</code> ：docker重启时，同时重启容器</li></ul></li><li><p>查看已创建并运行的镜像：<code>docker ps</code></p></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/4.png" title="已创建并运行的镜像"><ul><li>登录 Docker 中 Oracle 软件所在的 oracle 用户<ul><li><code>docker exec -it my_oracle_11g bash</code></li><li>如果进入后是root用户，修改一下root用户以及oracle用户的密码，再切换到oracle用户<ul><li>passwd root</li><li>passwd oracle</li></ul></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/5.png" title="登录 Docker 中 Oracle 软件所在的 oracle 用户"><ul><li>查看 oracle 用户<ul><li><code>id oracle</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/6.png" title="查看 oracle 用户"><ul><li>查找Oracle环境变量<code>.bash_profile</code>文件路径<ul><li>需要切换到root用户</li><li><code>/opt/oracle/.bash_profile</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/7.png" title="查找Oracle环境变量`.bash_profile`文件路径"><ul><li>刷新环境变量<ul><li><code>source /opt/oracle/.bash_profile</code></li></ul></li><li>查看监听<ul><li><code>lsnrctl status</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/8.png" title="查看监听"><ul><li>修改system密码<ul><li>oracle 用户下 输入 <code>sqlplus /nolog</code>，实现无用户名登录oracle</li><li><code>conn /as sysdba</code>  连接到数据本地数据</li><li><code>alter user system identified by password;</code> 修改system 密码 为password(你自定义的密码)</li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/9.png" title="修改system密码"><ul><li>PLSQL测试链接<ul><li>输入用户名，口令，与数据库连接串 <code>ip:port/SID</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/10.png" title="PLSQL测试链接"><ul><li>从Docker退出到虚拟机</li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/11.png" title="从Docker退出到虚拟机"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装Docker&lt;/p&gt;
&lt;p&gt;安装环境：Centos 7.5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装wget命令 &lt;/li&gt;
&lt;li&gt;下载阿里云docker社区版 yum源&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd /etc/yum.repos.d/&lt;/code&gt;&lt;/l
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
      <category term="Docker" scheme="http://www.ldclass.club/categories/Oracle/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>VMware虚拟机设置静态IP</title>
    <link href="http://www.ldclass.club/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/"/>
    <id>http://www.ldclass.club/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/</id>
    <published>2021-01-30T23:27:07.000Z</published>
    <updated>2021-01-30T16:05:31.623Z</updated>
    
    <content type="html"><![CDATA[<p>以<code>VMware® Workstation 16 Pro</code> 为例</p><p>系统 <code>CentOS7.5</code></p><ul><li><p>编辑 =》虚拟网络编辑器 </p><ul><li>点击更改设置</li></ul><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/1.png" title="虚拟网络编辑器界面"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/2.png" title="虚拟网络编辑器界面"></li><li><p>检查宿主机VM8 网卡设置，打开网络和共享中心→ 更改适配器设置→，在VMware Network Adapter VMnet8上单击右键，选择属性按钮打开属性对话框。  </p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/3.png" title="VMware Network Adapter VMnet8"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/4.png" title="VMware Network Adapter VMnet8"></li><li><p>在虚拟机右下角，点击网络适配器按钮，右键选择断开连接，然后再重新连接，确保刚才的设置生效。然后开启虚拟机，输入<code>ifconfig</code>查看当前分配的IP。</p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/5.png" title="查看当前分配的ip"></li><li><p>关闭虚拟机防火墙</p><ul><li><code>systemctl stop firewalld</code></li></ul></li><li><p>关闭防火墙开机启动</p><ul><li><code>systemctl disable firewalld</code></li></ul></li><li><p>修改网络配置文件</p><ul><li><code>vim etc/sysconfig/network-scripts/xxxx</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#与自己的配置文件对比修改TYPE="Ethernet"PROXY_METHOD="none"BROWSER_ONLY="no"BOOTPROTO="static"IPADDR="192.168.6.128"NETMASK="255.255.255.0"GATEWAY="192.168.6.2"DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens32"UUID="7c379f83-cbd2-42e7-a7f6-0a8bc31c4d88"DEVICE="ens32"ONBOOT="yes"              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ul><li>ping宿主机IP（192.168.2.168）</li><li>宿主机VM8IP（192.168.6.1）</li><li>宿主机与虚拟机之前的网关IP（192.168.6.2）</li><li>ping外网IP或域名，比如（<code>www.baidu.com</code>）</li><li>都可以通则说明虚拟机固定IP设置成功。</li></ul></li><li><p>如果ping外网ip可以通，但是ping 域名，提示<code>ping: www.baidu.com: Name or service not known</code></p><ul><li><p>查看一下<code>DNS</code>的配置<code>cat /etc/resolv.conf</code></p><ul><li>如果发现<code>DNS</code>里面的配置就只有一行注释，则需要对DNS进行配置<code>vim  /etc/resolv.conf</code>，配置如下：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Generated by NetworkManagernameserver 8.8.8.8nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>重启network service</p><ul><li><code>systemctl restart network</code></li></ul></li><li><p>测试<code>ping www.baidu.com</code></p><ul><li>通过</li></ul></li><li><p>重启Linux，测试IP是否改变<code>reboot</code></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以&lt;code&gt;VMware® Workstation 16 Pro&lt;/code&gt; 为例&lt;/p&gt;
&lt;p&gt;系统 &lt;code&gt;CentOS7.5&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编辑 =》虚拟网络编辑器 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击更改设置&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
      <category term="CentOS7" scheme="http://www.ldclass.club/categories/CentOS7/"/>
    
      <category term="VMware" scheme="http://www.ldclass.club/categories/CentOS7/VMware/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/categories/CentOS7/VMware/linux/"/>
    
    
      <category term="CentOS7" scheme="http://www.ldclass.club/tags/CentOS7/"/>
    
      <category term="VMware" scheme="http://www.ldclass.club/tags/VMware/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装oracle</title>
    <link href="http://www.ldclass.club/2021/01/31/linux-an-zhuang-oracle/"/>
    <id>http://www.ldclass.club/2021/01/31/linux-an-zhuang-oracle/</id>
    <published>2021-01-30T17:23:34.000Z</published>
    <updated>2021-01-30T15:44:51.028Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统：CentOS Linux release 7.5.1804 (Core) </p><p>数据库版本：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</p><p>数据库安装包：linux.x64_11gR2_database_1of2.zip、linux.x64_11gR2_database_2of2.zip（可官网下载）</p><h3 id="一、操作系统配置"><a href="#一、操作系统配置" class="headerlink" title="一、操作系统配置"></a>一、操作系统配置</h3><p>注：在Root用户下执行以下步骤</p><ul><li><p>修改用户的 SHELL 的限制（资源限制），修改 /etc/security/limits.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 <code>/etc/pam.d/login</code> 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/pam.d/login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件:</li></ul><pre class="line-numbers language-shell"><code class="language-shell">session required /lib/security/pam_limits.sosession required pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 linux 内核，修改 /etc/sysctl.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表linux系统中可以打开的文件的数量fs.file-max = 6815744# 此参数限制并发未完成的请求，应该设置避免I/O子系统故障fs.aio-max-nr = 1048576# 可以使用的共享内存的总页数kernel.shmall = 2097152# 单个共享内存段的最大值（不能超过自己的内存大小，这里设置的值为2G）kernel.shmmax = 2147483648# 该参数是共享内存段的最大数量,建议用缺省值4096kernel.shmmni = 4096kernel.sem = 250 32000 100 128# IP4的端口可使用范围net.ipv4.ip_local_port_range = 9000 65500# 套接字接收缓冲区大小的缺省值net.core.rmem_default = 4194304# 套接字接收缓冲区大小的最大值net.core.rmem_max = 4194304# 套接字发送缓冲区大小的缺省值net.core.wmem_default = 262144# 套接字发送缓冲区大小的最大值net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>要使 <code>/etc/sysctl.conf</code>更改立即生效，执行以下命令</p><pre class="line-numbers language-shell"><code class="language-shell">sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>显示如下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">fs.file-max = 6815744fs.aio-max-nr = 1048576kernel.shmall = 2097152kernel.shmmax = 2147483648kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 4194304net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑 <code>/etc/profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">if [ $USER = "oracle" ]; thenif [ $SHELL = "/bin/ksh" ]; thenulimit -p 16384ulimit -n 65536elseulimit -u 16384 -n 65536fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出</li></ul></li><li><p>创建相关用户和组，作为软件安装和支持组的拥有者</p><ul><li>创建Oracle用户和密码,输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">groupadd  oinstall  groupadd  dbauseradd -g oinstall -g dba -m oraclepasswd oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后会让你输入密码，密码任意输入2次，但必须保持一致，回车确认</li></ul></li><li><p>创建数据库软件目录和数据文件存放目录，目录的位置，根据自己的情况来定，注意磁盘空间即可，这里我把其放到 oracle 用户下,输入命令</p><pre class="line-numbers language-shell"><code class="language-shell"> mkdir /home/oracle/app mkdir /home/oracle/app/oracle mkdir /home/oracle/app/oradata mkdir /home/oracle/app/oracle/product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更改目录属主为Oracle用户所有，输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> chown -Rf oracle:oinstall /home/oracle/app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 oracle 用户的环境变量，首先，切换到新创建的 oracle 用户下</p><pre class="line-numbers language-shell"><code class="language-shell">su – oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<code>.bash_profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i编辑 <code>.bash_profile</code>,进入编辑模式，增加以下内容，指定的 <code>ORACLE_SID</code> 为数据库实例名</li></ul><pre class="line-numbers language-shell"><code class="language-shell">export ORACLE_BASE=/home/oracle/appexport ORACLE_HOME=$ORACLE_BASE/oracle/product/11.2.0/dbhome_1export ORACLE_SID=orclexport PATH=$PATH:$HOME/bin:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出。</li></ul></li></ul><h3 id="二、安装-Oracle"><a href="#二、安装-Oracle" class="headerlink" title="二、安装 Oracle"></a>二、安装 Oracle</h3><ul><li><p>当上述系统要求操作全部完成后，注销系统，在图形界面以 Oracle 用户登陆。首先将下载的 Oracle 安装包 使用 FTP 发送到 Linux系统中。</p></li><li><p>运行 unzip 命令解压 oracle 安装文件，输入命令：</p><pre class="line-numbers language-shell"><code class="language-shell">unzip linux.x64_11gR2_database_1of2.zipunzip linux.x64_11gR2_database_2of2.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解压完成后 cd 进入其解压后的目录 database 使用 ls 命令可以查看解压后 database 所包含的文件</p><pre class="line-numbers language-shell"><code class="language-shell">doc  install  response  rpm  runInstaller  sshsetup  stage  welcome.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋于刚解压出来的文件夹权限</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 777 -R /home/oracle/database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装前检测依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">#可直接 yum -y install ... 安装以下依赖包rpm -q binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel gcc- gcc-c++ libaio-devel libaio libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel pdkshrpm -q binutils compat-db control-center gcc gcc-c++ glibc glibc-common gnome-libs libstdc++ libstdc++-devel make pdksh sysstat xscreensaver libaio openmotif21rpm -q gcc make binutils setarch compat-db compat-gcc compat-gcc-c++ compat-libstdc++ compat-libstdc++-devel unixODBC unixODBC-devel libaio-devel sysstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在oracle用户上执行安装oracle数据库软件</p><ul><li>进入<code>/home/oracle/database</code></li><li>执行<code>./runInstaller</code></li></ul></li><li><p>图形化界面安装参考以下链接</p><ul><li><p><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></p></li><li><p><code>https://www.cnblogs.com/alsw/p/4023245.html</code></p></li><li><p><code>Prepequisite Checks</code>，会列出所缺少的依赖包，按照提示信息一个一个解决。</p><ul><li>注意：<ul><li>OS Kernel Parameter 下的semmni的缺失是Oracle没有检测到，其实有，选中缺失的依赖包，如果下方详情栏里Expected value中有括号中标注(i386)或(i686)，是在提示缺少32位的依赖包，但是实际上已经安装了64位的依赖包，忽略它们，pdksh包已经安装，就是之前安装的ksh依赖包。</li><li>如果还有提示的其他缺少的依赖包没有安装就去安装，按提示解决缺少的依赖包，之后点击 “Check Again”，再检查一遍，没有问题了，勾选ignore all,点击“Next”</li></ul></li></ul></li><li><p>安装过程中可能会弹窗提示<code>error in invoking target install of makefile</code>错误</p><ul><li>解决方法参考链接：<code>http://blog.itpub.net/22996654/viewspace-2063349/</code></li></ul></li></ul></li><li><p>安装到最后一步，会跳出如下执行脚本的提示</p><ul><li>打开一个终端，使用root登录，执行要求执行的脚本，执行完毕后在图形界面点OK</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> cd /home/oracle/app/oracle/product/11.2.0/dbhome_1 ./root.sh #此处提示输入oracle_home路径 /home/oracle/oraInventory ./orainstRoot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据库建库和配置监听及本地服务</p><ul><li>参考链接：<ul><li><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></li><li><code>https://www.cnblogs.com/alsw/p/4023245.html</code></li></ul></li></ul></li><li><p>plsql测试是否能连接</p></li></ul><h3 id="三、根据需求建库建表"><a href="#三、根据需求建库建表" class="headerlink" title="三、根据需求建库建表"></a>三、根据需求建库建表</h3><ul><li><code>https://www.ldclass.club/2020/11/12/shu-ju-ku-bei-fen-huan-yuan/</code></li></ul><h3 id="四、oracle配置开机自启动"><a href="#四、oracle配置开机自启动" class="headerlink" title="四、oracle配置开机自启动"></a>四、oracle配置开机自启动</h3><ul><li><p>先以root身份登录到linux系统</p><ul><li><code>vim /etc/oratab</code></li><li>将<code>orcl:/home/oracle/app/oracle/product/11.2.0/dbhome_1:N</code>中的N 更改为 Y</li><li>:wq保存，关闭 </li></ul></li><li><p><code>chmod +x /etc/rc.d/rc.local</code></p></li><li><p><code>vim /etc/rc.d/rc.local</code></p></li><li><p>添加</p><ul><li><code>su oracle -lc "/home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start"</code></li><li><code>su oracle -lc /home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</code></li></ul></li><li><p>:wq保存，关闭</p></li><li><p><code>reboot</code>重启虚拟机，测试是否自启</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;操作系统：CentOS Linux release 7.5.1804 (Core) &lt;/p&gt;
&lt;p&gt;数据库版本：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production&lt;/p&gt;

      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://www.ldclass.club/2021/01/23/zookeeper/"/>
    <id>http://www.ldclass.club/2021/01/23/zookeeper/</id>
    <published>2021-01-22T16:57:26.000Z</published>
    <updated>2021-01-22T09:29:23.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、注册中心之zookeeper"><a href="#一、注册中心之zookeeper" class="headerlink" title="一、注册中心之zookeeper"></a>一、注册中心之zookeeper</h3><ul><li><p>注册中心</p><ul><li>理解注册中心：服务管理,核心是有个服务注册表，心跳机制动态维护</li><li>服务提供者provider: 启动的时候向注册中心上报自己的网络信息</li><li>服务消费者consumer: 启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息</li></ul></li><li><p>主流的注册中心</p><ul><li>zookeeper、Eureka、nacos</li></ul></li><li><p>安装zookeeper</p><ul><li>下载zookeeper<ul><li><code>https://zookeeper.apache.org/</code></li></ul></li><li>重命名conf目录下的zoo_sample.cfg 文件为zoo.cfg 并修改里面的内容</li><li>主要配置项</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#心跳基本时间单位，毫秒级，ZK基本上所有的时间都是这个时间的整数倍tickTime=2000#集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数initLimit=10#集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数syncLimit=5#内存数据库快照存放地址，如果没有指定事务日志存放地址(dataLogDir)，默认也是存放在这个 路径下，建议两个地址分开存放到不同的设备上。dataDir=F:\zookeeper-3.4.12\zookeeper-3.4.12\data#端口clientPort=2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>centos下安装zk<ul><li>上传tar包到<code>url/local</code></li><li>解压<code>tar -zxvf zookeeper-3.4.12.tar.gz</code></li><li><code>cd /usr/local/zookeeper-3.4.12/conf</code></li><li><code>mv zoo_sample.cfg zoo.cfg</code></li><li><code>vim zoo.cfg</code></li><li>修改dataDir <code>/usr/local/zookeeper-3.4.12/data</code></li><li>新建zookeeper用户</li><li>将整个文件夹所属权赋予zookeeper用户 <code>chown -R zookeeper:zookeeper /usr/local/zookeeper-3.4.12</code></li><li>切换到zookeeper用户 su zookeeper</li><li><code>cd /usr/local/zookeeper-3.4.12/bin</code><ul><li>找到对应的zkServer.sh启动<code>./zkServer.sh start</code></li></ul></li><li>防火墙开放端口<ul><li><code>firewall-cmd --zone=public --permanent --add-port=2181/tcp</code></li></ul></li><li>重启防火墙<ul><li><code>systemctl restart firewalld</code></li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、注册中心之zookeeper&quot;&gt;&lt;a href=&quot;#一、注册中心之zookeeper&quot; class=&quot;headerlink&quot; title=&quot;一、注册中心之zookeeper&quot;&gt;&lt;/a&gt;一、注册中心之zookeeper&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心&lt;
      
    
    </summary>
    
      <category term="Zookeeper" scheme="http://www.ldclass.club/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="http://www.ldclass.club/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据备份</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-shu-ju-bei-fen/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-shu-ju-bei-fen/</id>
    <published>2021-01-21T09:25:49.000Z</published>
    <updated>2021-01-21T02:28:07.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据备份"><a href="#一、数据备份" class="headerlink" title="一、数据备份"></a>一、数据备份</h3><ul><li><p>数据备份的意义</p><ul><li>保护数据的安全</li><li>在出现意外的时候（硬盘的损坏，断电，黑客的攻击），以便数据的恢复</li><li>导出生产的数据以便研发人员或者测试人员测试学习</li><li>高权限的人员操作失误导致数据丢失，以便恢复</li></ul></li><li><p>数据库的备份类型</p><ul><li>完全备份：对整个数据库的数据进行备份</li><li>部分备份：对部分数据进行备份（可以是一张表也可以是多张表）<ul><li>增量备份：是以上一次备份为基础来备份变更数据的，节约空间</li><li>差异备份：是以第一次完全备份的基础来备份变更备份的，浪费空间</li></ul></li></ul></li><li><p>数据库备份的方式</p><ul><li>逻辑备份：直接生成sql语句保存起来，在恢复数据的时候执行备份的sql语句来实现数据的恢复</li><li>物理备份：直接拷贝相关的物理数据</li><li>区别：逻辑备份效率低，恢复数据效率低，但是逻辑备份节约空间；物理备份浪费空间，但是相对逻辑备份而言效率比较高</li></ul></li><li><p>数据库备份的场景</p><ul><li>热备份：备份时，数据库的读写操作不会受到影响</li><li>温备份：备份时，数据库的读操作可以进行，但是写操作不能执行</li><li>冷备份：备份时，不能进行任何操作</li></ul></li></ul><h3 id="二、mysqldump数据备份"><a href="#二、mysqldump数据备份" class="headerlink" title="二、mysqldump数据备份"></a>二、mysqldump数据备份</h3><ul><li><p>mysqldump使用语法：</p><ul><li><code>mysqldump -u 用户 -h host -p 密码 dbname table &gt; 路径</code></li></ul></li><li><p>远程备份单库示例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库例子并保留创建库语句</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix | gzip > /mysql_data_back/zabbix_bak.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库单表</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix users | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份多库的例子</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix XD | gzip > /mysql_data_back/zabbix_XD.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份全库</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --all-databases | gzip > /mysql_data_back/all.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、mysql数据恢复"><a href="#三、mysql数据恢复" class="headerlink" title="三、mysql数据恢复"></a>三、mysql数据恢复</h3><ul><li>远程恢复数据（备份的数据文件里有创建库的语句）</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程恢复数据（备份的数据文件里没有创建库的语句）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 zabbix < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、mysql物理备份"><a href="#四、mysql物理备份" class="headerlink" title="四、mysql物理备份"></a>四、mysql物理备份</h3><ul><li>查找数据库源文件路径</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'datadir%';datadir    /var/lib/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/my.cnfdatadir=/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>MyISAM表源文件</p><ul><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则</li><li>.frm ：记录着表结构信息的文件</li><li>.MYI：记录着索引的文件</li><li>.MYD :记录着表的数据</li></ul></li><li><p>InnoDB表源文件</p><ul><li>InnoDB有着共享表空间跟独立表空间的概念</li><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则􀁿􀁿</li><li>.frm ：记录着表结构信息的文件</li><li>.ibd ：独立表空间，里边记录这个表的数据和索引</li><li>ibdata1：共享表空间，里边记录表的数据和索引</li><li>ib_logfile0 ib_logfile1：事务日志, 物理备份不要忘记这两个文件</li></ul></li><li><p>热备时，请求全局读锁</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush tables with read lock;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解锁：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、二进制日志mysqlbinlog备份数据"><a href="#五、二进制日志mysqlbinlog备份数据" class="headerlink" title="五、二进制日志mysqlbinlog备份数据"></a>五、二进制日志mysqlbinlog备份数据</h3><ul><li><p>二进制日志</p><ul><li>二进制日志就是记录着mysql数据库中的一些写入性操作，比如一些增删改，但是，不包括查询！</li></ul></li><li><p>一般情况下，二进制日志有着数据复制和数据恢复的功能</p></li><li><p>开启二进制日志会有1%的性能消耗！</p></li><li><p>查看二进制日志是否开启</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'log_bin%';log_bin            ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启二进制日志 </li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/my.cnf[mysqld]log-bin=/data/mydata/log_bin/mysql-bin路径自定义创建server-id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有的binlog日志列表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show master logs;mysql-bin.000001    201mysql-bin.000002    201mysql-bin.000003    90274mysql-bin.000004    63489mysql-bin.000005    13788<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>刷新二进制日志：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush logs;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重置(清空）二进制日志文件</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用mysqldump备份数据时，加上-F选项可以重新生成一个新的二进制日志文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -p XD user -F > user_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、二进制日志mysqlbinlog恢复数据"><a href="#六、二进制日志mysqlbinlog恢复数据" class="headerlink" title="六、二进制日志mysqlbinlog恢复数据"></a>六、二进制日志mysqlbinlog恢复数据</h3><ul><li><p>查看二进制日志文件的内容</p><ul><li><p><code>cd /data/mydata/log_bin/mysql-bin</code></p></li><li><p><code>mysqlbinlog mysql-bin.000002</code></p></li><li><p>报错<code>mysqlbinlog: [ERROR] unknown variable 'default-character-set=utf8'</code></p></li><li><p>解决</p><ul><li>第一种：在mysqlbinlog 后边加上 –no-defaults</li><li>第二种：注释掉配置文件里边的default-character-set=utf8</li></ul></li></ul></li><li><p>把二进制日志文件导出成普通文件</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --base64-output=DECODE-ROWS -v mysql-bin.000002 > mysqlbin.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>找出要恢复的位置</p><ul><li>找出关键字(drop)的行数：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | grep -iw 'drop'</code></li><li>打印出相关内容(4170至4180行)：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | sed -n '4170,4180p'</code></li><li>找到<code># at xxxx</code></li></ul></li><li><p>恢复数据</p><ul><li>第一步：把备份的数据表恢复到数据库中：<code>mysql -uroot -p test &lt; sys_users.sql</code></li><li>第二步：利用上面找到的删除的位置进行恢复数据<ul><li><code>--start-position="xxxx"</code>可以省略</li></ul></li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --no-defaults --set-charset=utf8 --start-position="xxxx" --stop-position="xxxx" /usr/local/software/log_bin/mysql-bin.000002 | mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、数据备份&quot;&gt;&lt;a href=&quot;#一、数据备份&quot; class=&quot;headerlink&quot; title=&quot;一、数据备份&quot;&gt;&lt;/a&gt;一、数据备份&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据备份的意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护数据的安全&lt;/li&gt;
&lt;li&gt;在出现意外的时
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql语句优化思路</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-yu-ju-you-hua-si-lu/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-yu-ju-you-hua-si-lu/</id>
    <published>2021-01-21T09:17:08.000Z</published>
    <updated>2021-01-21T01:25:19.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mysql的慢查询日志开启</p></blockquote><ul><li>查看是否已经开启了慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'slow%';slow_launch_time        2slow_query_log            ONslow_query_log_file        /var/lib/mysql/iZ2zeewcii3f53e59qe1neZ-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set global slow_query_log = on ;#日志路径也可以自定义：1.路径存在且mysql有读写权限：sudo chown mysql:mysql -R /usr/local/mysqlSlowLog/2.set global slow_query_log_file = '路径';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看慢查询的时间临界值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%long%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置慢查询的时间标准</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set long_query_time=0.4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>永久生效的设置方法  </li></ul><pre class="line-numbers language-shell"><code class="language-shell">#修改配置文件 vi /etc/my.cnf[mysqld]slow_query_log = 1long_query_time = 0.1slow_query_log_file =/usr/local/mysql/mysql_slow.log#必须重启服务才能生效！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mysql的sql语句执行过程解析</p></blockquote><ul><li>查看性能详情是否开启</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%profiling%';have_profiling            YESprofiling                ONprofiling_history_size    15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启性能记录功能</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set profiling = on ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看性能的记录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看语句的执行性能详情</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profile for query 4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>性能线程的详细解释官方文档链接<ul><li><code>https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html</code></li></ul></li></ul><blockquote><p>mysql语句优化思路</p></blockquote><ul><li>尽量避免使用select *from ，尽量精确到想要的结果字段</li><li>尽量避免条件使用or</li><li>记得加上limit 限制行数，避免数据量过大消耗性能</li><li>使用模糊查询时，%放在前面是会使索引失效</li><li>要小心条件字段类型的转换</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mysql的慢查询日志开启&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查看是否已经开启了慢查询日志&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;lan
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql之索引与存储引擎</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-zhi-suo-yin-yu-cun-chu-yin-qing/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-zhi-suo-yin-yu-cun-chu-yin-qing/</id>
    <published>2021-01-20T17:35:37.000Z</published>
    <updated>2021-01-21T01:17:27.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h3><ul><li><p>存储引擎</p><ul><li>数据库引擎是数据库底层软件组件，不同的存储引擎提供不同的存储机制，索引技巧，锁定水平等功能，使用不同的数据库引擎，可以获得特定的功能</li></ul></li><li><p>查看引擎</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#如何查看数据库支持的引擎show engines;#查看当前数据的引擎：show create table 表名\G#查看当前库所有表的引擎：show table status\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表时指定引擎</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create table test (id int,name varchar(20)) engine='InnoDB';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改表的引擎</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 engine='MyiSAm';#修改默认引擎# vi /etc/my.cnf# [mysqld]下面# default-storage-engine=MyIsAM# 记得保存后重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>MyISAM与InnoDB的区别</p><ul><li>MyISAM<ul><li>支持全文索引（full text)</li><li>不支持事务</li><li>表级锁</li><li>保存表的具体行数</li><li>奔溃恢复不好</li></ul></li><li>Innodb：<ul><li>支持事务</li><li>以前的版本是不支持全文索引，但在5.6之后的版本就开始支持这个功能了</li><li>行级锁（并非绝对，当执行sql语句时不能确定范围时，也会进行锁全表例如： update table set id=3 where name like ‘a%’;)</li><li>不保存表的具体行数</li><li>奔溃恢复好</li></ul></li></ul></li><li><p>选择</p><ul><li>MyISAM：<ul><li>一般来说MyISAM不需要用到事务的时候</li><li>做很多count计算</li></ul></li><li>InnoDB：<ul><li>可靠性要求高的，或者要求支持事务</li><li>想要用到外键约束的时候（讲外键的时候会讲）</li></ul></li><li>推荐使用InnoDB</li></ul></li></ul><h3 id="二、常用索引"><a href="#二、常用索引" class="headerlink" title="二、常用索引"></a>二、常用索引</h3><ul><li><p>索引</p><ul><li>索引是一个单独的，存储在磁盘中上的数据库结构，它们包含着对数据表里的所有记录的引用指针。使用索引可以快速的找出在某列或多列中有特定值的行。</li></ul></li><li><p>索引的优点</p><ul><li>通过创建唯一索引，来保证数据库表中的每一行数据的唯一性。</li><li>可以加快数据的检索速度。</li><li>可以保证表数据的完整性与准确性</li></ul></li><li><p>索引的缺点</p><ul><li>索引需要占用物理空间。</li><li>对表中的数据进行改动时，索引也需要跟着动态维护，降低了数据的维护速度。</li></ul></li><li><p>索引的常见类型</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">index：普通索引unique：唯一索引primary key：主键索引foreign key：外键索引fulltext: 全文索引组合索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>普通索引与唯一索引</p></blockquote><ul><li><p>普通索引</p><ul><li>普通索引（index）顾名思义就是各类索引中最为普通的索引，主要任务就是提高查询速度。其特点是允许出现相同的索引内容，允许空（null）值</li></ul></li><li><p>唯一索引</p><ul><li>唯一索引：（unique）顾名思义就是不可以出现相同的索引内容，但是可以为空（null）值</li></ul></li><li><p>创建普通索引或者唯一索引</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">##创建表的时候创建create table test (id int(7) zerofill auto_increment not null,username varchar(20),servnumber varchar(30),password varchar(20),createtime datetime,unique (id))DEFAULT CHARSET=utf8;##直接为表添加索引#语法：alter table 表名 add index 索引名称 (字段名称);alter table test add unique unique_username (username);#注意：假如没有指定索引名称时，会以默认的字段名为索引名称##直接创建索引#语法：create index 索引 on 表名 (字段名);eg：create index index_createtime on test (createtime);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：show index from 表名\G#eg: show index from test\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法： drop index 索引名称 on 表名;#eg：drop index unique_username on test;#语法： alter table 表名 drop index 索引名;#eg：alter table test drop index createtime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>主键索引</p></blockquote><ul><li><p>主键索引</p><ul><li>把主键添加索引就是主键索引，它是一种特殊的唯一索引，不允许有空值，而唯一索引（unique是允许为空值的）。指定为“PRIMARY KEY”<ul><li>主键：主键是表的某一列，这一列的值是用来标志表中的每一行数据的。</li><li>注意：每一张表只能拥有一个主键</li></ul></li></ul></li><li><p>创建主键</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建表的时候创建~#直接为表添加主键索引#语法：alter table 表名 add primary key (字段名);#eg：alter table test add primary key (id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除主键</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：alter table 表名 drop primary key;#eg：alter table test drop primary key;#注意：在有自增的情况下，必须先删除自增，才可以删除主键#删除自增：alter table test change id id int(7) unsigned zerofill not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>全文索引</p></blockquote><ul><li><p>全文索引</p><ul><li>全文索引是将存储在数据库中的文章或者句子等任意内容信息查找出来的索引，单位是词。全文索引也是目前搜索引擎使用的一种关键技术。指定为 fulltex</li></ul></li><li><p>添加全文索引</p><ul><li>创建表的时候创建全文索引</li><li>通过alter添加</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table command add fulltext(instruction);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用全文索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from 表名 where match (字段名) against ('检索内容');select * from command where match(instruction) against ('sections');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看匹配度</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from command where match(instruction) against ('directory');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>停止词</p><ul><li>出现频率很高的词，将会使全文索引失效</li></ul></li><li><p>in boolean mode 模式</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#in boolean mode：意思是指定全文检索模式为布尔全文检索（简单可以理解为是检索方式）select * from 表名 where match (字段名) against ('检索内容' in boolean mode);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除全文索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table command drop index instruction;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意<ul><li>使用通配符*时，只能放在词的后边，不能放前边。</li><li>一般情况下创建全文索引的字段数据类型为 char、varchar、text 。其它字段类型不可以</li><li>全文索引不针对非常频繁的词做索引。比如is，no，not，you，me，yes这些，我们称之为停止词</li><li>对英文检索时忽略大小写</li></ul></li></ul><blockquote><p>外键约束</p></blockquote><ul><li><p>外键</p><ul><li>外键就是作用于两个表数据之间的链接的一列或多列，用来保证表与表之间的数据的完整性和准确性。</li></ul></li><li><p>添加外键约束</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#语法：foreign key (字段名) references 关联的表名(关联表的字段名)#注意：主键跟外键的字段类型一定要相#create table的方法：CREATE TABLE `employee` (`empno` int(11) NOT NULL COMMENT '雇员编号',`ename` varchar(50) DEFAULT NULL COMMENT '雇员姓名',`job` varchar(30) DEFAULT NULL,`mgr` int(11) DEFAULT NULL COMMENT '雇员上级编号',`hiredate` date DEFAULT NULL COMMENT '雇佣日期',`sal` decimal(7,2) DEFAULT NULL COMMENT '薪资',`deptnu` int(11) DEFAULT NULL COMMENT '部门编号',PRIMARY KEY (`empno`),foreign key (deptnu) references dept(deptnu)) ENGINE=InnoDB DEFAULT CHARSET=utf8;#alter table的方法：alter table employee add foreign key (deptnu) references dept(deptnu);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除外键约束</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#注意：在干掉外键索引之前必须先把外键约束删除，才能删除索引<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意<ul><li>俩个表，主键跟外键的字段类型一定要相同</li><li>要使用外键约束表的引擎一定得是InnoDB引擎，MyISAM是不起作用的</li><li>在干掉外键索引之前必须先把外键约束删除，才能删除索引</li></ul></li></ul><blockquote><p>联合索引</p></blockquote><ul><li><p>联合索引</p><ul><li>联合索引又称组合索引或者复合索引，是建立在俩列或者多列以上的索引。</li></ul></li><li><p>创建联合索引</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 add index(字段1,字段2,字段3);alter table test add index(username,servnumber,password);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>删除联合索引</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table test drop index username;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>联合索引的效率远远高于单列索引</p></li><li><p>联合索引的最左原则</p></li><li><p>注意</p><ul><li>索引并非越多越好，过多的索引会增加数据的维护速度还有磁盘空间的浪费。</li><li>当表的数据量很大的时候，可以考虑建立索引。</li><li>表中经常查数据的字段，可以考虑建立索引。</li><li>想要保证表中数据的唯一性，可以考虑建立唯一索引。</li><li>想要保证俩张表中的数据的完整性跟准确性，可以考虑建立外键约束。</li><li>经常对多列数据进行查询时，可以考虑建立联合索引。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、存储引擎&quot;&gt;&lt;a href=&quot;#一、存储引擎&quot; class=&quot;headerlink&quot; title=&quot;一、存储引擎&quot;&gt;&lt;/a&gt;一、存储引擎&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存储引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库引擎是数据库底层软件组件，不同的存储引擎提供不同
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql之事务、试图、触发器、存储过程</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-zhi-shi-wu-shi-tu-hong-fa-qi-cun-chu-guo-cheng/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-zhi-shi-wu-shi-tu-hong-fa-qi-cun-chu-guo-cheng/</id>
    <published>2021-01-20T17:17:39.000Z</published>
    <updated>2021-01-21T02:43:49.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h3><ul><li><p>事务</p></li><li><p>数据库事务通常指对数据库进行读或写的一个操作过程。有两个目的，第一个是为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法；第二个是当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p></li><li><p>事务的特性（ACID）：</p><ul><li>原子性(Atomicity)：事务必须是原子工作单元，一个事务中的所有语句，应该做到：要么全做，要么一个都不做；</li><li>一致性(Consistency):让数据保持逻辑上的“合理性”，比如：小明给小红打10000块钱，既要让小明的账户减少10000，又要让小红的账户上增加10000块钱</li><li>隔离性(Isolation)：如果多个事务同时并发执行，但每个事务就像各自独立执行一样。</li><li>持久性(Durability)：一个事务执行成功，则对数据来说应该是一个明确的硬盘数据更改（而不仅仅是内存中的变化）。</li><li>要使用事务的话，表的引擎要为innodb引擎</li></ul></li><li><p>事务的开启与提交</p><ul><li>事务的开启：begin; start transaction;</li><li>事务的提交：commit;</li><li>事务的回滚：rollback;</li><li>开启autocommit（临时生效）：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#OFF（0）：表示关闭 ON （1）：表示开启set autocommit=0;show variables like 'autocommit';#autocommit | OFF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">set autocommit=1;show variables like 'autocommit';#autocommit | ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启autocommit（永久生效）：<ul><li>修改配置文件：vi /etc/my.cnf 在[mysqld]下面加上：autocommit=1 记得重启服务才会生效</li></ul></li></ul></li></ul><h3 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h3><ul><li><p>视图</p><ul><li>视图（view）是一种虚拟存在的表，是一个逻辑表，它本身是不包含数据的。作为一个select语句保存在数据字典中的。通过视图，可以展现基表（用来创建视图的表叫做基表base table）的部分数据，说白了视图的数据就是来自于基表</li></ul></li><li><p>试图的优点</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响;源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li><li>不占用空间：视图是逻辑上的表，不占用内存空间</li><li>总而言之，使用视图的大部分情况是为了保障数据安全性，提高查询效率。</li></ul></li><li><p>视图的缺点</p><ul><li>性能差：sql server必须把视图查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，sql server也要把它变成一个复杂的结合体，需要花费一定的时间。</li><li>修改限制：当用户试图修改试图的某些信息时，数据库必须把它转化为对基本表的某些信息的修改，对于简单的试图来说，这是很方便的，但是，对于比较复杂的试图，可能是不可修改的。</li></ul></li><li><p>视图的创建以及修改</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建的基本语法create view <视图名称> as select 语句;create view <视图名称> (字段) as select 语句;create or replace view <视图名称>;#修改的语法alter view <视图名称> as select 语句;#视图删除语法drop view <视图名称> ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、触发器"><a href="#三、触发器" class="headerlink" title="三、触发器"></a>三、触发器</h3><ul><li>触发器<ul><li>触发器就是监视某种情况，并触发某种操作</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建触发器的语法create trigger 触发器名称 after/before insert/update/delete on 表名for each rowbeginsql语句;end#after/before:可以设置为事件发生前或后#insert/update/delete:它们可以在执行insert、update或delete的过程中触发#for each row:每隔一行执行一次动作#删除触发器的语法drop trigger 触发器名称;#示例 员工迟到，向work_time_delay插入一条数据之后，更新employee，工资扣100元create trigger trig_work after insert on work_time_delayfor each rowbeginupdate employee set sal=sal-100 where empno=new.empno;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、存储过程"><a href="#四、存储过程" class="headerlink" title="四、存储过程"></a>四、存储过程</h3><ul><li>存储过程<ul><li>存储过程就是把复杂的一系列操作，封装成一个过程。类似于shell，python脚本等。</li></ul></li><li>存储过程的优缺点<ul><li>优点是：<ul><li>复杂操作，调用简单</li><li>速度快</li></ul></li><li>缺点是：<ul><li>封装复杂</li><li>没有灵活性</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建存储过程语法create procedure 名称 (参数....)    begin    过程体;    过程体;    end#参数：in|out|inout 参数名称 类型（长度）#in：表示调用者向过程传入值（传入值可以是字面量或变量）#out：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）#inout：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）#声明变量：declare 变量名 类型(长度) default 默认值;#给变量赋值：set @变量名=值;#调用存储命令：call 名称(@变量名);#删除存储过程命令：drop procedure 名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看创建的存储过程命令</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show create procedure 名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、事务&quot;&gt;&lt;a href=&quot;#一、事务&quot; class=&quot;headerlink&quot; title=&quot;一、事务&quot;&gt;&lt;/a&gt;一、事务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;事务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库事务通常指对数据库进行读或写的一个操作过程。有两个目的，第一
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql之DCL控制语言</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-zhi-dcl-kong-zhi-yu-yan/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-zhi-dcl-kong-zhi-yu-yan/</id>
    <published>2021-01-20T17:04:51.000Z</published>
    <updated>2021-01-20T09:16:55.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>DCL数据控制语言</p></blockquote><ul><li>数据控制语言（DCL：Data Control Language）是用来设置或者更改数据库用户或角色权限的语句，这些语句包括GRANT、DENY、REVOKE等语句</li></ul><blockquote><p>mysql限制root用户指定ip登录</p></blockquote><ul><li>查看root用户可以在哪台机器登录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select user,host from mysql.user where user='root';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改mysql库里边的user表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">update mysql.user set host='localhost' where user='root';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>刷新权限</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mysql之用户密码</p></blockquote><ul><li>修改用户密码分三种方法：<ul><li>第一种：set password for 用户@ip = password(‘密码’);</li><li>第二种：mysqladmin -u用户 -p旧密码 password 新密码;</li><li>第三种：update mysql.user set authentication_string=password(‘密码’) where user=’用户’ and host=’ip’;</li></ul></li><li>忘记密码<ul><li>第一步：修改配置文件my.cnf (默认在/etc/my.cnf)，在[mysqld]下面加上 skip-grant-tables （跳过权限的意思）</li></ul><ol start="2"><li>第二步：重启mysql服务</li><li>第三步：mysql -uroot -p 无需密码登录进入</li><li>第四步：修改密码</li></ol></li></ul><blockquote><p>创建新用户并限制ip网段登录</p></blockquote><ul><li>创建用户的语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create user 'username'@'host' identified by 'password';#username：你将创建的用户名#host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机 登陆，可以使用通配符%#password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器#创建一个pig用户，并指定登录密码：123456，可以在任何一台远程主机都可以登录create user 'pig'@'%' identified by '123456';#创建一个pig用户，并指定登录密码：为空，指定在120网段的机器登录create user 'pig'@'120.%.%.%' identified by '';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看权限</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show grants for 'root'@'localhost';#GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION#GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION#WITH GRANT OPTION:表示这个用户拥有grant权限，即可以对其他用户授权show grants for 'pig'@'%';#Grants for pig@%#GRANT USAGE ON *.* TO 'pig'@'%'#USAGE：无权限的意思<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除用户语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">drop user 'username'@'host';drop user 'pig'@'%';delete from mysql.user where user='pig';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>库表权限授权与回收</p></blockquote><ul><li>授权语法：grant 权限1,权限2….. on 数据库对象 to ‘用户’</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">grant 权限1,权限2..... on 数据库对象 to '用户'@'host' identified by 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>all privileges</code>：代表所有权限</li><li><code>.</code>：代表所有库所有表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#对现有用户进行授权：对现有用户pig授予所有库所有表所有权限。grant all privileges on *.* to 'pig';#对没有的用户进行授权：创建一个新用户dog授予XD库的所有权限，登录密码123456，任何一台主机登录grant all privileges on XD.* to 'dog'@'%' identified by '123456';#对没有的用户进行授权：创建一个新用户cat授予XD库的employee表 查与修改权限，登录密码123456，任何一台主机登录grant select,update on XD.employee to 'cat'@'%' identified by '123456'#对没有的用户进行授权：对用户cat授予XD库的employee表insert 权限，登录密码123456，任何一台主机登录grant insert on XD.employee to 'cat'@'%' identified by '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>回收语法：revoke 权限1,权限2….. on 数据库对象 from ‘用户‘@’host’;</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#回收pig用户的所有权限（注意：并没有回收它的登录权限）revoke all privileges on *.* from 'pig' @ '%';flush privileges;#回收pig用户的所有权限（并回收它的登录权限）delete from mysql.user where user='pig';flush privileges;#回收cat用户对XD库的employee的查与修改权限revoke select,update on XD.employee from 'cat'@'%';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;DCL数据控制语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据控制语言（DCL：Data Control Language）是用来设置或者更改数据库用户或角色权限的语句，这些语句包括GRANT、DENY、REVOKE等语句&lt;/li&gt;
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql高级查询</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-gao-ji-cha-xun/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-gao-ji-cha-xun/</id>
    <published>2021-01-20T17:00:30.000Z</published>
    <updated>2021-01-20T09:04:30.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mysql查询之exists型子查询</p></blockquote><ul><li><p>exists型子查询后面是一个受限的select查询语句</p></li><li><p>exists子查询，如果exists后的内层查询能查出数据，则返回 TRUE 表示存在；为空则返回 FLASE则不存在。</p></li><li><p>exists 和 not exists</p></li></ul><blockquote><p>mysql查询之左连接查询与右连接查询</p></blockquote><ul><li>左连接称之为左外连接 右连接称之为右外连接 这俩个连接都是属于外连接</li><li>左连接关键字：left join 表名 on 条件 / left outer 表名 join on 条件 右连接关键字：right join 表名 on 条件/right outer 表名 join on 条件</li><li>左连接说明： left join 是left outer join的简写，左(外)连接，左表(a_table)的记录将会全部表示出来， 而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</li><li>右连接说明：right join是right outer join的简写，与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</li></ul><blockquote><p>mysql查询之内连接查询与联合查询</p></blockquote><ul><li><p>内连接：获取两个表中字段匹配关系的记录</p></li><li><p>主要语法：INNER JOIN 表名 ON 条件;</p></li><li><p>联合查询：就是把多个查询语句的查询结果结合在一起</p><ul><li>主要语法1：… UNION … （去除重复） 主要语法2：… UNION ALL …（不去重复）</li></ul></li><li><p>union查询的注意事项：</p><ul><li>两个select语句的查询结果的“字段数”必须一致；</li><li>通常，也应该让两个查询语句的字段类型具有一致性；</li><li>也可以联合更多的查询结果；</li><li>用到order by排序时，需要加上limit（加上最大条数就行），需要对子句用括号括起来</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mysql查询之exists型子查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exists型子查询后面是一个受限的select查询语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exists子查询，如果exists后的内层查询能查出数据
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql字符集</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-zi-fu-ji/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-zi-fu-ji/</id>
    <published>2021-01-20T16:45:23.000Z</published>
    <updated>2021-01-20T08:53:43.438Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查看当前mysql使用的字符集</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'character%';#character_set_client：客户端请求数据的字符集#character_set_connection：客户端与服务器连接的字符集#character_set_database：数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将默认使用配置上的字符集#character_set_results：返回给客户端的字符集(从数据库读取到的数据是什么编码的)#character_set_server：为服务器安装时指定的默认字符集设定。#character_set_system：系统字符集(修改不了的，就是utf8)#character_sets_dir：mysql字符集文件的保存路径character_set_client    utf8mb4character_set_connection    utf8mb4character_set_database    utf8character_set_filesystem    binarycharacter_set_results    utf8mb4character_set_server    latin1character_set_system    utf8character_sets_dir    /usr/share/mysql/charsets/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符集修改<ul><li>临时修改：set names gbk;</li><li>永久：修改配置文件my.cnf里边的</li></ul></li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>gbk</span>作用于外部的显示<span class="token selector">[mysqld]</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>gbk</span>作用于内部，会作用于创建库表时默认字符集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改库的字符集编码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter database xiaoxiao default character set gbk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改表的字符集编码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">alter table employee default character set utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;查看当前mysql使用的字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;show variables like &#39;character%&#39;;

      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据表结构维护</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-shu-ju-biao-jie-gou-wei-hu/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-shu-ju-biao-jie-gou-wei-hu/</id>
    <published>2021-01-20T16:05:06.000Z</published>
    <updated>2021-01-20T08:45:01.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>修改表名</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">rename table 旧表名 to 新表名;rename table student to user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>添加列</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">#给表添加一列：alter table 表名 add 列名 类型;alter table user add addr varchar(50);alter table add 列名 类型 comment '说明';alter table user add famliy varchar(50) comment '学生父母';#给表最前面添加一列：alter table 表名 add 列名 类型 first;alter table user add job varchar(10) first;#给表某个字段后添加一列：alter table 表名 add 列名 类型 after 字段名;alter table user add servnumber int(11) after id;#注意：没有给表某个字段前添加一列的说法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改列类型</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 modify 列名 新类型;alter table user modify servnumber varchar(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改列名</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 change 旧列名 新列名 类型;alter table user change servnumber telephone varchar(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除列</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 drop 列名;alter table user drop famliy;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改字符集</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 character set 字符集;alter table user character set GBK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>mysql表的删除</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">drop table 表名；drop table user;#看表是否存在，若存在则删除表：drop table if exists 表名;drop table if exists teacher;#delele 会把删除的操作记录给记录起来，以便数据回退，不会释放空间，而且不会删除定义。#truncate不会记录删除操作，会把表占用的空间恢复到最初，不会删除定义#drop会删除整张表，释放表占用的空间。truncate table 表名;delete from 表名;drop table 表名;#删除速度drop > truncate > delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;修改表名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;rename table 旧表名 to 新表名;
rename
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://www.ldclass.club/2021/01/19/nginx/"/>
    <id>http://www.ldclass.club/2021/01/19/nginx/</id>
    <published>2021-01-18T17:26:44.000Z</published>
    <updated>2021-03-24T08:03:49.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Nginx介绍"><a href="#一、Nginx介绍" class="headerlink" title="一、Nginx介绍"></a>一、Nginx介绍</h3><ul><li><p>官网：<code>http://nginx.org/</code></p></li><li><p>是一个高性能的[HTTP]和[反向代理]web服务器</p></li><li><p>Nginx代码完全用[C语言]编写</p></li><li><p>功能：负载均衡、静态文服务器、支持多种协议、https、POP3等等</p></li><li><p>正向代理服务器和反向代理服务器</p><ul><li>正向代理服务器<ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求指定目标服务器，然后代理向目标服务器请求并获得内容，并返回给客户端，平时说的代理服务器一般是正向代理服务器</li><li>核心：用户知道自己访问的目标服务器</li><li>场景：跳板机、访问原来无法访问的网站, 比如国外的一些站点</li></ul></li><li>反向代理服务器（Nginx）<ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求，然后代理向目标服务器请求并获得内容，并返回给客户端。反向代理隐藏了真实的服务器</li><li>核心：客户端不知道要访问的目标服务器是哪台服务器，代理会根据一定的策略选择一个真实的服务器进行请求</li></ul></li></ul></li></ul><h3 id="二、Linux安装Nginx"><a href="#二、Linux安装Nginx" class="headerlink" title="二、Linux安装Nginx"></a>二、Linux安装Nginx</h3><ul><li><p>http</p><ul><li>下载压缩包并上传<ul><li><code>http://nginx.org/en/download.html</code></li></ul></li><li>安装依赖<ul><li><code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></li></ul></li><li>创建一个文件夹，上传本地提供的nginx包<ul><li>解压<code>tar -zxvf nginx-1.18.0.tar.gz</code></li><li>依次执行以下命令<ul><li><code>./configure</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li>默认安装路径<code>/usr/local/nginx</code></li><li>启动<ul><li><code>cd /usr/local/nginx/sbin</code></li><li><code>./nginx</code></li></ul></li><li>防火墙开放端口，阿里云网络安全组配置80端口</li></ul></li></ul></li><li><p>https</p><ul><li><p>介绍</p><ul><li>HTTPS (Secure Hypertext Transfer Protocol)安全超文本传输协议，是身披SSL外壳的HTTP</li><li>HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。</li><li>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中被窃取、改变，确保数据的完整性</li></ul></li><li><p>阿里云申请并下载https证书</p></li><li><p>上传证书</p></li><li><p>Nginx配置https证书配置</p><ul><li>依次执行以下命令<ul><li><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li>修改<code>nginx.conf</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">  # HTTPS server    #    server {        listen       443 ssl;        #与证书关联的域名        server_name  www.ldclass.club;        #证书路径        ssl_certificate      /usr/local/software/key/5082518_www.ldclass.club.pem;        ssl_certificate_key  /usr/local/software/key/5082518_www.ldclass.club.key;        ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            #静态资源路径            root   /usr/local/hexo;            index  index.html index.htm;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防火墙关闭或者开放443端口</p></li><li><p>阿里云网络安全组开放443端口</p></li></ul></li></ul><h3 id="三、Nginx基础"><a href="#三、Nginx基础" class="headerlink" title="三、Nginx基础"></a>三、Nginx基础</h3><ul><li><p>Nginx目录</p><ul><li><p>源码编译安装后，默认⽬目录</p><ul><li><code>/usr/local/nginx</code></li></ul></li><li><p>核心目录</p><pre class="line-numbers language-shell"><code class="language-shell">conf #所有配置文件目录  - nginx.conf #默认的主要的配置文件  - nginx.conf.default #默认模板html # 这是编译安装时Nginx的默认站点目录  - 50x.html #错误页面  - index.html #默认首页logs # nginx默认的日志路径，包括错误日志及访问日志  - error.log #错误日志  - nginx.pid #nginx启动后的进程id  - access.log #nginx访问日志sbin #nginx命令的目录  - nginx #启动命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常见命令</p><pre class="line-numbers language-shell"><code class="language-shell">./nginx #默认配置文件启动./nginx -s reload #重启，加载默认配置文件./nginx -c /usr/local/nginx/conf/nginx.conf #启动指定某个配置文件./nginx -s stop #停止#关闭进程，nginx有master process 和worker process,关闭master即可ps -ef | grep "nginx"kill -9 PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="四、Nginx配置文件"><a href="#四、Nginx配置文件" class="headerlink" title="四、Nginx配置文件"></a>四、Nginx配置文件</h3><ul><li>nginx.conf<ul><li>全局配置</li><li>server 主机设置</li><li>location（URL匹配特定位置的设置）</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#每个配置项由配置指令和指令参数2个部分构成# 指定Nginx Worker进程运行以及用户组user  root;worker_processes  1;# 错误日志的存放路径和错误日志#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;# 进程PID存放路径#pid        logs/nginx.pid;#事件模块指令，用来指定Nginx的IO模型，Nginx支持的有select、poll、kqueue、epoll 等。不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，对于Linux系统，epoll工作模式是首选events {    use epoll;    # 定义Nginx每个进程的最大连接数， 作为服务器来说:worker_connections * worker_processes,    # 作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/2。因为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    # 自定义服务日志    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    # 是否开启高效传输模式 on开启 off关闭    sendfile        on;    # 减少网络报文段的数量    #tcp_nopush     on;    #keepalive_timeout  0;    # 客户端连接保持活动的超时时间，超过这个时间之后，服务器会关闭该连接    keepalive_timeout  65;    #gzip  on;    # 虚拟主机的配置    server {        # 虚拟主机的服务端口        listen       80;        #用来指定IP地址或域名，多个域名之间用空格分开        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        #URL地址匹配        location / {            # 服务默认启动目录            root   html;            #默认访问文件            index  index.html index.htm;        }        #错误状态码的显示页面        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    server {        listen       443 ssl;        server_name  www.ldclass.club;        ssl_certificate      /usr/local/software/key/5082518_www.ldclass.club.pem;        ssl_certificate_key  /usr/local/software/key/5082518_www.ldclass.club.key;        ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            root   /usr/local/hexo;            index  index.html index.htm;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Nginx虚拟主机配置</p><ul><li>虚拟主机<ul><li>指在一台物理主机服务器上划分出多个磁盘空间，每个磁盘空间都是一个虚拟主机，每台虚拟主机都可以对外提供Web服务，并且互不干扰，就类似虚拟机</li><li>利用虚拟主机把多个不同域名的网站部署在同一台服务器上，节省了服务器硬件成本和相关的维护费用</li></ul></li><li>配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">server {    listen 80;    server_name aabbcc.com;    location / {        root /usr/local/nginx/html;        index xdclass.html;    }}server {    listen 80;    server_name aabbccdd.com;    location / {        root html;        index xdclass.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、Nignx搭建图片-文件服务器"><a href="#五、Nignx搭建图片-文件服务器" class="headerlink" title="五、Nignx搭建图片-文件服务器"></a>五、Nignx搭建图片-文件服务器</h3><pre class="line-numbers language-shell"><code class="language-shell">#注意#在location / 中配置root目录#在location /path中配置alias虚拟目录， 目录后面的"/"符号一定要加上server {    listen 80;    server_name aabbccdd.com;    location /app/img {        alias /usr/local/software/img/;        autoindex on;   #允许nginx在浏览器以文件夹形式访问        autoindex_exact_size off;  #显示文件大小        autoindex_localtime on;    #显示文件时间        index index.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Nginx的访问日志"><a href="#六、Nginx的访问日志" class="headerlink" title="六、Nginx的访问日志"></a>六、Nginx的访问日志</h3><ul><li><p>access.log⽇日志⽤用处</p><ul><li>统计站点访问ip来源、某个时间段的访问频率<br>查看访问最频的⻚页⾯面、Http响应状态码、接⼝口性能<br>接⼝口秒级访问量量、分钟访问量量、⼩小时和天访问量量</li></ul></li><li><p>默认配置解析</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">117.61.17.26 - - [19/Jan/2021:11:24:05 +0800] "GET /medias/banner/2.jpg HTTP/1.1" 200 1435257 "https://www.ldclass.club/" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"$remote_addr 对应的是真实日志里的117.61.17.26 即客户端的IP。$remote_user 对应的是第二个中杠“-”，没有远程用户，所以用“-”填充。［$time_local］对应的是[19/Jan/2021:11:05:29 +0800]。“$request”对应的是"GET /medias/banner/2.jpg HTTP/1.1"。$status对应的是200状态码，200表示正常访问。$body_bytes_sent对应的是1435257字节，即响应body的⼤大小。“$http_referer” 对应的是”https://www.ldclass.club/“，若是直接打开域名浏览的时，referer就会没有值，为”-“。“$http_user_agent” 对应的是”Mozilla/5.0(Macintosh; Intel Mac OS X 10.12; rv:56.0) Gecko/20100101 Firefox/56.0”。即浏览器类型“$http_x_forwarded_for” 对应的是”-“或者空。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Nginx统计站点访问量、高频url统计</p><ul><li>查看访问最频繁的前100个IP</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#awk 是文本处理工具，默认按照空格切分，$N 是第切割后第N个，从1开始#sort命令用于将文本文件内容加以排序，-n 按照数值排，-r 按照倒序来排#案例的sort -n 是按照第一列的数值大小进行排序，从小到大，倒序就是 sort -rn#uniq 去除重复出现的行列, -c 在每列旁边显示该行重复出现的次数。awk '{print $1}' access_temp.log | sort -n |uniq -c | sort -rn | head -n 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>统计访问最多的url 前20名</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cat access_temp.log |awk '{print $7}'| sort|uniq -c| sort -rn| head -20 | more<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义日志格式，统计接口响应耗时</p><ul><li>日志格式增加 $request_time<ul><li>从接受用户请求的第一个字节到发送完响应数据的时间，即包括接收请求数据时间、程序响应时间、输出响应数据时间</li><li>$upstream_response_time：指从Nginx向后端建立连接开始到接受完数据然后关闭连接为止的时间</li><li>$request_time一般会比upstream_response_time大，因为用户网络较差，或者传递数据较大时，前者会耗时大很多</li></ul></li><li>配置自定义日志格式</li></ul><pre class="line-numbers language-shell"><code class="language-shell">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for" $request_time';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>统计耗时接口, 列出传输时间超过 2 秒的接口，显示前5条</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cat time_temp.log|awk '($NF > 2){print $7}'|sort -n|uniq -c|sort -nr|head -5#备注：$NF 表示最后一列, awk '{print $NF}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="七、Nginx配置集群应用"><a href="#七、Nginx配置集群应用" class="headerlink" title="七、Nginx配置集群应用"></a>七、Nginx配置集群应用</h3><ul><li><p>Nginx负载均衡upstream</p><ul><li>负载均衡（Load Balance）<ul><li>分布式系统中⼀个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略决定请求发往哪个节点，这就是所谓的负载均衡，</li><li>原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</li></ul></li><li>负载均衡的种类<ul><li>通过硬件来进行解决，常见的硬件有NetScaler、F5、Radware和Array等商用的负载均衡器，但比较昂贵的</li><li>通过软件来进行解决，常见的软件有LVS、Nginx等,它们是基于Linux系统并且开源的负载均衡策略</li><li>目前性能和成本来看，Nginx是目前多数公司选择使用的</li></ul></li><li>配置案例</li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.0.106:8080;    server 192.168.0.106:8081;}location /api/ {    proxy_pass http://lbs;    proxy_redirect default;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Nginx常见的负载均衡策略</p><ul><li>节点轮询（默认）<ul><li>简介：每个请求按顺序分配到不同的后端服务器</li><li>场景：会造成可靠性低和负载分配不均衡，适合静态文件服务器</li></ul></li><li>weight 权重配置<ul><li>简介：weight和访问比率成正比，数字越大，分配得到的流量越高</li><li>场景：服务器性能差异大的情况使用</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.159.133:8080 weight=5;    server 192.168.159.133:8081 weight=10;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ip_hash（固定分发）<ul><li>简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</li><li>场景：服务器业务分区、业务缓存、Session需要单点的情况</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    ip_hash;    server 192.168.159.133:8080;    server 192.168.159.133:8081;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>upstream还可以为每个节点设置状态值<ul><li>down 表示当前的server暂时不参与负载<ul><li><code>server 192.168.159.133:8080 down;</code></li></ul></li><li>backup 其它所有的非backup机器down的时候，会请求backup机器，这台机器压力会最轻，配置也会相对低<ul><li><code>server 192.168.159.133:8080 backup;</code></li></ul></li></ul></li></ul></li></ul><h3 id="八、Nginx后端节点可用性探测"><a href="#八、Nginx后端节点可用性探测" class="headerlink" title="八、Nginx后端节点可用性探测"></a>八、Nginx后端节点可用性探测</h3><ul><li><p>如果某个应用挂了，请求不应该继续分发过去</p><ul><li>max_fails 允许请求失败的次数，默认为1.当超过最大次数时就不会请求</li><li>fail_timeout : max_fails次失败后，暂停的时间，默认：fail_timeout为10s</li><li>参数解释<ul><li>max_fails=N 设定Nginx与后端节点通信的尝试失败的次数。</li><li>在fail_timeout参数定义的时间内，如果失败的次数达到此值，Nginx就这个节点不可用。</li><li>在下一个fail_timeout时间段到来前，服务器不会再被尝试。</li><li>失败的尝试次数默认是1，如果设为0就会停止统计尝试次数，认为服务器是一直可用的。</li></ul></li></ul></li><li><p>具体什么是nginx认为的失败</p><ul><li>可以通过指令proxy_next_upstream来配置什么是失败的尝试。</li><li>注意默认配置时，http_404状态不被认为是失败的尝试。</li></ul></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">upstream lbs {    server 192.168.0.106:8080 max_fails=2 fail_timeout=60s;    server 192.168.0.106:8081 max_fails=2 fail_timeout=60s;}location /api/ {    proxy_pass http://lbs;    proxy_next_upstream error timeout http_500 http_503 http_404;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、Nginx自定义全局异常json数据"><a href="#九、Nginx自定义全局异常json数据" class="headerlink" title="九、Nginx自定义全局异常json数据"></a>九、Nginx自定义全局异常json数据</h3><ul><li><p>任何接口都是可能出错，4xx、5xx等</p></li><li><p>如果业务没有做好统一的错误管理，直接暴露给用户，无疑是看不懂</p></li><li><p>所以假如后端某个业务出错，nginx层也需要进行转换。让前端知道Http响应是200，其实是将错误的状态码定向<br>至200，返回了全局兜底数据</p></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">location / {    proxy_pass http://lbs;    proxy_redirect default;    # 存放用户的真实ip    proxy_set_header Host $host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_next_upstream error timeout http_503 non_idempotent;    #开启错误拦截配置,一定要开启    proxy_intercept_errors on;}# 不加 =200，则返回的就是原先的http错误码；配上后如果出现500等错误都返回给用户200状态，并跳转至/default_apierror_page 404 500 502 503 504 =200 /default_api;location = /default_api {    default_type application/json;    return 200 '{"code":"-1","msg":"invoke fail, not found "}';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、Nginx封禁恶意IP"><a href="#十、Nginx封禁恶意IP" class="headerlink" title="十、Nginx封禁恶意IP"></a>十、Nginx封禁恶意IP</h3><ul><li><p>网络攻击时有发生，</p><ul><li>TCP洪水攻击、注入攻击、DOS等</li><li>比较难防的有DDOS等</li><li>数据安全，防止对手爬虫恶意爬取，封禁IP</li><li>一般就是封禁ip<ul><li>linux server的层面封IP：iptables</li><li>nginx的层面封IP ，方式多种 (但 req还是会打进来，让nginx 返回 403, 占用资源)</li><li>Nginx作为网关，可以有效的封禁ip</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#单独网站屏蔽IP的方法，把include xxx; 放到网址对应的在server{}语句块,虚拟主机所有网站屏蔽IP的方法，把include xxx; 放到http{}语句句块。nginx配置如下：http{    # ....    include blacklist.conf;}location / {    proxy_pass http://lbs;    proxy_redirect default;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#blacklist.conf⽬目录下⽂文件内容deny 192.168.159.2;deny 192.168.159.32;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>./nginx -s reload #重新加载配置，不中断服务</li></ul></li><li><p>拓展-自动化封禁思路</p><ul><li>编写shell脚本</li><li>AWK统计access.log，记录每秒访问超过60次的ip，然后配合nginx或者iptables进行封禁</li><li>crontab定时跑脚本</li></ul></li></ul><h3 id="十一、Nginx配置浏览器跨域"><a href="#十一、Nginx配置浏览器跨域" class="headerlink" title="十一、Nginx配置浏览器跨域"></a>十一、Nginx配置浏览器跨域</h3><ul><li><p>Nginx配置解决浏览器跨域</p><ul><li>跨域：浏览器同源策略 1995年年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”<ul><li>协议相同 http https</li><li>域名相同 <a href="http://www.xdclass.net" target="_blank" rel="noopener">www.xdclass.net</a></li><li>端口相同 80 81</li><li>一句话：浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</li><li>浏览器控制台跨域提示：<br><code>No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.</code></li></ul></li></ul></li><li><p>解决方法</p><ul><li>JSONP</li><li>Http响应头配置允许跨域</li><li>nginx层配置</li><li>程序代码中处理通过拦截器配置</li></ul></li><li><p>Nginx开启跨域配置</p><ul><li>location下配置</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">location / {    add_header 'Access-Control-Allow-Origin' $http_origin;    add_header 'Access-Control-Allow-Credentials' 'true';    add_header 'Access-Control-Allow-Headers' 'DNT,web-token,apptoken,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';    add_header 'Access-Control-Allow-Methods 'GET,POST,OPTIONS';    #如果预检请求则返回成功,不需要转发到后端    if ($request_method = 'OPTIONS') {        add_header 'Access-Control-Max-Age'1728000;        add_header 'Content-Type''text/plain; charset=utf-8';        add_header 'Content-Length' 0;        return 200;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十二、Nginx的locatioin规则-路径匹配"><a href="#十二、Nginx的locatioin规则-路径匹配" class="headerlink" title="十二、Nginx的locatioin规则-路径匹配"></a>十二、Nginx的locatioin规则-路径匹配</h3><ul><li>正则<ul><li>^ 以什么开始</li><li>$ 以什么结束</li></ul></li><li>location 路径匹配<ul><li>语法 location [ = | ~ | <del>* | ^</del> ] uri { …… }</li><li>location = /uri<ul><li>= 表示精准匹配，只要完全匹配上才能生效</li></ul></li><li>location /uri<ul><li>不带任何修饰符，表示前缀匹配</li></ul></li><li>location ^~ /uri/<ul><li>匹配任何以 /uri/ 开头的任何查询并且停止搜索</li></ul></li><li>location /<ul><li>通用匹配，任何未匹配到其他location的请求都会匹配到</li></ul></li><li>正则匹配<ul><li>区分大小写匹配（~）</li><li>不区分大小写匹配（~*）</li></ul></li><li>优先级<ul><li>精准匹配 &gt; 字符串匹配(若有多个匹配项匹配成功，那么选择匹配长的记录) &gt; 正则匹配</li></ul></li></ul></li></ul><h3 id="十三、Nginx的rewrite规则-地址重定向"><a href="#十三、Nginx的rewrite规则-地址重定向" class="headerlink" title="十三、Nginx的rewrite规则-地址重定向"></a>十三、Nginx的rewrite规则-地址重定向</h3><ul><li><p>重写-重定向</p><ul><li>rewrite 地址重定向，实现URL重定向的重要指令，他根据regex(正则表达式)来匹配内容跳转<ul><li>语法 <code>rewrite regex replacement[flag]</code></li></ul></li></ul></li><li><p><code>rewrite ^/(.*) https://www.ldclass.club/$1 permanent</code></p><ul><li>这是一个正则表达式，匹配完整的域名和后面的路径地址</li><li>replacement部分是<code>https://www.ldclass.club$1</code>，</li><li>$1是取自regex部分()里的内容</li></ul></li><li><p>常用正则表达式：</p></li></ul><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的起始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的字符零次或者多次</td></tr><tr><td>+</td><td>匹配前面字符串一次或者多次</td></tr><tr><td>?</td><td>匹配前面字符串的零次或者一次</td></tr><tr><td>.</td><td>匹配除“\n”之外的所有单个字符</td></tr><tr><td>(pattern)</td><td>匹配括号内的pattern</td></tr></tbody></table><ul><li><p>rewrite 最后一项flag参数</p><table><thead><tr><th>标记符号</th><th>说明</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后继续向下匹配新的location URI规则</td></tr><tr><td>break</td><td>本条规则匹配完成后终⽌止，不不在匹配任何规则</td></tr><tr><td>redirect</td><td>返回302临时重定向</td></tr><tr><td>permanent</td><td>返回301永久重定向</td></tr></tbody></table></li><li><p>应用场景</p><ul><li>非法访问跳转，防盗链</li><li>网站更换新域名</li><li>http跳转https</li><li>不同地址访问同一个虚拟主机的资源</li></ul></li></ul><h3 id="十四、Nginx-配置websocket反向代理-实时通信"><a href="#十四、Nginx-配置websocket反向代理-实时通信" class="headerlink" title="十四、Nginx 配置websocket反向代理-实时通信"></a>十四、Nginx 配置websocket反向代理-实时通信</h3><ul><li>配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">server {    listen 80;    server_name aaabbb.com;    location / {        proxy_pass http://lbs;        proxy_read_timeout 300s; #websocket空闲保持时长        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>核心是下面的配置，其他和普通反向代理没区别, 表示请求服务器升级协议为WebSocket</li></ul><pre class="line-numbers language-shell"><code class="language-shell">        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>服务器处理完请求后，响应如下报文# 状态码为101</li></ul><pre class="line-numbers language-shell"><code class="language-shell">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="十五、Nginx的配置服务端缓存"><a href="#十五、Nginx的配置服务端缓存" class="headerlink" title="十五、Nginx的配置服务端缓存"></a>十五、Nginx的配置服务端缓存</h3><ul><li><p>/root/cache</p><ul><li>本地路径，用来设置Nginx缓存资源的存放地址</li></ul></li><li><p>levels=1:2</p><ul><li>默认所有缓存文件都放在上面指定的根路径中，可能影响缓存的性能，推荐指定为 2 级目录来存储缓存文件；1和2表示用1位和2位16进制来命名目录名称。第一级目录用1位16进制命名，如a；第二级目录用2位16进制命名，如3a。所以此例中一级目录有16个，二级目录有16*16=256个,总目录数为16 *256=4096个。</li><li>当levels=1:1:1时，表示是三级目录，且每级目录数均为16个</li></ul></li><li><p>key_zone</p><ul><li>在共享内存中定义一块存储区域来存放缓存的 key和 metadata</li></ul></li><li><p>max_size</p><ul><li>最大缓存空间, 如果不指定会使用掉所有磁盘空间。当达到 disk 上限后，会删除最少使用的 cache</li></ul></li><li><p>inactive</p><ul><li>某个缓存在inactive指定的时间内如果不访问，将会从缓存中删除</li></ul></li><li><p>proxy_cache_valid</p><ul><li>配置nginx cache中的缓存文件的缓存时间,proxy_cache_valid 200 304 2m 对于状态为200和304的缓存文件的缓存时间是2分钟</li></ul></li><li><p>use_temp_path</p><ul><li>建议为 off，则 nginx 会将缓存文件直接写入指定的cache 文件中</li></ul></li><li><p>proxy_cache</p><ul><li>启用proxy cache，并指定key_zone，如果proxy_cache off表示关闭掉缓存</li></ul></li><li><p>add_header Nging-Cache “$upstream_cache_status”</p><ul><li>用于前端判断是否是缓存，miss、hit、expired(缓存过期)、updating(更新，使用旧的应答)</li></ul></li><li><p>配置实例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">proxy_cache_path /root/cache levels=1:2keys_zone=xd_cache:10m max_size=1ginactive=60m use_temp_path=off;server {    location /{        ...        proxy_cache xd_cache;        proxy_cache_valid 200 304 10m;        proxy_cache_valid 404 1m;        proxy_cache_key $host$uri$is_args$args;        add_header Nginx-Cache "$upstream_cache_status";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意<ul><li>nginx缓存过期影响的优先级进行排序为：inactvie &gt;源服务器端Expires/max-age &gt; proxy_cache_valid</li><li>如果出现 Permission denied 修改nginx.conf，将第一行修改为 user root</li><li>默认情况下GET请求及HEAD请求会被缓存，而POST请求不会被缓存，并非全部都要缓存，可以过滤部分路径不用缓存</li></ul></li></ul><h3 id="十六、Nginx性能优化之静态资源压缩"><a href="#十六、Nginx性能优化之静态资源压缩" class="headerlink" title="十六、Nginx性能优化之静态资源压缩"></a>十六、Nginx性能优化之静态资源压缩</h3><ul><li>压缩配置<ul><li>对文本、js和css文件等进行压缩，一般是压缩后的大小是原始大小的25%</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#开启gzip,减少我们发送的数据量gzip on;gzip_min_length 1k;#4个单位为16k的内存作为压缩结果流缓存gzip_buffers 4 16k;#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPUgzip_comp_level 4;#压缩的类型gzip_types application/javascript text/plain text/css application/json application/xml text/javascript;#给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩gzip_vary on;#禁用IE6以下的gzip压缩，IE某些版本对gzip的压缩支持很不好gzip_disable "MSIE [1-6].";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>压缩即是以时间换空间，也是以空间换时间<ul><li>web层主要涉及浏览器和服务器的网络交互，而网络交互显然是耗费时间的</li><li>要尽量减少交互次数</li><li>降低每次请求或响应数据量。</li><li>开启压缩<ul><li>在服务端是时间换空间的策略，服务端需要牺牲时间进行压缩以减小响应数据大小</li><li>压缩后的内容可以获得更快的网络传输速度，时间是得到了优化</li><li>双向</li></ul></li></ul></li></ul><h3 id="十七、Nginx高可用解决方案"><a href="#十七、Nginx高可用解决方案" class="headerlink" title="十七、Nginx高可用解决方案"></a>十七、Nginx高可用解决方案</h3><ul><li><p>Ngnix+LVS+KeepAlived</p></li><li><p>Nginx集群架构（vip ）</p></li><li><p>LVS</p><ul><li>官网 <code>www.linuxvirtualserver.org</code></li><li>LVS是Linux Virtual Server,Linux虚拟服务器，是一个虚拟的服务器集群系统</li><li>提供了10多种调度算法： 轮询、加权轮询、最小连接、目标地址散列、源地址散列等</li><li>三种负载均衡转发技术<ul><li>NAT：数据进出都通过 LVS, 前端的Master既要处理客户端发起的请求，又要处理后台RealServer的响应信息，将RealServer响应的信息再转发给客户端, 容易成为整个集群系统性能的瓶颈; (支持任意系统且可以实现端口映射)</li><li>DR: 移花接木,最高效的负载均衡规则,前端的Master只处理客户端的请求，将请求转发给RealServer，由后台的RealServer直接响应客户端，不再经过Master, 性能要优于LVS-NAT; 需要LVS和RS集群绑定同一个VIP（支持多数系统，不可以实现端口映射)</li><li>TUNL：隧道技术，前端的Master只处理客户端的请求，将请求转发给RealServer，然后由后台的RealServer直接响应客户端，不再经过Master；（支持少数系统，不可以实现端口映射）</li></ul></li></ul></li><li><p>keepalived</p><ul><li><p>核心：监控并管理 LVS 集群系统中各个服务节点的状态</p><ul><li>keepalived是一个类似于交换机制的软件,核心作用是检测服务器的状态，如果有一台web服务器工作出现故障，Keepalived将检测到并将有故障的服务器从系统中剔除，使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成。</li><li>后来加入了vrrp(虚拟路由器冗余协议)，除了为lvs提供高可用还可以为其他服务器比如Mysql、Haproxy等软件提供高可用方案</li></ul></li><li><p>安装</p><ul><li>注意: 如果有缺少依赖可以执行下面的命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install -y gccyum install -y openssl-develyum install -y libnl libnl-develyum install -y libnfnetlink-develyum install -y net-toolsyum install -y vim wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>yum install -y keepalived</code></li><li>默认安装路径<code>cd /etc/keepalived</code></li><li>启动和查看命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#启动service keepalived start#停止service keepalived stop#查看状态service keepalived status#重启service keepalived restart#停止防火墙systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Keepalived核心配置</p><ul><li>配置<code>/etc/keepalived/keepalived.conf</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">! Configuration File for keepalivedglobal_defs {   router_id LVS_DEVEL # 设置lvs的id，在一个网络内应该是唯一的   enable_script_security #允许执行外部脚本}#配置vrrp_script，主要用于健康检查及检查失败后执行的动作。vrrp_script chk_real_server {#健康检查脚本，当脚本返回值不为0时认为失败    script "/usr/local/software/conf/chk_server.sh"#检查频率，以下配置每2秒检查1次    interval 2#当检查失败后，将vrrp_instance的priority减小5    weight -5#连续监测失败3次，才认为真的健康检查失败。并调整优先级    fall 3#连续监测2次成功，就认为成功。但不调整优先级    rise 2    user root}#配置对外提供服务的VIP vrrp_instance配置vrrp_instance VI_1 {#指定vrrp_instance的状态，是MASTER还是BACKUP主要还是看优先级。    state MASTER#指定vrrp_instance绑定的网卡，最终通过指定的网卡绑定VIP    interface ens32#相当于VRID，用于在一个网内区分组播，需要组播域内内唯一。    virtual_router_id 51#本机的优先级，VRID相同的机器中，优先级最高的会被选举为MASTER    priority 101#心跳间隔检查，默认为1s，MASTER会每隔1秒发送一个报文告知组内其他机器自己还活着。    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }#定义虚拟IP(VIP)为192.168.80.100，可多设，每行一个    virtual_ipaddress {        192.168.80.100    }    #本vrrp_instance所引用的脚本配置，名称就是vrrp_script 定义的容器名  track_script {      chk_real_server    }}# 定义对外提供服务的LVS的VIP以及portvirtual_server 192.168.80.100 80 {    # 设置健康检查时间，单位是秒    delay_loop 6    # 设置负载调度的算法为rr    lb_algo rr    # 设置LVS实现负载的机制，有NAT、TUN、DR三个模式    lb_kind NAT    # 会话保持时间    persistence_timeout 50   #指定转发协议类型(TCP、UDP)    protocol TCP    # 指定real server1的IP地址    real_server 192.168.80.129 80 {        # 配置节点权值，数字越大权重越高        weight 10        # 健康检查方式        TCP_CHECK {                  # 健康检查方式            connect_timeout 10       # 连接超时            retry 3           # 重试次数            delay_before_retry 3     # 重试间隔            connect_port 80          # 检查时连接的端口        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>健康检查脚本<code>/usr/local/software/conf/chk_server.sh</code></p><ul><li>作用<ul><li>如果某个realServer挂了，比如是Nginx挂了，那对应keepalived节点存活依旧可以转发过去，但是响应失败。</li><li>通过此脚本实现，当realServer挂了之后，自动停止对应keepalived节点，使VIP漂移到BACKUP上</li></ul></li><li>Nginx脚本示例</li></ul><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash#检查nginx进程是否存在counter=$(ps -C nginx --no-heading|wc -l)if [ "${counter}" -eq "0" ]; thenservice keepalived stopecho 'nginx server is died.......'fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：<ul><li>新建脚本需要赋予执行权限：<code>chmod +x chk_server.sh</code></li><li>需要关闭selinux，不然sh脚本可能不生效<ul><li><code>getenforce</code> 查看</li><li><code>setenforce 0</code> 关闭</li></ul></li></ul></li></ul></li><li><p>配置注意</p><ul><li>router_id后面跟的自定义的ID在同一个网络下是一致的</li><li>state后跟的MASTER和BACKUP必须是大写；否则会造成配置无法生效的问题</li><li>interface 网卡ID；要根据自己的实际情况来看，可以使用<code>ip a</code>查询</li><li>在BACKUP节点上，其keepalived.conf与Master上基本一致，修改state为BACKUP，priority值改小即可</li><li>authentication主备之间的认证方式，一般使用PASS即可；主备的配置必须一致，不能超过8位</li></ul></li></ul></li></ul><blockquote><p>keepalived 配置过程中遇到的问题</p></blockquote><ul><li><p>elinux的影响：keepalived配置了vrrp_script脚本总是无效</p><ul><li>解决<ul><li>执行脚本权限问题，关闭selinux就可以了,临时关闭：setenforce 0， 查看状态：getenforce，或者修改/etc/sysconfig/selinux文件把里面的一行修改为SELINUX=disabled，保存重启就可以了。</li></ul></li></ul></li><li><p>iptables的影响</p><ul><li><p>出现两台服务器都设置了同样的虚拟IP，这个是两台服务器的keepalived数据交互的问题，由于防火墙的原因，两台服务器没有收到相互的优先级等信息，都以为是master，所以设置了虚拟IP</p></li><li><p>解决</p><ul><li>关闭防火墙</li><li>添加keepalived组播地址<ul><li>在iptables 中加入对vrrp报文的允许<ul><li><code>-A INPUT -p vrrp -j ACCEPT</code></li></ul></li><li>CentOS7使用firewall，不使用iptables，依次执行以下命令，配置放过vrrp协议</li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --direct --permanent --add-rule ipv4 filter OUTPUT 0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><blockquote><p>扩展</p></blockquote><ul><li>Nginx+OpenResty +Lua<ul><li>OpenResty<ul><li>官网：<code>http://openresty.org</code></li></ul></li><li>OpenResty安装<ul><li><code>http://openresty.org/en/linux-packages.html#centos</code></li></ul></li><li>Lua脚本介绍<ul><li>官网：<code>http://www.lua.org/start.html</code></li></ul></li><li><code>https://github.com/openresty/lua-nginx-module#ngxvarvariable</code></li><li>使用场景<ul><li>资源下载限速</li><li>内网访问限制</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Nginx介绍&quot;&gt;&lt;a href=&quot;#一、Nginx介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Nginx介绍&quot;&gt;&lt;/a&gt;一、Nginx介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;code&gt;http://nginx.org/&lt;/code&gt;
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>状态设计模式</title>
    <link href="http://www.ldclass.club/2021/01/16/zhuang-tai-she-ji-mo-shi/"/>
    <id>http://www.ldclass.club/2021/01/16/zhuang-tai-she-ji-mo-shi/</id>
    <published>2021-01-15T21:49:16.000Z</published>
    <updated>2021-01-15T14:04:44.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>状态设计模式(State Pattern)</p></blockquote><ul><li><p>状态设计模式(State Pattern)</p><ul><li>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为 ,属于行为型模式</li><li>允许一个对象在其内部状态改变时改变它的行为</li><li>状态模式是策略模式的孪生兄弟，它们的UML图是一样的，但实际上解决的是不同情况的两种场景问题工作中用的不多，基本策略模式比较多</li></ul></li><li><p>应用场景</p><ul><li>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为</li><li>代码中包含大量与对象状态有关的条件语句 ，比如一个操作中含有庞大的多分支的条件if else语句，且这些分支依赖于该对象的状态</li><li>电商订单状态：未支付、已支付、派送中，收货完成等状态，各个状态下处理不同的事情</li></ul></li><li><p>角色</p><ul><li>Context 上下文: 定义了客户程序需要的接口并维护一个具体状态角色的实例，将与状态相关的操作委托给当前的Concrete State对象来处理</li><li>State 抽象状态类: 定义一个接口以封装与Context的一个特定状态相关的行为。</li><li>ConcreteState具体状态类: 实现抽象状态定义的接口。</li></ul></li><li><p>优点</p><ul><li>只需要改变对象状态即可改变对象的行为</li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数</li></ul></li><li><p>缺点</p><ul><li>状态模式的使用会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱</li><li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码</li></ul></li><li><p>状态设计和策略模式的区别</p><ul><li>UML图一样，结构基本类似</li><li>状态模式重点在各状态之间的切换，从而做不同的事情</li><li>策略模式更侧重于根据具体情况选择策略，并不涉及切换状态模式不同状态下做的事情不同，而策略模式做的都是同一件事。例如，聚合支付平台，有支付宝、微信支付、银联支付，虽然策略不同，但最终做的事情都是支付</li><li>状态模式，各个状态的同一方法做的是不同的事，不能互相替换</li></ul></li><li><p>实例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> State state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单状态变更"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新订单，未支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用商户客服服务，有新订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新订单，已支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用商户客服服务，订单已支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用物流服务，未发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用短信服务，通知用户已发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新物流信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderContext<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SendOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;状态设计模式(State Pattern)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态设计模式(State Pattern)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行
      
    
    </summary>
    
      <category term="设计模式" scheme="http://www.ldclass.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.ldclass.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为型" scheme="http://www.ldclass.club/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B/"/>
    
  </entry>
  
</feed>
