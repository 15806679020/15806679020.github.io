<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌生的小窝</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ldclass.club/"/>
  <updated>2021-05-18T05:45:45.063Z</updated>
  <id>http://www.ldclass.club/</id>
  
  <author>
    <name>Dong Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux调试常用命令</title>
    <link href="http://www.ldclass.club/2021/05/18/linux-diao-shi-chang-yong-ming-ling/"/>
    <id>http://www.ldclass.club/2021/05/18/linux-diao-shi-chang-yong-ming-ling/</id>
    <published>2021-05-18T13:45:45.000Z</published>
    <updated>2021-05-18T05:45:45.063Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux安装mysql</title>
    <link href="http://www.ldclass.club/2021/05/18/linux-an-zhuang-mysql/"/>
    <id>http://www.ldclass.club/2021/05/18/linux-an-zhuang-mysql/</id>
    <published>2021-05-18T11:33:44.000Z</published>
    <updated>2021-05-18T03:33:44.029Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx.conf常用配置</title>
    <link href="http://www.ldclass.club/2021/05/18/nginx-conf-chang-yong-pei-zhi/"/>
    <id>http://www.ldclass.club/2021/05/18/nginx-conf-chang-yong-pei-zhi/</id>
    <published>2021-05-18T11:32:24.000Z</published>
    <updated>2021-05-18T08:13:16.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>http</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {    #    listen       80;    #    server_name  192.168.8.104;#        location /test/file {#            # 服务默认启动目录 #           alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    server {        listen       9998 ssl;        server_name  localhost;        ssl_certificate      server.crt;        ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            #静态资源路径            root   html/webim;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>https</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    #server {        #listen       80;        #server_name  192.168.8.104;        #location /test/file {            # 服务默认启动目录     #       alias D:\\BpmLogs\\;    #        autoindex on;   #允许nginx在浏览器以文件夹形式访问    #        autoindex_exact_size off;  #显示文件大小    #        autoindex_localtime on;    #显示文件时间    #        index index.html index.htm;     #   }    #}    server {        listen            8081;        server_name        localhost;        location /{            root html\static;            index  index.html index.htm;            chunked_transfer_encoding on;            add_header Cache-Control no-cache;            try_files $uri $uri/ /index.html;        }        location /api/{            proxy_pass http://localhost:5000/;            proxy_set_header Host $http_host;            proxy_set_header X-Real_IP $remote_addr;            proxy_set_header REMOTE-HOST $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            add_header Access-Control-Allow-Origin *;            add_header Access-Control-Allow-Methods "DELETE,POST,GET,OPTIONS";            add_header Access-Control-Allow-Headers "Origin,Authorization,Accept";            add_header Access-Control-Allow-Credentials true;        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {            root html;        }    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       9998 ssl;   #     server_name  localhost;  #      ssl_certificate      server.crt; #       ssl_certificate_key  server.key;        #ssl_session_cache    shared:SSL:1m;#        ssl_session_timeout  5m;        #ssl_ciphers  HIGH:!aNULL:!MD5;        #ssl_prefer_server_ciphers  on;        #location / {            #静态资源路径          #  root   html/webim;         #   index  index.html index.htm;        #    chunked_transfer_encoding on;        #    add_header Cache-Control no-cache;        #    try_files $uri $uri/ /index.html;     #   }    #    error_page 500 502 503 504 /50x.html;    #    location = /50x.html {    #        root html;    #    }    #}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;http&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;
#user  nobody;
worker_processe
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署tomcat后，页面刷新404</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-tomcat-hou-ye-mian-shua-xin-404/</id>
    <published>2021-05-08T14:07:53.000Z</published>
    <updated>2021-05-08T06:10:30.466Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>将 npm run bulid 打包好的 dist文件放到 webapps 目录下<ul><li>访问路径：<code>http://ip:端口/dist</code></li><li>能访问成功，但可能刷新 404</li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>在上传到tomcat 项目的根目录下  创建WEB-INF/web.xml </li><li>在web.xml写入</li></ul><pre class="line-numbers language-xml"><code class="language-xml">在这里插入代码片  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaeehttp://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span> <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Router for Tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将 npm run bulid 打包好的 dist文件放到 webapps 目录下&lt;ul&gt;
&lt;li&gt;访问路径：
      
    
    </summary>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/vue/Tomcat/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>vue使用elementUI组件库在tomcat服务器部署后图标不显示</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-shi-yong-elementui-zu-jian-ku-zai-tomcat-fu-wu-qi-bu-shu-hou-tu-biao-bu-xian-shi/</id>
    <published>2021-05-08T14:00:06.000Z</published>
    <updated>2021-05-08T06:08:07.398Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>vue使用elementUI组件库在tomcat服务器部署后图标不能正常显示</li></ul></li><li><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>通过查看 /build/webpack.base.conf.js 文件可以发现，woff 或 ttf 这些字体会经由 url-loader 处理后在 static/fonts 目录下生成相应的文件。</li><li>也就是说实际应该通过 /static/fonts/** 路径来获取字体图标，而实际我们通过调试窗口发现，却是请求 /static/css/static/fonts/**，自然报错误。 <ul><li><code>GET https://localhost:8443/static/css/static/fonts/element-icons.535877f.woff net::ERR_ABORTED 404</code></li></ul></li></ul></li><li><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>打开build/utils.js文件，加上 publicPath: ‘../../‘，如下所示：</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        use<span class="token punctuation">:</span> loaders<span class="token punctuation">,</span>        fallback<span class="token punctuation">:</span> <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span><span class="token string">"../../"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新build，重新部署之后，可以正常显示</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;vue使用elementUI组件库在tomcat服务器部署后图标不能正常显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/Tomcat/vue/"/>
    
      <category term="element" scheme="http://www.ldclass.club/categories/Tomcat/vue/element/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="element" scheme="http://www.ldclass.club/tags/element/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat生成证书配置https</title>
    <link href="http://www.ldclass.club/2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/"/>
    <id>http://www.ldclass.club/2021/05/08/tomcat-sheng-cheng-zheng-shu-pei-zhi-https/</id>
    <published>2021-05-08T11:56:33.000Z</published>
    <updated>2021-05-08T05:37:10.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>tomcat之https配置（生成证书）</p></blockquote><ul><li><h4 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h4><ul><li><p>管理员打开cmd窗口，输入</p><p><code>keytool -genkey -alias tomcat -keyalg RSA -keystore D:\ssl\tomcat.keystore -validity 36500</code></p><p>keytool 是jdk中的工具。</p><p><code>D:\ssl\tomcat.keystore</code> 是证书文件保存位置</p><p><code>tomcat.keystore</code>是证书文件名称</p><p><code>-validity 36500</code> 是证书有效期，36500表示100年，默认值是90天。</p></li><li><p>输入密钥库口令</p><ul><li>输入密钥库密码：此处需要输入大于6个字符的字符串，例如123456</li></ul></li><li><p>输入两次通过后，弹出一些问题</p><ul><li><p>“您的名字与姓氏是什么？” 这是必填项，并且必须是TOMCAT部署主机的域名或者IP [如：baidu.com 或者 127.0.0.1]，就是你将来要在浏览器中输入的访问地址;</p><p>其他得问题可填可不填，最后对照信息正确则输入y，不正确打算重来则输入n。</p></li></ul></li><li><p>输入密钥口令</p><p>密钥库口令，这里我理解的是tomcat的主密码，会在tomcat配置文件中使用，建议输入与keystore的密码一致，设置其它密码也可以生成完成，可在指定目录下找到证书文件。</p></li></ul></li><li><h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><ul><li><p>修改server.xml</p><ul><li>打开tomcat目录下conf/server.xml文件，修改如下</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8999<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>               <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span>                <span class="token attr-name">compression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span>                              <span class="token attr-name">compressionMinSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span>                <span class="token attr-name">maxPostSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>                <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token punctuation">/></span></span>               <span class="token comment" spellcheck="true">&lt;!-- A "Connector" using the shared thread pool--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>        <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span>        <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span>        <span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span>        <span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">sslProtocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TLS<span class="token punctuation">"</span></span>        <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/ssl/tomcat.keystore<span class="token punctuation">"</span></span>        <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改web.xml</p><ul><li>打开conf/web.xml，在最后增加以下代码：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login-config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-method</span><span class="token punctuation">></span></span>CLIENT-CERT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>realm-name</span><span class="token punctuation">></span></span>Client Cert Users-only Area<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>realm-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Authorization setting for SSL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span><span class="token punctuation">></span></span>SSL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-data-constraint</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transport-guarantee</span><span class="token punctuation">></span></span>CONFIDENTIAL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transport-guarantee</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-data-constraint</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>至此tomcat配置完成，启动tomcat即可使用ssl，在浏览器输入localhost:8080</p><ul><li>Tomcat配置完成后，使用Https访问，Chrome会提示安全警告，点击“高级”，继续访问即可，之后再https下使用ip地址访问是没有问题的。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;tomcat之https配置（生成证书）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;生成ssl证书&quot;&gt;&lt;a href=&quot;#生成ssl证书&quot; class=&quot;headerlink&quot; title=&quot;生成ssl证书&quot;&gt;&lt;/a&gt;生
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="https" scheme="http://www.ldclass.club/categories/Tomcat/https/"/>
    
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
      <category term="https" scheme="http://www.ldclass.club/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>nginx生成证书</title>
    <link href="http://www.ldclass.club/2021/05/08/nginx-sheng-cheng-zheng-shu/"/>
    <id>http://www.ldclass.club/2021/05/08/nginx-sheng-cheng-zheng-shu/</id>
    <published>2021-05-08T11:56:15.000Z</published>
    <updated>2021-05-08T05:44:02.281Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="OpenSSl安装配置"><a href="#OpenSSl安装配置" class="headerlink" title="OpenSSl安装配置"></a>OpenSSl安装配置</h4><ul><li>下载链接：<code>https://slproweb.com/products/Win32OpenSSL.html</code></li><li>安装OpenSSL，右键以管理员身份运行，选择安装路径，安装路径不要带中文。</li><li>OpenSSl环境变量配置<ul><li>变量名：OPENSSL_HOME</li><li>变量值：F:\tool\OpenSSL-Win64</li></ul></li><li>配置PATH<ul><li>在最后添加%OPENSSL_HOME%\bin</li></ul></li></ul></li><li><h4 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h4><ul><li>打开nginx安装目录，进入F:\nginux\nginx-1.17.1\conf，在地址栏输入cmd，按回车，打开命令行窗口</li><li>执行命令：openssl genrsa -des3 -out server.key，需要你设置一个密码</li><li>执创建csr证书，命令：openssl req -new -key server.key -out server.csr，照实填写即可（此处如果报错需先执行：set OPENSSL_CONF=F:\tool\OpenSSL-Win64\bin\openssl.cfg 设置配置文件路径）</li><li>拷贝目录下生成的server.key并重命名为server.key.org</li><li>去除密码，命令：openssl rsa -in server.key.org -out server.key</li><li>生成证书文件server.crt，命令：openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt （-days 365为证书生效时间，可以设长点）</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;OpenSSl安装配置&quot;&gt;&lt;a href=&quot;#OpenSSl安装配置&quot; class=&quot;headerlink&quot; title=&quot;OpenSSl安装配置&quot;&gt;&lt;/a&gt;OpenSSl安装配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下载链接：&lt;code&gt;https://
      
    
    </summary>
    
      <category term="nginx" scheme="http://www.ldclass.club/categories/nginx/"/>
    
      <category term="https" scheme="http://www.ldclass.club/categories/nginx/https/"/>
    
    
      <category term="nginx" scheme="http://www.ldclass.club/tags/nginx/"/>
    
      <category term="https" scheme="http://www.ldclass.club/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>tomcat部署vue项目</title>
    <link href="http://www.ldclass.club/2021/05/08/tomcat-bu-shu-vue-xiang-mu/"/>
    <id>http://www.ldclass.club/2021/05/08/tomcat-bu-shu-vue-xiang-mu/</id>
    <published>2021-05-08T11:35:58.000Z</published>
    <updated>2021-05-08T05:39:44.933Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>修改vue项目下config/index.js，注意dev和build都要改assetsPublicPath的配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  build<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改路由配置src/router/index.js，增加配置base: ‘/xxx/‘，也可为空。如果这里不配置，会导致部署的项目首页访问一片空白，但不报错，且引入的文件有正常加载</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如打包文件存放在Tomcat/webapps/xxxx下，那么base就这么写，如果放到ROOT下，则base:'/'</span>  base<span class="token punctuation">:</span> <span class="token string">'/xxx/'</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行npm run build，将打包生成的dist目录下的所有东西粘贴到Tomcat/webapps/xxxx路径下，xxxx是自定义的项目名</p></li><li><p>启动tomcat，在tomcat下的bin目录中双击startup.bat文件，或者打开命令行去访问startup.bat，</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改vue项目下config/index.js，注意dev和build都要改assetsPublicPath的配置&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;mo
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/Tomcat/vue/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>vue自动触发标签点击事件</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-zi-dong-hong-fa-biao-qian-dian-ji-shi-jian/</id>
    <published>2021-05-08T10:16:26.000Z</published>
    <updated>2021-05-08T02:22:58.858Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题：页面加载时，触发某个元素的点击事件</p></li><li><p>解决思路</p><ul><li><code>directives</code></li><li><code>v-trigger</code><ul><li>directives 在生命周期内用</li></ul></li></ul><pre class="line-numbers language-vue"><code class="language-vue">export default {    data() {        return {             };    },    directives:{        'local-test':function(el,binding,vnode){            /** el可以获取当前dom节点，并且进行编译，也可以操作事件 **/            /** binding指的是一个对象，一般不用 **/            /** vnode 是 Vue 编译生成的虚拟节点 **/            //el.style.border="1px solid red";  //操作style所有样式            //console.log(el.value);  //获取v-model的值            //console.log(el.dataset.name) //data-name绑定的值，需要el.dataset来获取            //console.log(vnode.context.$route); //获取当前路由信息            trigger:{             inserted(el,binging){             console.log(el)             el.click()             // $(el).trigger('click')            }        }    },    components:{    },    filters:{    },    watch:{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题：页面加载时，触发某个元素的点击事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;directives&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-trigger&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;directiv
      
    
    </summary>
    
      <category term="vue" scheme="http://www.ldclass.club/categories/vue/"/>
    
    
      <category term="vue" scheme="http://www.ldclass.club/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署Nginx后，页面刷新404</title>
    <link href="http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/"/>
    <id>http://www.ldclass.club/2021/05/08/vue-xiang-mu-bu-shu-nginx-hou-ye-mian-shua-xin-404/</id>
    <published>2021-05-07T16:20:59.000Z</published>
    <updated>2021-05-07T08:23:34.188Z</updated>
    
    <content type="html"><![CDATA[<p>问题：</p><p>​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。</p><p>原因：</p><p>​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。</p><p>解决：</p><p>   在Nginx配置文件nginx.conf中的location节点加入如下配置。(index.html根据实际页面配置）</p><pre class="line-numbers language-shell"><code class="language-shell">try_files $uri $uri/ /index.html;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;​    Vue单页应用项目打包部署Nginx服务器后，刷新页面后，出现404。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;​    加载单页应用后路由改变均由浏览器处理，而刷新时将会请求当前的链接，而Nginx无法找到对应的页面。&lt;/p&gt;
&lt;p&gt;解决：&lt;/
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Oracle账户解锁</title>
    <link href="http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/"/>
    <id>http://www.ldclass.club/2021/03/24/oracle-zhang-hu-jie-suo/</id>
    <published>2021-03-24T15:45:34.000Z</published>
    <updated>2021-03-24T08:03:03.124Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Oracle账户被锁：the account is locked</p><ul><li>比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。</li><li>在Oracle中，连续十次尝试登录不成功，那么此账户将会被锁定</li><li>安装结束，弹出如下界面时，未正确选择“口令管理”，将scott用户解锁，并设置密码</li></ul></li><li><p><strong>解决方案步骤1：</strong></p><ul><li>Win+R打开命令行输入：sqlplus</li><li>使用system或sys账户登录，口令即安装Oracle时输入的管理口令。</li></ul></li><li><p><strong>解决方案步骤2：</strong></p><ul><li>使用命令解锁用户。命令为：alter user scott account unlock;</li></ul></li><li><p><strong>解决方案步骤3:</strong></p><ul><li>重置用户密码。命令为：alter user username identified by password;其中username为用户名（如：scott），password为新密码。</li></ul></li><li><p><strong>解决方案步骤4:</strong></p><ul><li>打开命令窗口，输入“sqlplus”命令，输入要登陆的用户名密码，查询数据库。</li></ul></li><li><p>scott用户解锁已完成</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Oracle账户被锁：the account is locked&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如：scott账户未解锁：ERROR:ORA-28000:the account is locked。&lt;/li&gt;
&lt;li&gt;在Oracle中，连续十次尝试登录不成功
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>mysql的sql_mode设置</title>
    <link href="http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/"/>
    <id>http://www.ldclass.club/2021/03/03/mysql-de-sql-mode-she-zhi/</id>
    <published>2021-03-03T15:40:39.000Z</published>
    <updated>2021-03-03T10:07:07.427Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查询sql_mode</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select @@GLOBAL.sql_mode或select @@SESSION.sql_mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置sql_mode<ul><li>通过命令设置</li><li>在配置文件中设置<ul><li>在/etc/my.cnf的[mysqld]下设置</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SET GLOBAL sql_mode = 'modes...';或SET SESSION sql_mode = 'modes...';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sql_mode常用值</li></ul><pre class="line-numbers language-shell"><code class="language-shell">ONLY_FULL_GROUP_BY对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中NO_AUTO_VALUE_ON_ZERO该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。STRICT_TRANS_TABLES在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制NO_ZERO_IN_DATE在严格模式下，不允许日期和月份为零NO_ZERO_DATE设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告ERROR_FOR_DIVISION_BY_ZERO在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULLNO_AUTO_CREATE_USER禁止GRANT创建密码为空的用户NO_ENGINE_SUBSTITUTION如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常PIPES_AS_CONCAT将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似ANSI_QUOTES启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符ORACLE的sql_mode设置等同：PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER.如果使用mysql，为了继续保留大家使用oracle的习惯，可以对mysql的sql_mode设置如下：在my.cnf添加如下配置[mysqld]sql_mode='ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;查询sql_mode&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;select @@GLOBAL.sql_mode
或
select @@SES
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/categories/MYSQL/sql-Mode/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
      <category term="sql_Mode" scheme="http://www.ldclass.club/tags/sql-Mode/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成websocket</title>
    <link href="http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/"/>
    <id>http://www.ldclass.club/2021/02/20/springboot-ji-cheng-websocket/</id>
    <published>2021-02-20T14:47:21.000Z</published>
    <updated>2021-03-03T04:47:49.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息"><a href="#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息" class="headerlink" title="一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息"></a>一、SpringBoot中建立WebSocket连接(STOMP)主动推送消息</h3><ul><li><p>STOMP协议介绍</p><ul><li>STOMP，Streaming Text Orientated Message Protocol，是流文本定向消息协议，是一种为MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。</li><li>它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理(Broker)进行交互，类似于OpenWire(一种二进制协议)。</li><li>由于其设计简单，很容易开发客户端，因此在多种语言和多种平台上得到广泛应用。其中最流行的STOMP消息代理是Apache ActiveMQ。</li></ul></li><li><p>STOMP协议工作于TCP协议之上，使用了下列命令：</p><ul><li>SEND 发送</li><li>SUBSCRIBE 订阅</li><li>UNSUBSCRIBE 退订</li><li>BEGIN 开始</li><li>COMMIT 提交</li><li>ABORT 取消</li><li>ACK 确认</li><li>DISCONNECT 断开</li></ul></li><li><p>SpringBoot使用STOMP消息</p><ul><li>添加pom文件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建<code>WebSocketStompConfig</code><ul><li>java方式配置websocket stomp使用注解@EnableWebSocketMessageBroker，实现WebSocketMessageBrokerConfigurer</li><li>@EnableWebSocketMessageBroker注解。这表明这个配置类不仅配置了WebSocket，还配置了基于代理的STOMP消息。它重载了registerStompEndpoints()方法，将“/webServer”注册为STOMP端点。这个路径与之前发送和接收消息的目的地路径有所不同。这是一个端点，客户端在订阅或发布消息到目的地路径前，要连接该端点。将其目的地前缀设置为“/topic”和“/user”。这样的话，Spring就能知道所有目的地前缀为“/topic”或“/user”的消息都会发送到STOMP代理中。根据你所选择的STOMP代理不同，目的地的可选前缀也会有所限制。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">/** * 注解开启STOMP协议来传输基于代理的消息，此时控制器支持使用@MessageMapping */</span><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册STOMP端点，发布或者订阅消息的时候需要连接此端点     * SpringBoot2.4.0版本之前 使用setAllowedOrigins *表示允许跨域     * SpringBoot2.4.0版本之后 使用setAllowedOriginPatterns *表示允许跨域     * withSockJS  表示开始SockJS支持     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span>StompEndpointRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//广播</span>        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/webServer"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置消息代理,哪种路径的消息会进行代理处理     * enableSimpleBroker 服务端推送给客户端的路径前缀     * /topic 代表发布广播，即群发     * /user 代表点对点，即发指定用户     * setApplicationDestinationPrefixes 客户端给服务器端发送消息或订阅主题的一个前缀     * 例如客户端发送消息的目的地为/app/sendTest，则对应控制层@MessageMapping(“/sendTest”)     * 客户端订阅主题的目的地为/app/subscribeTest，则对应控制层@SubscribeMapping(“/subscribeTest”)     * setPathMatcher 可以以“.”来分割路径     * setUserDestinationPrefix 点对点使用的订阅前缀（客户端订阅路径上会体现出来），不设置的话，默认也是/user/     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span>MessageBrokerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span><span class="token string">"/topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setUserDestinationPrefix</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//registry.setPathMatcher(new AntPathMatcher("."));</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置发送与接收的消息参数，可以指定消息字节大小，缓存大小，发送超时时间     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span>WebSocketTransportRegistration registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输入消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置输出消息通道的线程数，默认线程为1，可以自己自定义线程数，最大线程数，线程存活时间     * @param registration     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientOutboundChannel</span><span class="token punctuation">(</span>ChannelRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法的参数类型     * @param argumentResolvers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义控制器方法返回值类型     * @param returnValueHandlers     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addReturnValueHandlers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> returnValueHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加自定义的消息转换器     * spring 提供多种默认的消息转换器     * 返回false,不会添加消息转换器     * 返回true，会添加默认的消息转换器     * 当然也可以把自己写的消息转换器添加到转换链中     * @param messageConverters     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageConverter<span class="token operator">></span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息实体类</p><ul><li>任意对象都可以</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MessageParam{"</span> <span class="token operator">+</span>                <span class="token string">"content='"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回消息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageResult</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MessageResult</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JSON 转换 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JsonUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把Java对象转换成json字符串     *     * @param object 待转化为JSON字符串的Java对象     * @return json串 or null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">parseObjToJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            string <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Json字符串信息转换成对应的Java对象     *     * @param json json字符串对象     * @param c    对应的类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseJsonToObj</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 日期工具类 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 格式化 LocalDateTime     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime localDateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ldStr <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>ldStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ldStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 全局工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获得指定数目的UUID     *     * @param number int 需要获得的UUID数量     * @return String[] UUID数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> retArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得一个UUID     *     * @return String UUID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉“-”符号</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>webSocket控制层</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动推送模板     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> SimpMessagingTemplate template<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 广播推送     * @MessageMapping 接收客户端消息     * @SendTo 会将接收到的消息发送到指定的路径目的地，所有订阅该路径的用户都能收到，属于广播。     * result会被广播到”/topic/messages”这个订阅路径中，只要客户端订阅了这条路径，不管是哪个用户，都会接收到消息     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 精准推送，点对点订阅     * @MessageMapping接收客户端消息     * @SendToUser 会将消息路由到发送者对应的目的地。默认该注解前缀为/user。     * 如：用户订阅/user/topic/messages ，在@SendToUser('/topic/messages')查找目的地时，     * 会将目的地的转化为/user/{name}/topic/messages, 该操作是认为用户登录并且授权认证，使用name作为目的地标识。     * 发给消息来源的那个用户。（就是谁请求给谁，不会发给所有用户，区分就是依照name来区分的)。     * 此外该注解还有个broadcast属性，表明是否广播。就是当有同一个用户登录多个session时，是否都能收到。取值true/false.     * @param message     * @return     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span><span class="token string">"/topic/messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 接收到:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 点对点订阅     * 客户端订阅“/app/hello3”,服务器直接返回消息     * @return     */</span>    <span class="token annotation punctuation">@SubscribeMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"客户端订阅了/app/hello3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动精准推送，根据标识 “content” 向订阅了 /user/{{content}}/messages 路径的客户端推送消息     * content可以设置为用户标识     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 服务端发送消息给:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务器主动广播推送，向所有订阅了“/messages”路径的客户端发送消息     *     * @param message     */</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> MessageParam message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">parseObjToJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageResult</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">dateTimeFormatter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">" 上线了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"/messages"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>websocket测试页</p><ul><li>引入<code>jquery.js、sockjs.js、stomp.js</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>websocket测试页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnect();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>断开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversationDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>发送消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send_message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>返回消息:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back_message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">600</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stompClient <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setConnected</span><span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>connected<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'conversationDiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> connected <span class="token operator">?</span> <span class="token string">'visible'</span> <span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#response'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer"</span>    <span class="token comment" spellcheck="true">// http://localhost:8081/webServer</span>    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8081/webServer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>    stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/topic/messages”，对应@SendTo("/topic/messages")</span>        <span class="token comment" spellcheck="true">//或对应template.convertAndSend("/topic/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端订阅“/user/topic/messages”</span>        <span class="token comment" spellcheck="true">//对应@SendToUser("/topic/messages")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/topic/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应@SubscribeMapping("/hello3")</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/app/hello3'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端订阅“/user/'+$('#username').val()+'/messages”,</span>        <span class="token comment" spellcheck="true">// 对应template.convertAndSendToUser("username", "/messages", result);</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/messages'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            <span class="token function">showResponse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 断开连接</span><span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setConnected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span>    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"/app/hello5"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>content<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收返回的消息</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#back_message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、Vue中使用webSocket"><a href="#二、Vue中使用webSocket" class="headerlink" title="二、Vue中使用webSocket"></a>二、Vue中使用webSocket</h3><ul><li>安装sockjs-client 和 stompjs</li></ul><pre class="line-numbers language-console"><code class="language-console">npm install sockjs-clientnpm install stompjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在vue项目中引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> SockJS <span class="token keyword">from</span> <span class="token string">'sockjs-client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Stomp <span class="token keyword">from</span> <span class="token string">'stompjs'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义一个全局变量，存放开启的webSocket实例</li></ul><pre class="line-numbers language-js"><code class="language-js">stompClient<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开启webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接webSocket 使用socket.js</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取用户的userId</span>      <span class="token keyword">let</span> userId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loginInfo<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接 SockJs 的 endpoint 名称为 "/webServer" `${this.$api}/webServer`</span>      <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/webServer`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用 STOMP 子协议的 WebSocket 客户端</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// setConnected(true);</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected: '</span> <span class="token operator">+</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅消息路径  </span>        <span class="token comment" spellcheck="true">// join</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/join'</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// startMatch</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'/user/'</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">'/startMatch'</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>respnose<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//展示返回的信息，只有对应标识的客户端可以接收到服务端返回的信息</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>respnose<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关闭webSocket</li></ul><pre class="line-numbers language-js"><code class="language-js">   <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 断开连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stompClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// setConnected(false);</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot;&gt;&lt;a href=&quot;#一、SpringBoot中建立WebSocket连接-STOMP-主动推送消息&quot; class=&quot;headerlink&quot; title=&quot;一、SpringBoot中建
      
    
    </summary>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/categories/WebSocket/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
      <category term="WebSocket" scheme="http://www.ldclass.club/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mysql5.7</title>
    <link href="http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/"/>
    <id>http://www.ldclass.club/2021/02/01/docker-an-zhuang-mysql5-7/</id>
    <published>2021-01-31T22:24:20.000Z</published>
    <updated>2021-03-03T07:46:39.910Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker查找mysql5.7镜像<ul><li><code>docker search mysql5.7</code></li></ul></li><li>拉取MySQL镜像(:5.7 表示5.7版本)<ul><li><code>docker pull mysql:5.7</code></li></ul></li><li>创建挂载目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /home/app/mysql/confmkdir -p /home/app/mysql/datamkdir -p /home/app/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建my.cnf</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /home/app/mysql/conf/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在my.cnf中写入</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA## The MySQL  Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[mysqld]pid-file        = /var/run/mysqld/mysqld.pidsocket          = /var/run/mysqld/mysqld.sockdatadir         = /var/lib/mysqlsecure-file-priv= NULL# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# Custom config should go here!includedir /etc/mysql/conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行MySQL容器</li></ul><pre class="line-numbers language-shell"><code class="language-shell">docker run --restart=always -d --privileged=true -v /home/app/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /home/app/mysql/logs:/logs -v /home/app/mysql/data/mysql:/var/lib/mysql  -p 13306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=Root@123 mysql:5.7#参数说明run　run 是运行一个容器-d　 表示后台运行--restart=always 表示随docker重启-p　　表示容器内部端口和服务器端口映射关联--privileged=true　设置MySQL的root用户权限, 否则外部不能使用root用户登陆-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码--name mysql　　　　 设值容器名称为mysqlmysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器--character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci 设值数据库默认编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>新建MySQL用户</p><ul><li>先进入容器<code>docker exec -it mysql8 bash</code></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/1.png" title="进入容器"><ul><li>登录root用户：<code>mysql -uroot -p</code>，输入密码</li><li>新建用户<ul><li><code>CREATE USER 'username'@'host' IDENTIFIED BY 'password';</code><ul><li>username：你将创建的用户名</li><li>localhost：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li><li>实例<code>CREATE USER 'test'@'localhost' IDENTIFIED BY 'Test@123';</code></li></ul></li><li>更改host，设置可远程连接<ul><li><code>use mysql</code></li><li><code>update user set host='%' where user='username';</code></li></ul></li></ul></li><li>授权<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host'</code><ul><li>privileges：用户的操作权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等，如果要授予所有的权限则使用<code>ALL</code></li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li><li>实例<code>GRANT ALL ON *.* TO 'test'@'localhost';</code></li></ul></li><li>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<ul><li><code>GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;</code></li></ul></li></ul></li><li>设置与更改用户密码<ul><li>用于mysql5.7：<code>SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');</code><ul><li>更改当前登录用户密码：<code>SET PASSWORD = PASSWORD("newpassword");</code></li></ul></li><li>用于mysql8：<code>ALTER USER 'username'@'host' IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY 'newpassword';</code></li></ul></li><li>撤销用户权限<ul><li><code>REVOKE privilege ON databasename.tablename FROM 'username'@'host';</code></li><li>实例：<code>REVOKE ALL ON *.* FROM 'test'@'localhost';</code></li></ul></li><li>删除用户<ul><li><code>DROP USER 'username'@'host';</code></li><li>实例：<code>DROP USER 'test'@'localhost';</code></li></ul></li></ul></li><li><p>DBeaver连接测试</p></li></ul><img src="/2021/02/01/docker-an-zhuang-mysql5-7/2.png" title="DBeaver测试链接"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;docker查找mysql5.7镜像&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search mysql5.7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拉取MySQL镜像(:5.7 表示5.7版本)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker pu
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.ldclass.club/categories/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/Docker/MYSQL/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装oracle11g</title>
    <link href="http://www.ldclass.club/2021/02/01/docker-an-zhuang-oracle11g/"/>
    <id>http://www.ldclass.club/2021/02/01/docker-an-zhuang-oracle11g/</id>
    <published>2021-01-31T18:45:16.000Z</published>
    <updated>2021-01-31T14:21:48.211Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>安装Docker</p><p>安装环境：Centos 7.5</p><ul><li>安装wget命令 </li><li>下载阿里云docker社区版 yum源<ul><li><code>cd /etc/yum.repos.d/</code></li><li><code>wget http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li></ul></li><li>查看docker安装包：<code>yum list | grep docker</code></li><li>安装Docker Ce 社区版本：<code>yum install -y docker-ce.x86_64</code></li><li>设置开机启动：<code>systemctl enable docker</code></li><li>更新xfsprogs：<code>yum -y update xfsprogs</code></li><li>启动docker：<code>systemctl start docker</code></li><li>查看版本：<code>docker version</code></li><li>查看详细信息：<code>docker info</code></li></ul></li><li><p>配置阿里云镜像加速</p><ul><li>阿里云镜像加速器配置地址：<code>https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</code></li><li>配置步骤：<code>vi /etc/docker/daemon.json</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">{"registry-mirrors": ["https://5xok66d4.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>重启：<code>systemctl daemon-reload &amp;&amp; systemctl restart docker</code></li></ul></li><li><p>常用命令</p><ul><li>查看镜像<code>docker images</code></li><li>搜索镜像<code>docker search xxxx</code></li><li>下载xxx镜像：<code>docker pull xxxx</code></li><li>本地镜像的删除：<code>docker rmi xxxx</code></li><li>创建并启动容器：<code>docker run -itd --name=自定义名 xxx:版本号</code></li><li>查看本地所有的容器：docker ps -a</li><li>查看本地正在运行的容器：docker ps</li><li>停止容器：<code>docker stop CONTAINER_ID / CONTAINER_NAME</code></li><li>一次性停止所有容器：<code>docker stop $(docker ps -a -q)</code></li><li>启动容器：<code>docker start CONTAINER_ID / CONTAINER_NAME</code></li><li>重启容器：<code>docker restart CONTAINER_ID / CONTAINER_NAME</code></li><li>删除容器：<code>docker rm CONTAINER_ID / CONTAINER_NAME</code></li><li>强制删除容器：<code>docker rmi -f CONTAINER_ID / CONTAINER_NAME</code></li><li>查看容器详细信息：<code>docker inspect CONTAINER_ID / CONTAINER_NAME</code></li><li>进入容器：<code>docker exec -it CONTAINER_ID /bin/bash</code></li></ul></li><li><p>Docker安装oracle_11g</p><ul><li>搜索oracle_11g镜像<ul><li><code>docker search oracle_11g</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/1.png" title="搜索oracle_11g镜像"><ul><li><p>下载oracle_11g镜像</p><ul><li><p><code>docker pull iatebes/oracle_11g</code> </p><p>或</p></li><li><p><code>docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></p></li><li><p>其余镜像可以自己测试</p></li></ul></li><li><p>查看镜像</p><ul><li><code>docker images</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/2.png" title="查看镜像"><ul><li><p>防火墙设置</p><ul><li>如果选择的是<code>iatebes/oracle_11g</code>镜像，必须先关闭firewall防火墙，并开启iptables防火墙，否则启动容器报以下错误提示：<ul><li>开启iptables防火墙后，需要重启docker</li><li>参考链接<code>https://blog.csdn.net/u013948858/article/details/83115388</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/3.png" title="错误提示"><ul><li>如果选择的是<code>registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code>镜像，可以关闭防护墙，或者给防火墙开放设置的数据库访问端口<ul><li>firewall开放端口<ul><li><code>firewall-cmd --zone=public --add-port=11521/tcp --permanent</code></li><li><code>firewall-cmd --reload</code></li><li><code>firewall-cmd --list-all</code></li></ul></li></ul></li></ul></li><li><p>创建容器并启动</p><ul><li><code>docker run --restart=always -p 11521:1521 --name oracle_11g -d registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></li><li><code>--restart=always</code> ：docker重启时，同时重启容器</li></ul></li><li><p>查看已创建并运行的镜像：<code>docker ps</code></p></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/4.png" title="已创建并运行的镜像"><ul><li>登录 Docker 中 Oracle 软件所在的 oracle 用户<ul><li><code>docker exec -it my_oracle_11g bash</code></li><li>如果进入后是root用户，修改一下root用户以及oracle用户的密码，再切换到oracle用户<ul><li>passwd root</li><li>passwd oracle</li></ul></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/5.png" title="登录 Docker 中 Oracle 软件所在的 oracle 用户"><ul><li>查看 oracle 用户<ul><li><code>id oracle</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/6.png" title="查看 oracle 用户"><ul><li>查找Oracle环境变量<code>.bash_profile</code>文件路径<ul><li>需要切换到root用户</li><li><code>/opt/oracle/.bash_profile</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/7.png" title="查找Oracle环境变量`.bash_profile`文件路径"><ul><li>刷新环境变量<ul><li><code>source /opt/oracle/.bash_profile</code></li></ul></li><li>查看监听<ul><li><code>lsnrctl status</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/8.png" title="查看监听"><ul><li>修改system密码<ul><li>oracle 用户下 输入 <code>sqlplus /nolog</code>，实现无用户名登录oracle</li><li><code>conn /as sysdba</code>  连接到数据本地数据</li><li><code>alter user system identified by password;</code> 修改system 密码 为password(你自定义的密码)</li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/9.png" title="修改system密码"><ul><li>PLSQL测试链接<ul><li>输入用户名，口令，与数据库连接串 <code>ip:port/SID</code></li></ul></li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/10.png" title="PLSQL测试链接"><ul><li>从Docker退出到虚拟机</li></ul><img src="/2021/02/01/docker-an-zhuang-oracle11g/11.png" title="从Docker退出到虚拟机"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装Docker&lt;/p&gt;
&lt;p&gt;安装环境：Centos 7.5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装wget命令 &lt;/li&gt;
&lt;li&gt;下载阿里云docker社区版 yum源&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd /etc/yum.repos.d/&lt;/code&gt;&lt;/l
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
      <category term="Docker" scheme="http://www.ldclass.club/categories/Oracle/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>VMware虚拟机设置静态IP</title>
    <link href="http://www.ldclass.club/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/"/>
    <id>http://www.ldclass.club/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/</id>
    <published>2021-01-30T23:27:07.000Z</published>
    <updated>2021-01-30T16:05:31.623Z</updated>
    
    <content type="html"><![CDATA[<p>以<code>VMware® Workstation 16 Pro</code> 为例</p><p>系统 <code>CentOS7.5</code></p><ul><li><p>编辑 =》虚拟网络编辑器 </p><ul><li>点击更改设置</li></ul><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/1.png" title="虚拟网络编辑器界面"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/2.png" title="虚拟网络编辑器界面"></li><li><p>检查宿主机VM8 网卡设置，打开网络和共享中心→ 更改适配器设置→，在VMware Network Adapter VMnet8上单击右键，选择属性按钮打开属性对话框。  </p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/3.png" title="VMware Network Adapter VMnet8"><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/4.png" title="VMware Network Adapter VMnet8"></li><li><p>在虚拟机右下角，点击网络适配器按钮，右键选择断开连接，然后再重新连接，确保刚才的设置生效。然后开启虚拟机，输入<code>ifconfig</code>查看当前分配的IP。</p><img src="/2021/01/31/vmware-xu-ni-ji-she-zhi-jing-tai-ip/5.png" title="查看当前分配的ip"></li><li><p>关闭虚拟机防火墙</p><ul><li><code>systemctl stop firewalld</code></li></ul></li><li><p>关闭防火墙开机启动</p><ul><li><code>systemctl disable firewalld</code></li></ul></li><li><p>修改网络配置文件</p><ul><li><code>vim etc/sysconfig/network-scripts/xxxx</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#与自己的配置文件对比修改TYPE="Ethernet"PROXY_METHOD="none"BROWSER_ONLY="no"BOOTPROTO="static"IPADDR="192.168.6.128"NETMASK="255.255.255.0"GATEWAY="192.168.6.2"DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens32"UUID="7c379f83-cbd2-42e7-a7f6-0a8bc31c4d88"DEVICE="ens32"ONBOOT="yes"              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ul><li>ping宿主机IP（192.168.2.168）</li><li>宿主机VM8IP（192.168.6.1）</li><li>宿主机与虚拟机之前的网关IP（192.168.6.2）</li><li>ping外网IP或域名，比如（<code>www.baidu.com</code>）</li><li>都可以通则说明虚拟机固定IP设置成功。</li></ul></li><li><p>如果ping外网ip可以通，但是ping 域名，提示<code>ping: www.baidu.com: Name or service not known</code></p><ul><li><p>查看一下<code>DNS</code>的配置<code>cat /etc/resolv.conf</code></p><ul><li>如果发现<code>DNS</code>里面的配置就只有一行注释，则需要对DNS进行配置<code>vim  /etc/resolv.conf</code>，配置如下：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Generated by NetworkManagernameserver 8.8.8.8nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>重启network service</p><ul><li><code>systemctl restart network</code></li></ul></li><li><p>测试<code>ping www.baidu.com</code></p><ul><li>通过</li></ul></li><li><p>重启Linux，测试IP是否改变<code>reboot</code></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以&lt;code&gt;VMware® Workstation 16 Pro&lt;/code&gt; 为例&lt;/p&gt;
&lt;p&gt;系统 &lt;code&gt;CentOS7.5&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编辑 =》虚拟网络编辑器 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击更改设置&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
      <category term="CentOS7" scheme="http://www.ldclass.club/categories/CentOS7/"/>
    
      <category term="VMware" scheme="http://www.ldclass.club/categories/CentOS7/VMware/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/categories/CentOS7/VMware/linux/"/>
    
    
      <category term="CentOS7" scheme="http://www.ldclass.club/tags/CentOS7/"/>
    
      <category term="VMware" scheme="http://www.ldclass.club/tags/VMware/"/>
    
      <category term="linux" scheme="http://www.ldclass.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装oracle</title>
    <link href="http://www.ldclass.club/2021/01/31/linux-an-zhuang-oracle/"/>
    <id>http://www.ldclass.club/2021/01/31/linux-an-zhuang-oracle/</id>
    <published>2021-01-30T17:23:34.000Z</published>
    <updated>2021-01-30T15:44:51.028Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统：CentOS Linux release 7.5.1804 (Core) </p><p>数据库版本：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</p><p>数据库安装包：linux.x64_11gR2_database_1of2.zip、linux.x64_11gR2_database_2of2.zip（可官网下载）</p><h3 id="一、操作系统配置"><a href="#一、操作系统配置" class="headerlink" title="一、操作系统配置"></a>一、操作系统配置</h3><p>注：在Root用户下执行以下步骤</p><ul><li><p>修改用户的 SHELL 的限制（资源限制），修改 /etc/security/limits.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 <code>/etc/pam.d/login</code> 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/pam.d/login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件:</li></ul><pre class="line-numbers language-shell"><code class="language-shell">session required /lib/security/pam_limits.sosession required pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>修改 linux 内核，修改 /etc/sysctl.conf 文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表linux系统中可以打开的文件的数量fs.file-max = 6815744# 此参数限制并发未完成的请求，应该设置避免I/O子系统故障fs.aio-max-nr = 1048576# 可以使用的共享内存的总页数kernel.shmall = 2097152# 单个共享内存段的最大值（不能超过自己的内存大小，这里设置的值为2G）kernel.shmmax = 2147483648# 该参数是共享内存段的最大数量,建议用缺省值4096kernel.shmmni = 4096kernel.sem = 250 32000 100 128# IP4的端口可使用范围net.ipv4.ip_local_port_range = 9000 65500# 套接字接收缓冲区大小的缺省值net.core.rmem_default = 4194304# 套接字接收缓冲区大小的最大值net.core.rmem_max = 4194304# 套接字发送缓冲区大小的缺省值net.core.wmem_default = 262144# 套接字发送缓冲区大小的最大值net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按Esc键，输入“:wq”存盘退出</li></ul></li><li><p>要使 <code>/etc/sysctl.conf</code>更改立即生效，执行以下命令</p><pre class="line-numbers language-shell"><code class="language-shell">sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>显示如下</li></ul><pre class="line-numbers language-shell"><code class="language-shell">fs.file-max = 6815744fs.aio-max-nr = 1048576kernel.shmall = 2097152kernel.shmmax = 2147483648kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 4194304net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑 <code>/etc/profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i键进入编辑模式，将下列内容加入该文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">if [ $USER = "oracle" ]; thenif [ $SHELL = "/bin/ksh" ]; thenulimit -p 16384ulimit -n 65536elseulimit -u 16384 -n 65536fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出</li></ul></li><li><p>创建相关用户和组，作为软件安装和支持组的拥有者</p><ul><li>创建Oracle用户和密码,输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">groupadd  oinstall  groupadd  dbauseradd -g oinstall -g dba -m oraclepasswd oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后会让你输入密码，密码任意输入2次，但必须保持一致，回车确认</li></ul></li><li><p>创建数据库软件目录和数据文件存放目录，目录的位置，根据自己的情况来定，注意磁盘空间即可，这里我把其放到 oracle 用户下,输入命令</p><pre class="line-numbers language-shell"><code class="language-shell"> mkdir /home/oracle/app mkdir /home/oracle/app/oracle mkdir /home/oracle/app/oradata mkdir /home/oracle/app/oracle/product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更改目录属主为Oracle用户所有，输入命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> chown -Rf oracle:oinstall /home/oracle/app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 oracle 用户的环境变量，首先，切换到新创建的 oracle 用户下</p><pre class="line-numbers language-shell"><code class="language-shell">su – oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<code>.bash_profile</code></p><pre class="line-numbers language-shell"><code class="language-shell">vim .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按i编辑 <code>.bash_profile</code>,进入编辑模式，增加以下内容，指定的 <code>ORACLE_SID</code> 为数据库实例名</li></ul><pre class="line-numbers language-shell"><code class="language-shell">export ORACLE_BASE=/home/oracle/appexport ORACLE_HOME=$ORACLE_BASE/oracle/product/11.2.0/dbhome_1export ORACLE_SID=orclexport PATH=$PATH:$HOME/bin:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编辑完成后按 Esc 键，输入“:wq”存盘退出。</li></ul></li></ul><h3 id="二、安装-Oracle"><a href="#二、安装-Oracle" class="headerlink" title="二、安装 Oracle"></a>二、安装 Oracle</h3><ul><li><p>当上述系统要求操作全部完成后，注销系统，在图形界面以 Oracle 用户登陆。首先将下载的 Oracle 安装包 使用 FTP 发送到 Linux系统中。</p></li><li><p>运行 unzip 命令解压 oracle 安装文件，输入命令：</p><pre class="line-numbers language-shell"><code class="language-shell">unzip linux.x64_11gR2_database_1of2.zipunzip linux.x64_11gR2_database_2of2.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解压完成后 cd 进入其解压后的目录 database 使用 ls 命令可以查看解压后 database 所包含的文件</p><pre class="line-numbers language-shell"><code class="language-shell">doc  install  response  rpm  runInstaller  sshsetup  stage  welcome.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋于刚解压出来的文件夹权限</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 777 -R /home/oracle/database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装前检测依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">#可直接 yum -y install ... 安装以下依赖包rpm -q binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel gcc- gcc-c++ libaio-devel libaio libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel pdkshrpm -q binutils compat-db control-center gcc gcc-c++ glibc glibc-common gnome-libs libstdc++ libstdc++-devel make pdksh sysstat xscreensaver libaio openmotif21rpm -q gcc make binutils setarch compat-db compat-gcc compat-gcc-c++ compat-libstdc++ compat-libstdc++-devel unixODBC unixODBC-devel libaio-devel sysstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在oracle用户上执行安装oracle数据库软件</p><ul><li>进入<code>/home/oracle/database</code></li><li>执行<code>./runInstaller</code></li></ul></li><li><p>图形化界面安装参考以下链接</p><ul><li><p><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></p></li><li><p><code>https://www.cnblogs.com/alsw/p/4023245.html</code></p></li><li><p><code>Prepequisite Checks</code>，会列出所缺少的依赖包，按照提示信息一个一个解决。</p><ul><li>注意：<ul><li>OS Kernel Parameter 下的semmni的缺失是Oracle没有检测到，其实有，选中缺失的依赖包，如果下方详情栏里Expected value中有括号中标注(i386)或(i686)，是在提示缺少32位的依赖包，但是实际上已经安装了64位的依赖包，忽略它们，pdksh包已经安装，就是之前安装的ksh依赖包。</li><li>如果还有提示的其他缺少的依赖包没有安装就去安装，按提示解决缺少的依赖包，之后点击 “Check Again”，再检查一遍，没有问题了，勾选ignore all,点击“Next”</li></ul></li></ul></li><li><p>安装过程中可能会弹窗提示<code>error in invoking target install of makefile</code>错误</p><ul><li>解决方法参考链接：<code>http://blog.itpub.net/22996654/viewspace-2063349/</code></li></ul></li></ul></li><li><p>安装到最后一步，会跳出如下执行脚本的提示</p><ul><li>打开一个终端，使用root登录，执行要求执行的脚本，执行完毕后在图形界面点OK</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> cd /home/oracle/app/oracle/product/11.2.0/dbhome_1 ./root.sh #此处提示输入oracle_home路径 /home/oracle/oraInventory ./orainstRoot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据库建库和配置监听及本地服务</p><ul><li>参考链接：<ul><li><code>https://blog.csdn.net/zuozewei/article/details/103226666?utm_source=app</code></li><li><code>https://www.cnblogs.com/alsw/p/4023245.html</code></li></ul></li></ul></li><li><p>plsql测试是否能连接</p></li></ul><h3 id="三、根据需求建库建表"><a href="#三、根据需求建库建表" class="headerlink" title="三、根据需求建库建表"></a>三、根据需求建库建表</h3><ul><li><code>https://www.ldclass.club/2020/11/12/shu-ju-ku-bei-fen-huan-yuan/</code></li></ul><h3 id="四、oracle配置开机自启动"><a href="#四、oracle配置开机自启动" class="headerlink" title="四、oracle配置开机自启动"></a>四、oracle配置开机自启动</h3><ul><li><p>先以root身份登录到linux系统</p><ul><li><code>vim /etc/oratab</code></li><li>将<code>orcl:/home/oracle/app/oracle/product/11.2.0/dbhome_1:N</code>中的N 更改为 Y</li><li>:wq保存，关闭 </li></ul></li><li><p><code>chmod +x /etc/rc.d/rc.local</code></p></li><li><p><code>vim /etc/rc.d/rc.local</code></p></li><li><p>添加</p><ul><li><code>su oracle -lc "/home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start"</code></li><li><code>su oracle -lc /home/oracle/app/oracle/product/11.2.0/dbhome_1/bin/dbstart</code></li></ul></li><li><p>:wq保存，关闭</p></li><li><p><code>reboot</code>重启虚拟机，测试是否自启</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;操作系统：CentOS Linux release 7.5.1804 (Core) &lt;/p&gt;
&lt;p&gt;数据库版本：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production&lt;/p&gt;

      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://www.ldclass.club/2021/01/23/zookeeper/"/>
    <id>http://www.ldclass.club/2021/01/23/zookeeper/</id>
    <published>2021-01-22T16:57:26.000Z</published>
    <updated>2021-01-22T09:29:23.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、注册中心之zookeeper"><a href="#一、注册中心之zookeeper" class="headerlink" title="一、注册中心之zookeeper"></a>一、注册中心之zookeeper</h3><ul><li><p>注册中心</p><ul><li>理解注册中心：服务管理,核心是有个服务注册表，心跳机制动态维护</li><li>服务提供者provider: 启动的时候向注册中心上报自己的网络信息</li><li>服务消费者consumer: 启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息</li></ul></li><li><p>主流的注册中心</p><ul><li>zookeeper、Eureka、nacos</li></ul></li><li><p>安装zookeeper</p><ul><li>下载zookeeper<ul><li><code>https://zookeeper.apache.org/</code></li></ul></li><li>重命名conf目录下的zoo_sample.cfg 文件为zoo.cfg 并修改里面的内容</li><li>主要配置项</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#心跳基本时间单位，毫秒级，ZK基本上所有的时间都是这个时间的整数倍tickTime=2000#集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数initLimit=10#集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数syncLimit=5#内存数据库快照存放地址，如果没有指定事务日志存放地址(dataLogDir)，默认也是存放在这个 路径下，建议两个地址分开存放到不同的设备上。dataDir=F:\zookeeper-3.4.12\zookeeper-3.4.12\data#端口clientPort=2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>centos下安装zk<ul><li>上传tar包到<code>url/local</code></li><li>解压<code>tar -zxvf zookeeper-3.4.12.tar.gz</code></li><li><code>cd /usr/local/zookeeper-3.4.12/conf</code></li><li><code>mv zoo_sample.cfg zoo.cfg</code></li><li><code>vim zoo.cfg</code></li><li>修改dataDir <code>/usr/local/zookeeper-3.4.12/data</code></li><li>新建zookeeper用户</li><li>将整个文件夹所属权赋予zookeeper用户 <code>chown -R zookeeper:zookeeper /usr/local/zookeeper-3.4.12</code></li><li>切换到zookeeper用户 su zookeeper</li><li><code>cd /usr/local/zookeeper-3.4.12/bin</code><ul><li>找到对应的zkServer.sh启动<code>./zkServer.sh start</code></li></ul></li><li>防火墙开放端口<ul><li><code>firewall-cmd --zone=public --permanent --add-port=2181/tcp</code></li></ul></li><li>重启防火墙<ul><li><code>systemctl restart firewalld</code></li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、注册中心之zookeeper&quot;&gt;&lt;a href=&quot;#一、注册中心之zookeeper&quot; class=&quot;headerlink&quot; title=&quot;一、注册中心之zookeeper&quot;&gt;&lt;/a&gt;一、注册中心之zookeeper&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心&lt;
      
    
    </summary>
    
      <category term="Zookeeper" scheme="http://www.ldclass.club/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="http://www.ldclass.club/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据备份</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-shu-ju-bei-fen/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-shu-ju-bei-fen/</id>
    <published>2021-01-21T09:25:49.000Z</published>
    <updated>2021-01-21T02:28:07.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据备份"><a href="#一、数据备份" class="headerlink" title="一、数据备份"></a>一、数据备份</h3><ul><li><p>数据备份的意义</p><ul><li>保护数据的安全</li><li>在出现意外的时候（硬盘的损坏，断电，黑客的攻击），以便数据的恢复</li><li>导出生产的数据以便研发人员或者测试人员测试学习</li><li>高权限的人员操作失误导致数据丢失，以便恢复</li></ul></li><li><p>数据库的备份类型</p><ul><li>完全备份：对整个数据库的数据进行备份</li><li>部分备份：对部分数据进行备份（可以是一张表也可以是多张表）<ul><li>增量备份：是以上一次备份为基础来备份变更数据的，节约空间</li><li>差异备份：是以第一次完全备份的基础来备份变更备份的，浪费空间</li></ul></li></ul></li><li><p>数据库备份的方式</p><ul><li>逻辑备份：直接生成sql语句保存起来，在恢复数据的时候执行备份的sql语句来实现数据的恢复</li><li>物理备份：直接拷贝相关的物理数据</li><li>区别：逻辑备份效率低，恢复数据效率低，但是逻辑备份节约空间；物理备份浪费空间，但是相对逻辑备份而言效率比较高</li></ul></li><li><p>数据库备份的场景</p><ul><li>热备份：备份时，数据库的读写操作不会受到影响</li><li>温备份：备份时，数据库的读操作可以进行，但是写操作不能执行</li><li>冷备份：备份时，不能进行任何操作</li></ul></li></ul><h3 id="二、mysqldump数据备份"><a href="#二、mysqldump数据备份" class="headerlink" title="二、mysqldump数据备份"></a>二、mysqldump数据备份</h3><ul><li><p>mysqldump使用语法：</p><ul><li><code>mysqldump -u 用户 -h host -p 密码 dbname table &gt; 路径</code></li></ul></li><li><p>远程备份单库示例</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库例子并保留创建库语句</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix | gzip > /mysql_data_back/zabbix_bak.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份单库单表</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 zabbix users | gzip > /mysql_data_back/zabbix_users.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份多库的例子</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --databases zabbix XD | gzip > /mysql_data_back/zabbix_XD.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程备份全库</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -pabc123456 -h120.25.93.69 --all-databases | gzip > /mysql_data_back/all.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、mysql数据恢复"><a href="#三、mysql数据恢复" class="headerlink" title="三、mysql数据恢复"></a>三、mysql数据恢复</h3><ul><li>远程恢复数据（备份的数据文件里有创建库的语句）</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程恢复数据（备份的数据文件里没有创建库的语句）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -pabc123456 -h120.25.93.69 zabbix < zabbix_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、mysql物理备份"><a href="#四、mysql物理备份" class="headerlink" title="四、mysql物理备份"></a>四、mysql物理备份</h3><ul><li>查找数据库源文件路径</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'datadir%';datadir    /var/lib/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/my.cnfdatadir=/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>MyISAM表源文件</p><ul><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则</li><li>.frm ：记录着表结构信息的文件</li><li>.MYI：记录着索引的文件</li><li>.MYD :记录着表的数据</li></ul></li><li><p>InnoDB表源文件</p><ul><li>InnoDB有着共享表空间跟独立表空间的概念</li><li>db.opt：创建库的时候生成，主要存储着当前库的默认字符集和字符校验规则􀁿􀁿</li><li>.frm ：记录着表结构信息的文件</li><li>.ibd ：独立表空间，里边记录这个表的数据和索引</li><li>ibdata1：共享表空间，里边记录表的数据和索引</li><li>ib_logfile0 ib_logfile1：事务日志, 物理备份不要忘记这两个文件</li></ul></li><li><p>热备时，请求全局读锁</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush tables with read lock;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解锁：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、二进制日志mysqlbinlog备份数据"><a href="#五、二进制日志mysqlbinlog备份数据" class="headerlink" title="五、二进制日志mysqlbinlog备份数据"></a>五、二进制日志mysqlbinlog备份数据</h3><ul><li><p>二进制日志</p><ul><li>二进制日志就是记录着mysql数据库中的一些写入性操作，比如一些增删改，但是，不包括查询！</li></ul></li><li><p>一般情况下，二进制日志有着数据复制和数据恢复的功能</p></li><li><p>开启二进制日志会有1%的性能消耗！</p></li><li><p>查看二进制日志是否开启</p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'log_bin%';log_bin            ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开启二进制日志 </li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/my.cnf[mysqld]log-bin=/data/mydata/log_bin/mysql-bin路径自定义创建server-id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有的binlog日志列表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show master logs;mysql-bin.000001    201mysql-bin.000002    201mysql-bin.000003    90274mysql-bin.000004    63489mysql-bin.000005    13788<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>刷新二进制日志：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">flush logs;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重置(清空）二进制日志文件</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用mysqldump备份数据时，加上-F选项可以重新生成一个新的二进制日志文件</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqldump -uroot -p XD user -F > user_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、二进制日志mysqlbinlog恢复数据"><a href="#六、二进制日志mysqlbinlog恢复数据" class="headerlink" title="六、二进制日志mysqlbinlog恢复数据"></a>六、二进制日志mysqlbinlog恢复数据</h3><ul><li><p>查看二进制日志文件的内容</p><ul><li><p><code>cd /data/mydata/log_bin/mysql-bin</code></p></li><li><p><code>mysqlbinlog mysql-bin.000002</code></p></li><li><p>报错<code>mysqlbinlog: [ERROR] unknown variable 'default-character-set=utf8'</code></p></li><li><p>解决</p><ul><li>第一种：在mysqlbinlog 后边加上 –no-defaults</li><li>第二种：注释掉配置文件里边的default-character-set=utf8</li></ul></li></ul></li><li><p>把二进制日志文件导出成普通文件</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --base64-output=DECODE-ROWS -v mysql-bin.000002 > mysqlbin.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>找出要恢复的位置</p><ul><li>找出关键字(drop)的行数：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | grep -iw 'drop'</code></li><li>打印出相关内容(4170至4180行)：<code>mysqlbinlog --no-defaults mysql-bin.000002 | cat -n | sed -n '4170,4180p'</code></li><li>找到<code># at xxxx</code></li></ul></li><li><p>恢复数据</p><ul><li>第一步：把备份的数据表恢复到数据库中：<code>mysql -uroot -p test &lt; sys_users.sql</code></li><li>第二步：利用上面找到的删除的位置进行恢复数据<ul><li><code>--start-position="xxxx"</code>可以省略</li></ul></li></ul></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mysqlbinlog --no-defaults --set-charset=utf8 --start-position="xxxx" --stop-position="xxxx" /usr/local/software/log_bin/mysql-bin.000002 | mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、数据备份&quot;&gt;&lt;a href=&quot;#一、数据备份&quot; class=&quot;headerlink&quot; title=&quot;一、数据备份&quot;&gt;&lt;/a&gt;一、数据备份&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据备份的意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护数据的安全&lt;/li&gt;
&lt;li&gt;在出现意外的时
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql语句优化思路</title>
    <link href="http://www.ldclass.club/2021/01/21/mysql-yu-ju-you-hua-si-lu/"/>
    <id>http://www.ldclass.club/2021/01/21/mysql-yu-ju-you-hua-si-lu/</id>
    <published>2021-01-21T09:17:08.000Z</published>
    <updated>2021-01-21T01:25:19.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mysql的慢查询日志开启</p></blockquote><ul><li>查看是否已经开启了慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like 'slow%';slow_launch_time        2slow_query_log            ONslow_query_log_file        /var/lib/mysql/iZ2zeewcii3f53e59qe1neZ-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启慢查询日志</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set global slow_query_log = on ;#日志路径也可以自定义：1.路径存在且mysql有读写权限：sudo chown mysql:mysql -R /usr/local/mysqlSlowLog/2.set global slow_query_log_file = '路径';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看慢查询的时间临界值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%long%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置慢查询的时间标准</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set long_query_time=0.4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>永久生效的设置方法  </li></ul><pre class="line-numbers language-shell"><code class="language-shell">#修改配置文件 vi /etc/my.cnf[mysqld]slow_query_log = 1long_query_time = 0.1slow_query_log_file =/usr/local/mysql/mysql_slow.log#必须重启服务才能生效！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mysql的sql语句执行过程解析</p></blockquote><ul><li>查看性能详情是否开启</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show variables like '%profiling%';have_profiling            YESprofiling                ONprofiling_history_size    15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启性能记录功能</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set profiling = on ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看性能的记录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看语句的执行性能详情</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profile for query 4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>性能线程的详细解释官方文档链接<ul><li><code>https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html</code></li></ul></li></ul><blockquote><p>mysql语句优化思路</p></blockquote><ul><li>尽量避免使用select *from ，尽量精确到想要的结果字段</li><li>尽量避免条件使用or</li><li>记得加上limit 限制行数，避免数据量过大消耗性能</li><li>使用模糊查询时，%放在前面是会使索引失效</li><li>要小心条件字段类型的转换</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mysql的慢查询日志开启&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查看是否已经开启了慢查询日志&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-mysql&quot;&gt;&lt;code class=&quot;lan
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
</feed>
