<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌生的小窝</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ldclass.club/"/>
  <updated>2021-07-13T09:55:43.585Z</updated>
  <id>http://www.ldclass.club/</id>
  
  <author>
    <name>Dong Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql主从复制</title>
    <link href="http://www.ldclass.club/2021/07/14/mysql-zhu-cong-fu-zhi/"/>
    <id>http://www.ldclass.club/2021/07/14/mysql-zhu-cong-fu-zhi/</id>
    <published>2021-07-13T17:45:07.000Z</published>
    <updated>2021-07-13T09:55:43.585Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="主从同步复制有以下几种方式："><a href="#主从同步复制有以下几种方式：" class="headerlink" title="主从同步复制有以下几种方式："></a>主从同步复制有以下几种方式：</h4><ul><li>同步复制，master的变化，必须等待slave-1,slave-2,…,slave-n完成后才能返回。</li><li>异步复制，master只需要完成自己的数据库操作即可，至于slaves是否收到二进制日志，是否完成操作，不用关心。MYSQL的默认设置。</li><li>半同步复制，master只保证slaves中的一个操作成功，就返回，其他slave不管。这个功能，是由google为MYSQL引入的。</li></ul></li><li><h4 id="分别在两台centos-7系统上安装mysql-5-7"><a href="#分别在两台centos-7系统上安装mysql-5-7" class="headerlink" title="分别在两台centos 7系统上安装mysql 5.7"></a>分别在两台centos 7系统上安装mysql 5.7</h4></li><li><h4 id="master主服务器的配置"><a href="#master主服务器的配置" class="headerlink" title="master主服务器的配置"></a>master主服务器的配置</h4><ul><li>配置文件my.cnf的修改</li></ul><pre class="line-numbers language-cnf"><code class="language-cnf">#编辑my.cnf文件[root@localhost mysql]# vim /etc/my.cnf#在[mysqld]中添加：server-id=1log_bin=master-binlog_bin_index=master-bin.indexbinlog_do_db=test#备注：#server-id 服务器唯一标识。#log_bin 启动MySQL二进制日志，即数据同步语句，从数据库会一条一条的执行这些语句。#binlog_do_db 指定记录二进制日志的数据库，即需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可。#binlog_ignore_db 指定不记录二进制日志的数据库，即不需要复制的数据库名，如果有多个数据库，重复设置这个选项即可。#其中需要注意的是，binlog_do_db和binlog_ignore_db为互斥选项，一般只需要一个即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建从服务器的用户和权限</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#进入mysql数据库</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>Enter password:<span class="token comment" spellcheck="true">#创建从数据库的masterbackup用户和权限</span>mysql<span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> masterbackup@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#备注</span><span class="token comment" spellcheck="true">#192.168.17.%通配符，表示0-255的IP都可访问主服务器，正式环境请配置指定从服务器IP</span><span class="token comment" spellcheck="true">#若将 192.168.17.% 改为 %，则任何ip均可作为其从数据库来访问主服务器</span><span class="token comment" spellcheck="true">#退出mysql</span>mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启mysql服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看主服务器状态</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#进入mysql数据库</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>Enter password:<span class="token comment" spellcheck="true">#查看主服务器状态</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>              <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> master<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">154</span> <span class="token operator">|</span> test         <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="slave从服务器的配置"><a href="#slave从服务器的配置" class="headerlink" title="slave从服务器的配置"></a>slave从服务器的配置</h4><ul><li>配置文件my.cnf的修改</li></ul><pre class="line-numbers language-cnf"><code class="language-cnf">#根据上一篇文章，编辑my.cnf文件[root@localhost mysql]# vim /etc/my.cnf#在[mysqld]中添加：server-id=2relay-log=slave-relay-binrelay-log-index=slave-relay-bin.index#replicate-do-db=test#备注：#server-id 服务器唯一标识，如果有多个从服务器，每个服务器的server-id不能重复，跟IP一样是唯一标识，如果你没设置server-id或者设置为0，则从服务器不会连接到主服务器。#relay-log 启动MySQL二进制日志，可以用来做数据备份和崩溃恢复，或主服务器挂掉了，将此从服务器作为其他从服务器的主服务器。#replicate-do-db 指定同步的数据库，如果复制多个数据库，重复设置这个选项即可。若在master端不指定binlog-do-db，则在slave端可用replication-do-db来过滤。#replicate-ignore-db 不需要同步的数据库，如果有多个数据库，重复设置这个选项即可。#其中需要注意的是，replicate-do-db和replicate-ignore-db为互斥选项，一般只需要一个即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启mysql服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>连接master主服务器</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#进入mysql数据库[root@localhost mysql]# mysql -uroot -pEnter password:#连接master主服务器mysql> change master to master_host='192.168.17.130',master_port=3306,master_user='masterbackup',master_password='123456',master_log_file='master-bin.000001',master_log_pos=154;#备注：#master_host对应主服务器的IP地址。#master_port对应主服务器的端口。#master_log_file对应show master status显示的File列：master-bin.000001。#master_log_pos对应show master status显示的Position列：154。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动slave数据同步</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#启动slave数据同步</span>mysql<span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#停止slave数据同步（若有需要）</span>mysql<span class="token operator">></span> stop slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看slave信息，Slave_IO_Running和Slave_SQL_Running都为yes，则表示同步成功。</li></ul><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> slave <span class="token keyword">status</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event                  Master_Host: <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">70.129</span>                  Master_User: <span class="token keyword">backup</span>                  Master_Port: <span class="token number">13306</span>                Connect_Retry: <span class="token number">60</span>              Master_Log_File: master<span class="token operator">-</span>bin<span class="token number">.000001</span>          Read_Master_Log_Pos: <span class="token number">154</span>               Relay_Log_File: slave<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token number">.000003</span>                Relay_Log_Pos: <span class="token number">321</span>        Relay_Master_Log_File: master<span class="token operator">-</span>bin<span class="token number">.000001</span>             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:          Replicate_Ignore_DB:           Replicate_Do_Table:       Replicate_Ignore_Table:      Replicate_Wild_Do_Table:  Replicate_Wild_Ignore_Table:                   Last_Errno: <span class="token number">0</span>                   Last_Error:                 Skip_Counter: <span class="token number">0</span>          Exec_Master_Log_Pos: <span class="token number">154</span>              Relay_Log_Space: <span class="token number">528</span>              Until_Condition: None               Until_Log_File:                Until_Log_Pos: <span class="token number">0</span>           Master_SSL_Allowed: <span class="token keyword">No</span>           Master_SSL_CA_File:           Master_SSL_CA_Path:              Master_SSL_Cert:            Master_SSL_Cipher:               Master_SSL_Key:        Seconds_Behind_Master: <span class="token number">0</span>Master_SSL_Verify_Server_Cert: <span class="token keyword">No</span>                Last_IO_Errno: <span class="token number">0</span>                Last_IO_Error:               Last_SQL_Errno: <span class="token number">0</span>               Last_SQL_Error:  Replicate_Ignore_Server_Ids:             Master_Server_Id: <span class="token number">1</span>                  Master_UUID: <span class="token number">8ffb067d</span><span class="token operator">-</span><span class="token number">b7bb</span><span class="token operator">-</span><span class="token number">11eb</span><span class="token operator">-</span><span class="token number">8ced</span><span class="token operator">-</span><span class="token number">000c291e5989</span>             Master_Info_File: <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>master<span class="token punctuation">.</span>info                    SQL_Delay: <span class="token number">0</span>          SQL_Remaining_Delay: <span class="token boolean">NULL</span>      Slave_SQL_Running_State: Slave has <span class="token keyword">read</span> <span class="token keyword">all</span> relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates           Master_Retry_Count: <span class="token number">86400</span>                  Master_Bind:      Last_IO_Error_Timestamp:     Last_SQL_Error_Timestamp:               Master_SSL_Crl:           Master_SSL_Crlpath:           Retrieved_Gtid_Set:            Executed_Gtid_Set:                Auto_Position: <span class="token number">0</span>         Replicate_Rewrite_DB:                 Channel_Name:           Master_TLS_Version:<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;主从同步复制有以下几种方式：&quot;&gt;&lt;a href=&quot;#主从同步复制有以下几种方式：&quot; class=&quot;headerlink&quot; title=&quot;主从同步复制有以下几种方式：&quot;&gt;&lt;/a&gt;主从同步复制有以下几种方式：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;同步复制，ma
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>JAVA面试题</title>
    <link href="http://www.ldclass.club/2021/07/07/java-mian-shi-ti/"/>
    <id>http://www.ldclass.club/2021/07/07/java-mian-shi-ti/</id>
    <published>2021-07-06T22:56:13.000Z</published>
    <updated>2021-07-06T17:19:50.458Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、集合框架"><a href="#一、集合框架" class="headerlink" title="一、集合框架"></a>一、集合框架</h4><h5 id="Java-集合类框架的基本接口有哪些？"><a href="#Java-集合类框架的基本接口有哪些？" class="headerlink" title="Java 集合类框架的基本接口有哪些？"></a>Java 集合类框架的基本接口有哪些？</h5><pre class="line-numbers language-test"><code class="language-test">集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它 自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。Java 集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java 集合类里面 最基本的接口有：Collection：代表一组对象，每一个对象都是它的子元素。Set：不包含重复元素的 Collection。List：有顺序的 collection，并且可以包含重复元素。Map：可以把键 (key) 映射到值 (value) 的对象，键不能重复。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Set-里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别"><a href="#Set-里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别" class="headerlink" title="Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用 == 还是 equals()? 它们有何区别?"></a>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用 == 还是 equals()? 它们有何区别?</h5><pre><code>Set 里的元素是不能重复的，元素重复与否是使用 equals() 方法进行判断的。equals() 和 == 方法决定引用值是否指向同一对象 equals() 在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。</code></pre><h5 id="两个对象值相同-x-equals-y-true-，但却可以有不同的-hash-code，这句话对不对"><a href="#两个对象值相同-x-equals-y-true-，但却可以有不同的-hash-code，这句话对不对" class="headerlink" title="两个对象值相同 (x.equals(y) == true)，但却可以有不同的 hash code，这句话对不对?"></a>两个对象值相同 (x.equals(y) == true)，但却可以有不同的 hash code，这句话对不对?</h5><pre><code>对。如果对象要保存在 HashSet 或 HashMap 中，它们的 equals 相等，那么，它们的 hashcode 值就必须相等。如果不是要保存在 HashSet 或 HashMap，则与 hashcode 没有什么关系了，这时候 hashcode 不等是可以的，例如 arrayList 存储的对象就不用实现 hashcode，当然，我们没有理由不实现，通常都会去实现的。</code></pre><h5 id="数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用-Array-而不是-ArrayList？"><a href="#数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用-Array-而不是-ArrayList？" class="headerlink" title="数组 (Array) 和列表 (ArrayList) 有什么区别？什么时候应该使用 Array 而不是 ArrayList？"></a>数组 (Array) 和列表 (ArrayList) 有什么区别？什么时候应该使用 Array 而不是 ArrayList？</h5><pre><code>Array 可以包含基本类型和对象类型，ArrayList 只能包含对象类型。Array 大小是固定的，ArrayList 的大小是动态变化的。ArrayList 处理固定大小的基本数据类型的时候，这种方式相对比较慢。</code></pre><h5 id="HashSet-和-TreeSet-有什么区别？"><a href="#HashSet-和-TreeSet-有什么区别？" class="headerlink" title="HashSet 和 TreeSet 有什么区别？"></a>HashSet 和 TreeSet 有什么区别？</h5><pre><code>HashSet 是由一个 hash 表来实现的，因此，它的元素是无序的。add()，remove()，contains()TreeSet 是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()， remove()，contains() 方法的时间复杂度是 O(logn)。</code></pre><h5 id="ArrayList-和-Vector-有什么区别？"><a href="#ArrayList-和-Vector-有什么区别？" class="headerlink" title="ArrayList 和 Vector 有什么区别？"></a>ArrayList 和 Vector 有什么区别？</h5><pre><code>ArrayList 与 Vector 的区别，这主要包括两个方面同步性：Vector 是线程安全的，也就是说是它的方法之间是线程同步的，而 ArrayList 是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用 ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用 Vector，因为不需要我们自己再去考虑和编写线程安全的代码。备注：对于 Vector&amp;ArrayList、Hashtable&amp;HashMap，要记住线程安全的问题，记住 Vector 与 Hashtable是线程安全的，ArrayList 与 HashMap 是线程不安全的。数据增长：ArrayList 与 Vector 都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加 ArrayList 与 Vector 的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。Vector 默认增长为原来两倍，而 ArrayList 的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的 1.5 倍）。ArrayList 与 Vector 都可以设置初始的空间大小，Vector 还可以设置增长的空间大小，而 ArrayList 没有提供设置增长空间的方法。</code></pre><h5 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器 (Iterator)？"></a>什么是迭代器 (Iterator)？</h5><pre><code>Iterator 接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代 器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素, 但是不可以直接调用集合的 remove(Object Obj) 删除，可以通过迭代器的 remove() 方法删除。</code></pre><h5 id="Iterator-和-ListIterator-的区别是什么？"><a href="#Iterator-和-ListIterator-的区别是什么？" class="headerlink" title="Iterator 和 ListIterator 的区别是什么？"></a>Iterator 和 ListIterator 的区别是什么？</h5><pre><code>Iterator 可用来遍历 Set 和 List 集合，但是 ListIterator 只能用来遍历 List。Iterator 对集合只能是前向遍历，ListIterator 既可以前向也可以后向。ListIterator 实现了 Iterator 接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</code></pre><h5 id="Comparable-和-Comparator-接口是干什么的？列出它们的区别。"><a href="#Comparable-和-Comparator-接口是干什么的？列出它们的区别。" class="headerlink" title="Comparable 和 Comparator 接口是干什么的？列出它们的区别。"></a>Comparable 和 Comparator 接口是干什么的？列出它们的区别。</h5><pre><code>Java 提供了只包含一个 compareTo() 方法的 Comparable 接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。Java 提供了包含 compare() 和 equals() 两个方法的 Comparator 接口。compare() 方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals() 方法需要一个对象作为参数，它用来决定输入参数是否和 comparator 相等。只有当输入参数也是一个 comparator 并且输入参数和当前 comparator 的排序结果是相同的时 候，这个方法才返回 true。</code></pre><h5 id="Collection-和-Collections-的区别。"><a href="#Collection-和-Collections-的区别。" class="headerlink" title="Collection 和 Collections 的区别。"></a>Collection 和 Collections 的区别。</h5><pre><code>collection 是集合类的上级接口, 继承与它的接口主要是 set 和 list。collections 类是针对集合类的一个帮助类. 它提供一系列的静态方法对各种集合的搜索, 排序, 线程安全化等操作。</code></pre><h5 id="heap-和-stack-有什么区别。"><a href="#heap-和-stack-有什么区别。" class="headerlink" title="heap 和 stack 有什么区别。"></a>heap 和 stack 有什么区别。</h5><pre><code>Java 的内存分为两类，一类是栈内存，一类是堆内存。栈内存是指程序进入一个方法时，会为这个方法单独分配一块私属存储空间，用于存储这个方法内部的局部变量，当这个方法结束时，分配给这个方法的栈会释放，这个栈中的变量也将随之释放。堆是与栈作用不同的内存，一般用于存放不放在当前方法栈中的那些数据，例如，使用 new 创建的对象都放在堆里，所以，它不会随方法的结束而消失。方法中的局部变量使用 final 修饰后，放在堆中，而不是栈中。</code></pre><h4 id="二、Spring"><a href="#二、Spring" class="headerlink" title="二、Spring"></a>二、Spring</h4><h5 id="使用Spring-框架的好处是什么？"><a href="#使用Spring-框架的好处是什么？" class="headerlink" title="使用Spring 框架的好处是什么？"></a>使用Spring 框架的好处是什么？</h5><pre><code>轻量：Spring 是轻量的，基本的版本大约2MB控制反转：Spring 通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们面向切面的编程(AOP)：Spring 支持面向切面的编程，并且把应用业务逻辑和系统服务分开容器：Spring 包含并管理应用中对象的生命周期和配置MVC 框架：Spring 的WEB 框架是个精心设计的框架，是Web 框架的一个很好的替代品事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）异常处理： Spring 提供方便的API 把具体技术相关的异常（ 比如由JDBC ，Hibernate or JDO 抛出的）转化为一致的unchecked 异常</code></pre><h5 id="什么是Spring-IOC-容器？"><a href="#什么是Spring-IOC-容器？" class="headerlink" title="什么是Spring IOC 容器？"></a>什么是Spring IOC 容器？</h5><pre><code>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</code></pre><h5 id="IOC-的优点是什么？"><a href="#IOC-的优点是什么？" class="headerlink" title="IOC 的优点是什么？"></a>IOC 的优点是什么？</h5><pre><code>IOC 或依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI 查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC 容器支持加载服务时的饿汉式初始化和懒加载。</code></pre><h5 id="什么是Spring-的依赖注入？"><a href="#什么是Spring-的依赖注入？" class="headerlink" title="什么是Spring 的依赖注入？"></a>什么是Spring 的依赖注入？</h5><pre><code>依赖注入，是IOC 的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC 容器）负责把他们组装起来。</code></pre><h5 id="有哪些不同类型的IOC（依赖注入）方式？"><a href="#有哪些不同类型的IOC（依赖注入）方式？" class="headerlink" title="有哪些不同类型的IOC（依赖注入）方式？"></a>有哪些不同类型的IOC（依赖注入）方式？</h5><pre><code>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。Setter 方法注入：Setter 方法注入是容器通过调用无参构造器或无参static 工厂方法实例化bean 之后，调用该bean的setter 方法，即实现了基于setter 的依赖注入。接口注入:</code></pre><h5 id="哪种依赖注入方式你建议使用，构造器注入，还是Setter-方法注入？"><a href="#哪种依赖注入方式你建议使用，构造器注入，还是Setter-方法注入？" class="headerlink" title="哪种依赖注入方式你建议使用，构造器注入，还是Setter 方法注入？"></a>哪种依赖注入方式你建议使用，构造器注入，还是Setter 方法注入？</h5><pre><code>你两种依赖方式都可以使用，构造器注入和Setter 方法注入。最好的解决方案是用构造器参数实现强制依赖，setter 方法实现可选依赖。</code></pre><h5 id="什么是Spring-beans？"><a href="#什么是Spring-beans？" class="headerlink" title="什么是Spring beans？"></a>什么是Spring beans？</h5><h5 id="一个Spring-Bean-定义包含什么？"><a href="#一个Spring-Bean-定义包含什么？" class="headerlink" title="一个Spring Bean 定义包含什么？"></a>一个Spring Bean 定义包含什么？</h5><pre><code>一个Spring Bean 的定义包含容器必知的所有配置元数据， 包括如何创建一个bean，它的生命周期详情及它的依赖。</code></pre><h5 id="如何给Spring-容器提供配置元数据？"><a href="#如何给Spring-容器提供配置元数据？" class="headerlink" title="如何给Spring 容器提供配置元数据？"></a>如何给Spring 容器提供配置元数据？</h5><pre><code>这里有三种重要的方法给Spring 容器提供配置元数据。XML 配置文件。基于注解的配置。基于java 的配置。</code></pre><h5 id="你怎样定义类的作用域？"><a href="#你怎样定义类的作用域？" class="headerlink" title="你怎样定义类的作用域？"></a>你怎样定义类的作用域？</h5><pre><code>当定义一个&lt;bean&gt; 在Spring 里，我们还能给这个bean 声明一个作用域。它可以通过bean 定义中的scope 属性来定义。如，当Spring 要在需要的时候每次生产一个新的bean 实例，bean 的scope 属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例， 这个bean 的scope 属性必须设为singleton。</code></pre><h5 id="解释Spring-支持的几种bean-的作用域"><a href="#解释Spring-支持的几种bean-的作用域" class="headerlink" title="解释Spring 支持的几种bean 的作用域"></a>解释Spring 支持的几种bean 的作用域</h5><pre><code>Spring 框架支持以下五种bean 的作用域： singleton : bean 在每个Spring ioc 容器中只有一个实例。 prototype：一个bean 的定义可以有多个实例。 request：每次http 请求都会创建一个bean，该作用域仅在基于web 的SpringApplicationContext 情形下有效。 session：在一个HTTP Session 中，一个bean 定义对应一个实例。该作用域仅在基于web 的Spring ApplicationContext 情形下有效。 global-session：在一个全局的HTTP Session 中，一个bean 定义对应一个实例。该作用域仅在基于web 的Spring ApplicationContext 情形下有效。 缺省的Spring bean 的作用域是Singleton。</code></pre><h5 id="Spring-框架中的单例bean-是线程安全的吗？"><a href="#Spring-框架中的单例bean-是线程安全的吗？" class="headerlink" title="Spring 框架中的单例bean 是线程安全的吗？"></a>Spring 框架中的单例bean 是线程安全的吗？</h5><pre><code>不，Spring 框架中的单例bean 不是线程安全的。</code></pre><h5 id="在Spring-中如何注入一个java-集合？"><a href="#在Spring-中如何注入一个java-集合？" class="headerlink" title="在Spring 中如何注入一个java 集合？"></a>在Spring 中如何注入一个java 集合？</h5><pre><code>Spring 提供以下几种集合的配置元素：&lt;list&gt;类型用于注入一列值，允许有相同的值。&lt;set&gt; 类型用于注入一组值，不允许有相同的值。&lt;map&gt; 类型用于注入一组键值对，键和值都可以为任意类型。&lt;props&gt;类型用于注入一组键值对，键和值都只能为String 类型。</code></pre><h5 id="什么是bean-装配？"><a href="#什么是bean-装配？" class="headerlink" title="什么是bean 装配？"></a>什么是bean 装配？</h5><pre><code>装配，或bean 装配是指在Spring 容器中把bean 组装到一起，前提是容器需要知道bean 的依赖关系，如何通过依赖注入来把它们装配到一起。</code></pre><h5 id="什么是bean-的自动装配？"><a href="#什么是bean-的自动装配？" class="headerlink" title="什么是bean 的自动装配？"></a>什么是bean 的自动装配？</h5><pre><code>Spring 容器能够自动装配相互合作的bean ， 这意味着容器不需要&lt;constructor-arg&gt;和&lt;property&gt;配置，能通过Bean 工厂自动处理bean 之间的协作。</code></pre><h5 id="解释不同方式的自动装配"><a href="#解释不同方式的自动装配" class="headerlink" title="解释不同方式的自动装配"></a>解释不同方式的自动装配</h5><pre><code>有五种自动装配的方式，可以用来指导Spring 容器用自动装配方式来进行依赖注入no：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。byName：通过参数名自动装配，Spring 容器在配置文件中发现bean 的autowire属性被设置成byname，之后容器试图匹配、装配和该bean 的属性具有相同名字的bean。byType：通过参数类型自动装配，Spring 容器在配置文件中发现bean 的autowire属性被设置成byType，之后容器试图匹配、装配和该bean 的属性具有相同类型的bean。如果有多个bean 符合条件，则抛出错误。constructor：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。autodetect：首先尝试使用constructor 来自动装配，如果无法工作，则使用byType方式。</code></pre><h5 id="你可以在Spring-中注入一个null-和一个空字符串吗？"><a href="#你可以在Spring-中注入一个null-和一个空字符串吗？" class="headerlink" title="你可以在Spring 中注入一个null 和一个空字符串吗？"></a>你可以在Spring 中注入一个null 和一个空字符串吗？</h5><pre><code>可以</code></pre><h5 id="Required-注解"><a href="#Required-注解" class="headerlink" title="@Required 注解"></a>@Required 注解</h5><pre><code>这个注解表明bean 的属性必须在配置的时候设置，通过一个bean 定义的显式的属性值或通过自动装配， 若@Required 注解的bean 属性未被设置， 容器将抛出BeanInitializationException。</code></pre><h5 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h5><pre><code>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required 一样，修饰setter 方法、构造器、属性或者具有任意名称和/或多个参数的PN 方法。</code></pre><h5 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier 注解"></a>@Qualifier 注解</h5><pre><code>当有多个相同类型的bean 却只有一个需要自动装配时， 将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</code></pre><h5 id="Spring-支持的事务管理类型"><a href="#Spring-支持的事务管理类型" class="headerlink" title="Spring 支持的事务管理类型"></a>Spring 支持的事务管理类型</h5><pre><code>Spring 支持两种类型的事务管理：编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</code></pre><h5 id="Spring-框架的事务管理有哪些优点？"><a href="#Spring-框架的事务管理有哪些优点？" class="headerlink" title="Spring 框架的事务管理有哪些优点？"></a>Spring 框架的事务管理有哪些优点？</h5><pre><code>它为不同的事务API 如JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。它为编程式事务管理提供了一套简单的API 而不是一些复杂的事务API 如它支持声明式事务管理。它和Spring 各种数据访问抽象层很好得集成。</code></pre><h5 id="你更倾向用那种事务管理类型？"><a href="#你更倾向用那种事务管理类型？" class="headerlink" title="你更倾向用那种事务管理类型？"></a>你更倾向用那种事务管理类型？</h5><pre><code>大多数Spring 框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。</code></pre><h5 id="解释AOP"><a href="#解释AOP" class="headerlink" title="解释AOP"></a>解释AOP</h5><pre><code>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</code></pre><h5 id="在Spring-AOP-中，关注点和横切关注的区别是什么？"><a href="#在Spring-AOP-中，关注点和横切关注的区别是什么？" class="headerlink" title="在Spring AOP 中，关注点和横切关注的区别是什么？"></a>在Spring AOP 中，关注点和横切关注的区别是什么？</h5><pre><code>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</code></pre><h5 id="什么是Spring-的MVC-框架？"><a href="#什么是Spring-的MVC-框架？" class="headerlink" title="什么是Spring 的MVC 框架？"></a>什么是Spring 的MVC 框架？</h5><pre><code>Spring 配备构建Web 应用的全功能MVC 框架。Spring 可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC 框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</code></pre><h5 id="什么是Spring-MVC-框架的控制器？"><a href="#什么是Spring-MVC-框架的控制器？" class="headerlink" title="什么是Spring MVC 框架的控制器？"></a>什么是Spring MVC 框架的控制器？</h5><pre><code>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring 用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</code></pre><h5 id="Controller-注解"><a href="#Controller-注解" class="headerlink" title="@Controller 注解"></a>@Controller 注解</h5><pre><code>该注解表明该类扮演控制器的角色，Spring 不需要你继承任何其他控制器基类或引用Servlet API。</code></pre><h5 id="RequestMapping-注解"><a href="#RequestMapping-注解" class="headerlink" title="@RequestMapping 注解"></a>@RequestMapping 注解</h5><pre><code>该注解是用来映射一个URL 到一个类或一个特定的方处理法上。</code></pre><h4 id="三、SpringBoot"><a href="#三、SpringBoot" class="headerlink" title="三、SpringBoot"></a>三、SpringBoot</h4><h5 id="什么是Spring-Boot？"><a href="#什么是Spring-Boot？" class="headerlink" title="什么是Spring Boot？"></a>什么是Spring Boot？</h5><pre><code>多年来，随着新功能的增加，spring变得越来越复杂。只需访问https://spring.io/projects页面，我们就会看到可以在我们的应用程序中使用的所有Spring项目的不同功能。如果必须启动一个新的Spring项目，我们必须添加构建路径或添加Maven依赖关系，配置应用程序服务器，添加spring配置。因此，开始一个新的spring项目需要很多努力，因为我们现在必须从头开始做所有事情。Spring Boot是解决这个问题的方法。Spring Boot已经建立在现有spring框架之上。使用spring启动，我们避免了之前我们必须做的所有样板代码和配置。因此，Spring Boot可以帮助我们以最少的工作量，更加健壮地使用现有的Spring功能。</code></pre><h5 id="Spring-Boot有哪些优点？"><a href="#Spring-Boot有哪些优点？" class="headerlink" title="Spring Boot有哪些优点？"></a>Spring Boot有哪些优点？</h5><pre><code>Spring Boot的优点有：减少开发，测试时间和努力。使用JavaConfig有助于避免使用XML。避免大量的Maven导入和各种版本冲突。提供意见发展方法。通过提供默认值快速开始开发。没有单独的Web服务器需要。这意味着你不再需要启动Tomcat，Glassfish或其他任何东西。需要更少的配置 因为没有web.xml文件。只需添加用@ Configuration注释的类，然后添加用@Bean注释的方法，Spring将自动加载对象并像以前一样对其进行管理。您甚至可以将@Autowired添加到bean方法中，以使Spring自动装入需要的依赖关系中。基于环境的配置 使用这些属性，您可以将您正在使用的环境传递到应用程序：-Dspring.profiles.active = {enviornment}。在加载主应用程序属性文件后，Spring将在（application{environment} .properties）中加载后续的应用程序属性文件。</code></pre><h5 id="什么是JavaConfig？"><a href="#什么是JavaConfig？" class="headerlink" title="什么是JavaConfig？"></a>什么是JavaConfig？</h5><pre><code>Spring JavaConfig是Spring社区的产品，它提供了配置Spring IoC容器的纯Java方法。因此它有助于避免使用XML配置。使用JavaConfig的优点在于：面向对象的配置。由于配置被定义为JavaConfig中的类，因此用户可以充分利用Java中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean方法等。减少或消除XML配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在XML和Java之间来回切换。JavaConfig为开发人员提供了一种纯Java方法来配置与XML配置概念相似的Spring容器。从技术角度来讲，只使用JavaConfig配置类来配置容器是可行的，但实际上很多人认为将JavaConfig与XML混合匹配是理想的。类型安全和重构友好。JavaConfig提供了一种类型安全的方法来配置Spring容器。由于Java 5.0对泛型的支持，现在可以按类型而不是按名称检索bean，不需要任何强制转换或基于字符串的查找。</code></pre><h5 id="Spring-Boot中的监视器是什么？"><a href="#Spring-Boot中的监视器是什么？" class="headerlink" title="Spring Boot中的监视器是什么？"></a>Spring Boot中的监视器是什么？</h5><pre><code>Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为HTTP URL访问的REST端点来检查状态。</code></pre><h5 id="什么是YAML？"><a href="#什么是YAML？" class="headerlink" title="什么是YAML？"></a>什么是YAML？</h5><pre><code>YAML是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML文件就更加结构化，而且更少混淆。可以看出YAML具有分层配置数据。</code></pre><h5 id="如何实现Spring-Boot应用程序的安全性？"><a href="#如何实现Spring-Boot应用程序的安全性？" class="headerlink" title="如何实现Spring Boot应用程序的安全性？"></a>如何实现Spring Boot应用程序的安全性？</h5><pre><code>为了实现Spring Boot的安全性，我们使用 spring-boot-starter-security依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter并覆盖其方法。</code></pre><h5 id="什么是Swagger？你用Spring-Boot实现了它吗？"><a href="#什么是Swagger？你用Spring-Boot实现了它吗？" class="headerlink" title="什么是Swagger？你用Spring Boot实现了它吗？"></a>什么是Swagger？你用Spring Boot实现了它吗？</h5><pre><code>Swagger广泛用于可视化API，使用Swagger UI为前端开发人员提供在线沙箱。Swagger是用于生成RESTful Web服务的可视化表示的工具，规范和完整框架实现。它使文档能够以与服务器相同的速度更新。当通过Swagger正确定义时，消费者可以使用最少量的实现逻辑来理解远程服务并与其进行交互。因此，Swagger消除了调用服务时的猜测。</code></pre><h5 id="什么是Spring-Profiles？"><a href="#什么是Spring-Profiles？" class="headerlink" title="什么是Spring Profiles？"></a>什么是Spring Profiles？</h5><pre><code>Spring Profiles允许用户根据配置文件（dev，test，prod等）来注册bean。因此，当应用程序在开发中运行时，只有某些bean可以加载，而在PRODUCTION中，某些其他bean可以加载。假设我们的要求是Swagger文档仅适用于QA环境，并且禁用所有其他文档。这可以使用配置文件来完成。Spring Boot使得使用配置文件非常简单。</code></pre><h5 id="什么是Spring-Batch？"><a href="#什么是Spring-Batch？" class="headerlink" title="什么是Spring Batch？"></a>什么是Spring Batch？</h5><pre><code>Spring Boot Batch提供可重用的函数，这些函数在处理大量记录时非常重要，包括日志/跟踪，事务管理，作业处理统计信息，作业重新启动，跳过和资源管理。它还提供了更先进的技术服务和功能，通过优化和分区技术，可以实现极高批量和高性能批处理作业。简单以及复杂的大批量批处理作业可以高度可扩展的方式利用框架处理重要大量的信息。</code></pre><h5 id="如何使用Spring-Boot实现异常处理？"><a href="#如何使用Spring-Boot实现异常处理？" class="headerlink" title="如何使用Spring Boot实现异常处理？"></a>如何使用Spring Boot实现异常处理？</h5><pre><code>Spring提供了一种使用ControllerAdvice处理异常的非常有用的方法。 我们通过实现一个ControlerAdvice类，来处理控制器类抛出的所有异常。</code></pre><h5 id="什么是CSRF攻击？"><a href="#什么是CSRF攻击？" class="headerlink" title="什么是CSRF攻击？"></a>什么是CSRF攻击？</h5><pre><code>CSRF代表跨站请求伪造。这是一种攻击，迫使最终用户在当前通过身份验证的Web应用程序上执行不需要的操作。CSRF攻击专门针对状态改变请求，而不是数据窃取，因为攻击者无法查看对伪造请求的响应。</code></pre><h4 id="四、SpringCloud"><a href="#四、SpringCloud" class="headerlink" title="四、SpringCloud"></a>四、SpringCloud</h4><h5 id="什么是Spring-Cloud？"><a href="#什么是Spring-Cloud？" class="headerlink" title="什么是Spring Cloud？"></a>什么是Spring Cloud？</h5><pre><code>Spring cloud流应用程序启动器是基于Spring Boot的Spring集成应用程序，提供与外部系统的集成。Spring cloud Task，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。</code></pre><h5 id="使用Spring-Cloud有什么优势？"><a href="#使用Spring-Cloud有什么优势？" class="headerlink" title="使用Spring Cloud有什么优势？"></a>使用Spring Cloud有什么优势？</h5><pre><code>使用Spring Boot开发分布式微服务时，我们面临以下问题与分布式系统相关的复杂性-这种开销包括网络问题，延迟开销，带宽问题，安全问题。服务发现-服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。冗余-分布式系统中的冗余问题。负载均衡 --负载均衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。性能-问题 由于各种运营开销导致的性能问题。部署复杂性-Devops技能的要求。</code></pre><h5 id="服务注册和发现是什么意思？Spring-Cloud如何实现？"><a href="#服务注册和发现是什么意思？Spring-Cloud如何实现？" class="headerlink" title="服务注册和发现是什么意思？Spring Cloud如何实现？"></a>服务注册和发现是什么意思？Spring Cloud如何实现？</h5><pre><code>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Eureka服务注册和发现可以在这种情况下提供帮助。由于所有服务都在Eureka服务器上注册并通过调用Eureka服务器完成查找，因此无需处理服务地点的任何更改和处理。</code></pre><h5 id="负载均衡的意义什么？"><a href="#负载均衡的意义什么？" class="headerlink" title="负载均衡的意义什么？"></a>负载均衡的意义什么？</h5><pre><code>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</code></pre><h5 id="什么是Hystrix？"><a href="#什么是Hystrix？" class="headerlink" title="什么是Hystrix？"></a>什么是Hystrix？</h5><pre><code>Hystrix是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。</code></pre><h5 id="什么是Hystrix断路器？"><a href="#什么是Hystrix断路器？" class="headerlink" title="什么是Hystrix断路器？"></a>什么是Hystrix断路器？</h5><h4 id="五、SpringCloudAlibaba"><a href="#五、SpringCloudAlibaba" class="headerlink" title="五、SpringCloudAlibaba"></a>五、SpringCloudAlibaba</h4><h5 id="为什么要选择AlibabaCloud-和SpringCloud的区别"><a href="#为什么要选择AlibabaCloud-和SpringCloud的区别" class="headerlink" title="为什么要选择AlibabaCloud , 和SpringCloud的区别"></a>为什么要选择AlibabaCloud , 和SpringCloud的区别</h5><pre><code>SpringCloud和AlibabaCloud组件存在很大交集，互相配合SpringCloud很多组件是基于第三方整合，目前多个已经不更新了了，比如zuul、eureka、hystrix等AlibabaCloud 提供一站式微服务解决方法，已经和SpringCloud进行了整合，组件互相支持</code></pre><h5 id="AlibabaCloud全家桶介绍"><a href="#AlibabaCloud全家桶介绍" class="headerlink" title="AlibabaCloud全家桶介绍"></a>AlibabaCloud全家桶介绍</h5><pre><code>服务注册发现：Nacos服务限流降级：Sentinel分布配置中心：Nacos服务网关：SpringCloud Gateway服务之间调用：Feign、Ribbon链路追踪：Sleuth+Zipkin</code></pre><h5 id="什么是注册中心和常见的注册中心有哪些"><a href="#什么是注册中心和常见的注册中心有哪些" class="headerlink" title="什么是注册中心和常见的注册中心有哪些"></a>什么是注册中心和常见的注册中心有哪些</h5><pre><code>什么是注册中心（服务治理）服务注册：服务提供者provider，启动的时候向注册中心上报自己的网络信息服务发现：服务消费者consumer,启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息核心:服务管理,是有个服务注册表，心跳机制动态维护，服务实例在启动时注册到服务注册表，并在关闭时注销。为什么要用微服务应用和机器越来越多，调用方需要知道接口的网络地址，如果靠配置文件的方式去控制网络地址，对于动态新增机器，维护带来很大问题主流的注册中心：zookeeper、Eureka、consul、etcd、NacosAlibabaCloud搭配最好的是Nacos，且服务的注册发现之外，还支持动态配置服务</code></pre><h5 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h5><pre><code>分布式系统中一个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略略决定请求发往哪个节点，这就是所谓的负载均衡，原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</code></pre><h5 id="常见的负载均衡策略"><a href="#常见的负载均衡策略" class="headerlink" title="常见的负载均衡策略"></a>常见的负载均衡策略</h5><pre><code>节点轮询简介：每个请求按顺序分配到不同的后端服务器weight 权重配置简介：weight和访问比率成正比，数字越大，分配得到的流量越高固定分发简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</code></pre><h5 id="分布式应用核心CAP知识"><a href="#分布式应用核心CAP知识" class="headerlink" title="分布式应用核心CAP知识"></a>分布式应用核心CAP知识</h5><pre><code>CAP定理: 指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）三者不可同时获得一致性（C）：所有节点都可以访问到最新的数据，在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间的数据完全一致，越多节点，数据同步越耗时）强一致性（strong consistency）。任何时刻，任何用户都能读取到最近一次成功更新的数据。单调一致性（monotonic consistency）。任何时刻，任何用户一旦读到某个数据在某次更新后的值，那么就不会再读到比这个值更旧的值。也就是说，可获取的数据顺序必是单调递增的。会话一致性（session consistency）。任何用户在某次会话中，一旦读到某个数据在某次更新后的值，那么在本次会话中就不会再读到比这值更旧的值会话一致性是在单调一致性的基础上进一步放松约束，只保证单个用户单个会话内的单调性，在不同用户或同一用户不同会话间则没有保障。最终一致性（eventual consistency）。用户只能读到某次更新后的值，但系统保证数据将最终达到完全一致的状态，只是所需时间不能保障。弱一致性（weak consistency）。用户无法在确定时间内读到最新更新的值。可用性（A）：每个请求都是可以得到响应的，不管请求是成功还是失败。负载过大后，集群整体是否还能响应客户端的读写请求。（服务一直可用，而且是正常响应时间）分区容错性（P）：除了全部整体网络故障，其他故障都不能导致整个系统不可用。分区容忍性，就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡CA： 如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的CP: 如果不要求A（可用），每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统AP：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</code></pre><h5 id="CAP下的注册中心选择"><a href="#CAP下的注册中心选择" class="headerlink" title="CAP下的注册中心选择"></a>CAP下的注册中心选择</h5><pre><code>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点Nacos:CP+AP结论：分布式系统中P,肯定要满足，所以只能在CA中二选一没有最好的选择，最好的选择是根据业务场景来进行架构设计如果要求一致性，则选择zookeeper/Nacos，如金融行业CP如果要求可用性，则Eureka/Nacos，如电商系统 APCP ： 适合支付、交易类，要求数据强一致性，宁可业务不可用，也不能出现脏数据AP: 互联网业务，比如信息流架构，不要求数据强一致，更想要服务可用</code></pre><h5 id="Docker容器常见命令"><a href="#Docker容器常见命令" class="headerlink" title="Docker容器常见命令"></a>Docker容器常见命令</h5><pre><code>搜索镜像：docker search xxx列出当前系统存在的镜像：docker images拉取镜像：docker pull xxx列举当前运行的容器：docker ps检查容器内部信息：docker inspect 容器器名称删除镜像：docker rmi IMAGE_NAME强制移除镜像不管是否有容器使用该镜像 增加 -f 参数停止某个容器：docker stop 容器名称启动某个容器：docker start 容器名称移除某个容器： docker rm 容器名称 （容器必须是停止状态）列举全部 容器 ： docker ps -a</code></pre><h4 id="六、Dubbo"><a href="#六、Dubbo" class="headerlink" title="六、Dubbo"></a>六、Dubbo</h4><h5 id="Dubbo是什么？"><a href="#Dubbo是什么？" class="headerlink" title="Dubbo是什么？"></a>Dubbo是什么？</h5><pre><code>Dubbo 是一个分布式、高性能、透明化的 RPC 服务框架，提供服务自动注册、自动发现等高效服务治理方案， 可以和 Spring框架无缝集成。</code></pre><h5 id="Dubbo的主要应用场景？"><a href="#Dubbo的主要应用场景？" class="headerlink" title="Dubbo的主要应用场景？"></a>Dubbo的主要应用场景？</h5><pre><code>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</code></pre><h5 id="Dubbo的核心功能？"><a href="#Dubbo的核心功能？" class="headerlink" title="Dubbo的核心功能？"></a>Dubbo的核心功能？</h5><pre><code>主要就是如下3个核心功能：Remoting：网络通信框架，提供对多种NIO框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。Registry：服务注册，基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</code></pre><h5 id="Dubbo的核心组件？"><a href="#Dubbo的核心组件？" class="headerlink" title="Dubbo的核心组件？"></a>Dubbo的核心组件？</h5><h4 id="七、Zookeeper"><a href="#七、Zookeeper" class="headerlink" title="七、Zookeeper"></a>七、Zookeeper</h4><h4 id="八、MyBatis-plus"><a href="#八、MyBatis-plus" class="headerlink" title="八、MyBatis-plus"></a>八、MyBatis-plus</h4><h5 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h5><pre><code>#{}是预编译处理，${}是字符串替换。Mybatis 在处理#{}时，会将sql 中的#{}替换为?号，调用PreparedStatement 的set方法来赋值；Mybatis 在处理${}时，就是把${}替换成变量的值。使用#{}可以有效的防止SQL 注入，提高系统安全性。</code></pre><h5 id="一级、二级缓存"><a href="#一级、二级缓存" class="headerlink" title="一级、二级缓存"></a>一级、二级缓存</h5><pre><code>1) 一级缓存: 基于PerpetualCache 的HashMap 本地缓存， 其存储作用域为Session，当Session flush 或close 之后，该Session 中的所有Cache 就将清空。2）二级缓存与一级缓存其机制相同，默认也是采用PerpetualCache，HashMap 存储， 不同在于其存储作用域为Mapper(Namespace)， 并且可自定义存储源， 如Ehcache。要开启二级缓存，你需要在你的SQL 映射文件中添加一行：&lt;cache/&gt;3) 对于缓存数据更新机制， 当某一个作用域( 一级缓存Session/ 二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有select 中的缓存将被clear。</code></pre><h5 id="Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？</h5><pre><code>Mybatis 仅支持association 关联对象和collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在Mybatis 配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。它的原理是，使用CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B 对象的sql，把B 查询上来，然后调用a.setB(b)，于是a 的对象b 属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</code></pre><h5 id="在mapper中如何传递多个参数？"><a href="#在mapper中如何传递多个参数？" class="headerlink" title="在mapper中如何传递多个参数？"></a>在mapper中如何传递多个参数？</h5><pre><code>直接在方法中传递参数，xml文件用#{0} #{1}来获取使用 @param 注解:这样可以直接在xml文件中通过#{name}来获取</code></pre><h5 id="resultType-resultMap的区别？"><a href="#resultType-resultMap的区别？" class="headerlink" title="resultType resultMap的区别？"></a>resultType resultMap的区别？</h5><pre><code>类的名字和数据库相同时，可以直接设置resultType参数为Pojo类若不同，需要设置resultMap 将结果名字和Pojo名字进行转换</code></pre><h5 id="使用MyBatis的mapper接口调用时有哪些要求？"><a href="#使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求？"></a>使用MyBatis的mapper接口调用时有哪些要求？</h5><pre><code>1）Mapper接口方法名和mapper.xml中定义的每个sql的id相同2）Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同3）Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同4）Mapper.xml文件中的namespace即是mapper接口的类路径。</code></pre><p>九、MySQL</p><h5 id="事务的四大特性ACID"><a href="#事务的四大特性ACID" class="headerlink" title="事务的四大特性ACID"></a>事务的四大特性ACID</h5><pre><code>原子性Atomicity：一个事务必须被事务不可分割的最小⼯作单元，整个操作要么全部成功，要么全部失败，一般就是通过commit和rollback来控制一致性Consistency:数据库总能从一个一致性的状态转换到另一个一致性的状态隔离性Isolation:一个事务相对于另一个事务是隔离的，一个事务所做的修改是在最终提交以前，对其他事务是不可⻅的持久性Durability:一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失</code></pre><h5 id="Mysql中InnoDB支持的四种事务隔离级别名称"><a href="#Mysql中InnoDB支持的四种事务隔离级别名称" class="headerlink" title="Mysql中InnoDB支持的四种事务隔离级别名称"></a>Mysql中InnoDB支持的四种事务隔离级别名称</h5><pre><code>SQL标准定义的四个隔离级别为：read uncommited ：读到未提交数据read committed：脏读，不可重复读repeatable read：可重读serializable ：串行事物</code></pre><h5 id="CHAR和VARCHAR的区别？"><a href="#CHAR和VARCHAR的区别？" class="headerlink" title="CHAR和VARCHAR的区别？"></a>CHAR和VARCHAR的区别？</h5><pre><code>CHAR和VARCHAR类型在存储和检索方面有所不同CHAR列长度固定为创建表时声明的长度，长度值范围是1到255当CHAR值被存储时，它们被用空格填充到特定长度，检索CHAR值时需删除尾随空格。</code></pre><h5 id="Mysql查询是否区分大小写？"><a href="#Mysql查询是否区分大小写？" class="headerlink" title="Mysql查询是否区分大小写？"></a>Mysql查询是否区分大小写？</h5><pre><code>不区分</code></pre><h5 id="Mysql中有哪几种锁"><a href="#Mysql中有哪几种锁" class="headerlink" title="Mysql中有哪几种锁"></a>Mysql中有哪几种锁</h5><pre><code>MyISAM支持表锁，InnoDB支持表锁和行锁，默认为行锁表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高</code></pre><h5 id="有哪些sql优化方面的经验"><a href="#有哪些sql优化方面的经验" class="headerlink" title="有哪些sql优化方面的经验"></a>有哪些sql优化方面的经验</h5><pre><code>1）应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 2）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描3）当只要一行数据时使用 LIMIT 14）为搜索字段建索引5）尽可能的使用 NOT NULL6）</code></pre><h5 id="请简述常用的索引有哪些种"><a href="#请简述常用的索引有哪些种" class="headerlink" title="请简述常用的索引有哪些种"></a>请简述常用的索引有哪些种</h5><pre><code>普通索引: 即针对数据库表创建索引唯一索引: 与普通索引类似，不同的就是：MySQL数据库索引列的值必须唯一，但允许有空值主键索引: 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引组合索引: 为了进一步榨取MySQL的效率，就要考虑建立组合索引。即将数据库表中的多个字段联合起来作为一个组合索引。</code></pre><h5 id="mysql中myisam与innodb的区别？"><a href="#mysql中myisam与innodb的区别？" class="headerlink" title="mysql中myisam与innodb的区别？"></a>mysql中myisam与innodb的区别？</h5><pre><code>1.事务支持 &gt; MyISAM：强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。 &gt; InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。2.InnoDB支持行级锁，而MyISAM支持表级锁. &gt;&gt; 用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。3.InnoDB支持MVCC, 而MyISAM不支持4.InnoDB支持外键，而MyISAM不支持5.表主键 &gt; MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。 &gt; InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。6.InnoDB不支持全文索引，而MyISAM支持。7.可移植性、备份及恢复 &gt; MyISAM：数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。 &gt; InnoDB：免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十G的时候就相对痛苦了8.存储结构 &gt; MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为.MYD (MYData)。索引文件的扩展名是.MYI (MYIndex)。 &gt; InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</code></pre><h5 id="SELECT-和-SELECT-全部字段-的2种写法有何优缺点"><a href="#SELECT-和-SELECT-全部字段-的2种写法有何优缺点" class="headerlink" title="[SELECT *] 和[SELECT 全部字段]的2种写法有何优缺点?"></a>[SELECT *] 和[SELECT 全部字段]的2种写法有何优缺点?</h5><pre><code>1.前者要解析数据字典，后者不需要2.结果输出顺序，前者与建表列顺序相同，后者按指定字段顺序。3.表字段改名，前者不需要修改，后者需要改4.后者可以建立索引进行优化，前者无法优化5.后者的可读性比前者要高</code></pre><h5 id="drop-delete与truncate的区别"><a href="#drop-delete与truncate的区别" class="headerlink" title="drop,delete与truncate的区别"></a>drop,delete与truncate的区别</h5><pre><code>drop直接删掉表 truncate删除表中数据，再插入时自增长id又从1开始 delete删除表中数据，可以加where字句。（1） DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。（2） 表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。（3） 一般而言，drop &gt; truncate &gt; delete（4） 应用范围。TRUNCATE 只能对TABLE；DELETE可以是table和view（5） TRUNCATE 和DELETE只删除数据，而DROP则删除整个表（结构和数据）。（6） truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。（7） delete语句为DML（data maintain Language),这个操作会被放到 rollback segment中,事务提交后才生效。如果有相应的 tigger,执行的时候将被触发。（8） truncate、drop是DLL（data define language),操作立即生效，原数据不放到 rollback segment中，不能回滚（9） 在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用delete且注意结合where来约束影响范围。回滚段要足够大。要删除表用drop;若想保留表而将表中数据删除，如果于事务无关，用truncate即可实现。如果和事务有关，或老师想触发trigger,还是用delete。（10） Truncate table 表名 速度快,而且效率高,因为: truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。（11） TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。（12） 对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</code></pre><h5 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h5><pre><code>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。乐观锁总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。两种锁的使用场景从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</code></pre><h5 id="乐观锁常见的两种实现方式"><a href="#乐观锁常见的两种实现方式" class="headerlink" title="乐观锁常见的两种实现方式"></a>乐观锁常见的两种实现方式</h5><pre><code>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</code></pre><h4 id="十、Oracle"><a href="#十、Oracle" class="headerlink" title="十、Oracle"></a>十、Oracle</h4><h4 id="十一、Redis"><a href="#十一、Redis" class="headerlink" title="十一、Redis"></a>十一、Redis</h4><h5 id="Redis支持哪几种数据类型？"><a href="#Redis支持哪几种数据类型？" class="headerlink" title="Redis支持哪几种数据类型？"></a>Redis支持哪几种数据类型？</h5><pre><code>String、List、Set、Sorted Set、hashes</code></pre><h5 id="Redis有哪几种数据淘汰策略？"><a href="#Redis有哪几种数据淘汰策略？" class="headerlink" title="Redis有哪几种数据淘汰策略？"></a>Redis有哪几种数据淘汰策略？</h5><pre><code>noeviction:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。allkeys-random: 回收随机的键使得新添加的数据有空间存放。volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</code></pre><h5 id="Redis有哪些适合的场景？"><a href="#Redis有哪些适合的场景？" class="headerlink" title="Redis有哪些适合的场景？"></a>Redis有哪些适合的场景？</h5><pre><code>（1）会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。（2）全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。（3）队列Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。（4）排行榜/计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores 0 10 WITHSCORESAgora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。（5）发布/订阅最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</code></pre><h5 id="redis能否将数据持久化，如何实现"><a href="#redis能否将数据持久化，如何实现" class="headerlink" title="redis能否将数据持久化，如何实现"></a>redis能否将数据持久化，如何实现</h5><pre><code>能，将内存中的数据异步写入硬盘中，两种方式：RDB（默认）和AOFRDB持久化原理：通过bgsave命令触发，然后父进程执行fork操作创建子进程，子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换（定时一次性将所有数据进行快照生成一份副本存储在硬盘中）优点：是一个紧凑压缩的二进制文件，Redis加载RDB恢复数据远远快于AOF的方式。缺点：由于每次生成RDB开销较大，非实时持久化，AOF持久化原理：开启后，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中。优点：实时持久化。缺点：所以AOF文件体积逐渐变大，需要定期执行重写操作来降低文件体积，加载慢</code></pre><h5 id="如何防止缓存穿透"><a href="#如何防止缓存穿透" class="headerlink" title="如何防止缓存穿透"></a>如何防止缓存穿透</h5><pre><code>缓存穿透指的是查询一个根本不存在的数据，缓存层不命中，又去查存储层，又不命中。但如果有大量这种查询不存在的数据的请求过来，会对存储层有较大压力布隆过滤器：布隆过滤器存在的问题：相对来说布隆过滤器搞起来代码还是比较复杂的，现阶段我们暂时还不需要，后面实在需要再考虑去做，什么阶段做什么样的事情，不是说这个系统一下子就能做的各种完美。</code></pre><h5 id="能否说下缓存击穿、穿透、雪崩的区别？"><a href="#能否说下缓存击穿、穿透、雪崩的区别？" class="headerlink" title="能否说下缓存击穿、穿透、雪崩的区别？"></a>能否说下缓存击穿、穿透、雪崩的区别？</h5><pre><code>缓存击穿 (某个热点key缓存失效了)    缓存中没有但数据库中有的数据，假如是热点数据，那key在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力增大。    和缓存雪崩的区别在于这里针对某一key缓存，后者则是很多key。    预防：设置热点数据不过期，定时任务定时更新缓存，或者设置互斥锁缓存穿透（查询不存在数据）    查询一个不存在的数据，由于缓存是不命中的，并且出于容错考虑，如发起为id为“-1”不存在的数据    如果从存储层查不到数据则不写入缓存这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。存在大量查询不存在的数据，可能DB就挂掉了，这也是黑客利用不存在的key频繁攻击应用的一种方式。    预防：接口层增加校验，数据合理性校验，缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，设置短点的过期时间，防止同个key被一直攻击缓存雪崩 (多个热点key都过期)    大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩    预防：存数据的过期时间设置随机，防止同一时间大量数据过期现象发生，设置热点数据永远不过期，定时任务定时更新</code></pre><h4 id="十二、Nginx"><a href="#十二、Nginx" class="headerlink" title="十二、Nginx"></a>十二、Nginx</h4><h5 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx?"></a>什么是Nginx?</h5><pre><code>Nginx是一个web服务器和反向代理服务器，用于HTTP、HTTPS、SMTP、POP3和IMAP协议。</code></pre><h5 id="nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的"><a href="#nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的" class="headerlink" title="nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的"></a>nginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的</h5><pre><code>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；使用alias标签的目录块中不能使用rewrite的break；另外，alias指定的目录后面必须要加上”/“符号！！alias虚拟目录配置中，location匹配的path目录如果后面不带”/“，那么访问的url地址中这个path目录后面加不加”/“不影响访问，访问时它会自动加上”/“；但是如果location匹配的path目录后面加上”/“，那么访问的url地址中这个path目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！root目录配置中，location匹配的path目录后面带不带”/“，都不会影响访问。</code></pre><h5 id="Ngnix-LVS-KeepAlived-Nginx高可用解决方案"><a href="#Ngnix-LVS-KeepAlived-Nginx高可用解决方案" class="headerlink" title="Ngnix+LVS+KeepAlived  Nginx高可用解决方案"></a>Ngnix+LVS+KeepAlived  Nginx高可用解决方案</h5><pre><code>LVS是Linux Virtual Server,Linux虚拟服务器，是一个虚拟的服务器集群系统提供了10多种调度算法： 轮询、加权轮询、最小连接、目标地址散列、源地址散列等三种负载均衡转发技术NAT：数据进出都通过 LVS, 前端的Master既要处理客户端发起的请求，又要处理后台RealServer的响应信息，将RealServer响应的信息再转发给客户端, 容易成为整个集群系统性能的瓶颈; (支持任意系统且可以实现端口映射)DR: 移花接木,最高效的负载均衡规则,前端的Master只处理客户端的请求，将请求转发给RealServer，由后台的RealServer直接响应客户端，不再经过Master, 性能要优于LVS-NAT; 需要LVS和RS集群绑定同一个VIP（支持多数系统，不可以实现端口映射)TUNL：隧道技术，前端的Master只处理客户端的请求，将请求转发给RealServer，然后由后台的RealServer直接响应客户端，不再经过Master；（支持少数系统，不可以实现端口映射）keepalived核心：监控并管理 LVS 集群系统中各个服务节点的状态keepalived是一个类似于交换机制的软件,核心作用是检测服务器的状态，如果有一台web服务器工作出现故障，Keepalived将检测到并将有故障的服务器从系统中剔除，使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成。后来加入了vrrp(虚拟路由器冗余协议)，除了为lvs提供高可用还可以为其他服务器比如Mysql、Haproxy等软件提供高可用方案</code></pre><h4 id="十三、多线程"><a href="#十三、多线程" class="headerlink" title="十三、多线程"></a>十三、多线程</h4><h5 id="什么是线程安全和线程不安全"><a href="#什么是线程安全和线程不安全" class="headerlink" title="什么是线程安全和线程不安全"></a>什么是线程安全和线程不安全</h5><pre><code>1、线程安全线程安全: 就是多线程访问时，采⽤用了了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问，直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。2、线程不安全线程不不安全：就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</code></pre><h5 id="java里面实现多线程有哪几种方式，有什么不同，比较常用哪种"><a href="#java里面实现多线程有哪几种方式，有什么不同，比较常用哪种" class="headerlink" title="java里面实现多线程有哪几种方式，有什么不同，比较常用哪种"></a>java里面实现多线程有哪几种方式，有什么不同，比较常用哪种</h5><pre><code>1、继承Thread继承Thread，重写里面run方法，创建实例，执行start优点：代码编写最简单直接操作缺点：没返回值，继承一个类后，没法继承其他的类，拓展性差2、实现Runnable自定义类实现Runnable，实现里面run方法，创建Thread类，使用Runnable接口的实现对象作为参数传递给Thread对象，调⽤用Strat方法优点：线程类可以实现多个几接口，可以再继承一个类缺点：没返回值，不能直接启动，需要通过构造⼀个Thread实例传递进去启动3、通过Callable和FutureTask⽅方式创建callable接口的实现类，并实现call⽅方法，结合FutureTask类包装Callable对象，实现多线程优点：有返回值，拓展性也高4、通过线程池创建线程自定义Runnable接口，实现run⽅方法，创建线程池，调用执行方法并传⼊对象优点：安全高性能，复用线程</code></pre><h5 id="说说你在平时的开发中，如何使用线程池？"><a href="#说说你在平时的开发中，如何使用线程池？" class="headerlink" title="说说你在平时的开发中，如何使用线程池？"></a>说说你在平时的开发中，如何使用线程池？</h5><pre><code>平时使用线程池时，一般使用 new ThreadPoolExecutor 的方式去创建线程池：通过new创建线程池时，除非调用prestartAllCoreThreads方法初始化核心线程，否则此时线程池中有0个线程，即使工作队列中存在多个任务，同样不会执行1：当任务数&lt;=核心线程数的时候，会创建于当前任务数相同的核心线程用于处理线程2：当当前任务数 &gt;= 核心线程数&amp;&amp; 当前任务数 &lt; 工作队列容量 + 核心线程数 会启动设定的核心线程数个线程 其他的任务就放到工作队列里3： 当前任务数 &gt; 工作队列容量+核心线程数的容量时，分两种情况当当前任务数 - 工作队列容量 &lt;= 最大线程数 ，此时启动 （当当前任务数 - 工作队列容量）个线程当当前任务数 - 核心线程数-工作队列容量 &gt; 最大线程数，会启动最大线程数数量的线程来处理</code></pre><h5 id="用过线程池不-有什么好处，-java里有哪些是常用的线程池"><a href="#用过线程池不-有什么好处，-java里有哪些是常用的线程池" class="headerlink" title="用过线程池不? 有什么好处， java里有哪些是常用的线程池"></a>用过线程池不? 有什么好处， java里有哪些是常用的线程池</h5><pre><code>好处：重用存在的线程，减少对象创建销毁的开销，有效的控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞，且可以定时定期执行、单线程、并发数控制，配置任务过多任务后的拒绝策略等功能类别newFixedThreadPool一个定长线程池，可控制线程最大并发数newCachedThreadPool一个可缓存线程池newSingleThreadExecutor一个单线程化的线程池，用唯一的工作线程来执行任务newScheduledThreadPool一个定长线程池，支持定时/周期性任务执行</code></pre><h5 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h5><pre><code>有的，可以通过Executors去进行创建，分别有：newCachedThreadPool：创建一个可以根据需要创建新线程的线程池，如果有空闲线程，优先使用空闲的线程newFixedThreadPool：创建一个固定大小的线程池，在任何时候，最多只有N个线程在处理任务newScheduledThreadPool：能延迟执行、定时执行的线程池newWorkStealingPool：工作窃取，使用多个队列来减少竞争newSingleThreadExecutor：单一线程的线程次，只会使用唯一一个线程来执行任务，即使提交再多的任务，也都是会放到等待队列里进行等待newSingleThreadScheduledExecutor：单线程能延迟执行、定时执行的线程池上面这几种方式，底层还是使用ThreadPoolExecutor创建线程池，且如果使用不当，容易造成oomnewFixedThreadPool newSingleThreadExecutor允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。newCachedThreadPool newScheduledThreadPool允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM</code></pre><h5 id="java线程常见的基本状态有哪些，这些状态分别是做什么的"><a href="#java线程常见的基本状态有哪些，这些状态分别是做什么的" class="headerlink" title="java线程常见的基本状态有哪些，这些状态分别是做什么的"></a>java线程常见的基本状态有哪些，这些状态分别是做什么的</h5><pre><code>常见的5种状态创建(NEW): ⽣生成线程对象，但是并没有调⽤用该对象start(), new Thread()就绪(Runnable)：当调⽤用线程对象的start()⽅方法，线程就进⼊入就绪状态，但是此刻线程调度还没把该线程设置为当前线程，就是没获得CPU使⽤用权。 如果线程运⾏行行后，从等待或者睡眠中回来之后，也会进⼊入就绪状态运行(Running)程序将处于就绪状态的线程设置为当前线程，即获得CPU使⽤用权，这个时候线程进⼊入运⾏行行状态，开始运⾏行行run⾥里里⾯面的逻辑阻塞(Blocked)等待阻塞：进⼊入该状态的线程需要等待其他线程作出⼀一定动作(通知或中断)，这种状态的话CPU不不会分配过来，他们需要被唤醒，可能也会⽆无限等待下去。⽐比如调⽤用wait(状态就会变成WAITING状态)，也可能通过调⽤用sleep(状态就会变成TIMED_WAITING), join或者发出IO请求，阻塞结束后线程重新进⼊入就绪状态同步阻塞：线程在获取synchronized同步锁失败，即锁被其他线程占⽤用，它就会进⼊入同步阻塞状态等待(WAITING)：进⼊入该状态的线程需要等待其他线程做出⼀一些特定动作（通知或中断）。超时等待(TIMED_WAITING)：该状态不不同于WAITING，它可以在指定的时间后⾃自⾏行行返回死亡(TERMINATED):⼀一个线程run⽅方法执⾏行行结束，该线程就死亡了了，不不能进⼊入就绪状态</code></pre><h5 id="Java线程的常⻅见⽅方法你知道多少"><a href="#Java线程的常⻅见⽅方法你知道多少" class="headerlink" title="Java线程的常⻅见⽅方法你知道多少"></a>Java线程的常⻅见⽅方法你知道多少</h5><pre><code>sleep    属于线程Thread的⽅方法    让线程暂缓执⾏行行，等待预计时间之后再恢复    交出CPU使⽤用权，不不会释放锁    进⼊入阻塞状态TIME_WAITGING，睡眠结束变为就绪Runnableyield    属于线程Thread的⽅方法    t1/t2/t3    暂停当前线程的对象，去执⾏行行其他线程    交出CPU使⽤用权，不不会释放锁，和sleep类似    作⽤用：让相同优先级的线程轮流执⾏行行，但是不不保证⼀一定轮流    注意：不不会让线程进⼊入阻塞状态，直接变为就绪Runnable，只需要重新获得CPU使⽤用权join    属于线程Thread的⽅方法    在主线程上运⾏行行调⽤用该⽅方法，会让主线程休眠，不不会释放已经持有的对象锁    让调⽤用join⽅方法的线程先执⾏行行完毕，在执⾏行行其他线程    类似让救护⻋车警⻋车优先通过wait    属于Object的⽅方法    当前线程调⽤用对象的wait⽅方法，会释放锁，进⼊入线程的等待队列列    需要依靠notify或者notifyAll唤醒，或者wait(timeout)时间⾃自动唤醒notify    属于Object的⽅方法    唤醒在对象监视器器上等待的单个线程，选择是任意的notifyAll    属于Object的⽅方法    唤醒在对象监视器器上等待的全部线程</code></pre><h5 id="在Java中可以有哪些⽅方法来保证线程安全"><a href="#在Java中可以有哪些⽅方法来保证线程安全" class="headerlink" title="在Java中可以有哪些⽅方法来保证线程安全"></a>在Java中可以有哪些⽅方法来保证线程安全</h5><pre><code>加锁,⽐比如synchronize/ReentrantLock使⽤用volatile声明变量量，轻量量级同步，不不能保证原⼦子性(需要解释)使⽤用线程安全类(原⼦子类AtomicXXX，并发容器器，同步容器器CopyOnWriteArrayList/ConcurrentHashMap等ThreadLocal本地私有变量量/信号量量Semaphore等</code></pre><h4 id="十四、并发编程"><a href="#十四、并发编程" class="headerlink" title="十四、并发编程"></a>十四、并发编程</h4><h4 id="十五、RabbitMQ"><a href="#十五、RabbitMQ" class="headerlink" title="十五、RabbitMQ"></a>十五、RabbitMQ</h4><h5 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h5><pre><code>消息持久化的前提是：将交换器器/队列列的durable属性设置为true，表示交换器器/队列列是持久交换器器/队列列，在服务器器崩溃或重启之后不不需要重新创建交换器器/队列列（交换器器/队列列会⾃自动创建）。如果消息想要从Rabbit崩溃中恢复，那么消息必须：1、在消息发布前，通过把它的 “投递模式” 选项设置为2（持久）来把消息标记成持久化2、将消息发送到持久交换器器3、消息到达持久队列列RabbitMQ确保持久性消息能从服务器重启中恢复的⽅式是，将它们写⼊磁盘上的⼀个持久化⽇志⽂件，当发布⼀条持久性消息到持久交换器上时，Rabbit会在消息提交到⽇志⽂件后才发送响应（如果消息路由到了⾮持久队列，它会⾃动从持久化⽇志中移除）。⼀旦消费者从持久队列中消费了⼀条持久化消息，RabbitMQ会在持久化⽇志中把这条消息标记为等待垃圾收集。如果持久化消息在被消费之前RabbitMQ重启，那么Rabbit会⾃动重建交换器和队列（以及绑定），并重播持久化⽇志⽂件中的消息到合适的队列或者交换器上。</code></pre><h4 id="十六、Kafka"><a href="#十六、Kafka" class="headerlink" title="十六、Kafka"></a>十六、Kafka</h4><h4 id="十七、ActiveMQ"><a href="#十七、ActiveMQ" class="headerlink" title="十七、ActiveMQ"></a>十七、ActiveMQ</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、集合框架&quot;&gt;&lt;a href=&quot;#一、集合框架&quot; class=&quot;headerlink&quot; title=&quot;一、集合框架&quot;&gt;&lt;/a&gt;一、集合框架&lt;/h4&gt;&lt;h5 id=&quot;Java-集合类框架的基本接口有哪些？&quot;&gt;&lt;a href=&quot;#Java-集合类框架的基本接口有哪些
      
    
    </summary>
    
      <category term="JAVA" scheme="http://www.ldclass.club/categories/JAVA/"/>
    
      <category term="面试题" scheme="http://www.ldclass.club/categories/JAVA/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JAVA" scheme="http://www.ldclass.club/tags/JAVA/"/>
    
      <category term="面试题" scheme="http://www.ldclass.club/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Springboot静态资源加载</title>
    <link href="http://www.ldclass.club/2021/06/26/springboot-jing-tai-zi-yuan-jia-zai/"/>
    <id>http://www.ldclass.club/2021/06/26/springboot-jing-tai-zi-yuan-jia-zai/</id>
    <published>2021-06-25T22:53:10.000Z</published>
    <updated>2021-06-25T14:57:28.773Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>静态资源加载顺序</p><pre class="line-numbers language-yml"><code class="language-yml">classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>spring boot配置文件中 <code>spring.mvc.static-path-pattern</code> 配置项</p><pre class="line-numbers language-yml"><code class="language-yml">spring:    mvc:        static-path-pattern: /static/**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>项目中<code>application.yml</code>配置文件中，存在如上配置项时，访问静态资源文件要加<code>static</code>才行，当把这个配置项除掉时，不用加static作为前缀亦可进行正常访问。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态资源加载顺序&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;classpath:/META-INF/resources/, classpath:/resour
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>数据库定时备份</title>
    <link href="http://www.ldclass.club/2021/06/25/shu-ju-ku-ding-shi-bei-fen/"/>
    <id>http://www.ldclass.club/2021/06/25/shu-ju-ku-ding-shi-bei-fen/</id>
    <published>2021-06-24T18:06:45.000Z</published>
    <updated>2021-06-24T10:24:15.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows</p></blockquote><ul><li>mysql</li></ul><pre class="line-numbers language-bat"><code class="language-bat">rem ******MySQL backup start********@echo offset "Ymd=%DATE:~,4%%DATE:~5,2%%DATE:~8,2%%time:~0,2%%time:~3,2%""C:\mysql5.7\bin\mysqldump" -uroot -pRoot@123 -h127.0.0.1 --databases plat > C:\mysqldata\plat_%Ymd%.sql@echo onrem ******MySQL backup end********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>oracle</li></ul><pre class="line-numbers language-bat"><code class="language-bat">rem ******MySQL backup start********@echo offset adir=%DATE:~,4%%DATE:~5,2%%DATE:~8,2%%time:~0,2%%time:~3,2%exp rjm/rjm@orcl owner=rjm file=C:\oracledata\rjm_%adir%.dmp log='C:\oracledata\rjm_%adir%.log'@echo onrem ******MySQL backup end********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置定时任务</p><ul><li>首先是创建一个任务，在附件–&gt;系统工具中可以看到任务计划程序： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/1.png" title="配置定时任务"><ul><li>点击打开后可以看到主界面： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/2.png" title="配置定时任务"><ul><li>点击右侧的创建基本任务，随便输入一个名称后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/3.png" title="配置定时任务"><ul><li>然后是选择执行频率，我这里选择每天，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/4.png" title="配置定时任务"><ul><li>接着是设置开始时间和具体几点执行，我这里选择每天18点执行，从今天开始，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/5.png" title="配置定时任务"><ul><li>由于我们执行的是批处理脚本，所以直接选择【启动程序】即可，然后点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/6.png" title="配置定时任务"><ul><li>接着就是选择我们脚本的位置，如果有参数的话填上参数，点击【下一步】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/7.png" title="配置定时任务"><ul><li>最后确认一下配置无误，点击【完成】： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/8.png" title="配置定时任务"><ul><li>由于我们勾选了当点击【完成】时打开任务属性对话框，所以接下来我们看到的就是任务属性对话框，我们在这里还要再做一些设置：</li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/9.png" title="配置定时任务"><ul><li>如上图所示，这个配置非常重要，即选中“不管用户是否登录都要运行”和“使用最高权限运行”，注意这一点尤为重要，如果不选中这两项那么批处理脚本就无法自动执行完毕。最后点击【确定】并输入密码即可： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/10.png" title="配置定时任务"><ul><li>最后在首页就可以看到刚才添加的任务了： </li></ul><ul><li>双击该任务即可进入任务详情页面，也就能看到上次和下次的执行时间以及上次的执行结果： </li></ul><img src="/2021/06/25/shu-ju-ku-ding-shi-bei-fen/12.png" title="配置定时任务"></li></ul><blockquote><p>Linux</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Windows&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bat&quot;&gt;&lt;code class=&quot;language-bat&quot;&gt;rem **
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.ldclass.club/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://www.ldclass.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>pom配置使用lib下的jar包</title>
    <link href="http://www.ldclass.club/2021/06/25/pom-pei-zhi-shi-yong-lib-xia-de-jar-bao/"/>
    <id>http://www.ldclass.club/2021/06/25/pom-pei-zhi-shi-yong-lib-xia-de-jar-bao/</id>
    <published>2021-06-24T16:04:08.000Z</published>
    <updated>2021-06-24T08:51:26.503Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题描述</p><ul><li>在Maven项目中，jar包的管理一般情况下都可以使用pom.xml来配置管理，但也有一些时候：我们项目中使用了一个内部jar文件，可是这个文件我们又没有开放到maven库中，还有就是在使用BCM或者docker的时候，项目的构建是实时同步GIt的，需要将本地引入的jar包上传到Git，这样导入到Git上的jar包，才能在构建的时候，被正确识别。这时我们会将jar包放到我们项目的src/main/webapp/WEB-INF/lib中。 如果我们不对pom.xml进行特殊配置的话，maven打包是不会自动去引用和编译lib中的jar文件的，所以需要我们修改下pom.xml文件。</li></ul></li><li><p>解决</p><ul><li>备注：如果不在src前加入${project.basedir}有可能在使用BCM或者Docker部署的时候，无法成功构建，本地和部署运行时候，识别的路径是有差异的。 </li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArguments</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extdirs</span><span class="token punctuation">></span></span>${project.basedir}/src/main/webapp/WEB-INF/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extdirs</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArguments</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Maven项目中，jar包的管理一般情况下都可以使用pom.xml来配置管理，但也有一些时候：我们项目中使用了一个内部jar文件，可是这个文件我们又没有开放到maven库中，还有就是在使用BCM或者docker的时候，
      
    
    </summary>
    
      <category term="Maven" scheme="http://www.ldclass.club/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://www.ldclass.club/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-GA/PRE/SNAPSHOT详解</title>
    <link href="http://www.ldclass.club/2021/06/24/springboot-ga-pre-snapshot-xiang-jie/"/>
    <id>http://www.ldclass.club/2021/06/24/springboot-ga-pre-snapshot-xiang-jie/</id>
    <published>2021-06-24T13:59:00.000Z</published>
    <updated>2021-06-24T08:41:37.548Z</updated>
    
    <content type="html"><![CDATA[<ul><li>GA/PRE/SNAPSHOT详解<ul><li>GA: General Availability,正式发布的版本，官方推荐使用该版本，国外很多项目都是使用GA来表示正式发布版本的</li><li>PRE： 预览版，主要是用来内部开发人员和测试人员测试使用，因此不建议使用</li><li>SNAPSHOT: 快照版，可以稳定使用，且该版本会一直进行小量的优化和改进</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;GA/PRE/SNAPSHOT详解&lt;ul&gt;
&lt;li&gt;GA: General Availability,正式发布的版本，官方推荐使用该版本，国外很多项目都是使用GA来表示正式发布版本的&lt;/li&gt;
&lt;li&gt;PRE： 预览版，主要是用来内部开发人员和测试人员测试使用，
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>IDEA-properties中文乱码</title>
    <link href="http://www.ldclass.club/2021/06/24/idea-properties-zhong-wen-luan-ma/"/>
    <id>http://www.ldclass.club/2021/06/24/idea-properties-zhong-wen-luan-ma/</id>
    <published>2021-06-24T13:57:09.000Z</published>
    <updated>2021-06-24T08:49:21.775Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题描述</p><ul><li>打开<code>.properties</code>文件后，汉字都变成了<code>\u6295\u7968\u6210\u529f\uff0c\u8c22\u8c22\u53c2\u4e0e</code></li><li>这是汉字的<code>unicode</code>编码。</li></ul></li><li><p>解决：</p><p>在project settings - File Encoding，在标红的选项上打上勾，确定即可</p><img src="/2021/06/24/idea-properties-zhong-wen-luan-ma/1.png" title="IDEA配置"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;.properties&lt;/code&gt;文件后，汉字都变成了&lt;code&gt;\u6295\u7968\u6210\u529f\uff0c\u8c22\u8c22\u53c2\u4e0e&lt;/code&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="IDEA" scheme="http://www.ldclass.club/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://www.ldclass.club/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Oracle10g安装</title>
    <link href="http://www.ldclass.club/2021/06/24/oracle10g-an-zhuang/"/>
    <id>http://www.ldclass.club/2021/06/24/oracle10g-an-zhuang/</id>
    <published>2021-06-23T18:30:24.000Z</published>
    <updated>2021-06-24T09:06:29.742Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>问题一</strong></p><ul><li><p>描述</p><ul><li>oracle安装中出现：检查操作系统版本必须是5.0,5.1,or 6.0。实际为6.1</li></ul></li><li><p>解决</p><ul><li>更改install文件夹下的配置文件<code>oraparam.ini</code></li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[Certified Versions]</span>#You can customise error message shown for failure, provide value for CERTIFIED_VERSION_FAILURE_MESSAGE<span class="token constant">Windows</span><span class="token attr-value"><span class="token punctuation">=</span>5.0,5.1,5.2,6.0,6.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ini"><code class="language-ini">#[Windows-6.1-required]#Minimum display colours for OUI to run<span class="token constant">MIN_DISPLAY_COLORS</span><span class="token attr-value"><span class="token punctuation">=</span>256</span>#Minimum CPU speed required for OUI<span class="token constant">#CPU</span><span class="token attr-value"><span class="token punctuation">=</span>300</span>#[Windows-6.1-optional]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题一&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oracle安装中出现：检查操作系统版本必须是5.0,5.1,or 6.0。实际为6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决&lt;/p&gt;
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>oracle10g配置远程连接</title>
    <link href="http://www.ldclass.club/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/"/>
    <id>http://www.ldclass.club/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/</id>
    <published>2021-06-23T18:29:32.000Z</published>
    <updated>2021-06-24T09:13:22.407Z</updated>
    
    <content type="html"><![CDATA[<ul><li>采用图形化工具</li></ul><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/1.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/2.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/3.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/4.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/5.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/6.png" title="配置"></p><p>​    <img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/7.png" title="配置"></p><ul><li><p>可以用命令直接配</p><ul><li>在oracle安装目录下找到tnsnames.ora</li></ul><img src="/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/8.png" title="配置"><ul><li>添加以下配置</li></ul><pre class="line-numbers language-ora"><code class="language-ora">test=(DESCRIPTION =    (ADDRESS_LIST =        (ADDRESS = (PROTOCOL = TCP)(HOST = 本机ip4地址)(PORT = 1521))    )    (CONNECT_DATA =        (SERVICE_NAME = orcl)    ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;采用图形化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    &lt;img src=&quot;/2021/06/24/oracle10g-pei-zhi-yuan-cheng-lian-jie/1.png&quot; title=&quot;配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;img src=&quot;/20
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL免安装版配置</title>
    <link href="http://www.ldclass.club/2021/06/24/mysql-mian-an-zhuang-ban-pei-zhi/"/>
    <id>http://www.ldclass.club/2021/06/24/mysql-mian-an-zhuang-ban-pei-zhi/</id>
    <published>2021-06-23T16:03:12.000Z</published>
    <updated>2021-06-23T18:33:13.043Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>下载</p><ul><li>下载地址：<code>https://dev.mysql.com/downloads/mysql/</code>·</li></ul></li><li><p>解压</p></li><li><p>配置</p><ul><li>在文件目录 中新建一个<code>my.ini</code>的文件，代码如下，把其中的两处工作路径改为自己的按照路径即可。</li></ul><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span># 设置3306端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span># 设置mysql的安装目录<span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Mylargeprogram\Mysql\mysql-8.0.12-winx64</span># 设置mysql数据库的数据的存放目录<span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Mylargeprogram\Mysql\mysql-8.0.12-winx64\data</span># 允许最大连接数<span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统<span class="token constant">max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span># 服务端使用的字符集默认为UTF8<span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 创建新表时将使用的默认存储引擎<span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span># 默认使用“mysql_native_password”插件认证<span class="token constant">default_authentication_plugin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql_native_password</span><span class="token selector">[mysql]</span># 设置mysql客户端默认字符集<span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[client]</span># 设置mysql客户端连接服务端时默认使用的端口<span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址：&lt;code&gt;https://dev.mysql.com/downloads/mysql/&lt;/code&gt;·&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="MYSQL" scheme="http://www.ldclass.club/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://www.ldclass.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Windows2012R2安装Oracle</title>
    <link href="http://www.ldclass.club/2021/06/21/windows2012r2-an-zhuang-oracle/"/>
    <id>http://www.ldclass.club/2021/06/21/windows2012r2-an-zhuang-oracle/</id>
    <published>2021-06-20T19:19:53.000Z</published>
    <updated>2021-06-20T13:39:37.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装</p></blockquote><ul><li><p>下载oracle11g的安装文件</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/1.png" title="安装文件"></li><li><p>将两个压缩文件解压到同一目录下，尽量不要出现中文</p></li><li><p>解压后出现database文件夹，点击文件夹中setup启动安装</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/2.png" title="安装文件"></li><li><p>如果在启动安装时报错，提示环境满足最低要求，错误代码NS-13001,则修改配置文件</p><ul><li>位置：C:\Oracle\database\stage\cvu\cvu_prereq.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OPERATING_SYSTEM</span> <span class="token attr-name">RELEASE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6.2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VERSION</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ARCHITECTURE</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>64-bit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NAME</span> <span class="token attr-name">VALUE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WindowsServer2012R2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ENV_VAR_LIST</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ENV_VAR</span> <span class="token attr-name">NAME</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PATH<span class="token punctuation">"</span></span> <span class="token attr-name">MAX_LENGTH</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1023<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ENV_VAR_LIST</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OPERATING_SYSTEM</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/3.png" title="配置"><ul><li>这是因为windows12对oracle11g不兼容，添加上图配置文件即可</li></ul></li><li><p>安装</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/4.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/5.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/6.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/7.png" title="配置"><p>这一步记好设置的口令 ，是之后sys账户的口令，不设置的话sys账户的默认口令是manager。</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/8.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/9.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/10.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/11.png" title="配置"></li><li><p>配置环境变量</p><ul><li>Oracle语言：<code>NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK</code></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/12.png" title="配置"><ul><li>监听：<code>TNS_ADMIN = C:\app\Administrator\product\11.2.0\dbhome_1\NETWORK\ADMIN</code></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/13.png" title="配置"></li><li><p>至此，oracle的安装就完成了</p></li></ul><blockquote><p>开放远程连接</p></blockquote><ul><li><p>安装完之后，oracle默认配置的监听是localhost，如果不仅仅是本地访问，需要其他机器能访问到的话，需要修改监听的地址</p></li><li><p>Oracle11g安装后只有本地可以连接，远程无法连接，而且本地只能配置成localhost配置成IP地址也无法连接。这是因为安装oracle的时候没有配置远程的监听，默认的监听是localhost</p></li><li><p>解决方法1：（简单，不用修改配置文件）</p><ul><li><p>打开net manager</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/14.png" title="配置"></li><li><p>按照下图找到配置监听的地方，点击添加新地址</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/15.png" title="配置"></li><li><p>我们需要配置IP地址访问的监听才能使数据库可以被远程访问</p><ul><li><strong>这个IP地址要写对，写成本机IP4的地址</strong></li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/16.png" title="配置"></li><li><p>这样远程就可以连接了。</p></li><li><p>修改之后可能会有延迟，不会立刻生效。如果还是无法连接，可以将oracle服务重启。</p><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/17.png" title="配置"></li><li><p>此时在你数据库安装目录下找到下面的配置文件</p><ul><li>该配置文件里面就新增了一条我们刚刚增加的IP和端口</li><li>其实我们也可以直接修改该配置文件来达到上面的效果</li></ul><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/18.png" title="配置"><img src="/2021/06/21/windows2012r2-an-zhuang-oracle/19.png" title="配置"></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载oracle11g的安装文件&lt;/p&gt;
&lt;img src=&quot;/2021/06/21/windows2012r2-an-zhuang-oracle/1.png&quot; title=&quot;安装文
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle-system用户忘记密码的解决方法</title>
    <link href="http://www.ldclass.club/2021/06/18/oracle-system-yong-hu-wang-ji-mi-ma-de-jie-jue-fang-fa/"/>
    <id>http://www.ldclass.club/2021/06/18/oracle-system-yong-hu-wang-ji-mi-ma-de-jie-jue-fang-fa/</id>
    <published>2021-06-18T12:49:02.000Z</published>
    <updated>2021-06-18T04:57:06.275Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>依次输入以下命令</p><ul><li><code>sqlplus /nolog</code></li><li><code>conn / as sysdba</code></li></ul></li><li><p>查询下是否能看到实例的用户</p><ul><li><code>select username,password from dba_users;</code></li></ul></li><li><p>修改指定用户密码</p><ul><li><code>alter user system identified by system;</code></li></ul></li><li><p><strong>注意</strong>： </p><ul><li><p>密码第一位不能为数字。</p></li><li><p>不能有@</p><ul><li>比如我的密码是<code>system@123</code>，那使用<code>sqlplus</code>登录的时候就理解成<code>sqlplus system/system@123</code>,这样<code>sqlplus</code>就理解成<code>system</code>后面的就是数据库的连接字符串，这样自然就报错并提示<code>TNS: 无法解析指定的连接标识符或no listener</code></li></ul></li><li><p>不能有空格</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;依次输入以下命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sqlplus /nolog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conn / as sysdba&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询下是否能看到实例的用户&lt;/
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.ldclass.club/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://www.ldclass.club/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>解决任意文件上传漏洞</title>
    <link href="http://www.ldclass.club/2021/06/17/jie-jue-ren-yi-wen-jian-shang-chuan-lou-dong/"/>
    <id>http://www.ldclass.club/2021/06/17/jie-jue-ren-yi-wen-jian-shang-chuan-lou-dong/</id>
    <published>2021-06-17T15:16:23.000Z</published>
    <updated>2021-06-17T08:24:36.067Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>问题描述</strong>：</p><ul><li>文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。</li></ul></li><li><p><strong>安全建议</strong></p><ul><li>对上传文件类型进行验证，除在前端验证外在后端依然要做验证，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小等限制来防御，或是将上传的文件其他文件存储服务器中。</li><li>对上传文件内容进行过滤和校验。</li></ul></li><li><p><strong>解决方法</strong></p><ul><li>判断文件是否含有木马（读取流）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 判断文件是否含有木马(读取流)     * @param inputStream     * @return     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> IOUtils<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;% ( ) %></span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;? ( ) ?></span>        <span class="token comment" spellcheck="true">// 匹配16进制中的 &lt;script | /script> 大小写亦可</span>        <span class="token comment" spellcheck="true">// 通过匹配十六进制代码检测是否存在木马脚本</span>        String pattern <span class="token operator">=</span> <span class="token string">"(&lt;%.*%>)|(&lt;\\?.*\\?>)|(&lt;script.*/script>)"</span><span class="token punctuation">;</span>        Pattern mPattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher mMatcher <span class="token operator">=</span> mPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找相应的字符串</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//过滤java关键字(java import String print write( read() php request alert system)</span>            String keywordPattern <span class="token operator">=</span> <span class="token string">"(@eval\\()|(java)|(import)|(String)|(print)|(write)|(read\\(\\))|(php)|(request)|(alert)|(system)"</span><span class="token punctuation">;</span>            Pattern keywordmPattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>keywordPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            String keywordStr <span class="token operator">=</span> mMatcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Matcher keywordmMatcher <span class="token operator">=</span> keywordmPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>keywordStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>keywordmMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">            InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ImageUtil<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//TODO </span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断文件类型是否支持—–白名单</li></ul><pre class="line-numbers language-java"><code class="language-java">String houzhui <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">suffixJudgement</span><span class="token punctuation">(</span>houzhui<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 后缀判断     * @param fileType    文件类型     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">suffixJudgement</span><span class="token punctuation">(</span>String fileType<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//全部转换为小写</span>        fileType <span class="token operator">=</span> fileType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.图片  2.文档 3.视频 5.音频 6.其他</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他</span>        String other <span class="token operator">=</span> <span class="token string">"txt,html,zip,cvs,rtf"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//常见文档类型</span>        String file <span class="token operator">=</span> <span class="token string">"doc,docx,ppt,pptx,xls,xlsx,pdf"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//常见视频格式</span>        String video <span class="token operator">=</span> <span class="token string">"mp4,flv,avi,mpg,wmv,mov,asx,asf,3gp"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片</span>        String photo <span class="token operator">=</span> <span class="token string">"bmp,jpg,wbmp,jpeg,png,gif,psd,ico"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//音频</span>        String audio <span class="token operator">=</span> <span class="token string">"mp3,wav"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span>            type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断上传文件后缀——黑名单</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 比较上传文件是否合法     * @param type    文件类型     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">IsIllegalFile</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认上传文件不非法</span>        Boolean IsIllegal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认转换为小写进行对比</span>        type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行比较</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"jsp"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"php"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"aspx"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"html"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"exe"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"bat"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"sh"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"py"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"csh"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"asp"</span><span class="token operator">:</span>            IsIllegal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> IsIllegal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> IsIllegal <span class="token operator">=</span> <span class="token function">IsIllegalFile</span><span class="token punctuation">(</span>houzhui<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>IsIllegal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>魔术数字</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**      * 判断文件类型 (并返回文件的类型编号)     * @param path   文件路径     * @return 文件类型      */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">getTypeNum</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>Exception <span class="token punctuation">{</span>          FileInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer typeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String fileHead <span class="token operator">=</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHead <span class="token operator">==</span> null <span class="token operator">||</span> fileHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          fileHead <span class="token operator">=</span> fileHead<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> fileTypes <span class="token operator">=</span> FileType<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType type <span class="token operator">:</span> fileTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHead<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  typeNum <span class="token operator">=</span> <span class="token function">isFileType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> typeNum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断上传文件类型是否为0，如果是将其记录下来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>typeNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将内容输出到日志中</span>            LogUtils<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token string">"illegalFile"</span><span class="token punctuation">,</span> <span class="token string">"\n时间"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"、非法文件头："</span><span class="token operator">+</span>fileHead<span class="token operator">+</span><span class="token string">"、文件地址："</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> typeNum<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**      * 得到文件头      *       * @param is     *            文件路径      * @return 文件头      * @throws IOException      */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getFileContent</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token function">bytesToHexString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 根据深度验证判断文件类型     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">isFileType</span><span class="token punctuation">(</span>FileType value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Integer type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其他  </span>        <span class="token comment" spellcheck="true">// 图片  </span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> pics <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>JPEG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>GIF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>TIFF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>BMP<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DWG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PSD<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>ICO <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//文档</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> docs <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>XLS_DOC_PPT<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DOCX<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>XLSX<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>PPTX<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//视频</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> videos <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>AVI<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RAM<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RM<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MPG<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MOV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>ASF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MP4<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>FLV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MID <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//种子</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> tottents <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>TORRENT <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//音频</span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> audios <span class="token operator">=</span> <span class="token punctuation">{</span> FileType<span class="token punctuation">.</span>WAV<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>MP3<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>MP31 <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他</span><span class="token comment" spellcheck="true">//      FileType[] others = {FileType.RTF, FileType.XML, FileType.HTML, FileType.CSS, FileType.JS, FileType.EML, FileType.DBX, FileType.PST, FileType.JAVA, FileType.CLASS,</span><span class="token comment" spellcheck="true">//              FileType.MDB, FileType.WPS, FileType.WPD, FileType.EPS, FileType.PDF, FileType.QDF, FileType.PWL, FileType.ZIP, FileType.RAR, FileType.JSP,   </span><span class="token comment" spellcheck="true">//              FileType.JAR, FileType.MF, FileType.EXE, FileType.CHM}; </span>        FileType<span class="token punctuation">[</span><span class="token punctuation">]</span> others <span class="token operator">=</span> <span class="token punctuation">{</span>FileType<span class="token punctuation">.</span>RTF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>XML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>HTML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>CSS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EML<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>DBX<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PST<span class="token punctuation">,</span>                FileType<span class="token punctuation">.</span>MDB<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>WPS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>WPD<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EPS<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PDF<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>OPDF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>QDF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>PWL<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>ZIP<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>RAR<span class="token punctuation">,</span>                  FileType<span class="token punctuation">.</span>MF<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>EXE<span class="token punctuation">,</span> FileType<span class="token punctuation">.</span>CHM<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>TXT<span class="token punctuation">,</span>FileType<span class="token punctuation">.</span>TXT1<span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 图片  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> pics<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 文档  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 视频  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> videos<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 种子  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> tottents<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 音乐  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span> audios<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 其他  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileType fileType <span class="token operator">:</span>others<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> type<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> FileType <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**       * JEPG.       */</span>      <span class="token function">JPEG</span><span class="token punctuation">(</span><span class="token string">"FFD8FF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * PNG.       */</span>      <span class="token function">PNG</span><span class="token punctuation">(</span><span class="token string">"89504E47"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * GIF.       */</span>      <span class="token function">GIF</span><span class="token punctuation">(</span><span class="token string">"47494638"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * TIFF.       */</span>      <span class="token function">TIFF</span><span class="token punctuation">(</span><span class="token string">"49492A00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**     * ico logo     */</span>    <span class="token function">ICO</span><span class="token punctuation">(</span><span class="token string">"0000010001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Windows Bitmap.       */</span>      <span class="token function">BMP</span><span class="token punctuation">(</span><span class="token string">"424D"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * CAD.       */</span>      <span class="token function">DWG</span><span class="token punctuation">(</span><span class="token string">"41433130"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Adobe Photoshop.       */</span>      <span class="token function">PSD</span><span class="token punctuation">(</span><span class="token string">"38425053"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Rich Text Format.       */</span>      <span class="token function">RTF</span><span class="token punctuation">(</span><span class="token string">"7B5C727466"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * XML.       */</span>      <span class="token function">XML</span><span class="token punctuation">(</span><span class="token string">"3C3F786D6C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * HTML.       */</span>      <span class="token function">HTML</span><span class="token punctuation">(</span><span class="token string">"3C21444F4354595"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * CSS.       */</span>      <span class="token function">CSS</span><span class="token punctuation">(</span><span class="token string">"48544D4C207B0D0A0942"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * JS.       */</span>      <span class="token function">JS</span><span class="token punctuation">(</span><span class="token string">"696B2E71623D696B2E71"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Email [thorough only].       */</span>      <span class="token function">EML</span><span class="token punctuation">(</span><span class="token string">"44656C69766572792D646174653A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Outlook Express.       */</span>      <span class="token function">DBX</span><span class="token punctuation">(</span><span class="token string">"CFAD12FEC5FD746F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Outlook (pst).       */</span>      <span class="token function">PST</span><span class="token punctuation">(</span><span class="token string">"2142444E"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MS Word/Excel.       */</span>      <span class="token function">XLS_DOC_PPT</span><span class="token punctuation">(</span><span class="token string">"D0CF11E0A1B11AE"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DOCX</span><span class="token punctuation">(</span><span class="token string">"504B03041400060"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">XLSX</span><span class="token punctuation">(</span><span class="token string">"504B03040A00000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PPTX</span><span class="token punctuation">(</span><span class="token string">"504B03041400060"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Visio       */</span>      <span class="token function">VSD</span><span class="token punctuation">(</span><span class="token string">"d0cf11e0a1b11ae10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MS Access.       */</span>      <span class="token function">MDB</span><span class="token punctuation">(</span><span class="token string">"5374616E64617264204A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * WPS文字wps、表格et、演示dps都是一样的       */</span>      <span class="token function">WPS</span><span class="token punctuation">(</span><span class="token string">"d0cf11e0a1b11ae10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * torrent       */</span>      <span class="token function">TORRENT</span><span class="token punctuation">(</span><span class="token string">"6431303A637265617465"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * WordPerfect.       */</span>      <span class="token function">WPD</span><span class="token punctuation">(</span><span class="token string">"FF575043"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Postscript.       */</span>      <span class="token function">EPS</span><span class="token punctuation">(</span><span class="token string">"252150532D41646F6265"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Adobe Acrobat.       */</span>      <span class="token function">PDF</span><span class="token punctuation">(</span><span class="token string">"255044462D312E3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">OPDF</span><span class="token punctuation">(</span><span class="token string">"631423651500"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * Quicken.       */</span>      <span class="token function">QDF</span><span class="token punctuation">(</span><span class="token string">"AC9EBD8F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Windows Password.       */</span>      <span class="token function">PWL</span><span class="token punctuation">(</span><span class="token string">"E3828596"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * ZIP Archive.       */</span>      <span class="token function">ZIP</span><span class="token punctuation">(</span><span class="token string">"504B0304"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * RAR Archive.       */</span>      <span class="token function">RAR</span><span class="token punctuation">(</span><span class="token string">"52617221"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MF Archive.       */</span>      <span class="token function">MF</span><span class="token punctuation">(</span><span class="token string">"4D616E69666573742D56"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       *EXE Archive.       */</span>      <span class="token function">EXE</span><span class="token punctuation">(</span><span class="token string">"4D5A9000030000000400"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       *CHM Archive.       */</span>      <span class="token function">CHM</span><span class="token punctuation">(</span><span class="token string">"49545346030000006000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       * INI("235468697320636F6E66"), SQL("494E5345525420494E54"), BAT(       * "406563686F206f66660D"), GZ("1F8B0800000000000000"), PROPERTIES(       * "6C6F67346A2E726F6F74"), MXP(       * "04000000010000001300"),       */</span>      <span class="token comment" spellcheck="true">/**       * Wave.       */</span>      <span class="token function">WAV</span><span class="token punctuation">(</span><span class="token string">"57415645"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * AVI.       */</span>      <span class="token function">AVI</span><span class="token punctuation">(</span><span class="token string">"41564920"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Real Audio.       */</span>      <span class="token function">RAM</span><span class="token punctuation">(</span><span class="token string">"2E7261FD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Real Media.       */</span>      <span class="token function">RM</span><span class="token punctuation">(</span><span class="token string">"2E524D46"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MPEG (mpg).       */</span>      <span class="token function">MPG</span><span class="token punctuation">(</span><span class="token string">"000001BA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Quicktime.       */</span>      <span class="token function">MOV</span><span class="token punctuation">(</span><span class="token string">"6D6F6F76"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * Windows Media.       */</span>      <span class="token function">ASF</span><span class="token punctuation">(</span><span class="token string">"3026B2758E66CF11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MIDI.       */</span>      <span class="token function">MID</span><span class="token punctuation">(</span><span class="token string">"4D546864"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MP4.       * 000000186674797069736F6D0000000169736F6D617663310000D01B     * 00000028667479706d7034320000000169736f6d69736f3261766331     */</span>      <span class="token function">MP4</span><span class="token punctuation">(</span><span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/**       * MP3.       */</span>      <span class="token function">MP3</span><span class="token punctuation">(</span><span class="token string">"494433"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">MP31</span><span class="token punctuation">(</span><span class="token string">"FFFB"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**       * FLV.       */</span>      <span class="token function">FLV</span><span class="token punctuation">(</span><span class="token string">"464C5601050000000900"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//其他</span>    <span class="token comment" spellcheck="true">/**     * txt类型     */</span>    <span class="token function">TXT</span><span class="token punctuation">(</span><span class="token string">"2D2D2D2D2DE4BFA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TXT1</span><span class="token punctuation">(</span><span class="token string">"5576476C6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * Constructor.       *        * @param value     */</span>      <span class="token keyword">private</span> <span class="token function">FileType</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/categories/JavaWeb/"/>
    
      <category term="文件上传下载" scheme="http://www.ldclass.club/categories/JavaWeb/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/tags/JavaWeb/"/>
    
      <category term="文件上传下载" scheme="http://www.ldclass.club/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>版本信息泄露</title>
    <link href="http://www.ldclass.club/2021/06/11/ban-ben-xin-xi-xie-lu/"/>
    <id>http://www.ldclass.club/2021/06/11/ban-ben-xin-xi-xie-lu/</id>
    <published>2021-06-10T17:08:05.000Z</published>
    <updated>2021-06-10T16:13:18.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tomcat版本信息泄露</p></blockquote><ul><li><p>Tomcat报错页面泄漏相关版本号信息，是攻击者攻击的途径之一。因此实际当中建议去掉版本号信息。</p></li><li><p>解决办法：、</p><ul><li>在tomcat的lib文件夹下新建目录<code>org\apache\catalina\util</code></li><li>在此目录下新建<code>ServerInfo.properties</code>，并写入以下内容</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.info</span><span class="token punctuation">=</span><span class="token attr-value">****</span><span class="token attr-name">server.number</span><span class="token punctuation">=</span><span class="token attr-value">X.X.XX.X</span><span class="token attr-name">server.built</span><span class="token punctuation">=</span><span class="token attr-value">XXXX-XX--XX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>Nginx版本信息泄露问题</p></blockquote><ul><li>在生产环境中暴露WEB服务器的名称和版本信息这些信息是不安全的。通过两种方式对上述信息进行隐藏：</li><li>解决办法：<ul><li>修改nginx.conf文件</li><li>添加：server_tokens off;</li></ul></li></ul><blockquote><p>JavaWeb配置友好错误页面</p></blockquote><ul><li><code>web.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 异常处理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>403<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/403.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>405<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/405.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/error/500.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>404.jsp</li></ul><pre><code>&lt;%@ page language="java"  pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta name="description" content=""&gt;    &lt;meta name="author" content=""&gt;    &lt;meta http-equiv="/" content="5;url=http://www.13bk.cn/" /&gt;    &lt;title&gt;错误页&lt;/title&gt;    &lt;link href="/resources/assets/error/css/bootstrap.css" rel="stylesheet"/&gt;    &lt;link href="/resources/assets/error/css/font-awesome.min.css" rel="stylesheet" /&gt;    &lt;link href='http://fonts.googleapis.com/css?family=Nova+Flat' rel='stylesheet' type='text/css'&gt;    &lt;link href="/resources/assets/error/css/style.css" rel="stylesheet" /&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;    &lt;div class="row pad-top text-center"&gt;        &lt;div class="col-md-6 col-md-offset-3 text-center"&gt;            &lt;h1&gt; 似乎没有找到你想要的页面 &lt;/h1&gt;            &lt;h1&gt; 404 &lt;/h1&gt;            &lt;span id="error-link"&gt;&lt;/span&gt;            &lt;h2&gt; 错误提示 &lt;/h2&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row text-center"&gt;        &lt;div class="col-md-8 col-md-offset-2"&gt;            &lt;h3&gt; &lt;i  class="fa fa-lightbulb-o fa-5x"&gt;&lt;/i&gt; &lt;/h3&gt;            &lt;!-- &lt;a href="/" class="btn btn-primary"&gt;&lt;span class="second"&gt;5&lt;/span&gt;秒后自动返回网站首页&lt;/a&gt; --&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;%--&lt;script src="/resources/assets/error/js/jquery-1.10.2.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/bootstrap.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/countUp.js"&gt;&lt;/script&gt;--%&gt;&lt;%--&lt;script src="/resources/assets/error/js/custom.js"&gt;&lt;/script&gt;--%&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Tomcat版本信息泄露&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tomcat报错页面泄漏相关版本号信息，是攻击者攻击的途径之一。因此实际当中建议去掉版本号信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决办法：、&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/categories/Tomcat/"/>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Tomcat/Nginx/"/>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/categories/Tomcat/Nginx/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/tags/JavaWeb/"/>
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
      <category term="Tomcat" scheme="http://www.ldclass.club/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>常用.gitignore</title>
    <link href="http://www.ldclass.club/2021/06/09/chang-yong-gitignore/"/>
    <id>http://www.ldclass.club/2021/06/09/chang-yong-gitignore/</id>
    <published>2021-06-09T11:34:11.000Z</published>
    <updated>2021-06-16T08:19:29.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常用.gitignore配置</p></blockquote><pre class="line-numbers language-gitignore"><code class="language-gitignore">## .gitignore for Grails 1.2 and 1.3# .gitignore for maven target/*.releaseBackup# web application files#/web-app/WEB-INF# IDE support files/.classpath/.launch/.project/.settings/*.launch/*.tmproj/ivy*/eclipse# default HSQL database files for production mode/prodDb.*# general HSQL database files*Db.properties*Db.script# logs/stacktrace.log/test/reports/logs*.log*.log.*# project release file/*.war# plugin release file/*.zip/*.zip.sha1# older plugin install locations/plugins/web-app/plugins/web-app/WEB-INF/classes# "temporary" build filestarget/out/build/# other*.iws#.gitignore for java*.class# Package Files #*.jar*.war*.ear## .gitignore for eclipse*.pydevproject.project.metadatabin/**tmp/**tmp/**/**.tmp*.bak*.swp*~.niblocal.properties.classpath.settings/.loadpath# External tool builders.externalToolBuilders/# Locally stored "Eclipse launch configurations"*.launch# CDT-specific.cproject# PDT-specific.buildpath## .gitignore for intellij*.iml*.ipr*.iws.idea/## .gitignore for linux.*!.gitignore*~## .gitignore for windows# Windows image file cachesThumbs.dbehthumbs.db# Folder config fileDesktop.ini# Recycle Bin used on file shares$RECYCLE.BIN/## .gitignore for mac os x.DS_Store.AppleDouble.LSOverrideIcon# Thumbnails._*# Files that might appear on external disk.Spotlight-V100.Trashes## hack for graddle wrapper!wrapper/*.jar!**/wrapper/*.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;常用.gitignore配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-gitignore&quot;&gt;&lt;code class=&quot;language-gitignore&quot;&gt;## .gitignore
      
    
    </summary>
    
      <category term="git" scheme="http://www.ldclass.club/categories/git/"/>
    
      <category term="gitignore" scheme="http://www.ldclass.club/categories/git/gitignore/"/>
    
    
      <category term="git" scheme="http://www.ldclass.club/tags/git/"/>
    
      <category term="gitignore" scheme="http://www.ldclass.club/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>不安全的HTTP请求方法配置</title>
    <link href="http://www.ldclass.club/2021/06/09/bu-an-quan-de-http-qing-qiu-fang-fa-pei-zhi/"/>
    <id>http://www.ldclass.club/2021/06/09/bu-an-quan-de-http-qing-qiu-fang-fa-pei-zhi/</id>
    <published>2021-06-09T09:31:25.000Z</published>
    <updated>2021-06-10T08:44:48.880Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法；HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><ul><li>PUT：由于PUT方法自身不带验证机制，利用PUT方法可以向服务器上传文件，所以恶意攻击者可以上传木马等恶意文件。</li><li>DELETE：利用DELETE方法可以删除服务器上特定的资源文件，造成恶意攻击。</li><li>OPTIONS：将会造成服务器信息暴露，如中间件版本、支持的HTTP方法等。</li><li>TRACE：可以回显服务器收到的请求，主要用于测试或诊断，一般都会存在反射型跨站漏洞。</li></ul></li><li><p>WebDAV完全采用了HTTP1.1的方法，扩展了一些方法，并扩展了一些其他方法：</p><ul><li>Options、Head、Trace：主要由应用程序来发现和跟踪服务器支持和网络行为；</li><li>Get：检索文档；</li><li>Put和Post：将文档提交到服务器；</li><li>Delete：销毁资源或集合；</li><li>Mkcol：创建集合</li><li>PropFind和PropPatch：针对资源和集合检索和设置属性；</li><li>Copy和Move：管理命名空间上下文中的集合和资源；</li><li>Lock和Unlock：改写保护</li></ul></li><li><p>问题描述：</p><ul><li>上述操作明细可以对web服务器进行上传、修改、删除等操作，对服务造成威胁</li></ul></li><li><p>解决思路：</p><ul><li>最简单的方式就是修改WEB应用的web.xml部署文件。在里面插入下面几行代码就搞定了，把需要屏蔽的方法加在里面。如果应用包比较多也没必要一个个改，直接修改Tomcat的web.xml就可以了，这样在Tomcat中运行的实例都会有效。</li></ul><pre class="line-numbers language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span><span class="token punctuation">></span></span>fortune<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>PUT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>DELETE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>HEAD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>OPTIONS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>TRACE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-constraint</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-constraint</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;security-constraint&gt;</code>用于限制对资源的访问；</li><li><code>&lt;auth-constraint&gt;</code>用于限制那些角色可以访问资源，这里设置为空就是禁止所有角色用户访问；</li><li><code>&lt;url-pattern&gt;</code>指定需要验证的资源</li><li><code>&lt;http-method&gt;</code>指定那些方法需要验证</li></ul><p>重启服务再验证就不会存在这个问题了。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法；HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PUT：由于PUT方法自身不带验证机制
      
    
    </summary>
    
      <category term="HTTP" scheme="http://www.ldclass.club/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://www.ldclass.club/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb登录拦截过滤器</title>
    <link href="http://www.ldclass.club/2021/06/09/javaweb-deng-lu-lan-jie-guo-lu-qi/"/>
    <id>http://www.ldclass.club/2021/06/09/javaweb-deng-lu-lan-jie-guo-lu-qi/</id>
    <published>2021-06-09T09:26:14.000Z</published>
    <updated>2021-06-10T09:00:46.416Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题类型：未授权的访问</p></li><li><p>问题描述：攻击者可通过此漏洞访问不允许访问的页面以获得更多的攻击内容。未授权访问漏洞,是在攻击者没有获取到登录权限或未授权的情况下,不需要输入密码,即可通过输入网站控制台主页面地址或者不允许查看的连接便可进行访问,同时进行操作。</p></li><li><p>解决思路：</p><ul><li>对未授权访问页面做session认证，严格审核后台功能页面的访问权限，若为未登录用户则拒绝访问。</li><li>加入用户身份认证机制或token验证,对系统的功能点增加权限控制。</li></ul></li><li><p><code>JavaWeb</code>登录过滤器</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 登录过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>登录过滤器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>loginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.unicom.login.LoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--白名单--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>passUrl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>login.html;.css;.js;.png;.gif;.properties;.xml;.txt;.mp4;.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>loginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 不被拦截的url     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> pattenURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String passUrl <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        passUrl <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"passUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pattenURL <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>passUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 登陆url</span>        String loginUrl <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/login.html"</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> pattenURL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取用户登录时获得的 Token</span>        <span class="token comment" spellcheck="true">//通过Cookie获取Token.</span>        String user_token <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"user_token"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user_token <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获得session</span>        HttpSession session <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user_token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            httpResponse<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>loginUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题类型：未授权的访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问题描述：攻击者可通过此漏洞访问不允许访问的页面以获得更多的攻击内容。未授权访问漏洞,是在攻击者没有获取到登录权限或未授权的情况下,不需要输入密码,即可通过输入网站控制台主页面地址或者不允许查看的连
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>CORS跨域配置</title>
    <link href="http://www.ldclass.club/2021/06/09/cors-kua-yu-pei-zhi/"/>
    <id>http://www.ldclass.club/2021/06/09/cors-kua-yu-pei-zhi/</id>
    <published>2021-06-09T09:25:30.000Z</published>
    <updated>2021-06-10T09:07:22.308Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CORS跨域资源共享漏洞</p></li><li><p>问题描述：</p><ul><li>WEB应用程序可以通过在HTTP增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。</li><li>当CORS的设置不正确时，就会带来安全问题。注意Access-Control-Allow-Origin的值，当其为null、意味着信任任何域，*这时候可能引入安全问题。假设用户登陆一个含有CORS配置网站vuln.com，同时又访问了攻击者提供的一个链接evil.com。evil.com的网站向vuln.com这个网站发起请求获取敏感数据，浏览器能否接收信息取决于vuln.com的配置。如果vuln.com配置了Access-Control-Allow-Origin头且为预期，那么允许接收，否则浏览器会因为同源策略而不接收。</li></ul></li><li><p>解决思路</p><p>1.不要配置”Access-Control-Allow-Origin” 为通配符 “*” ，而且更为重要的是，要严格效验来自请求数据包中的“Origin”的值。当收到跨域请求的时候，要检查“Origin” 的值是否是一个可信的源，还要检查是否为null。</p><p>2.避免使用 “Access-Control-Allow-Credentials ：true” （请求中带cookie）。</p><p>3.减少“Access-Control-Allow-Methods”所允许的方法，一般只配置常用的POST、GET</p></li><li><p>web.xml</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 实现跨域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.thetransactioncompany.cors.CORSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.allowOrigin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>http://192.168.31.47:8072,http://192.168.31.47:9212,http://192.168.31.47:9214&lt;/param-value>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.supportedMethods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>GET, POST, PUT&lt;/param-value>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>GET, POST,OPTIONS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.supportedHeaders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>Accept, Origin, X-Requested-With, Content-Type, Last-Modified, X-Session-Token<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>cors.exposedHeaders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>Set-Cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        &lt;init-param>--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-name>cors.supportsCredentials&lt;/param-name>--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;param-value>true&lt;/param-value>--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;/init-param>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CORS跨域资源共享漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WEB应用程序可以通过在HTTP增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="CORS" scheme="http://www.ldclass.club/categories/CORS/"/>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/categories/CORS/JavaWeb/"/>
    
    
      <category term="CORS" scheme="http://www.ldclass.club/tags/CORS/"/>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Xss保护过滤器</title>
    <link href="http://www.ldclass.club/2021/06/09/xss-bao-hu-guo-lu-qi/"/>
    <id>http://www.ldclass.club/2021/06/09/xss-bao-hu-guo-lu-qi/</id>
    <published>2021-06-09T09:14:27.000Z</published>
    <updated>2021-06-10T08:32:29.879Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><ul><li>预防存储型跨站脚本攻击</li><li>网站会将用户输入内容中包含的JavaScript代码呈现到页面上。如果攻击者能够设法诱骗合法用户访问其构造的链接或表单，攻击者就能以目标网站的身份在合法用户的浏览器上执行任意JS代码，从而窃取Cookie、执行CSRF、甚至借助浏览器漏洞完全控制用户主机。</li></ul></li><li><h5 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h5><ul><li>攻击者可以利用存在XSS漏洞的Web系统攻击浏览相关网页的用户，窃取用户会话中诸如用户名和口令（可能包含在Cookie里）等敏感信息、通过插入恶意代码对用户执行挂马攻击、XSS漏洞还可能被攻击者用于网页篡改。</li></ul></li><li><h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><ul><li><code>JavaWeb</code>：配置<code>Xss</code>过滤器</li><li><code>web.xml</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XssEscape<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.blb.util.dataSource.XssFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 需要排除的接口 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>excludedPages<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>                /ApiUser/ssoLogin,                /ApiUser/ssoLoginTokenVerification,                /ApiUser/authentication,                /ApiUser/login,                /ApiUser/updatePwd,                /questionLook/QuestionBydoc,                /Kapi/upfiles,                /payment/authorizeLogin,                /questionLook/questionSaveOrUpdate,                /Kapi/uploadStorage,                /interlocution/saveEditQA,                /stage/addUpdateArrange,                /questionLook/questionsToPaper,                /course/AddNoCourseinfo            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XssEscape<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 过滤xss和sql * @author JH * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**  需排除过滤的URL路径   例如（/ApiUser/login）*/</span>    <span class="token keyword">private</span> String excludedPages<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 需排除过滤的URL路径的数组*/</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludedPageStr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处的ignores就是在web.xml定义的名称一样。</span>        excludedPages <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"excludedPages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>excludedPages <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> excludedPages<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            excludedPageStr <span class="token operator">=</span> excludedPages<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">,</span>            FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>req<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> res<span class="token punctuation">;</span>        String targetURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetURL <span class="token operator">=</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义表示变量 并验证用户请求URL 是否包含不过滤路径</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String page<span class="token operator">:</span>excludedPageStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetURL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断接口是否需要过滤xss</span>            request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XssAndSqlHttpServletRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========执行=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;预防存储型跨站脚本攻击&lt;/li&gt;
&lt;li&gt;网站会将用户输入内容中包含的JavaScript代码
      
    
    </summary>
    
      <category term="Xss" scheme="http://www.ldclass.club/categories/Xss/"/>
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/categories/Xss/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://www.ldclass.club/tags/JavaWeb/"/>
    
      <category term="Xss" scheme="http://www.ldclass.club/tags/Xss/"/>
    
  </entry>
  
  <entry>
    <title>Centos7本地挂载yum源</title>
    <link href="http://www.ldclass.club/2021/06/08/centos7-ben-di-gua-zai-yum-yuan/"/>
    <id>http://www.ldclass.club/2021/06/08/centos7-ben-di-gua-zai-yum-yuan/</id>
    <published>2021-06-07T17:34:49.000Z</published>
    <updated>2021-06-18T08:57:43.058Z</updated>
    
    <content type="html"><![CDATA[<ul><li>挂载镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# mkdir  -p  /mnt/centos7[root@lmzf ~]# mount  /root/CentOS-7-x86_64-DVD-1708.iso  /mnt/centos7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>开机永久挂载</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# cat  /etc/fstab/root/CentOS-7-x86_64-DVD-1708.iso   /mnt/centos7  iso9660 defaults,loop,ro  0  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>删除<code>/etc/yum.repo.d/</code>中的所有yum源 (重要)</p></li><li><p>创建本地的<code>repo</code>文件</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@lmzf ~]# vim  /etc/yum.repo.d/centos7.repo[centos7]name=centos7baseurl=file:///mnt/centos7gpgcheck=0enabled=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开始yum安装软件</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;挂载镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;[root@lmzf ~]# mkdir  -p  /mnt/centos7
[root@
      
    
    </summary>
    
      <category term="linux" scheme="http://www.ldclass.club/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.ldclass.club/tags/linux/"/>
    
      <category term="CentOS7" scheme="http://www.ldclass.club/tags/CentOS7/"/>
    
      <category term="yum" scheme="http://www.ldclass.club/tags/yum/"/>
    
  </entry>
  
</feed>
