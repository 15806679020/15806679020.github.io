<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌生的小窝</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ldclass.club/"/>
  <updated>2021-12-21T07:23:42.405Z</updated>
  <id>http://www.ldclass.club/</id>
  
  <author>
    <name>Dong Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>winsw打包程序成windows服务</title>
    <link href="http://www.ldclass.club/2021/12/21/winsw-da-bao-cheng-xu-cheng-windows-fu-wu/"/>
    <id>http://www.ldclass.club/2021/12/21/winsw-da-bao-cheng-xu-cheng-windows-fu-wu/</id>
    <published>2021-12-21T14:44:49.000Z</published>
    <updated>2021-12-21T07:23:42.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx</p></blockquote><ul><li>将winsw.exe上传到nginx根目录下，更改名称为<code>nginx-server.exe</code></li><li>在nginx根目录下新建nginx-server.xml，内容如下：<ul><li>nginx-server.xml</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nginx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>nginx-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>nginx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--更改为实际的nginx安装路径 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>C:/nginx-1.8.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">></span></span>C:/nginx-1.8.0/nginx.exe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">></span></span>-p C:/nginx-1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logpath</span><span class="token punctuation">></span></span>C:/nginx-1.8.0/logs/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logpath</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logmode</span><span class="token punctuation">></span></span>roll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logmode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>winsw.exe命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nginx-server.exe install     注册系统服务命令nginx-server.exe start         启动服务命令nginx-server.exe status        查看服务状态命令nginx-server.exe restart      重启服务命令nginx-server.exe uninstall    卸载服务命令，切记卸载前要先停止服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后台JAR包</p></blockquote><ul><li>jar包、winsw.exe、xml文件同名，并放在同一级目录下</li><li>xml文件内容</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>snowy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>snowy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>This is snowy service.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%JAVA_HOME%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">></span></span>-jar "C:\snowy\snowy.jar" <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startmode</span><span class="token punctuation">></span></span>Automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>startmode</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logpath</span><span class="token punctuation">></span></span>%BASE%\log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logpath</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logmode</span><span class="token punctuation">></span></span>rotate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logmode</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：xml中，name/id 均需要与jar包同名，否则可能出现问题</li></ul><blockquote><p>tomcat</p></blockquote><ul><li>进入bin目录下，cmd 运行 service.bat install  “可自定义name”</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将winsw.exe上传到nginx根目录下，更改名称为&lt;code&gt;nginx-server.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在nginx根目录下新建nginx-server
      
    
    </summary>
    
      <category term="WinSW" scheme="http://www.ldclass.club/categories/WinSW/"/>
    
    
      <category term="WinSW" scheme="http://www.ldclass.club/tags/WinSW/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://www.ldclass.club/2021/09/09/fen-bu-shi-suo/"/>
    <id>http://www.ldclass.club/2021/09/09/fen-bu-shi-suo/</id>
    <published>2021-09-08T23:29:29.000Z</published>
    <updated>2021-09-08T15:45:57.563Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>分布式锁核心知识</p><ul><li>加锁<ul><li>本地锁：synchronize、lock等，锁在当前进程内，集群部署下依旧存在问题</li><li>分布式锁：redis、zookeeper等实现，虽然还是锁，但是多个进程共用的锁标记，可以用Redis、Zookeeper、Mysql等都可以</li></ul></li><li>设计分布式锁应该考虑<ul><li>排他性<ul><li>在分布式应用集群中，同一个方法在同一时间只能被一台机器上的一个线程执行</li></ul></li><li>容错性<ul><li>分布式锁一定能得到释放，比如客户端奔溃或者网络中断</li></ul></li><li>满足可重入、高性能、高可用</li><li>注意分布式锁的开销、锁粒度</li></ul></li></ul></li><li><p>基于Redis实现分布式锁</p><ul><li>实现分布式锁 可以用 Redis、Zookeeper、Mysql数据库这几种 ,   性能最好的是Redis且是最容易理解<ul><li>分布式锁离不开 key - value 设置</li><li>key 是锁的唯一标识，一般按业务来决定命名，比如想要给一种商品的秒杀活动加锁，key 命名为 “seckill_商品ID” 。value就可以使用固定值，比如设置成1</li></ul></li><li>文档：<a href="http://www.redis.cn/commands.html#string" target="_blank" rel="noopener">http://www.redis.cn/commands.html#string</a></li><li>加锁 SETNX key value<ul><li>setnx 的含义就是 SET if Not Exists，有两个参数 setnx(key, value)，该方法是原子性操作</li><li>如果 key 不存在，则设置当前 key 成功，返回 1；</li><li>如果当前 key 已经存在，则设置当前 key 失败，返回 0</li></ul></li><li>解锁 del (key)<ul><li>得到锁的线程执行完任务，需要释放锁，以便其他线程可以进入,调用 del(key)</li></ul></li><li>配置锁超时 expire (key，30s）<ul><li>客户端奔溃或者网络中断，资源将会永远被锁住,即死锁，因此需要给key配置过期时间，以保证即使没有被显式释放，这把锁也要在一定时间后自动释放</li></ul></li><li>示例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String key <span class="token operator">=</span> <span class="token string">"coupon_66"</span>  <span class="token keyword">if</span>（setnx（key，<span class="token number">1</span>） <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">{</span>      <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//做对应的业务逻辑</span>          <span class="token comment" spellcheck="true">//查询用户是否已经领券</span>          <span class="token comment" spellcheck="true">//如果没有则扣减库存</span>          <span class="token comment" spellcheck="true">//新增领劵记录</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          del（key）      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//睡眠100毫秒，然后自旋调用本方法</span>        <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis做分布式锁存在的问题</p><ul><li><p>多个命令之间不是原子性操作，如<code>setnx</code>和<code>expire</code>之间，如果<code>setnx</code>成功，但是<code>expire</code>失败，且宕机了，则这个资源就是死锁</p><ul><li>解决</li></ul><pre class="line-numbers language-java"><code class="language-java">使用原子命令：设置和配置过期时间  setnx <span class="token operator">/</span> setex如<span class="token operator">:</span> set key <span class="token number">1</span> ex <span class="token number">30</span> nxjava里面 redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"seckill_1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>业务超时，存在其他线程勿删，key 30秒过期，假如线程A执行很慢超过30秒，则key就被释放了，其他线程B就得到了锁，这个时候线程A执行完成，而B还没执行完成，结果就是线程A删除了线程B加的锁</p><ul><li>解决</li></ul><pre class="line-numbers language-java"><code class="language-java">可以在 del 释放锁之前做一个判断，验证当前的锁是不是自己加的锁<span class="token punctuation">,</span> 那 value 应该是存当前线程的标识或者uuidString key <span class="token operator">=</span> <span class="token string">"coupon_66"</span>String value <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span>（setnx（key，value） <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">{</span>    <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做对应的业务逻辑</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除锁，判断是否是当前线程加的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//还存在时间间隔</span>                    del（key）        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//睡眠100毫秒，然后自旋调用本方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当线程A获取到正常值时，返回带代码中判断期间锁过期了，线程B刚好重新设置了新值，线程A那边有判断value是自己的标识，然后调用del方法，结果就是删除了新设置的线程B的值</p><ul><li>核心还是判断和删除命令 不是原子性操作导致</li></ul></li></ul></li><li><p>分布式锁lua脚本+redis原生代码编写</p><ul><li>核心是保证多个指令原子性，加锁使用setnx setex 可以保证原子性，那解锁使用 判断和删除怎么保证原子性</li><li>文档：<a href="http://www.redis.cn/commands/set.html" target="_blank" rel="noopener">http://www.redis.cn/commands/set.html</a></li><li>多个命令的原子性：采用 lua脚本+redis, 由于【判断和删除】是lua脚本执行，所以要么全成功，要么全失败</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取lock的值和传递的值一样，调用删除操作返回1，否则返回0</span>String script <span class="token operator">=</span> <span class="token string">"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Arrays.asList(lockKey)是key列表，uuid是参数</span>Integer result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全部代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 原生分布式锁 开始* 1、原子加锁 设置过期时间，防止宕机死锁* 2、原子解锁：需要判断是不是自己的锁*/</span>String uuid <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String lockKey <span class="token operator">=</span> <span class="token string">"lock:coupon:"</span><span class="token operator">+</span>couponId<span class="token punctuation">;</span>Boolean nativeLock<span class="token operator">=</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>uuid<span class="token punctuation">,</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nativeLock<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//加锁成功</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"加锁：{}"</span><span class="token punctuation">,</span>nativeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//执行业务  TODO</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>           String script <span class="token operator">=</span> <span class="token string">"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>                Integer result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解锁：{}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加锁失败，睡眠100毫秒，自旋重试</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">addCoupon</span><span class="token punctuation">(</span> couponId<span class="token punctuation">,</span> couponCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//原生分布式锁 结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Redis官方推荐-分布式锁最佳实践</p><ul><li>原生代码+redis实现分布式锁使用比较复杂，且有些锁续期问题更难处理</li><li>官方推荐方式：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a></li><li>多种实现客户端框架</li><li>Redisson官方中文文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></li><li>聚合工程锁定版本，common项目添加依赖（多个服务都会用到分布式锁）</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--分布式锁--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建redisson客户端</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>Redisson<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RedissonClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年09月06日 23:41 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.host}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String redisHost<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String redisPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String redisPwd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 配置分布式锁的Redisson     * @author LiuDong     * @date 2021/9/6 23:47     * @return org.redisson.api.RedissonClient     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedissonClient <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//单机方式</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://"</span> <span class="token operator">+</span> redisHost <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> redisPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//集群方式</span>        <span class="token comment" spellcheck="true">//config.useClusterServers().addNodeAddress("redis://192.168.1.1:6379", "redis://192.168.1.1:6379");</span>        RedissonClient redissonClient <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redissonClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 领券接口     * 1.获取优惠券是否存在     * 2.校验优惠券是否可以领取：时间、库存、超过限制     * 3.扣减库存     * 4.保存领券记录     * &lt;p>     * 领取优惠券     *     * @param couponId     * @param category     * @return club.ldclass.utils.JsonData     * @author LiuDong     * @date 2021/9/5 18:36     */</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor<span class="token operator">=</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> JsonData <span class="token function">addCoupon</span><span class="token punctuation">(</span><span class="token keyword">long</span> couponId<span class="token punctuation">,</span> CouponCategoryEnum category<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取登录信息</span>        LoginUser loginUser <span class="token operator">=</span> LoginInterceptor<span class="token punctuation">.</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String lockKey <span class="token operator">=</span> <span class="token string">"lock:coupon:"</span> <span class="token operator">+</span> couponId<span class="token punctuation">;</span>        RLock rLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多个线程进入时，会阻塞等待释放,不指定过期时间默认30s</span>        <span class="token comment" spellcheck="true">//有watch dog功能，自动续期</span>        rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加锁10秒钟过期，没有watch dog功能，无法自动续期</span>        <span class="token comment" spellcheck="true">//rLock.lock(10,TimeUnit.SECONDS);</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"领卷接口加锁成功：{}"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//执行业务逻辑</span>            CouponDO couponDO <span class="token operator">=</span> couponMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>CouponDO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> couponId<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">,</span> category<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"publish"</span><span class="token punctuation">,</span> CouponPublishEnum<span class="token punctuation">.</span>PUBLISH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//优惠券是否可以领取</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCoupon</span><span class="token punctuation">(</span>couponDO<span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建领券记录</span>            CouponRecordDO couponRecordDO <span class="token operator">=</span> CouponRecordDO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>CouponStateEnum<span class="token punctuation">.</span>NEW<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">couponId</span><span class="token punctuation">(</span>couponId<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//扣减库存 TODO</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> couponMapper<span class="token punctuation">.</span><span class="token function">reduceStock</span><span class="token punctuation">(</span>couponId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//库存扣减成功才保存记录</span>                couponRecordMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>couponRecordDO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发放优惠券失败:{},用户:{}"</span><span class="token punctuation">,</span> couponDO<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>COUPON_NO_STOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解锁</span>            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解锁成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Redis锁的过期时间小于业务的执行时间该如何续期</p><ul><li>watch dog看门狗机制</li></ul><pre class="line-numbers language-java"><code class="language-java">负责储存这个分布式锁的Redisson节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。或者业务执行时间过长导致锁过期，为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。Redisson中客户端一旦加锁成功，就会启动一个watch dog看门狗。watch dog是一个后台线程，会每隔<span class="token number">10</span>秒检查一下，如果客户端还持有锁key，那么就会不断的延长锁key的生存时间默认情况下，看门狗的检查锁的超时时间是<span class="token number">30</span>秒钟，也可以通过修改Config<span class="token punctuation">.</span>lockWatchdogTimeout来另行指定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>指定加锁时间</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加锁以后10秒钟自动解锁</span><span class="token comment" spellcheck="true">// 无需调用unlock方法手动解锁</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span><span class="token keyword">boolean</span> res <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>       lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;分布式锁核心知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加锁&lt;ul&gt;
&lt;li&gt;本地锁：synchronize、lock等，锁在当前进程内，集群部署下依旧存在问题&lt;/li&gt;
&lt;li&gt;分布式锁：redis、zookeeper等实现，虽然还是锁，但是多个进程共用的锁标记，可
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="分布式锁" scheme="http://www.ldclass.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Client-Server通信</title>
    <link href="http://www.ldclass.club/2021/08/31/client-server-tong-xin/"/>
    <id>http://www.ldclass.club/2021/08/31/client-server-tong-xin/</id>
    <published>2021-08-30T23:45:56.000Z</published>
    <updated>2021-08-30T15:48:26.646Z</updated>
    
    <content type="html"><![CDATA[<ul><li>BioServer</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>bio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月30日 22:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BioServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the time server is start in port:"</span> <span class="token operator">+</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>            Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeServerHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//线程池</span>                <span class="token comment" spellcheck="true">//ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor()</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TimeServerHandler</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>bio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月30日 22:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeServerHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TimeServerHandler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader in <span class="token operator">=</span> null<span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String body <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>body <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> body<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the time server receive msg:"</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BioClient</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>bio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月30日 23:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BioClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> null<span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String resp <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前服务器时间是："</span> <span class="token operator">+</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;BioServer&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt;
      
    
    </summary>
    
      <category term="BIO" scheme="http://www.ldclass.club/categories/BIO/"/>
    
    
      <category term="BIO" scheme="http://www.ldclass.club/tags/BIO/"/>
    
  </entry>
  
  <entry>
    <title>Mapper和Repository注解的区别</title>
    <link href="http://www.ldclass.club/2021/08/30/mapper-he-repository-zhu-jie-de-qu-bie/"/>
    <id>http://www.ldclass.club/2021/08/30/mapper-he-repository-zhu-jie-de-qu-bie/</id>
    <published>2021-08-29T21:35:19.000Z</published>
    <updated>2021-08-29T13:36:57.933Z</updated>
    
    <content type="html"><![CDATA[<ul><li>@Mapper是MyBatis的注解，@Repository是Spring中的注解，这些注解就是声明一个Bean。</li><li>@Mapper<ul><li>@Mapper注解不需要在SpringBoot启动类上配置扫描类；通过xml里面的namespace里面的接口地址，生成bean对象后注入到Service里面。</li><li>在连接数据库的接口上添加@Mapper，然后在xml中的namespace指向mapper，会生成一个动态bean，然后在servcieImpl进行动态注入。</li><li>如果不在dao的接口上添加@Mapper，可以在启动类上添加@MapperScan(“”)，并且指明扫描的位置</li></ul></li><li>@Repository<ul><li>需要配置扫描地址，然后dao层生成的bean才能被注入到Service层进行使用。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;@Mapper是MyBatis的注解，@Repository是Spring中的注解，这些注解就是声明一个Bean。&lt;/li&gt;
&lt;li&gt;@Mapper&lt;ul&gt;
&lt;li&gt;@Mapper注解不需要在SpringBoot启动类上配置扫描类；通过xml里面的namespa
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.ldclass.club/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>越权攻击</title>
    <link href="http://www.ldclass.club/2021/08/30/yue-quan-gong-ji/"/>
    <id>http://www.ldclass.club/2021/08/30/yue-quan-gong-ji/</id>
    <published>2021-08-29T21:21:46.000Z</published>
    <updated>2021-08-29T13:24:21.320Z</updated>
    
    <content type="html"><![CDATA[<h4 id="水平-垂直越权攻击和代码防范"><a href="#水平-垂直越权攻击和代码防范" class="headerlink" title="水平-垂直越权攻击和代码防范"></a>水平-垂直越权攻击和代码防范</h4><ul><li><p>越权攻击介绍</p><ul><li>是Web应用程序中一种常见的漏洞，由于其存在范围广、危害大, 列为Web应用十大安全隐患的第二名</li><li>指应用在检查授权时存在纰漏，使得攻击者在获得低权限用户账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限.</li><li>产生原因：主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信，而遗漏了权限的判定</li></ul></li><li><p>水平越权</p><ul><li>攻击者尝试访问与他拥有相同权限的用户的资源</li><li>例子：A用户可以直接操作到B用户的数据</li></ul></li><li><p>垂直越权</p><ul><li>一个低级别攻击者尝试访问高级别用户的资源</li><li>例子：普通管理员登录，拼接浏览器地址，直接访问高级管理员的页面</li></ul></li><li><p>防范水平越权</p><ul><li>建立用户和可操作资源的绑定关系，用户对任何资源进行操作时，通过该绑定关系确保该资源是属于该用户所有的</li></ul></li><li><p>防范垂直越权</p><ul><li>基于RBAC角色访问控制机制来防止纵向越权攻击，定义不同的权限角色，为每个角色分配不同的权限，当用户执行某个动作或产生某种行为时，通过用户所在的角色判定该动作或者行为是否允许。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;水平-垂直越权攻击和代码防范&quot;&gt;&lt;a href=&quot;#水平-垂直越权攻击和代码防范&quot; class=&quot;headerlink&quot; title=&quot;水平-垂直越权攻击和代码防范&quot;&gt;&lt;/a&gt;水平-垂直越权攻击和代码防范&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;越权攻击介绍&lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="越权攻击" scheme="http://www.ldclass.club/tags/%E8%B6%8A%E6%9D%83%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://www.ldclass.club/2021/08/29/rabbitmq/"/>
    <id>http://www.ldclass.club/2021/08/29/rabbitmq/</id>
    <published>2021-08-29T11:03:04.000Z</published>
    <updated>2021-08-30T15:46:17.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-什么是MQ消息中间件和应用场景"><a href="#一-什么是MQ消息中间件和应用场景" class="headerlink" title="一.什么是MQ消息中间件和应用场景"></a>一.什么是MQ消息中间件和应用场景</h3><ul><li><p>什么是MQ消息中间件</p><ul><li>全称MessageQueue，主要是用于程序和程序直接通信，异步+解耦</li></ul></li><li><p>使用场景：</p><ul><li>核心应用<ul><li>解耦：订单系统-》物流系统</li><li>异步：用户注册-》发送邮件，初始化信息</li><li>削峰：秒杀、日志处理</li></ul></li><li>跨平台 、多语言</li><li>分布式事务、最终一致性</li><li>RPC调用上下游对接，数据源变动-&gt;通知下属</li></ul></li></ul><img src="/2021/08/29/rabbitmq/1.jpg"><h3 id="二-JMS消息服务和和常见核心概念"><a href="#二-JMS消息服务和和常见核心概念" class="headerlink" title="二.JMS消息服务和和常见核心概念"></a>二.JMS消息服务和和常见核心概念</h3><ul><li>什么是JMS: Java消息服务（Java Message Service),Java平台中关于面向消息中间件的接口<ul><li>JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC(Java Database Connectivity)。这里，JDBC 是可以用来访问许多不同关系数据库的 API</li><li>是由Sun公司早期提出的消息标准，旨在为java应用提供统一的消息操作，包括create、send、receive</li><li>JMS是针对java的，那微软开发了NMS（.NET消息传递服务）</li></ul></li></ul><img src="/2021/08/29/rabbitmq/2.jpg"><ul><li>特性<ul><li>面向Java平台的标准消息传递API</li><li>在Java或JVM语言比如Scala、Groovy中具有互用性</li><li>无需担心底层协议</li><li>有queues和topics两种消息传递模型</li><li>支持事务、能够定义消息格式（消息头、属性和内容）</li></ul></li><li>常见概念<ul><li>JMS提供者：连接面向消息中间件的，JMS接口的一个实现，RocketMQ,ActiveMQ,Kafka等等</li><li>JMS生产者(Message Producer)：生产消息的服务</li><li>JMS消费者(Message Consumer)：消费消息的服务</li><li>JMS消息：数据对象</li><li>JMS队列：存储待消费消息的区域</li><li>JMS主题：一种支持发送消息给多个订阅者的机制</li><li>JMS消息通常有两种类型：点对点（Point-to-Point)、发布/订阅（Publish/Subscribe）</li></ul></li><li>基础编程模型<ul><li>MQ中需要用的一些类</li><li>ConnectionFactory ：连接工厂，JMS 用它创建连接</li><li>Connection ：JMS 客户端到JMS Provider 的连接</li><li>Session： 一个发送或接收消息的线程</li><li>Destination ：消息的目的地;消息发送给谁.</li><li>MessageConsumer / MessageProducer： 消息消费者，消息生产者</li></ul></li></ul><h3 id="三-高级消息队列协议AMQP介绍"><a href="#三-高级消息队列协议AMQP介绍" class="headerlink" title="三.高级消息队列协议AMQP介绍"></a>三.高级消息队列协议AMQP介绍</h3><ul><li>背景<ul><li>JMS或者NMS都没有标准的底层协议，它们可以在任何底层协议上运行，但是API是与编程语言绑定的，AMQP解决了这个问题，它使用了一套标准的底层协议</li></ul></li><li>什么是AMQP<ul><li>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题,就是是一种协议，兼容JMS</li><li>更准确说的链接协议 binary- wire-level-protocol 直接定义网络交换的数据格式，类似http</li><li>具体的产品实现比较多，RabbitMQ就是其中一种</li></ul></li></ul><img src="/2021/08/29/rabbitmq/3.jpg"><ul><li>特性<ul><li>独立于平台的底层消息传递协议</li><li>消费者驱动消息传递</li><li>跨语言和平台的互用性、属于底层协议</li><li>有5种交换类型direct，fanout，topic，headers，system</li><li>面向缓存的、可实现高性能、支持经典的消息队列，循环，存储和转发</li><li>支持长周期消息传递、支持事务（跨消息队列）</li></ul></li><li>AMQP和JMS的主要区别<ul><li>AMQP不从API层进行限定，直接定义网络交换的数据格式,这使得实现了AMQP的provider天然性就是跨平台</li><li>比如Java语言产生的消息，可以用其他语言比如python的进行消费</li><li>AQMP可以用http来进行类比，不关心实现接口的语言，只要都按照相应的数据格式去发送报文请求，不同语言的client可以和不同语言的server进行通讯</li><li>JMS消息类型：TextMessage/ObjectMessage/StreamMessage等</li><li>AMQP消息类型：Byte[]</li></ul></li></ul><h3 id="四-MQTT"><a href="#四-MQTT" class="headerlink" title="四.MQTT"></a>四.MQTT</h3><ul><li>MQTT: 消息队列遥测传输（Message Queueing Telemetry Transport ）</li><li>mqtt是协议<ul><li>mosquitto是一个实现了mqtt的消息中间件</li></ul></li><li>背景：<ul><li>我们有面向基于Java的企业应用的JMS和面向所有其他应用需求的AMQP，那这个MQTT是做啥的？</li></ul></li><li>原因<ul><li>计算性能不高的设备不能适应AMQP上的复杂操作,MQTT它是专门为小设备设计的</li><li>MQTT主要是是物联网（IOT）中大量的使用</li></ul></li><li>特性<ul><li>内存占用低，为小型无声设备之间通过低带宽发送短消息而设计</li><li>不支持长周期存储和转发，不允许分段消息（很难发送长消息）</li><li>支持主题发布-订阅、不支持事务（仅基本确认）</li><li>消息实际上是短暂的（短周期）</li><li>简单用户名和密码、不支持安全连接、消息不透明</li></ul></li></ul><h3 id="五-业界主流消息队列和技术选型"><a href="#五-业界主流消息队列和技术选型" class="headerlink" title="五.业界主流消息队列和技术选型"></a>五.业界主流消息队列和技术选型</h3><ul><li><p>业界主流的消息队列：Apache ActiveMQ、Kafka、RabbitMQ、RocketMQ</p><ul><li><p>ActiveMQ：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><ul><li><p>Apache出品，历史悠久，支持多种语言的客户端和协议，支持多种语言Java, .NET, C++ 等</p></li><li><p>基于JMS Provider的实现</p></li><li><p>缺点：吞吐量不高，多队列的时候性能下降，存在消息丢失的情况，比较少大规模使用</p></li></ul></li><li><p>Kafka：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p><ul><li><p>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理大规模的网站中的所有动作流数据(网页浏览，搜索和其他用户的行动)，副本集机制，实现数据冗余，保障数据尽量不丢失；支持多个生产者和消费者</p></li><li><p>类似MQ，功能较为简单，主要支持简单的MQ功能</p></li><li><p>缺点：不支持批量和广播消息，运维难度大，文档比较少, 需要掌握Scala</p></li></ul></li><li><p>RocketMQ：<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><ul><li>阿里开源的一款的消息中间件, 纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点, 性能强劲(零拷贝技术)，支持海量堆积, 支持指定次数和时间间隔的失败消息重发,支持consumer端tag过滤、延迟消息等，在阿里内部进行大规模使用，适合在电商，互联网金融等领域</li><li>基于JMS Provider的实现</li><li>缺点：社区相对不活跃，更新比较快，纯java支持</li></ul></li><li><p>RabbitMQ：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><ul><li>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错</li><li>缺点：使用Erlang开发，阅读和修改源码难度大</li></ul></li></ul></li></ul><h3 id="六-新版RabbitMQ核心概念"><a href="#六-新版RabbitMQ核心概念" class="headerlink" title="六.新版RabbitMQ核心概念"></a>六.新版RabbitMQ核心概念</h3><ul><li>RabbitMQ消息队列<ul><li>RabbitMQ：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a><ul><li>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错，与SpringAMQP完美的整合、API丰富易用</li><li>文档：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></li></ul></li></ul></li></ul><img src="/2021/08/29/rabbitmq/4.jpg"><ul><li>核心概念<ul><li>Broker<ul><li>RabbitMQ的服务端程序，可以认为一个mq节点就是一个broker</li></ul></li><li>Producer生产者<ul><li>创建消息Message，然后发布到RabbitMQ中</li></ul></li><li>Consumer消费者:<ul><li>消费队列里面的消息</li></ul></li><li>Message 消息<ul><li>生产消费的内容，有消息头和消息体，也包括多个属性配置，比如routingKey路由键</li></ul></li><li>Queue 队列<ul><li>是RabbitMQ 的内部对象，用于存储消息，消息都只能存储在队列中</li></ul></li><li>Channel 信道<ul><li>一条支持多路复用的通道，独立的双向数据流通道，可以发布、订阅、接收消息。</li><li>信道是建立在真实的TCP连接内的虚拟连接，复用TCP连接的通道</li></ul></li><li>Connection连接<ul><li>是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑，一个连接上可以有多个channel进行通信</li></ul></li><li>Exchange 交换器<ul><li>生产者将消息发送到 Exchange，交换器将消息路由到一个或者多个队列中，里面有多个类型，后续再一一介绍，队列和交换机是多对多的关系。</li></ul></li><li>RoutingKey 路由键<ul><li>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则</li><li>最大长度255 字节</li></ul></li><li>Binding 绑定<ul><li>通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键 ( BindingKey )，这样 RabbitMQ 就知道如何正确地将消息路由到队列了</li><li>生产者将消息发送给交换器时，需要一个RoutingKey，当BindingKey和 RoutingKey相匹配时，消息会被路由到对应的队列中</li></ul></li><li>Virtual host 虚拟主机<ul><li>用于不同业务模块的逻辑隔离，一个Virtual Host里面可以有若干个Exchange和Queue，同一个VirtualHost 里面不能有相同名称的Exchange或Queue</li><li>默认是 /<ul><li>/dev</li><li>/test</li><li>/pro</li></ul></li></ul></li></ul></li></ul><h3 id="七-安装RabbitMQ"><a href="#七-安装RabbitMQ" class="headerlink" title="七.安装RabbitMQ"></a>七.安装RabbitMQ</h3><ul><li><p>RabbitMQ安装方式</p><ul><li>安装文档 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a></li></ul></li><li><p>Docker安装RabbitMQ消息队列</p><ul><li>地址：<a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq/</a></li></ul><pre class="line-numbers language-shell"><code class="language-shell">#拉取镜像docker pull rabbitmq:managementdocker run -d --hostname rabbit_host1 --name xd_rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 rabbitmq:management#介绍-d 以守护进程方式在后台运行-p 15672:15672 management 界面管理访问端口-p 5672:5672 amqp 访问端口--name：指定容器名--hostname：设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts，作为容器主机IP的别名，并且将显示在容器的bash中-e 参数  RABBITMQ_DEFAULT_USER 用户名  RABBITMQ_DEFAULT_PASS 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主要端口介绍</li></ul><pre class="line-numbers language-shell"><code class="language-shell">4369 erlang 发现口5672 client 端通信口15672 管理界面 ui 端口25672 server 间内部通信口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问管理界面<ul><li>ip:15672</li></ul></li><li>注</li></ul><pre class="line-numbers language-shell"><code class="language-shell">CentOS 7 以上默认使用的是firewall作为防火墙查看防火墙状态firewall-cmd --state停止firewallsystemctl stop firewalld.service禁止firewall开机启动systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="八-RabbitMQ的Web管控台"><a href="#八-RabbitMQ的Web管控台" class="headerlink" title="八.RabbitMQ的Web管控台"></a>八.RabbitMQ的Web管控台</h3><ul><li>每个虚拟主机默认就有7个交换机</li></ul><img src="/2021/08/29/rabbitmq/5.jpg"><img src="/2021/08/29/rabbitmq/6.jpg"><img src="/2021/08/29/rabbitmq/7.jpg"><h3 id="九-RabbitMQ-交换机和发布订阅模型"><a href="#九-RabbitMQ-交换机和发布订阅模型" class="headerlink" title="九.RabbitMQ 交换机和发布订阅模型"></a>九.RabbitMQ 交换机和发布订阅模型</h3><ul><li>RabbitMQ的Exchange 交换机<ul><li>生产者将消息发送到 Exchange，交换器将消息路由到一个或者多个队列中，交换机有多个类型，队列和交换机是多对多的关系。</li><li>交换机只负责转发消息，不具备存储消息的能力，如果没有队列和exchange绑定，或者没有符合的路由规则，则消息会被丢失</li><li>RabbitMQ有四种交换机类型，分别是Direct exchange、Fanout exchange、Topic exchange、Headers exchange，最后的基本不用</li></ul></li></ul><img src="/2021/08/29/rabbitmq/8.jpg"><ul><li>交换机类型<ul><li>Direct Exchange 定向<ul><li>将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配</li><li>例子：如果一个队列绑定到该交换机上要求路由键 “aabb”，则只有被标记为“aabb”的消息才被转发，不会转发aabb.cc，也不会转发gg.aabb，只会转发aabb</li><li>处理路由健</li></ul></li><li>Fanout Exchange 广播<ul><li>只需要简单的将队列绑定到交换机上，一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息</li><li>Fanout交换机转发消息是最快的，用于发布订阅，广播形式，中文是扇形</li><li>不处理路由健</li></ul></li><li>Topic Exchange 通配符<ul><li>主题交换机是一种发布/订阅的模式，结合了直连交换机与扇形交换机的特点</li><li>将路由键和某模式进行匹配。此时队列需要绑定要一个模式上</li><li>符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词</li><li>例子：因此“abc.#”能够匹配到“abc.def.ghi”，但是“abc.*” 只会匹配到“abc.def”。</li></ul></li><li>Headers Exchanges（少用）<ul><li>根据发送的消息内容中的headers属性进行匹配, 在绑定Queue与Exchange时指定一组键值对</li><li>当消息发送到RabbitMQ时会取到该消息的headers与Exchange绑定时指定的键值对进行匹配；</li><li>如果完全匹配则消息会路由到该队列，否则不会路由到该队列</li><li>不处理路由键</li></ul></li></ul></li></ul><img src="/2021/08/29/rabbitmq/9.jpg"><ul><li><p>RabbitMQ的发布订阅消息模型</p><ul><li>什么是rabbitmq的发布订阅模式<ul><li>发布-订阅模型中，消息生产者不再是直接面对queue(队列名称)，而是直面exchange,都需要经过exchange来进行消息的发送, 所有发往同一个fanout交换机的消息都会被所有监听这个交换机的消费者接收到</li><li>发布订阅-消息模型引入fanout交换机</li><li>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-three-java.html</a></li></ul></li><li>发布订阅模型应用场景<ul><li>微信公众号</li><li>新浪微博关注</li></ul></li></ul><img src="/2021/08/29/rabbitmq/10.jpg"><ul><li>rabbitmq发布订阅模型<ul><li>通过把消息发送给交换机，交互机转发给对应绑定的队列</li><li>交换机绑定的队列是排它独占队列，自动删除    </li></ul></li></ul><img src="/2021/08/29/rabbitmq/11.jpg"></li></ul><h3 id="十-RabbitMQ的路由模式和应用场景"><a href="#十-RabbitMQ的路由模式和应用场景" class="headerlink" title="十.RabbitMQ的路由模式和应用场景"></a>十.RabbitMQ的路由模式和应用场景</h3><ul><li>什么是rabbitmq的路由模式<ul><li>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-four-java.html</a></li><li>交换机类型是Direct</li><li>队列和交换机绑定，需要指定一个路由key( 也叫Bingding Key)</li><li>消息生产者发送消息给交换机，需要指定routingKey</li><li>交换机根据消息的路由key，转发给对应的队列</li></ul></li><li>例子：日志采集系统 ELK<ul><li>一个队列收集error信息-》告警</li><li>一个队列收集全部信息-》日常使用</li></ul></li></ul><img src="/2021/08/29/rabbitmq/12.jpg"><img src="/2021/08/29/rabbitmq/13.jpg"><img src="/2021/08/29/rabbitmq/14.jpg"><h3 id="十一-RabbitMQ的topic主题通配符模式和应用场景"><a href="#十一-RabbitMQ的topic主题通配符模式和应用场景" class="headerlink" title="十一.RabbitMQ的topic主题通配符模式和应用场景"></a>十一.RabbitMQ的topic主题通配符模式和应用场景</h3><ul><li><p><strong>RabbitMQ的主题模式和应用场景</strong></p><ul><li>背景：<ul><li>如果业务很多路由key，怎么维护？？</li><li>topic交换机，支持通配符匹配模式，更加强大</li><li>工作基本都是用这个topic模式</li></ul></li><li>什么是rabbitmq的主题模式<ul><li>文档 <a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></li><li>交换机是 topic, 可以实现发布订阅模式fanout和路由模式Direct 的功能，更加灵活，支持模式匹配，通配符等</li><li>交换机同过通配符进行转发到对应的队列，* 代表一个词，#代表1个或多个词，一般用#作为通配符居多，比如 #.order, 会匹配 info.order 、sys.error.order, 而 <em>.order ，只会匹配 info.order, 之间是使用. 点进行分割多个词的； 如果是 *.</em>， 则info.order、error.order都会匹配</li><li>注意<ul><li>交换机和队列绑定时用的binding使用通配符的路由健</li><li>生产者发送消息时需要使用具体的路由健</li></ul></li></ul></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">quick.orange.rabbit</span> <span class="token attr-value">只会匹配  *.orange.* 和 *.*.rabbit ，进到Q1和Q2</span><span class="token attr-name">lazy.orange.elephant</span> <span class="token attr-value">只会匹配 *.orange.* 和 lazy.#，进到Q1和Q2</span><span class="token attr-name">quick.orange.fox</span> <span class="token attr-value">只会匹配 *.orange.*，进入Q1</span><span class="token attr-name">lazy.brown.fox</span> <span class="token attr-value">只会匹配azy.#，进入Q2</span><span class="token attr-name">lazy.pink.rabbit</span> <span class="token attr-value">只会匹配 lazy.#和*.*.rabbit ，同个队列进入Q2(消息只会发一次)</span><span class="token attr-name">quick.brown.fox</span> <span class="token attr-value">没有匹配，默认会被丢弃，可以通过回调监听二次处理</span><span class="token attr-name">lazy.orange.male.rabbit，只会匹配</span> <span class="token attr-value">lazy.#，进入Q2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/08/29/rabbitmq/15.jpg"><ul><li>示例：日志采集系统<ul><li>一个队列收集订单系统的全部日志信息，order.log.#</li><li>一个队列收集全部系统的全部日志信息, #.log</li></ul></li></ul></li></ul><img src="/2021/08/29/rabbitmq/16.jpg"><h3 id="十二-RabbitMQ的多种工作模式总结"><a href="#十二-RabbitMQ的多种工作模式总结" class="headerlink" title="十二. RabbitMQ的多种工作模式总结"></a>十二. RabbitMQ的多种工作模式总结</h3><ul><li>官网<ul><li><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></li></ul></li><li>简单模式<ul><li>一个生产、一个消费，不用指定交换机，使用默认交换机</li></ul></li><li>工作队列模式<ul><li>一个生产，多个消费，可以有轮训和公平策略，不用指定交换机，使用默认交换机</li></ul></li><li>发布订阅模式<ul><li>fanout类型交换机，通过交换机和队列绑定，不用指定绑定的路由健，生产者发送消息到交换机，fanout交换机直接进行转发，消息不用指定routingkey路由健</li></ul></li><li>路由模式<ul><li>direct类型交换机，过交换机和队列绑定，指定绑定的路由健，生产者发送消息到交换机，交换机根据消息的路由key进行转发到对应的队列，消息要指定routingkey路由健</li></ul></li><li>通配符模式<ul><li>topic交换机，过交换机和队列绑定，指定绑定的【通配符路由健】，生产者发送消息到交换机，交换机根据消息的路由key进行转发到对应的队列，消息要指定routingkey路由健</li></ul></li></ul><h3 id="十三-SpringBoot2-X-SpringAMQP整合RabbitMQ"><a href="#十三-SpringBoot2-X-SpringAMQP整合RabbitMQ" class="headerlink" title="十三.SpringBoot2.X+SpringAMQP整合RabbitMQ"></a>十三.SpringBoot2.X+SpringAMQP整合RabbitMQ</h3><ul><li><p>什么是Spring-AMQP</p><ul><li>官网：<a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener">https://spring.io/projects/spring-amqp</a></li><li>Spring 框架的AMQP消息解决方案，提供模板化的发送和接收消息的抽象层，提供基于消息驱动的 POJO的消息监听等</li><li>提供不依赖于任何特定的AMQP代理实现或客户端库通用的抽象，最终用户代码将很容易实现更易替换、添加和删除AMQP，因为它可以只针对抽象层来开发</li><li>总之就是提高我们的框架整合消息队列的效率,SpringBoot为更方便开发RabbitMQ推出了starter</li><li>我们使用 spring-boot-starter-amqp 进行开发</li></ul></li><li><p>整合rabbitmq</p><ul><li>spring-boot-starter-amqp 依赖添加</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--引入AMQP--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>yml配置文件修改</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#消息队列</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.70.133<span class="token punctuation">:</span><span class="token number">5672</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /dev    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RabbitConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"order_exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"order_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 交换机     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Exchange <span class="token function">orderExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return new TopicExchange(EXCHANGE_NAME, true, false);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">orderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return new Queue(QUEUE_NAME, true, false, false, null);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换机和队列绑定关系     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">orderBinding</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">,</span> Exchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"order.#"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return new Binding(QUEUE_NAME, Binding.DestinationType.QUEUE, EXCHANGE_NAME, "order.#", null);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>消息生产者-测试类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> RabbitTemplate template<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"order.new"</span><span class="token punctuation">,</span><span class="token string">"新订单来啦1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>消息消费者</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"order_queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMQListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * RabbitHandler 会自动匹配 消息类型（消息自动确认）     * @param msg     * @param message     * @throws IOException     */</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseCouponRecord</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> msgTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msgTag="</span><span class="token operator">+</span>msgTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message="</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监听到消息：消息内容:"</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="十四-RabbitMQ消息可靠性投递-消费"><a href="#十四-RabbitMQ消息可靠性投递-消费" class="headerlink" title="十四.RabbitMQ消息可靠性投递+消费"></a>十四.RabbitMQ消息可靠性投递+消费</h3><ul><li><p>什么是消息的可靠性投递</p><ul><li>保证消息百分百发送到消息队列中去</li><li>详细<ul><li>保证mq节点成功接受消息</li><li>消息发送端需要接受到mq服务端接受到消息的确认应答</li><li>完善的消息补偿机制，发送失败的消息可以再感知并二次处理</li></ul></li></ul></li><li><p>RabbitMQ消息投递路径</p><ul><li>生产者–&gt;交换机-&gt;队列-&gt;消费者</li><li>通过两个的点控制消息的可靠性投递<ul><li>生产者到交换机<ul><li>通过confirmCallback</li></ul></li><li>交换机到队列<ul><li>通过returnCallback</li></ul></li></ul></li></ul></li><li><p>建议</p><ul><li>开启消息确认机制以后，保证了消息的准确送达，但由于频繁的确认交互， rabbitmq 整体效率变低，吞吐量下降严重，不是非常重要的消息真心不建议用消息确认机制</li></ul></li></ul><img src="/2021/08/29/rabbitmq/17.jpg"><ul><li><p>Rabbitmq的消息可靠性投递confirmCallback</p><ul><li>生产者到交换机<ul><li>通过confirmCallback</li><li>生产者投递消息后，如果Broker收到消息后，会给生产者一个ACK。生产者通过ACK，可以确认这条消息是否正常发送到Broker，这种方式是消息可靠性投递的核心</li></ul></li><li>开启confirmCallback</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#旧版，确认消息发送成功，通过实现ConfirmCallBack接口，消息发送到交换器Exchange后触发回调</span>spring.rabbitmq.publisher<span class="token punctuation">-</span>confirms=true<span class="token comment" spellcheck="true">#新版，NONE值是禁用发布确认模式，是默认值，CORRELATED值是发布消息成功到交换器后会触发回调方法</span><span class="token key atrule">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">:</span> correlated<span class="token comment" spellcheck="true">#消息队列</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.70.133<span class="token punctuation">:</span><span class="token number">5672</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /dev    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin    <span class="token comment" spellcheck="true">#开启消息二次确认,生产者到broker的交换机</span>    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发实战</li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> RabbitTemplate template<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">testConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    template<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       *       * @param correlationData 配置       * @param ack 交换机是否收到消息，true是成功，false是失败       * @param cause 失败的原因       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"confirm=====>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"confirm==== ack="</span><span class="token operator">+</span>ack<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"confirm==== cause="</span><span class="token operator">+</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据ACK状态做对应的消息更新操作 TODO</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>EXCHANGE_NAME<span class="token operator">+</span><span class="token punctuation">,</span><span class="token string">"order.new"</span><span class="token punctuation">,</span><span class="token string">"新订单来啦1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟异常：修改投递的交换机名称</li></ul></li><li><p>Rabbitmq的消息可靠性投递returnCallback</p><ul><li><p>交换机到队列</p><ul><li><p>通过returnCallback</p></li><li><p>消息从交换器发送到对应队列失败时触发</p></li><li><p>两种模式</p><ul><li>交换机到队列不成功，则丢弃消息（默认）</li><li>交换机到队列不成功，返回给消息生产者，触发returnCallback</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//为true,则交换机处理消息到路由失败，则会返回给生产者</span><span class="token comment" spellcheck="true">//或者配置文件 spring.rabbitmq.template.mandatory=true</span>template<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>第一步 开启returnCallback配置</p></li><li><p>第二步 修改交换机投递到队列失败的策略</p></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#第一步</span>spring.rabbitmq.publisher<span class="token punctuation">-</span>returns=true<span class="token comment" spellcheck="true">#第二步 为true,则交换机处理消息到路由失败，则会返回给生产者</span>spring.rabbitmq.template.mandatory=true<span class="token comment" spellcheck="true">#消息队列</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#addresses: 192.168.70.129:5672,192.168.70.129:5673,192.168.70.129:5674</span>    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.70.133<span class="token punctuation">:</span><span class="token number">5672</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /dev    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin    <span class="token comment" spellcheck="true">#开启消息二次确认,生产者到broker的交换机</span>    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated    <span class="token comment" spellcheck="true">#开启消息二次确认，交换机到队列的可靠性投递</span>    <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#为true,则交换机处理消息到路由失败，则会返回给生产者</span>    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发实战</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">testReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//为true,则交换机处理消息到路由失败，则会返回给生产者</span>    <span class="token comment" spellcheck="true">//开启强制消息投递（mandatory为设置为true），但消息未被路由至任何一个queue，则回退一条消息</span>    template<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>ReturnedMessage returned<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> code <span class="token operator">=</span> returned<span class="token punctuation">.</span><span class="token function">getReplyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"code="</span><span class="token operator">+</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returned="</span><span class="token operator">+</span>returned<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"xxx.order.new"</span><span class="token punctuation">,</span><span class="token string">"新订单来啦11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟异常，修改路由key,拼接不存在的路由</li></ul></li></ul><h3 id="十五-RabbitMQ消息确认机制ACK"><a href="#十五-RabbitMQ消息确认机制ACK" class="headerlink" title="十五.RabbitMQ消息确认机制ACK"></a>十五.RabbitMQ消息确认机制ACK</h3><img src="/2021/08/29/rabbitmq/18.jpg"><ul><li>背景：消费者从broker中监听消息，需要确保消息被合理处理</li><li>RabbitMQ的ACK介绍<ul><li>消费者从RabbitMQ收到消息并处理完成后，反馈给RabbitMQ，RabbitMQ收到反馈后才将此消息从队列中删除</li><li>消费者在处理消息出现了网络不稳定、服务器异常等现象，那么就不会有ACK反馈，RabbitMQ会认为这个消息没有正常消费，会将消息重新放入队列中</li><li>只有当消费者正确发送ACK反馈，RabbitMQ确认收到后，消息才会从RabbitMQ服务器的数据中删除。</li><li>消息的ACK确认机制默认是打开的，消息如未被进行ACK的消息确认机制，这条消息被锁定Unacked</li></ul></li><li>确认方式<ul><li>自动确认（默认）</li><li>手动确认 manual</li></ul></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#开启手动确认消息，如果消息重新入队，进行重试</span>    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span>        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>RabbitMQ消息确认机制ACK配置+DeliveryTag+Reject介绍</p><ul><li>代码实战</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitHandler</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseCouponRecord</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> msgTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msgTag="</span><span class="token operator">+</span>msgTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message="</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body="</span><span class="token operator">+</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成功确认，使用此回执方法后，消息会被 rabbitmq broker 删除</span>        <span class="token comment" spellcheck="true">//channel.basicAck(msgTag,false);</span>        <span class="token comment" spellcheck="true">//channel.basicNack(msgTag,false,true);</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deliveryTag介绍<ul><li>表示消息投递序号，每次消费消息或者消息重新投递后， deliveryTag都会增加</li></ul></li><li>basicNack和basicReject介绍<ul><li>basicReject一次只能拒绝接收一个消息，可以设置是否requeue。</li><li>basicNack方法可以支持一次0个或多个消息的拒收，可以设置是否requeue。</li></ul></li><li>人工审核异常消息<ul><li>设置重试阈值，超过后确认消费成功，记录消息，人工处理</li></ul></li></ul></li></ul><h3 id="十六-RabbitMQ死信队列-TTL"><a href="#十六-RabbitMQ死信队列-TTL" class="headerlink" title="十六.RabbitMQ死信队列 + TTL"></a>十六.RabbitMQ死信队列 + TTL</h3><ul><li>什么是TTL<ul><li>time to live 消息存活时间</li><li>如果消息在存活时间内未被消费，则会别清除</li><li>RabbitMQ支持两种ttl设置<ul><li>单独消息进行配置ttl</li><li>整个队列进行配置ttl（居多）</li></ul></li></ul></li><li>什么是rabbitmq的死信队列<ul><li>没有被及时消费的消息存放的队列</li></ul></li><li>什么是rabbitmq的死信交换机<ul><li>Dead Letter Exchange（死信交换机，缩写：DLX）当消息成为死信后，会被重新发送到另一个交换机，这个交换机就是DLX死信交换机。</li></ul></li></ul><img src="/2021/08/29/rabbitmq/19.jpg"><img src="/2021/08/29/rabbitmq/20.jpg"><ul><li>消息有哪几种情况成为死信<ul><li>消费者拒收消息<strong>（basic.reject/ basic.nack）</strong>，并且没有重新入队 <strong>requeue=false</strong></li><li>消息在队列中未被消费，且超过队列或者消息本身的过期时间<strong>TTL(time-to-live)</strong></li><li>队列的消息长度达到极限</li><li>结果：消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</li></ul></li></ul><img src="/2021/08/29/rabbitmq/21.jpg"><ul><li><p>RabbitMQ管控台消息TTL测试</p><ul><li>队列过期时间使用参数，对整个队列消息统一过期<ul><li>x-message-ttl</li><li>单位ms(毫秒)</li></ul></li><li>消息过期时间使用参数（如果队列头部消息未过期，队列中级消息已经过期，已经还在队列里面）<ul><li>expiration</li><li>单位ms(毫秒)</li></ul></li><li>两者都配置的话，时间短的先触发</li></ul></li><li><p>RabbitMQ Web控制台测试</p><ul><li>新建死信交换机(和普通没区别)</li></ul><img src="/2021/08/29/rabbitmq/22.jpg"><ul><li>新建死信队列 (和普通没区别)</li></ul><img src="/2021/08/29/rabbitmq/23.jpg"><ul><li>死信交换机和队列绑定</li></ul><img src="/2021/08/29/rabbitmq/24.jpg"><ul><li>新建普通队列，设置过期时间、指定死信交换机</li></ul><img src="/2021/08/29/rabbitmq/25.jpg"><ul><li>测试：直接web控制台往product_qeueu发送消息即可</li></ul></li></ul><h3 id="十七-RabbitMQ的延迟队列和应用场景"><a href="#十七-RabbitMQ的延迟队列和应用场景" class="headerlink" title="十七.RabbitMQ的延迟队列和应用场景"></a>十七.RabbitMQ的延迟队列和应用场景</h3><ul><li>什么是延迟队列<ul><li>一种带有延迟功能的消息队列，Producer 将消息发送到消息队列 服务端，但并不期望这条消息立马投递，而是推迟到在当前时间点之后的某一个时间投递到 Consumer 进行消费，该消息即定时消息</li></ul></li><li>使用场景<ul><li>通过消息触发一些定时任务，比如在某一固定时间点向用户发送提醒消息</li><li>用户登录之后5分钟给用户做分类推送、用户多少天未登录给用户做召回推送；</li><li>消息生产和消费有时间窗口要求：比如在天猫电商交易中超时未支付关闭订单的场景，在订单创建时会发送一条 延时消息。这条消息将会在 30 分钟以后投递给消费者，消费者收到此消息后需要判断对应的订单是否已完成支付。 如支付未完成，则关闭订单。如已完成支付则忽略</li></ul></li><li>业界的一些实现方式<ul><li>定时任务高精度轮训</li><li>采用RocketMQ自带延迟消息功能</li><li>RabbitMQ本身是不支持延迟队列的，结合死信队列的特性，就可以做到延迟消息</li></ul></li></ul><img src="/2021/08/29/rabbitmq/26.jpg"><ul><li><p>SpringBoot2.X+RabbitMQ延迟消息配置</p><ul><li>死信交换机和死信队列开发</li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 死信队列     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOCK_MERCHANT_DEAD_QUEUE <span class="token operator">=</span> <span class="token string">"lock_merchant_dead_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 死信交换机     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOCK_MERCHANT_DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"lock_merchant_dead_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 进入死信队列的路由key     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOCK_MERCHANT_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"lock_merchant_routing_key"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建死信交换机     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Exchange <span class="token function">lockMerchantDeadExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>LOCK_MERCHANT_DEAD_EXCHANGE<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建死信队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">lockMerchantDeadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>LOCK_MERCHANT_DEAD_QUEUE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定死信交换机和死信队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">lockMerchantBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>LOCK_MERCHANT_DEAD_QUEUE<span class="token punctuation">,</span>Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                LOCK_MERCHANT_DEAD_EXCHANGE<span class="token punctuation">,</span>LOCK_MERCHANT_ROUTING_KEY<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>topic交换机和队列开发, 绑定死信交换机</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 普通队列，绑定的个死信交换机     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NEW_MERCHANT_QUEUE <span class="token operator">=</span> <span class="token string">"new_merchant_queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 普通的topic交换机     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NEW_MERCHANT_EXCHANGE <span class="token operator">=</span> <span class="token string">"new_merchant_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 路由key     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NEW_MERCHANT_ROUTIING_KEY <span class="token operator">=</span> <span class="token string">"new_merchant_routing_key"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建普通交换机     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Exchange <span class="token function">newMerchantExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>NEW_MERCHANT_EXCHANGE<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建普通队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">newMerchantQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息过期后，进入到死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>LOCK_MERCHANT_DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息过期后，进入到死信交换机的路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span>LOCK_MERCHANT_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//过期时间，单位毫秒</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>NEW_MERCHANT_QUEUE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交换机和队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">newMerchantBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>NEW_MERCHANT_QUEUE<span class="token punctuation">,</span>Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                NEW_MERCHANT_EXCHANGE<span class="token punctuation">,</span>NEW_MERCHANT_ROUTIING_KEY<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>消息生产和消费<ul><li>消息生产<ul><li>投递到普通的topic交换机</li><li>消息过期，进入死信交换机</li></ul></li><li>消息消费<ul><li>消费者监听死信交换机的队列</li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-什么是MQ消息中间件和应用场景&quot;&gt;&lt;a href=&quot;#一-什么是MQ消息中间件和应用场景&quot; class=&quot;headerlink&quot; title=&quot;一.什么是MQ消息中间件和应用场景&quot;&gt;&lt;/a&gt;一.什么是MQ消息中间件和应用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什
      
    
    </summary>
    
      <category term="MQ" scheme="http://www.ldclass.club/categories/MQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://www.ldclass.club/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>nginx的location和proxy_pass是否带斜杠的区别</title>
    <link href="http://www.ldclass.club/2021/08/28/nginx-de-location-he-proxy-pass-shi-fou-dai-xie-gang-de-qu-bie/"/>
    <id>http://www.ldclass.club/2021/08/28/nginx-de-location-he-proxy-pass-shi-fou-dai-xie-gang-de-qu-bie/</id>
    <published>2021-08-27T21:53:54.000Z</published>
    <updated>2021-08-27T13:59:22.361Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>当前nginx服务器IP为192.168.231.128</p><ul><li>针对一个IP，可以通过路径跳转到多个项目，server配置如下：</li></ul><pre class="line-numbers language-conf"><code class="language-conf">   server {        listen       8081;        server_name  192.168.231.128;        location / {            proxy_pass   http://localhost:8080;        }        location /txffc {            proxy_pass   http://localhost:8082;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>proxy_pass最后待斜杠和不带斜杠的区别如下：</p><pre class="line-numbers language-conf"><code class="language-conf">location /txffc {    proxy_pass http://localhost:8082;}访问URL=http://192.168.231.128/txffc/common指向的地址实际是：http://localhost:8082/txffc/common即nginx会把包括匹配到的内容都追加到proxy_pass地址后面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-conf"><code class="language-conf">location /txffc {    proxy_pass http://localhost:8082/;}访问URL=http://192.168.231.128/txffc/common指向的地址实际是：http://localhost:8082/common即nginx不会把匹配到的内容追加到proxy_pass地址后面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>location 最后待斜杠和不带斜杠的区别如下：</p><pre class="line-numbers language-conf"><code class="language-conf">location /txffc {    proxy_pass http://localhost:8082;}不带斜杠，可以匹配http://192.168.231.128/txffc/commonhttp://192.168.231.128/txffcdddhttp://192.168.231.128/txffcddd/aabc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-conf"><code class="language-conf">location /txffc/ {    proxy_pass http://localhost:8082;}带斜杠，可以匹配http://192.168.231.128/txffc/commonhttp://192.168.231.128/txffc/aabb不能匹配http://192.168.231.128/txffcddd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;当前nginx服务器IP为192.168.231.128&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对一个IP，可以通过路径跳转到多个项目，server配置如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-conf&quot;&gt;&lt;c
      
    
    </summary>
    
      <category term="Nginx" scheme="http://www.ldclass.club/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.ldclass.club/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>登录拦截器和ThreadLocal原理</title>
    <link href="http://www.ldclass.club/2021/08/25/deng-lu-lan-jie-qi-he-threadlocal-yuan-li/"/>
    <id>http://www.ldclass.club/2021/08/25/deng-lu-lan-jie-qi-he-threadlocal-yuan-li/</id>
    <published>2021-08-25T09:23:25.000Z</published>
    <updated>2021-08-25T01:28:39.674Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="开发登录拦截器"><a href="#开发登录拦截器" class="headerlink" title="开发登录拦截器"></a>开发登录拦截器</h4><ul><li>解密JWT</li><li>传递登录用户信息<ul><li>attribute传递</li><li>threadLocal传递</li></ul></li></ul></li><li><h4 id="SpringBoot拦截器代码开发"><a href="#SpringBoot拦截器代码开发" class="headerlink" title="SpringBoot拦截器代码开发"></a>SpringBoot拦截器代码开发</h4></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>model<span class="token punctuation">.</span>LoginUser<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JWTUtil<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description 登录拦截器 * @date 2021年08月24日 23:04 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>LoginUser<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从头信息获取</span>        String accessToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessToken <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从url获取</span>            accessToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不为空</span>            Claims claims <span class="token operator">=</span> JWTUtil<span class="token punctuation">.</span><span class="token function">checkJWT</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>claims <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//未登录</span>                CommonUtil<span class="token punctuation">.</span><span class="token function">sendJsonMsg</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>ACCOUNT_UNLOGIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Long userId <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String headImg <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"head_img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String mail <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LoginUser loginUser <span class="token operator">=</span> LoginUser<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">headImg</span><span class="token punctuation">(</span>headImg<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">mail</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过attribute传递用户信息</span>            <span class="token comment" spellcheck="true">//request.setAttribute("loginUser", loginUser);</span>            <span class="token comment" spellcheck="true">//通过ThreadLocal传递用户信息</span>            <span class="token comment" spellcheck="true">//全局变量</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CommonUtil<span class="token punctuation">.</span><span class="token function">sendJsonMsg</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>ACCOUNT_UNLOGIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="核心知识-ThreadLocal介绍"><a href="#核心知识-ThreadLocal介绍" class="headerlink" title="核心知识-ThreadLocal介绍"></a>核心知识-ThreadLocal介绍</h4><ul><li><strong>ThreadLocal</strong>全称thread local variable（线程局部变量）功用非常简单，使用场合主要解决多线程中数据因并发产生不一致问题。</li><li>ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享，这样的结果是耗费了内存，但大大减少了线程同步所带来性能消耗，也减少了线程并发控制的复杂度。 </li><li>总结起来就是：同个线程共享数据</li><li>注意：ThreadLocal不能使用原子类型，只能使用Object类型</li></ul></li><li><h4 id="核心应用场景"><a href="#核心应用场景" class="headerlink" title="核心应用场景"></a>核心应用场景</h4><ul><li>ThreadLocal 用作每个线程内需要独立保存信息，方便同个线程的其他方法获取该信息的场景。</li><li>每个线程获取到的信息可能都是不一样的，前面执行的方法保存了信息后，后续方法可以通过ThreadLocal 直接获取到，避免了传参，类似于全局变量的概念，比如用户登录令牌解密后的信息传递（还有用户权限信息、从用户系统获取到的用户名、用户ID）</li></ul></li><li><h4 id="ThreadLocal同个线程共享变量"><a href="#ThreadLocal同个线程共享变量" class="headerlink" title="ThreadLocal同个线程共享变量"></a>ThreadLocal同个线程共享变量</h4><ul><li>方法一（拦截器）》》方法二（controller）》》方法三（service）》》方法四（mapper）</li></ul></li><li><h4 id="登录拦截器路径配置和开发"><a href="#登录拦截器路径配置和开发" class="headerlink" title="登录拦截器路径配置和开发"></a>登录拦截器路径配置和开发</h4><ul><li>拦截器配置<ul><li>拦截路径</li><li>不拦截路径</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>LoginInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月24日 23:52 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">interceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LoginInterceptor <span class="token function">loginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">loginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//拦截的路径 黑名单</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/user/*/**"</span><span class="token punctuation">,</span> <span class="token string">"/api/address/*/**"</span><span class="token punctuation">,</span> <span class="token string">"/api/notify/*/**"</span><span class="token punctuation">)</span>                <span class="token operator">/</span><span class="token operator">/</span>不拦截的路径 白名单                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/notify/*/send_code"</span><span class="token punctuation">,</span> <span class="token string">"/api/notify/*/captcha"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/user/*/register"</span><span class="token punctuation">,</span> <span class="token string">"/api/user/*/login"</span><span class="token punctuation">,</span> <span class="token string">"/api/user/*/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;开发登录拦截器&quot;&gt;&lt;a href=&quot;#开发登录拦截器&quot; class=&quot;headerlink&quot; title=&quot;开发登录拦截器&quot;&gt;&lt;/a&gt;开发登录拦截器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解密JWT&lt;/li&gt;
&lt;li&gt;传递登录用户信息&lt;ul&gt;
&lt;li&gt;att
      
    
    </summary>
    
      <category term="JWT" scheme="http://www.ldclass.club/categories/JWT/"/>
    
    
      <category term="JWT" scheme="http://www.ldclass.club/tags/JWT/"/>
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
  </entry>
  
  <entry>
    <title>JWT令牌token泄露恶意使用解决方案</title>
    <link href="http://www.ldclass.club/2021/08/25/jwt-ling-pai-token-xie-lu-e-yi-shi-yong-jie-jue-fang-an/"/>
    <id>http://www.ldclass.club/2021/08/25/jwt-ling-pai-token-xie-lu-e-yi-shi-yong-jie-jue-fang-an/</id>
    <published>2021-08-25T09:20:22.000Z</published>
    <updated>2021-08-25T01:29:53.194Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="如何避免token令牌泄露被恶意使用"><a href="#如何避免token令牌泄露被恶意使用" class="headerlink" title="如何避免token令牌泄露被恶意使用"></a>如何避免token令牌泄露被恶意使用</h4><ul><li>ip绑定方式<ul><li>生成token的时候，加密的payload加入当前用户ip。</li><li>拦截器解密后，获取payload的ip和当前访问ip判断是否同个，如果不是则提示重新登录</li><li>优点：服务端无需存储相关内容，性能高，假如用户广州登录，泄露了token给杭州的黑客，依旧用不了</li><li>缺点：如果用户用使用过程中ip变动频繁，则操作会经常提示重新登录，体验不友好</li><li>当然也可以让用户开启安全模式和非安全模式，让用户自己知道这个情况，一些区块链、比特币交易所里面就会让用户自己选择控制这个token令牌安全是否和ip、终端、地理网络信息进行绑定</li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;如何避免token令牌泄露被恶意使用&quot;&gt;&lt;a href=&quot;#如何避免token令牌泄露被恶意使用&quot; class=&quot;headerlink&quot; title=&quot;如何避免token令牌泄露被恶意使用&quot;&gt;&lt;/a&gt;如何避免token令牌泄露被恶意使用&lt;/h4&gt;
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="JWT" scheme="http://www.ldclass.club/tags/JWT/"/>
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
  </entry>
  
  <entry>
    <title>JWT登录过期自动刷新token</title>
    <link href="http://www.ldclass.club/2021/08/25/jwt-deng-lu-guo-qi-zi-dong-shua-xin-token/"/>
    <id>http://www.ldclass.club/2021/08/25/jwt-deng-lu-guo-qi-zi-dong-shua-xin-token/</id>
    <published>2021-08-25T09:08:55.000Z</published>
    <updated>2021-08-25T01:19:25.501Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>在前后分离场景下，越来越多的项目使用jwt token作为接口的安全机制,但存在jwt过期后，用户无法直接感知，假如在用户操作页面期间，突然提示登录，则体验很不友好，所以就有了token自动刷新需求</p></li><li><h4 id="方案一：前端控制检测token，无感知刷新"><a href="#方案一：前端控制检测token，无感知刷新" class="headerlink" title="方案一：前端控制检测token，无感知刷新"></a>方案一：前端控制检测token，无感知刷新</h4><ul><li><p>用户登录成功的时候，一次性给他两个Token，分别为AccessToken和RefreshToken，AccessToken有效期较短,比如1天或者5天，用于正常请求<br>RefreshToken有效期可以设置长一些，例如10天、20天，作为刷新AccessToken的凭证</p></li><li><p>刷新方案：当AccessToken即将过期的时候，例如提前30分钟，客户端利用RefreshToken请求指定的API获取新的AccessToken并更新本地存储中的AccessToken</p></li><li><p>核心逻辑</p><ul><li>登录成功后，jwt生成AccessToken； UUID生成RefreshToken并存储在服务端redis中,设置过期时间</li><li>接口返回3个字段AccessToken/RefreshToken/访问令牌过期时间戳</li><li>由于RefreshToken存储在服务端redis中，假如这个RefreshToken也过期，则提示重新登录； </li></ul></li><li><p>疑问：RefreshToken有效期那么长，和直接将AccessToken的有效期延长有什么区别</p><ul><li>答：RefreshToken不像AccessToken那样在大多数请求中都被使用，主要是本地检测accessToken快过期的时候才使用，一般本地存储的时候，也不叫refreshToken,前端可以取个别名，混淆代码让攻击者不能直接识别这个就是刷新令牌</li></ul></li><li><p>缺点：前端每次请求需要判断token距离过期时间</p></li><li><p>优点：后端压力小，代码逻辑改动不大</p></li></ul></li></ul><img src="/2021/08/25/jwt-deng-lu-guo-qi-zi-dong-shua-xin-token/1.png" title="token自动刷新方案"><ul><li><h4 id="方案二：后端存储判断过期时间"><a href="#方案二：后端存储判断过期时间" class="headerlink" title="方案二：后端存储判断过期时间"></a>方案二：后端存储判断过期时间</h4><ul><li><p>后端存储AccessToken，每次请求过来都判断是否要过期，如果快要过期则重新生成新的token，并返回给前端重新存储，比如距离1天就过期的情况，如果用户访问对应的接口则会更新，但假如没访问则token已经过期则需要重新登录</p></li><li><p>优点：前端改动小，只需要存储响应http头里面是否有新的令牌产生，有的话就重新存储</p></li><li><p>缺点：后端实现复杂，且泄露后容易存在一直保活状态，且前端会存在并发请求，当并发请求收到多个jwt token时，容易生成多个token混乱使用    </p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在前后分离场景下，越来越多的项目使用jwt token作为接口的安全机制,但存在jwt过期后，用户无法直接感知，假如在用户操作页面期间，突然提示登录，则体验很不友好，所以就有了token自动刷新需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;方案一：前端
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="JWT" scheme="http://www.ldclass.club/tags/JWT/"/>
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
  </entry>
  
  <entry>
    <title>网络攻防之密码学</title>
    <link href="http://www.ldclass.club/2021/08/23/wang-luo-gong-fang-zhi-mi-ma-xue/"/>
    <id>http://www.ldclass.club/2021/08/23/wang-luo-gong-fang-zhi-mi-ma-xue/</id>
    <published>2021-08-22T22:58:03.000Z</published>
    <updated>2021-08-22T15:03:42.773Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="信息安全的基本目标"><a href="#信息安全的基本目标" class="headerlink" title="信息安全的基本目标"></a>信息安全的基本目标</h4><ul><li>保密性：防止用户的数据被不合法的用户读取</li><li>完整性：保护数据免受未授权的修改，包括数据的未授权创建和删除</li><li>可用性：保证具有授权的一方可以访问所有的资源</li></ul></li><li><h4 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h4><ul><li>哈希算法（单向加密）</li><li>对称加密</li><li>非对称加密</li></ul></li><li><h4 id="hash算法-单项加密"><a href="#hash算法-单项加密" class="headerlink" title="hash算法-单项加密"></a>hash算法-单项加密</h4><ul><li>加密过程中不需要使用密钥，输入明文后由系统直接经过加密算法处理成密文，密文无法解密。只有重新输入明文，并经过同样的加密算法处理，得到相同的密文并被系统重新识别后，才能真正解密        </li><li>算法：MD5/SHA1/SHA224/SHA256/</li><li>优点：快速计算m，具有单向性 one-way，不可由散列值推出原消息</li><li>场景：文件完整性校验和(Checksum)算法、常规密码等</li></ul></li><li><h4 id="彩虹表暴力破解"><a href="#彩虹表暴力破解" class="headerlink" title="彩虹表暴力破解"></a>彩虹表暴力破解</h4><ul><li>网站：<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></li><li>密码存储常用方式<ul><li>双重MD5</li><li>MD5+加盐（常使用）</li><li>双重MD5+加盐</li></ul></li><li>加密解密更复杂，接口性能下降更严重</li></ul></li><li><h4 id="加密工具包"><a href="#加密工具包" class="headerlink" title="加密工具包"></a>加密工具包</h4><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--用于加密--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;信息安全的基本目标&quot;&gt;&lt;a href=&quot;#信息安全的基本目标&quot; class=&quot;headerlink&quot; title=&quot;信息安全的基本目标&quot;&gt;&lt;/a&gt;信息安全的基本目标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;保密性：防止用户的数据被不合法的用户读取&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="密码学" scheme="http://www.ldclass.club/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里云OSS</title>
    <link href="http://www.ldclass.club/2021/08/19/a-li-yun-oss/"/>
    <id>http://www.ldclass.club/2021/08/19/a-li-yun-oss/</id>
    <published>2021-08-18T22:53:35.000Z</published>
    <updated>2021-08-19T05:32:55.443Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="阿里云OSS介绍"><a href="#阿里云OSS介绍" class="headerlink" title="阿里云OSS介绍"></a>阿里云OSS介绍</h4></li></ul><pre><code>对象存储OSS（Object Storage Service）是阿里云提供的海量、安全、低成本、高持久的云存储服务。其数据设计持久性不低于99.9999999999%（12个9），服务设计可用性不低于99.995%。OSS具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。提供标准、低频访问、归档和冷归档四种存储类型，全面覆盖从热到冷的各种数据存储场景：</code></pre><table><thead><tr><th>标准存储类型</th><th>高持久、高可用、高性能的对象存储服务，支持频繁的数据访问。是各种社交、分享类的图片、音视频应用、大型网站、大数据分析的合适选择。</th></tr></thead><tbody><tr><td>低频访问存储类型</td><td>适合长期保存不经常访问的数据（平均每月访问频率1到2次）。存储单价低于标准类型，适合各类移动应用、智能设备、企业数据的长期备份，支持实时数据访问。</td></tr><tr><td>归档存储类型</td><td>适合需要长期保存（建议半年以上）的归档数据，在存储周期内极少被访问，数据进入到可读取状态需要1分钟的解冻时间。适合需要长期保存的档案数据、医疗影像、科学资料、影视素材。</td></tr><tr><td>冷归档存储类型</td><td>适合需要超长时间存放的极冷数据。例如因合规要求需要长期留存的数据、大数据及人工智能领域长期积累的原始数据、影视行业长期留存的媒体资源、在线教育行业的归档视频等。</td></tr></tbody></table><ul><li><h4 id="开通阿里云OSS"><a href="#开通阿里云OSS" class="headerlink" title="开通阿里云OSS"></a>开通阿里云OSS</h4><ul><li><p>有阿里云账号、实名认证</p><ul><li><p>OSS介绍：<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">https://www.aliyun.com/product/oss</a></p></li><li><p>OSS控制台：<a href="https://oss.console.aliyun.com/bucket" target="_blank" rel="noopener">https://oss.console.aliyun.com/bucket</a></p></li><li><p>学习路径：<a href="https://help.aliyun.com/learn/learningpath/oss.html" target="_blank" rel="noopener">https://help.aliyun.com/learn/learningpath/oss.html</a></p></li></ul></li><li><p>开通后的操作</p><ul><li>创建Bucket</li><li>上传文件</li><li>访问文件</li></ul></li></ul></li></ul><ul><li><h4 id="阿里云权限管理RAM介绍"><a href="#阿里云权限管理RAM介绍" class="headerlink" title="阿里云权限管理RAM介绍"></a>阿里云权限管理RAM介绍</h4><ul><li><p>RAM权限介绍</p><ul><li>阿里云用于各个产品的权限，基于RBAC模型，进行简单管理账号、统一分配权限、集中管控资源，从而建立安全、完善的资源控制体系。</li><li>众多产品，一般采用子账号进行分配权限，防止越权攻击</li><li>建立用户，勾选编程访问（保存accessKey和accessSecret，只出现一次）</li></ul></li><li><p>云账号 AccessKey</p><ul><li>访问阿里云 API 的密钥，具有该账户完全的权限</li></ul></li></ul></li><li><h5 id="阿里云OSS客户端SDK集成"><a href="#阿里云OSS客户端SDK集成" class="headerlink" title="阿里云OSS客户端SDK集成"></a>阿里云OSS客户端SDK集成</h5><ul><li><p>添加阿里云OSS的SDK    </p><ul><li><p>地址：<code>https://help.aliyun.com/document_detail/32008.html</code></p></li><li><p>添加maven依赖</p><ul><li>底层聚合工程添加版本</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- OSS各个项目单独加依赖，根据需要进行添加--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户微服务添加</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- OSS各个项目单独加依赖，根据需要进行添加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用户微服务配置OSS</p><pre class="line-numbers language-yml"><code class="language-yml">#阿里云OSS配置aliyun:  oss:    endpoint: xxxx    access-key-id: xxxx    access-key-secret: xxx    bucketname: xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建配置类 (配置里面的横杠会，自动转驼峰)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月18日 23:34 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"aliyun.oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OSSConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 地域节点     */</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 配置文件中的属性会自动转化为驼峰     *     */</span>    <span class="token keyword">private</span> String accessKeyId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token keyword">private</span> String accessKeySecret<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  bucket名称     */</span>    <span class="token keyword">private</span> String bucketname<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><h4 id="用户微服务上传用户头像到oss-服务层开发"><a href="#用户微服务上传用户头像到oss-服务层开发" class="headerlink" title="用户微服务上传用户头像到oss-服务层开发"></a>用户微服务上传用户头像到oss-服务层开发</h4><ul><li><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月18日 23:38 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 上传头像，返回url     * @author LiuDong     * @date 2021/8/18 23:39     * @param file     * @return java.lang.String     */</span>    String <span class="token function">uploadUserImg</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h5></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">.</span>OSSConfig<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>FileService<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>OSSClientBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span>PutObjectResult<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormatter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月18日 23:39 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OSSConfig ossConfig<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传图片，返回url     *     * @param file     * @return java.lang.String     * @author LiuDong     * @date 2021/8/18 23:39     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">uploadUserImg</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取相关配置</span>        String bucketname <span class="token operator">=</span> ossConfig<span class="token punctuation">.</span><span class="token function">getBucketname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String endpoint <span class="token operator">=</span> ossConfig<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String accessKeyId <span class="token operator">=</span> ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String accessKeySecret <span class="token operator">=</span> ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建OSS对象</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取原始文件名 xxx.jpg</span>        String originalFileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前时间</span>        LocalDateTime ldt <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼装路径，oss上存储的路径 user/2021/08/18/xxx.jpg</span>        <span class="token comment" spellcheck="true">//获取文件夹名称</span>        String folder <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String extension <span class="token operator">=</span> originalFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼装路径</span>        String newFileName <span class="token operator">=</span> <span class="token string">"user/"</span> <span class="token operator">+</span> folder <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> extension<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//推送上传</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            PutObjectResult result <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketname<span class="token punctuation">,</span> newFileName<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拼装返回url</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String imgUrl <span class="token operator">=</span> <span class="token string">"https://"</span> <span class="token operator">+</span> bucketname <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> endpoint <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> newFileName<span class="token punctuation">;</span>                <span class="token keyword">return</span> imgUrl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件上传失败：{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//oss关闭，以防内存泄露</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="用户微服务头像上传阿里云OSS接口和SwaggerUI提效"><a href="#用户微服务头像上传阿里云OSS接口和SwaggerUI提效" class="headerlink" title="用户微服务头像上传阿里云OSS接口和SwaggerUI提效"></a>用户微服务头像上传阿里云OSS接口和SwaggerUI提效</h4><ul><li><p>文件上传流程</p><ul><li>先上传文件，返回url地址，再和普通表单一并提交（推荐这种,更加灵活，失败率低）</li><li>文件和普通表单一并提交（设计流程比较多，容易超时和失败）</li></ul></li><li><p>注意：默认SpringBoot最大文件上传是1M,大家测试的时候记得关注下</p></li><li><p>开发controller</p><ul><li>@requestPart注解 接收文件以及其他更为复杂的数据类型</li><li>比如 XXX(@RequestPart(“file”) MultipartFile file,  @RequestPart(“userVO”) UserVO userVO) 复杂协议</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>FileService<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestPart<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Json<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p> * 前端控制器 * &lt;/p> * * @author LiuDong * @since 2021-08-13 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户模块"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/user/v1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传用户头像     * &lt;p>     * SpringBoot默认上传1M，超过则报错     *     * @param file     * @return club.ldclass.utils.JsonData     * @author LiuDong     * @date 2021/8/19 0:03     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户头像上传"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">uploadUserImg</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"文件上传"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">uploadUserImg</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">!=</span> null <span class="token operator">?</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">:</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>FILE_UPLOAD_USER_IMG_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SwaggerUI接口测试<ul><li>ui界面可以直接测试文件上传</li></ul></li><li>Postman测试<ul><li><img src="/2021/08/19/a-li-yun-oss/1.png" title="测试图片上传"></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;阿里云OSS介绍&quot;&gt;&lt;a href=&quot;#阿里云OSS介绍&quot; class=&quot;headerlink&quot; title=&quot;阿里云OSS介绍&quot;&gt;&lt;/a&gt;阿里云OSS介绍&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;对象存储OSS（Object St
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="OSS" scheme="http://www.ldclass.club/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件存储</title>
    <link href="http://www.ldclass.club/2021/08/19/fen-bu-shi-wen-jian-cun-chu/"/>
    <id>http://www.ldclass.club/2021/08/19/fen-bu-shi-wen-jian-cun-chu/</id>
    <published>2021-08-18T22:51:50.000Z</published>
    <updated>2021-08-19T02:16:11.515Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="分布式文件系统（Distributed-File-System"><a href="#分布式文件系统（Distributed-File-System" class="headerlink" title="分布式文件系统（Distributed File System)"></a>分布式文件系统（Distributed File System)</h4><ul><li><p>海量数据对存储提出了新的要求，从而诞生了分布式文件存储</p></li><li><p>是文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机) 相连，或是若干不同的逻辑磁盘分区组合在一起而形成的完整的有层次的文件系统</p></li><li><p>自研：扩容容易-开发难</p></li></ul></li><li><h4 id="面试题：做分布式文件存储，主要是想实现文件存储访问的高性能与高可用，如何保证分布式存储的高性能与高可用？"><a href="#面试题：做分布式文件存储，主要是想实现文件存储访问的高性能与高可用，如何保证分布式存储的高性能与高可用？" class="headerlink" title="面试题：做分布式文件存储，主要是想实现文件存储访问的高性能与高可用，如何保证分布式存储的高性能与高可用？"></a>面试题：做分布式文件存储，主要是想实现文件存储访问的高性能与高可用，如何保证分布式存储的高性能与高可用？</h4><ul><li><p>副本备份、双活、多活</p></li><li><p>在系统中通过复制协议将数据同步到多个存储节点，并确保多个副本之间的数据一致性，当某个存储节点出故障时，系统能够自动将服务切换到其他的副本</p></li><li><p>在分布式存储中高性能与高可用是矛盾的，比如要设计一个分布式存储系统，CAP定理也可以推断出来</p><ul><li>对性能的考虑，记录数据时先写一个份数据到某个机器上并立即返回，然后异步发起多个数据备份过程。这种设计的性能最好，但存在“容错性”的风险，加入返回后，还没来得及同步给其它节点就宕机了，则数据就丢失（异步复制，也存在是写主节点到内存还是落到磁盘）</li><li>如果同时写多个副本，每个副本写成功以后再返回，则又导致性能下降，这个过程取决于最慢的那台机器的性能 (同步多写，是同步每个副本节点还是一个副本先)</li></ul></li></ul></li></ul><pre><code>  * 那应该如何选择呢？    * 根据业务而定，如果要求性能更高，偶尔出现文件丢失或访问出错则可以异步复制  * 要求文件系统一定要高可用，则用同步多写的策略，牺牲一定的性能也要保证高可用数据一致性* 基于上述的，大家还知道有一个很类似的消息队列就是支持这种操作  * RocketMQ消息高可用里面的    * 同步双写、异步刷盘，即同时写到两个节点上的内存才返回，然后异步持久化到磁盘里面</code></pre><ul><li><h4 id="分布式文件存储常见解决方案"><a href="#分布式文件存储常见解决方案" class="headerlink" title="分布式文件存储常见解决方案"></a>分布式文件存储常见解决方案</h4><ul><li>MinIO</li></ul><pre><code>是在 Apache License v2.0 下发布的对象存储服务器,学习成本低，安装运维简单，主流语言的客户端整合都有, 号称最强的对象存储文件服务器，且可以和容器化技术docker/k8s等结合，社区活跃但不够成熟，业界参考资料较少官网：https://docs.min.io/cn/</code></pre><ul><li>FastDFS</li></ul><pre><code>一个开源的轻量级分布式文件系统,比较少的客户端可以整合，目前主要是C和java客户端，在一些互联网创业公司中有应用比较多，没有官方文档,社区不怎么活跃.架构+部署结构复杂，出问题定位比较难定位，可以说是fastdfs零件的组装过程，需要去理解fastDFS的架构设计，才能够正确的安装部署</code></pre><ul><li><p>云厂商</p><ul><li><p>阿里云OSS</p></li><li><p>七牛云</p></li><li><p>腾讯云</p></li><li><p>亚马逊云</p></li></ul></li></ul></li></ul><pre><code>* CDN最强：Akamai `https://www.akamai.com/cn`</code></pre><ul><li><p>选云厂商理由</p><ul><li>优点：开发简单，功能强大，容易维护（不同网络下图片质量、水印、加密策略、扩容、加速）</li><li>缺点：要钱, 个性化处理，未来转移比较复杂，不排除有些厂商会提供一键迁移工具</li></ul></li><li><p>选开源MinIO的理由</p><ul><li>优点：功能强大、可以根据业务做二次的定制，新一代分布式文件存储系统，容器化结合强大，更重要的是免费（购买磁盘、内存、带宽）</li><li>缺点：自己需要有专门的团队进行维护、扩容等</li></ul></li></ul><ul><li><h4 id="自建分布式文件存储MinIO容器化部署"><a href="#自建分布式文件存储MinIO容器化部署" class="headerlink" title="自建分布式文件存储MinIO容器化部署"></a>自建分布式文件存储MinIO容器化部署</h4><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">docker run -p 9000:9000 \  --name minio_xdclass \  -v /Users/xdclass/Desktop/test:/data \  -e "MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE" \  -e "MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" \  minio/minio server /data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>步骤<ul><li>访问控制台</li><li>创建bucket</li><li>上传文件</li><li>预览</li></ul></li><li>总体操作很流畅，支持单机和集群部署，多个方面都是目前比较强的，对于有需求不能或不使用云厂商提供的存储服务，例如阿里云的oss、七牛云的对象存储等，可以通过自建minio对象存储集群的方式</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;分布式文件系统（Distributed-File-System&quot;&gt;&lt;a href=&quot;#分布式文件系统（Distributed-File-System&quot; class=&quot;headerlink&quot; title=&quot;分布式文件系统（Distributed F
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="分布式文件存储" scheme="http://www.ldclass.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合邮箱starter</title>
    <link href="http://www.ldclass.club/2021/08/17/springboot-zheng-he-you-xiang-starter/"/>
    <id>http://www.ldclass.club/2021/08/17/springboot-zheng-he-you-xiang-starter/</id>
    <published>2021-08-16T20:43:13.000Z</published>
    <updated>2021-08-16T14:38:05.061Z</updated>
    
    <content type="html"><![CDATA[<ul><li>邮件传输协议<ul><li>SMTP协议：全称为 Simple Mail Transfer Protocol，简单邮件传输协议。它定义了邮件客户端软件和SMTP邮件服务器之间，以及两台SMTP邮件服务器之间的通信规则</li><li>POP3协议：全称为 Post Office Protocol，邮局协议。它定义了邮件客户端软件和POP3邮件服务器的通信 规则</li><li>IMAP协议：全称为 Internet Message Access Protocol,Internet消息访问协议，它是对POP3协议一种扩展，也是定义了邮件客户端软件和IMAP邮件服务器的通信规则</li></ul></li></ul><h4 id="一、开启邮箱服务，并添加配置"><a href="#一、开启邮箱服务，并添加配置" class="headerlink" title="一、开启邮箱服务，并添加配置"></a>一、开启邮箱服务，并添加配置</h4><ul><li><p>邮箱开启服务</p><ul><li>设置&gt;&gt;&gt;开启服务&gt;&gt;&gt;获取授权码</li></ul></li><li><p>配置依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--发送邮件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-yml"><code class="language-yml">spring:  application:    name: xdclass-user-service  #邮箱服务配置  mail:    #发送邮件服务器    host: smtp.163.com    #发送邮件的邮箱地址    username: xxxx@163.com    #客户端授权码，不是邮箱密码    password: xxxxxxxxxx    # 发送邮件的地址，和上面username一致    from: xxxxx@163.com    properties.mail.smtp.starttls.enable: true    properties.mail.smtp.starttls.required: true    #开启SSL 安全传输协议 防止部署到云之后发送邮件不成功    properties.mail.smtp.ssl.enable: true    default-encoding: utf-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>封装邮件发送组件 MailService，放到component包下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月16日 20:53 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送邮件     * @author LiuDong     * @date 2021/8/16 20:54     * @param to     * @param subject     * @param content     */</span>    <span class="token keyword">void</span> <span class="token function">sendMail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span>String subject<span class="token punctuation">,</span>String content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>component<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>component<span class="token punctuation">.</span>MailService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>SimpleMailMessage<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>javamail<span class="token punctuation">.</span>JavaMailSender<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月16日 20:54 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * SpringBoot 提供的发送邮件的简单抽象，直接注入     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 读取配置文件     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.mail.from}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String from<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送邮件     * @author LiuDong     * @date 2021/8/16 20:59     * @param to 收件人     * @param subject 主题     * @param content 内容     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个邮箱消息对象,用于封装消息</span>        SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置邮箱的发送人</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//收件人</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//邮件的主题</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//邮件的内容</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功：{}"</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="二、注册邮箱验证码接口开发"><a href="#二、注册邮箱验证码接口开发" class="headerlink" title="二、注册邮箱验证码接口开发"></a>二、注册邮箱验证码接口开发</h4><ul><li><p>邮箱工具类正则</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月16日 21:28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 邮箱正则     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Pattern MAIL_PATTERN <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 手机号正则，暂时未用     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Pattern PHONE_PATTERN <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param email     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> email <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Matcher m <span class="token operator">=</span> MAIL_PATTERN<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 暂时未用     *     * @param phone     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> phone <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Matcher m <span class="token operator">=</span> PHONE_PATTERN<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>邮箱验证码防刷</p><ul><li><p>需求：一定时间内禁止重复发送邮件</p><ul><li><p>方式一：前端增加校验倒计时，不到60秒按钮不给点击</p><ul><li>简单</li><li>不安全，存在绕过的情况</li></ul></li><li><p>方式二：增加Redis存储，发送的时候设置下额外的key，并且60秒后过期</p><ul><li>非原子操作，存在不一致性</li><li>增加的额外的key - value存储，浪费空间</li></ul><pre class="line-numbers language-java"><code class="language-java">     <span class="token operator">*</span> 前置<span class="token operator">>></span>判断是否重复发送     <span class="token operator">*</span> <span class="token operator">>>></span><span class="token operator">>></span>存储验证码到缓存     <span class="token operator">*</span> <span class="token operator">>>></span><span class="token operator">>></span>发送验证码到邮箱     <span class="token operator">*</span> 后置<span class="token operator">>></span>存储发送记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式三：基于原先的key拼装时间戳</p><ul><li>好处：满足了当前节点内的原子性，也满足业务需求</li></ul></li></ul></li></ul></li><li><p>开发接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>SendCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>NotifyService<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Producer<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Json<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description 通知 * @date 2021年08月15日 22:10 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"通知模块"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/notify/v1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Producer captchaProducer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> NotifyService notifyService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 图形验证码有效期     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> CAPTCHA_CODE_EXPIRED <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取图形验证码     * 输出图片流     *     * @param request     * @param response     * @author LiuDong     * @date 2021/8/15 22:14     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取图形验证码"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"captcha"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCaptcha</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String cacheKey <span class="token operator">=</span> <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String capText <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> capText<span class="token punctuation">,</span> CAPTCHA_CODE_EXPIRED<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedImage bufferedImage <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>capText<span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-store, no-cache, must-revalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"create_date-check=0, pre-check=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取验证码失败:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发送验证码     * 1、匹配图形验证码是否正常     * 2、发送验证码     *     * @param to     * @param captcha     * @return club.ldclass.utils.JsonData     * @author LiuDong     * @date 2021/8/16 21:18     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"发送邮箱注册验证码"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"send_code"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">sendRegisterCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"to"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String to<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"captcha"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String captcha<span class="token punctuation">,</span>                                     HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cacheCaptcha <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匹配图形验证码是否一致</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>captcha <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cacheCaptcha <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> captcha<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheCaptcha<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//成功,配置了过期时间，以防止高并发下删除不成功</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            JsonData jsonData <span class="token operator">=</span> notifyService<span class="token punctuation">.</span><span class="token function">sendCode</span><span class="token punctuation">(</span>SendCodeEnum<span class="token punctuation">.</span>USER_REGISTER<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> jsonData<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>CODE_CAPTCHA_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取缓存key     *     * @param request     * @return java.lang.String     * @author LiuDong     * @date 2021/8/15 23:03     */</span>    <span class="token keyword">private</span> String <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ip <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"user-service:captcha:"</span> <span class="token operator">+</span> CommonUtil<span class="token punctuation">.</span><span class="token function">MD5</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ip:{}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"userAgent:{}"</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>SendCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月16日 21:22 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NotifyService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送验证码     * @author LiuDong     * @date 2021/8/16 21:25     * @param sendCodeEnum     * @param to     * @return club.ldclass.utils.JsonData     */</span>    JsonData <span class="token function">sendCode</span><span class="token punctuation">(</span>SendCodeEnum sendCodeEnum<span class="token punctuation">,</span>String to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>constant<span class="token punctuation">.</span>CacheKey<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>SendCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>component<span class="token punctuation">.</span>MailService<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>NotifyService<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CheckUtil<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月16日 21:26 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">NotifyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MailService mailService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 标题     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SUBJECT <span class="token operator">=</span> <span class="token string">"验证码"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 内容     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONTENT <span class="token operator">=</span> <span class="token string">"您的验证码是%s，有效时间是60秒"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证码10分钟有效     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CODE_EXPIRED <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 前置>>判断是否重复发送     * >>>>>存储验证码到缓存     * >>>>>发送验证码到邮箱     * 后置>>存储发送记录     *     * @param sendCodeEnum     * @param to     * @return club.ldclass.utils.JsonData     * @author LiuDong     * @date 2021/8/16 21:52     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> JsonData <span class="token function">sendCode</span><span class="token punctuation">(</span>SendCodeEnum sendCodeEnum<span class="token punctuation">,</span> String to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String cacheKey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>CacheKey<span class="token punctuation">.</span>CHECK_CODE_KEY<span class="token punctuation">,</span> sendCodeEnum<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cacheValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果不为空，则判断是否60秒内重复发送</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> ttl <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前时间戳-验证码发送时间戳，如果小于60秒，则不能重复发送</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getCurrentTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ttl<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"重复发送验证码，时间间隔：{}秒"</span><span class="token punctuation">,</span> diff <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>CODE_LIMITED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拼接验证码 验证码+时间戳，并存储到redis</span>        String code <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getRandomCode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> code <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getCurrentTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> CODE_EXPIRED<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CheckUtil<span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//邮箱</span>            mailService<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> SUBJECT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>CONTENT<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>CheckUtil<span class="token punctuation">.</span><span class="token function">isPhone</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//短信</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildResult</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>CODE_TO_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;邮件传输协议&lt;ul&gt;
&lt;li&gt;SMTP协议：全称为 Simple Mail Transfer Protocol，简单邮件传输协议。它定义了邮件客户端软件和SMTP邮件服务器之间，以及两台SMTP邮件服务器之间的通信规则&lt;/li&gt;
&lt;li&gt;POP3协议：全称为 P
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="邮箱" scheme="http://www.ldclass.club/tags/%E9%82%AE%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot拦截器Autowired注入后值为null</title>
    <link href="http://www.ldclass.club/2021/08/16/springboot-lan-jie-qi-autowired-zhu-ru-hou-zhi-wei-null/"/>
    <id>http://www.ldclass.club/2021/08/16/springboot-lan-jie-qi-autowired-zhu-ru-hou-zhi-wei-null/</id>
    <published>2021-08-16T14:21:05.000Z</published>
    <updated>2021-08-16T12:39:26.095Z</updated>
    
    <content type="html"><![CDATA[<ul><li>拦截器在实例化时，需要注入的类还未进行初始化，所以获取到的值为null。</li></ul><p>一、三种方式解决</p><ul><li><p>方式一</p><ul><li>拦截器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AppProperties appProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写的三个方法省略....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>DataInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurerAdapter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HandlerInterceptor <span class="token function">getDataInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">getDataInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二</p><ul><li>拦截器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AppProperties appProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DataInterceptor</span><span class="token punctuation">(</span>AppProperties appProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appProperties <span class="token operator">=</span> appProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写的三个方法省略....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppProperties<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>DataInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurerAdapter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AppProperties appProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataInterceptor</span><span class="token punctuation">(</span>appProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式三</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>WebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>WebApplicationContextUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dling<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在请求执行前执行的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        WebApplicationContext applicationContext <span class="token operator">=</span> WebApplicationContextUtils<span class="token punctuation">.</span><span class="token function">getRequiredWebApplicationContext</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AppProperties appProperties <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AppProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此处就可以调用实例方法了</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;拦截器在实例化时，需要注入的类还未进行初始化，所以获取到的值为null。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一、三种方式解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方式一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拦截器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-number
      
    
    </summary>
    
      <category term="interceptor" scheme="http://www.ldclass.club/categories/interceptor/"/>
    
    
      <category term="interceptor" scheme="http://www.ldclass.club/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>docker部署redis</title>
    <link href="http://www.ldclass.club/2021/08/16/docker-bu-shu-redis/"/>
    <id>http://www.ldclass.club/2021/08/16/docker-bu-shu-redis/</id>
    <published>2021-08-15T22:35:57.000Z</published>
    <updated>2021-08-15T15:31:48.556Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>docker部署redis 并配置密码</p><ul><li>如果访问不了，记得看防火墙/网络安全组端口是否开放</li><li>源码安装redis的话默认不能远程访问</li><li>docker安装redis可以远程访问</li></ul></li><li><p><code>docker run -itd --name ldclass-redis -p 8000:6379 redis --requirepass 123456</code></p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">-i 以交互模式运行容器，通常与 -t 同时使用；-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；-d 后台运行容器，并返回容器ID；redis --requirepass 配置密码-p 8000:6379 宿主机端口，用于外部访问:docker容器内端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker部署redis 并配置密码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果访问不了，记得看防火墙/网络安全组端口是否开放&lt;/li&gt;
&lt;li&gt;源码安装redis的话默认不能远程访问&lt;/li&gt;
&lt;li&gt;docker安装redis可以远程访问&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="Redis" scheme="http://www.ldclass.club/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装docker</title>
    <link href="http://www.ldclass.club/2021/08/16/linux-an-zhuang-docker/"/>
    <id>http://www.ldclass.club/2021/08/16/linux-an-zhuang-docker/</id>
    <published>2021-08-15T22:35:37.000Z</published>
    <updated>2021-08-15T15:29:14.929Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Linux环境下安装Docker</li></ul><pre class="line-numbers language-shell"><code class="language-shell">#依次运行以下命令添加yum源yum updateyum install epel-release -yyum clean allyum list#安装并运行Docker。yum install docker-io -ysystemctl start docker#检查安装结果。docker info#启动使用Dockersystemctl start docker     #运行Docker守护进程systemctl stop docker      #停止Docker守护进程systemctl restart docker   #重启Docker守护进程#修改镜像仓库vim /etc/docker/daemon.json#改为下面内容(自己的镜像地址，阿里云有)，然后重启docker{"debug":true,"experimental":true,"registry-mirrors":["https://pb5bklzr.mirror.aliyuncs.com","https://hub-mirror.c.163.com","https://docker.mirrors.ustc.edu.cn"]}#查看信息docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Linux环境下安装Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;#依次运行以下命令添加yum源
yum update
yum in
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="Docker" scheme="http://www.ldclass.club/tags/Docker/"/>
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Captcha验证码</title>
    <link href="http://www.ldclass.club/2021/08/16/springboot-ji-cheng-captcha-yan-zheng-ma/"/>
    <id>http://www.ldclass.club/2021/08/16/springboot-ji-cheng-captcha-yan-zheng-ma/</id>
    <published>2021-08-15T22:26:48.000Z</published>
    <updated>2021-08-15T15:50:18.629Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="谷歌开源kaptcha图形验证码开发"><a href="#谷歌开源kaptcha图形验证码开发" class="headerlink" title="谷歌开源kaptcha图形验证码开发"></a>谷歌开源kaptcha图形验证码开发</h4><ul><li><p>Kaptcha 框架介绍 谷歌开源的一个可高度配置的实用验证码生成工具</p><ul><li>验证码的字体/大小/颜色</li><li>验证码内容的范围(数字，字母，中文汉字！)</li><li>验证码图片的大小，边框，边框粗细，边框颜色</li><li>验证码的干扰线</li><li>验证码的样式(鱼眼样式、3D、普通模糊)</li></ul></li><li><p>聚合工程依赖添加（使用国内baomidou二次封装的springboot整合starter）</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--kaptcha依赖包--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子服务添加依赖</p><pre class="line-numbers language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开发配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DefaultKaptcha<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description 验证码配置类 * @date 2021年08月15日 22:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptchaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"captchaProducer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DefaultKaptcha <span class="token function">defaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultKaptcha defaultKaptcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_BORDER, "yes");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, "220,220,220");</span><span class="token comment" spellcheck="true">//        //properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, "38,29,12");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, "147");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, "34");</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, "25");</span><span class="token comment" spellcheck="true">//        //properties.setProperty(Constants.KAPTCHA_SESSION_KEY, "code");</span>        <span class="token comment" spellcheck="true">//验证码个数</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_LENGTH<span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_NAMES, "Courier");</span>        <span class="token comment" spellcheck="true">//字体间隔</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_SPACE<span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//干扰线颜色</span><span class="token comment" spellcheck="true">//        properties.setProperty(Constants.KAPTCHA_NOISE_COLOR, "white");</span>        <span class="token comment" spellcheck="true">//干扰实现类</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_NOISE_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.NoNoise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片样式</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_OBSCURIFICATOR_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.ShadowGimpy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文字来源</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_TEXTPRODUCER_CHAR_STRING<span class="token punctuation">,</span> <span class="token string">"0123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultKaptcha<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultKaptcha<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h4 id="用户微服务开发图形验证码加入缓存"><a href="#用户微服务开发图形验证码加入缓存" class="headerlink" title="用户微服务开发图形验证码加入缓存"></a>用户微服务开发图形验证码加入缓存</h4><ul><li>redis做隔离, 多集群：核心集群和非核心集群，高并发集群和非高并发集群<ul><li>资源隔离</li><li>数据保护</li><li>提高性能</li><li>key规范：业务划分，冒号隔离<ul><li>user-service:captcha:MD5加密后的（ip+user-agent）</li><li>长度不能过长</li><li>浏览器指纹:ip+user-agent</li></ul></li></ul></li><li>工具集</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月15日 22:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取ip     * @author LiuDong     * @date 2021/8/15 22:59     * @param request     * @return java.lang.String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getIpAddr</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ipAddress <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在nginx配置头信息，透传客户端IP</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> null <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 根据网卡取本机配置的IP</span>                    InetAddress inet <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        inet <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ipAddress <span class="token operator">=</span> inet<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// "***.***.***.***".length()</span>                <span class="token comment" spellcheck="true">// = 15</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ipAddress <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ipAddress<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ipAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * MD5加密     * @author LiuDong     * @date 2021/8/15 22:59     * @param data     * @return java.lang.String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">MD5</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest md <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> item <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户微服务配置Redis</li></ul><pre class="line-numbers language-yml"><code class="language-yml">spring:  application:    name: xdclass-user-service  redis:    host: 112.74.55.160    password: 123456    port: 8000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>common聚合工程依赖配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml">       <span class="token comment" spellcheck="true">&lt;!--redis客户端--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>验证码接口开发</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>CommonUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Producer<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description 通知 * @date 2021年08月15日 22:10 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"通知模块"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/notify/v1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Producer captchaProducer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 图形验证码有效期     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> CAPTCHA_CODE_EXPIRED <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取图形验证码     * 输出图片流     *     * @param request     * @param response     * @author LiuDong     * @date 2021/8/15 22:14     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取图形验证码"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"captcha"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCaptcha</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*String captchaText = captchaProducer.createText();        log.info("图形验证码：{}", captchaText);        //存储到redis        //TimeUnit 时间枚举类        redisTemplate.opsForValue().set(getCaptchaKey(request),captchaText,CAPTCHA_CODE_EXPIRED, TimeUnit.MILLISECONDS);        BufferedImage bufferedImage = captchaProducer.createImage(captchaText);        try (ServletOutputStream outputStream = response.getOutputStream()) {            ImageIO.write(bufferedImage, "jpg", outputStream);        } catch (IOException e) {            log.error("获取图形验证码异常：{}", e);        }*/</span>        String cacheKey <span class="token operator">=</span> <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String capText <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> capText<span class="token punctuation">,</span> CAPTCHA_CODE_EXPIRED<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedImage bufferedImage <span class="token operator">=</span> captchaProducer<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>capText<span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-store, no-cache, must-revalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"create_date-check=0, pre-check=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取验证码失败:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取缓存key     *     * @param request     * @return java.lang.String     * @author LiuDong     * @date 2021/8/15 23:03     */</span>    <span class="token keyword">private</span> String <span class="token function">getCaptchaKey</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ip <span class="token operator">=</span> CommonUtil<span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"user-service:captcha:"</span> <span class="token operator">+</span> CommonUtil<span class="token punctuation">.</span><span class="token function">MD5</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ip:{}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"userAgent:{}"</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;谷歌开源kaptcha图形验证码开发&quot;&gt;&lt;a href=&quot;#谷歌开源kaptcha图形验证码开发&quot; class=&quot;headerlink&quot; title=&quot;谷歌开源kaptcha图形验证码开发&quot;&gt;&lt;/a&gt;谷歌开源kaptcha图形验证码开发&lt;/h4&gt;
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="Captcha" scheme="http://www.ldclass.club/tags/Captcha/"/>
    
  </entry>
  
  <entry>
    <title>集成单元测试</title>
    <link href="http://www.ldclass.club/2021/08/16/ji-cheng-dan-yuan-ce-shi/"/>
    <id>http://www.ldclass.club/2021/08/16/ji-cheng-dan-yuan-ce-shi/</id>
    <published>2021-08-15T21:23:13.000Z</published>
    <updated>2021-08-15T13:27:47.517Z</updated>
    
    <content type="html"><![CDATA[<ul><li>需求分析-&gt;设计-&gt;开发-&gt;测试-&gt;上线<ul><li>单元测试:  完成最小的软件设计单元的验证工作，目标是确保模块被正确的编码</li></ul></li></ul><ul><li>Spring Boot Test 是在Spring Test之上的再次封装,  使用@SpringBootTest后，Spring将加载所有被管理的bean，等同于启动了整个服务</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>biz<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>UserApplication<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>model<span class="token punctuation">.</span>AddressDO<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AddressService<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @description * @date 2021年08月15日 21:16 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> UserApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AddressService addressService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddressDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AddressDO addressDO <span class="token operator">=</span> addressService<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>addressDO<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//断言</span>        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>addressDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;需求分析-&amp;gt;设计-&amp;gt;开发-&amp;gt;测试-&amp;gt;上线&lt;ul&gt;
&lt;li&gt;单元测试:  完成最小的软件设计单元的验证工作，目标是确保模块被正确的编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot Test 是在S
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="SpringBootTest" scheme="http://www.ldclass.club/tags/SpringBootTest/"/>
    
  </entry>
  
  <entry>
    <title>自定义全局异常</title>
    <link href="http://www.ldclass.club/2021/08/16/zi-ding-yi-quan-ju-yi-chang/"/>
    <id>http://www.ldclass.club/2021/08/16/zi-ding-yi-quan-ju-yi-chang/</id>
    <published>2021-08-15T21:23:02.000Z</published>
    <updated>2021-08-15T13:27:46.407Z</updated>
    
    <content type="html"><![CDATA[<ul><li>自定义全局异常</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>BizCodeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月15日 20:59 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BizException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BizException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BizException</span><span class="token punctuation">(</span>BizCodeEnum bizCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>bizCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> bizCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> bizCodeEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义异常处理器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>ldclass<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JsonData<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Json<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiuDong * @version 1.0 * @date 2021年08月15日 21:01 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> JsonData <span class="token function">handler</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是不是自定义异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BizException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            BizException bizException <span class="token operator">=</span> <span class="token punctuation">(</span>BizException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[业务异常{}]"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildCodeAndMsg</span><span class="token punctuation">(</span>bizException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bizException<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[系统异常{}]"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildError</span><span class="token punctuation">(</span><span class="token string">"全局异常，未知错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;自定义全局异常&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; c
      
    
    </summary>
    
      <category term="1024" scheme="http://www.ldclass.club/categories/1024/"/>
    
    
      <category term="1024" scheme="http://www.ldclass.club/tags/1024/"/>
    
      <category term="BizException" scheme="http://www.ldclass.club/tags/BizException/"/>
    
  </entry>
  
</feed>
